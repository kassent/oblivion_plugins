#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Behavior_PerformLightAttackSequence

#include "Basic.hpp"

#include "Behavior_AttackBehaviorBase_classes.hpp"
#include "Engine_structs.hpp"
#include "Altar_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Behavior_PerformLightAttackSequence.Behavior_PerformLightAttackSequence_C
// 0x00A0 (0x01E0 - 0x0140)
class UBehavior_PerformLightAttackSequence_C final : public UBehavior_AttackBehaviorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Behavior_PerformLightAttackSequence_C; // 0x0140(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVActorBehaviorBase*                    BackupBehavior;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UVActorBehaviorBase*>            LightAttackSequenceBehaviors;                      // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<struct FGameplayTag, class UVActorBehaviorCollection*> WeaponFamilyAttackSequencesMap;      // 0x0160(0x0050)(Edit, BlueprintVisible)
	int32                                         NextAttackIndex;                                   // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehavior_PlayLightAttackAnimation_C*   CurrentAttackBehavior;                             // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        LastAttackStartTime;                               // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldContinueAttacking;                           // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingBackupBehavior;                               // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 BackupBehaviorClass;                               // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyChainingExtraDelay;                           // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AttemptCancellation();
	void ExecuteUbergraph_Behavior_PerformLightAttackSequence(int32 EntryPoint);
	void GetCurrentAttackTime(double* AttackTime);
	void InterruptCurrentAttack();
	void On_Controlled_Pawn_Animated_Action_Event(const struct FGameplayTag& Event_Tag, class UAnimNotifyActionEventInfo* Anim_Notify_Action_Event_Info);
	void On_Controlled_Pawn_Animated_Action_Started(class UVPawnAnimatedAction* Action);
	void OnEnd(bool bInterrupted);
	void OnEnded_791E989F4B21367C57803CB0A97F934A();
	void OnEnded_791E989F4B21367C57803CB0F9AB0E06();
	void OnEnded_84DBCE1845036A64F52F7B9DEA21A18E();
	void OnInit();
	void OnUpdate(float DeltaTime);
	void RetrieveSequenceFromWeapon(bool* SequenceFound);
	void SignalAttackContinuation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Behavior_PerformLightAttackSequence_C">();
	}
	static class UBehavior_PerformLightAttackSequence_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBehavior_PerformLightAttackSequence_C>();
	}
};
static_assert(alignof(UBehavior_PerformLightAttackSequence_C) == 0x000008, "Wrong alignment on UBehavior_PerformLightAttackSequence_C");
static_assert(sizeof(UBehavior_PerformLightAttackSequence_C) == 0x0001E0, "Wrong size on UBehavior_PerformLightAttackSequence_C");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, UberGraphFrame_Behavior_PerformLightAttackSequence_C) == 0x000140, "Member 'UBehavior_PerformLightAttackSequence_C::UberGraphFrame_Behavior_PerformLightAttackSequence_C' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, BackupBehavior) == 0x000148, "Member 'UBehavior_PerformLightAttackSequence_C::BackupBehavior' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, LightAttackSequenceBehaviors) == 0x000150, "Member 'UBehavior_PerformLightAttackSequence_C::LightAttackSequenceBehaviors' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, WeaponFamilyAttackSequencesMap) == 0x000160, "Member 'UBehavior_PerformLightAttackSequence_C::WeaponFamilyAttackSequencesMap' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, NextAttackIndex) == 0x0001B0, "Member 'UBehavior_PerformLightAttackSequence_C::NextAttackIndex' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, CurrentAttackBehavior) == 0x0001B8, "Member 'UBehavior_PerformLightAttackSequence_C::CurrentAttackBehavior' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, LastAttackStartTime) == 0x0001C0, "Member 'UBehavior_PerformLightAttackSequence_C::LastAttackStartTime' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, ShouldContinueAttacking) == 0x0001C8, "Member 'UBehavior_PerformLightAttackSequence_C::ShouldContinueAttacking' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, UsingBackupBehavior) == 0x0001C9, "Member 'UBehavior_PerformLightAttackSequence_C::UsingBackupBehavior' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, BackupBehaviorClass) == 0x0001D0, "Member 'UBehavior_PerformLightAttackSequence_C::BackupBehaviorClass' has a wrong offset!");
static_assert(offsetof(UBehavior_PerformLightAttackSequence_C, ApplyChainingExtraDelay) == 0x0001D8, "Member 'UBehavior_PerformLightAttackSequence_C::ApplyChainingExtraDelay' has a wrong offset!");

}

