#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Generic_FoldableArmor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Altar_structs.hpp"
#include "Altar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Generic_FoldableArmor.BP_Generic_FoldableArmor_C
// 0x00D8 (0x0448 - 0x0370)
class ABP_Generic_FoldableArmor_C : public AVArmor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPhysicsConstraintComponent*            PhysicsConstraintB;                                // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraintA;                                // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RigidBodyB;                                        // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RigidBodyA;                                        // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VStaticMesh;                                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPositionRB_A;                                 // 0x03A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPositionRB_B;                                 // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    NewWorldModels;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible)
	TMap<class FString, class UMaterialInstance*> FoldableClothMaterials;                            // 0x03E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       FoldableMaterials;                                 // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Scale;                                             // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Generic_FoldableArmor(int32 EntryPoint);
	void MakeDMI();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetScale(double NewScale);
	void Stop_Simulation();
	void UpdateDMI();
	void UpdateStaticMeshVariant();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Generic_FoldableArmor_C">();
	}
	static class ABP_Generic_FoldableArmor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Generic_FoldableArmor_C>();
	}
};
static_assert(alignof(ABP_Generic_FoldableArmor_C) == 0x000008, "Wrong alignment on ABP_Generic_FoldableArmor_C");
static_assert(sizeof(ABP_Generic_FoldableArmor_C) == 0x000448, "Wrong size on ABP_Generic_FoldableArmor_C");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, UberGraphFrame) == 0x000370, "Member 'ABP_Generic_FoldableArmor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, PhysicsConstraintB) == 0x000378, "Member 'ABP_Generic_FoldableArmor_C::PhysicsConstraintB' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, PhysicsConstraintA) == 0x000380, "Member 'ABP_Generic_FoldableArmor_C::PhysicsConstraintA' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, RigidBodyB) == 0x000388, "Member 'ABP_Generic_FoldableArmor_C::RigidBodyB' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, RigidBodyA) == 0x000390, "Member 'ABP_Generic_FoldableArmor_C::RigidBodyA' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, VStaticMesh) == 0x000398, "Member 'ABP_Generic_FoldableArmor_C::VStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, StartPositionRB_A) == 0x0003A0, "Member 'ABP_Generic_FoldableArmor_C::StartPositionRB_A' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, StartPositionRB_B) == 0x0003B8, "Member 'ABP_Generic_FoldableArmor_C::StartPositionRB_B' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, NewWorldModels) == 0x0003D0, "Member 'ABP_Generic_FoldableArmor_C::NewWorldModels' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, FoldableClothMaterials) == 0x0003E0, "Member 'ABP_Generic_FoldableArmor_C::FoldableClothMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, FoldableMaterials) == 0x000430, "Member 'ABP_Generic_FoldableArmor_C::FoldableMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Generic_FoldableArmor_C, Scale) == 0x000440, "Member 'ABP_Generic_FoldableArmor_C::Scale' has a wrong offset!");

}

