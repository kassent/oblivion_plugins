#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ModernHud_Compass

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "Altar_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ModernHud_Compass.WBP_ModernHud_Compass_C
// 0x0178 (0x0460 - 0x02E8)
class UWBP_ModernHud_Compass_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVHUDMainViewModel*                     VHUDMainViewModel;                                 // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, DuplicateTransient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Tresspassing;                                      // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWBP_ModernHud_CompassCardinalLine_C*   Cardinal;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAnimatableRetainerBox*                 CompassRetainer;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_AltarRichTextBlock_C*              CompassText;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               HostileMarkers;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Markers;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                SizeSpacer;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Window;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FCompassIconMarker>             CompassIconMarkersArray;                           // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        MarkerClampOffset;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerMarkerAlphaMinMax;                           // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerMarkerAlphaDistanceMinMax;                   // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              QuestMarkerAlphaMinMax;                            // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              QuestMarkerAlphaDistanceMinMax;                    // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InterestPointMarkerAlphaMinMax;                    // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InterestPointMarkerAlphaDistanceMinMax;            // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Heading;                                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<double, class UWBP_ModernHud_CompassIcon_C*> TextMaps;                                      // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWBP_ModernHud_CompassIcon_C*>   CompassMarkers;                                    // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWBP_ModernHud_CompassIcon_C*>   CompassHostiles;                                   // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FHostileData>                   CompassHostileData;                                // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              HostileMarkerAlphaMinMax;                          // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HostileMarkerAlphaDistanceMinMax;                  // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CompassPositionClampRange;                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CreateCompassMarker(class UPanelWidget* NewMarkerParent, struct FCompassIconMarker& CompassIconData, class UWBP_ModernHud_CompassIcon_C** NewMarker);
	void CreateHostileMarker(class UPanelWidget* NewMarkerParent, class UWBP_ModernHud_CompassIcon_C** NewHostileMarker);
	void EventOnQuestMarkerdUpdated(const TArray<struct FCompassIconMarker>& CompassIconMarkersList);
	void ExecuteUbergraph_WBP_ModernHud_Compass(int32 EntryPoint);
	void On_Heading_Updated(float Value);
	void SetCompassFacePosition(double CompassNewPosition);
	void SetText(const class FText& InText, double InPositionX);
	void SetTextPosition(double InNewPosition);
	void SetTextVisibility(bool bInVisible);
	void SyncHostileWidgetCount();
	void SyncMarkerWidgetCount();
	void ThisIsForPluginCompliance(bool Test);
	void UpdateClosestText();
	void UpdateCompassFacePosition();
	void UpdateCompassHostileMarkers();
	void UpdateCompassHostilePosition(struct FCompassIconMarker& MarkerData, class UWBP_ModernHud_CompassIcon_C* MarkerIcon, bool IsPositionClampedInWindow);
	void UpdateCompassInterestPointMarkerPosition(class UWBP_ModernHud_CompassIcon_C* HudCompassIcon, struct FCompassIconMarker& MarkerData);
	void UpdateCompassMarker(class UWBP_ModernHud_CompassIcon_C* MarkerWidget, struct FCompassIconMarker& MarkerData);
	void UpdateCompassMarkerPosition(struct FCompassIconMarker& MarkerData, class UWBP_ModernHud_CompassIcon_C* MarkerIcon, bool IsPositionClampedInWindow);
	void UpdateCompassMarkers();
	void UpdateHostileMarkers(const TArray<struct FHostileData>& HostileData);
	void UpdateMarkersPositions();
	void UpdateTrespassingVisual(bool InTrespassing);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ModernHud_Compass_C">();
	}
	static class UWBP_ModernHud_Compass_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ModernHud_Compass_C>();
	}
};
static_assert(alignof(UWBP_ModernHud_Compass_C) == 0x000008, "Wrong alignment on UWBP_ModernHud_Compass_C");
static_assert(sizeof(UWBP_ModernHud_Compass_C) == 0x000460, "Wrong size on UWBP_ModernHud_Compass_C");
static_assert(offsetof(UWBP_ModernHud_Compass_C, UberGraphFrame) == 0x0002E8, "Member 'UWBP_ModernHud_Compass_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, VHUDMainViewModel) == 0x0002F0, "Member 'UWBP_ModernHud_Compass_C::VHUDMainViewModel' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, Tresspassing) == 0x0002F8, "Member 'UWBP_ModernHud_Compass_C::Tresspassing' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, Cardinal) == 0x000300, "Member 'UWBP_ModernHud_Compass_C::Cardinal' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassRetainer) == 0x000308, "Member 'UWBP_ModernHud_Compass_C::CompassRetainer' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassText) == 0x000310, "Member 'UWBP_ModernHud_Compass_C::CompassText' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, HostileMarkers) == 0x000318, "Member 'UWBP_ModernHud_Compass_C::HostileMarkers' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, Markers) == 0x000320, "Member 'UWBP_ModernHud_Compass_C::Markers' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, SizeSpacer) == 0x000328, "Member 'UWBP_ModernHud_Compass_C::SizeSpacer' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, Window) == 0x000330, "Member 'UWBP_ModernHud_Compass_C::Window' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassIconMarkersArray) == 0x000338, "Member 'UWBP_ModernHud_Compass_C::CompassIconMarkersArray' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, MarkerClampOffset) == 0x000348, "Member 'UWBP_ModernHud_Compass_C::MarkerClampOffset' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, PlayerMarkerAlphaMinMax) == 0x000350, "Member 'UWBP_ModernHud_Compass_C::PlayerMarkerAlphaMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, PlayerMarkerAlphaDistanceMinMax) == 0x000360, "Member 'UWBP_ModernHud_Compass_C::PlayerMarkerAlphaDistanceMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, QuestMarkerAlphaMinMax) == 0x000370, "Member 'UWBP_ModernHud_Compass_C::QuestMarkerAlphaMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, QuestMarkerAlphaDistanceMinMax) == 0x000380, "Member 'UWBP_ModernHud_Compass_C::QuestMarkerAlphaDistanceMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, InterestPointMarkerAlphaMinMax) == 0x000390, "Member 'UWBP_ModernHud_Compass_C::InterestPointMarkerAlphaMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, InterestPointMarkerAlphaDistanceMinMax) == 0x0003A0, "Member 'UWBP_ModernHud_Compass_C::InterestPointMarkerAlphaDistanceMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, Heading) == 0x0003B0, "Member 'UWBP_ModernHud_Compass_C::Heading' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, TextMaps) == 0x0003B8, "Member 'UWBP_ModernHud_Compass_C::TextMaps' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassMarkers) == 0x000408, "Member 'UWBP_ModernHud_Compass_C::CompassMarkers' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassHostiles) == 0x000418, "Member 'UWBP_ModernHud_Compass_C::CompassHostiles' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassHostileData) == 0x000428, "Member 'UWBP_ModernHud_Compass_C::CompassHostileData' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, HostileMarkerAlphaMinMax) == 0x000438, "Member 'UWBP_ModernHud_Compass_C::HostileMarkerAlphaMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, HostileMarkerAlphaDistanceMinMax) == 0x000448, "Member 'UWBP_ModernHud_Compass_C::HostileMarkerAlphaDistanceMinMax' has a wrong offset!");
static_assert(offsetof(UWBP_ModernHud_Compass_C, CompassPositionClampRange) == 0x000458, "Member 'UWBP_ModernHud_Compass_C::CompassPositionClampRange' has a wrong offset!");

}

