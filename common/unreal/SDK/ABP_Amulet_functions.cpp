#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Amulet

#include "Basic.hpp"

#include "ABP_Amulet_classes.hpp"
#include "ABP_Amulet_parameters.hpp"


namespace SDK
{

// Function ABP_Amulet.ABP_Amulet_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink*                       AnimGraph_0                                            (Parm, OutParm, NoDestructor)

void UABP_Amulet_C::AnimGraph(struct FPoseLink* AnimGraph_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Amulet_C", "AnimGraph");

	Params::ABP_Amulet_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimGraph_0 != nullptr)
		*AnimGraph_0 = std::move(Parms.AnimGraph_0);
}


// Function ABP_Amulet.ABP_Amulet_C.ExecuteUbergraph_ABP_Amulet
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UABP_Amulet_C::ExecuteUbergraph_ABP_Amulet(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Amulet_C", "ExecuteUbergraph_ABP_Amulet");

	Params::ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ABP_Amulet.ABP_Amulet_C.SetOffsetTransforms
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                NeckTransform                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                SpineTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UABP_Amulet_C::SetOffsetTransforms(const struct FTransform& NeckTransform, const struct FTransform& SpineTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Amulet_C", "SetOffsetTransforms");

	Params::ABP_Amulet_C_SetOffsetTransforms Parms{};

	Parms.NeckTransform = std::move(NeckTransform);
	Parms.SpineTransform = std::move(SpineTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ABP_Amulet.ABP_Amulet_C.SetSnappingAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ALPHA                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUseSpine04                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UABP_Amulet_C::SetSnappingAlpha(double ALPHA, bool bUseSpine04)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ABP_Amulet_C", "SetSnappingAlpha");

	Params::ABP_Amulet_C_SetSnappingAlpha Parms{};

	Parms.ALPHA = ALPHA;
	Parms.bUseSpine04 = bUseSpine04;

	UObject::ProcessEvent(Func, &Parms);
}

}

