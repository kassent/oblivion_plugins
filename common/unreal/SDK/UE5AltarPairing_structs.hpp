#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UE5AltarPairing

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum UE5AltarPairing.EVEnvironmentFormID
// NumValues: 0x0016
enum class EVEnvironmentFormID : uint8
{
	ACTIVABLE                                = 18,
	APPARATUS                                = 19,
	ARMOR                                    = 20,
	BOOK                                     = 21,
	CLOTHING                                 = 22,
	CONTAINER                                = 23,
	DOOR                                     = 24,
	INGREDIENT                               = 25,
	LIGHT                                    = 26,
	MISC                                     = 27,
	STATIC                                   = 28,
	FLORA                                    = 31,
	FURNITURE                                = 32,
	WEAPON                                   = 33,
	AMMUNITION                               = 34,
	NPC                                      = 35,
	CREATURE                                 = 36,
	SOULGEM                                  = 38,
	KEY                                      = 39,
	ALCHEMY                                  = 40,
	SIGILSTONE                               = 42,
	EVEnvironmentFormID_MAX                  = 43,
};

// Enum UE5AltarPairing.EVInputMappings
// NumValues: 0x0029
enum class EVInputMappings : uint32
{
	MOVE_FORWARD                             = 0,
	MOVE_BACKWARD                            = 1,
	MOVE_LEFT                                = 2,
	MOVE_RIGHT                               = 3,
	USE                                      = 4,
	ACTIVATE                                 = 5,
	BLOCK                                    = 6,
	CAST                                     = 7,
	RDYITEM                                  = 8,
	CROUCH                                   = 9,
	RUN                                      = 10,
	TOGGLERUN                                = 11,
	AUTOMOVE                                 = 12,
	JUMP                                     = 13,
	TOGGLEPOV                                = 14,
	MENUMODE                                 = 15,
	RESTMENU                                 = 16,
	QUICKMENU                                = 17,
	QUICK1                                   = 18,
	QUICK2                                   = 19,
	QUICK3                                   = 20,
	QUICK4                                   = 21,
	QUICK5                                   = 22,
	QUICK6                                   = 23,
	QUICK7                                   = 24,
	QUICK8                                   = 25,
	QUICKSAVE                                = 26,
	QUICKLOAD                                = 27,
	GRAB                                     = 28,
	OPTIONSMENU                              = 29,
	SHIFTKEY                                 = 31,
	STATSMENU                                = 32,
	INVENTORYMENU                            = 33,
	MAGICMENU                                = 34,
	MAPMENU                                  = 35,
	QUESTMENU                                = 36,
	HELPMENU                                 = 37,
	MOUSEAXIS                                = 38,
	MOUSEWHEEL                               = 39,
	NONE                                     = 40,
	EVInputMappings_MAX                      = 41,
};

// Enum UE5AltarPairing.EVPhysicsSimulationBehaviour
// NumValues: 0x0007
enum class EVPhysicsSimulationBehaviour : uint8
{
	ALWAYS                                   = 0,
	NEVER                                    = 1,
	AT_DEATH_OR_FALL                         = 2,
	START_ON_ACTIVATE                        = 3,
	STOP_ON_ACTIVATE                         = 4,
	WHEN_UNEQUIPPED                          = 5,
	EVPhysicsSimulationBehaviour_MAX         = 6,
};

// Enum UE5AltarPairing.EVPhysicsLoadingBehaviour
// NumValues: 0x0003
enum class EVPhysicsLoadingBehaviour : uint8
{
	IGNORE_LOAD                              = 0,
	LOAD_POSE_FROM_SAVE                      = 1,
	EVPhysicsLoadingBehaviour_MAX            = 2,
};

// Enum UE5AltarPairing.EVDefaultSurfaceType
// NumValues: 0x000F
enum class EVDefaultSurfaceType : uint8
{
	Armor                                    = 0,
	Arrow                                    = 1,
	BodyFall                                 = 2,
	Bone                                     = 3,
	Chain                                    = 4,
	Cloth                                    = 5,
	Earth                                    = 6,
	Flesh                                    = 7,
	Fur                                      = 8,
	Glass                                    = 9,
	Metal                                    = 10,
	Organic                                  = 11,
	Stone                                    = 12,
	Wood                                     = 13,
	EVDefaultSurfaceType_MAX                 = 14,
};

// ScriptStruct UE5AltarPairing.VInputMappingRegistration
// 0x0008 (0x0008 - 0x0000)
struct FVInputMappingRegistration final
{
public:
	EVInputMappings                               InputMapping;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVInputMappingRegistration) == 0x000004, "Wrong alignment on FVInputMappingRegistration");
static_assert(sizeof(FVInputMappingRegistration) == 0x000008, "Wrong size on FVInputMappingRegistration");
static_assert(offsetof(FVInputMappingRegistration, InputMapping) == 0x000000, "Member 'FVInputMappingRegistration::InputMapping' has a wrong offset!");
static_assert(offsetof(FVInputMappingRegistration, bIsEnabled) == 0x000004, "Member 'FVInputMappingRegistration::bIsEnabled' has a wrong offset!");

// ScriptStruct UE5AltarPairing.VClassPhysicsControlSettings
// 0x0024 (0x0024 - 0x0000)
struct FVClassPhysicsControlSettings final
{
public:
	bool                                          bIsGrabbable;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTelekinesisTargetable;                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAnchored;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVPhysicsSimulationBehaviour                  PhysicsSimulationBehaviour;                        // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVPhysicsLoadingBehaviour                     PhysicsLoadingBehaviour;                           // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesRepositionOnLoad;                             // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesReattachOnLoad;                               // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesRestoreAttachmentAfterSimulating;             // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesUseCCD;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreCodeDrivenPhysicsSettingsAllowed;              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultCollisionProfileName;                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanEverAffectNavigationByDefault;                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesGeneratePontoonsAtRuntime;                    // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsBuoyancyOrientationAdjustment;               // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeneratedPontoonSizeScale;                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyCoefficient;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesPlayCollisionSound;                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVDefaultSurfaceType                          DefaultSelfSurfaceType;                            // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSnapToEnvironment;                             // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVClassPhysicsControlSettings) == 0x000004, "Wrong alignment on FVClassPhysicsControlSettings");
static_assert(sizeof(FVClassPhysicsControlSettings) == 0x000024, "Wrong size on FVClassPhysicsControlSettings");
static_assert(offsetof(FVClassPhysicsControlSettings, bIsGrabbable) == 0x000000, "Member 'FVClassPhysicsControlSettings::bIsGrabbable' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bIsTelekinesisTargetable) == 0x000001, "Member 'FVClassPhysicsControlSettings::bIsTelekinesisTargetable' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bIsAnchored) == 0x000002, "Member 'FVClassPhysicsControlSettings::bIsAnchored' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, PhysicsSimulationBehaviour) == 0x000003, "Member 'FVClassPhysicsControlSettings::PhysicsSimulationBehaviour' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, PhysicsLoadingBehaviour) == 0x000004, "Member 'FVClassPhysicsControlSettings::PhysicsLoadingBehaviour' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bDoesRepositionOnLoad) == 0x000005, "Member 'FVClassPhysicsControlSettings::bDoesRepositionOnLoad' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bDoesReattachOnLoad) == 0x000006, "Member 'FVClassPhysicsControlSettings::bDoesReattachOnLoad' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bDoesRestoreAttachmentAfterSimulating) == 0x000007, "Member 'FVClassPhysicsControlSettings::bDoesRestoreAttachmentAfterSimulating' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bDoesUseCCD) == 0x000008, "Member 'FVClassPhysicsControlSettings::bDoesUseCCD' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bAreCodeDrivenPhysicsSettingsAllowed) == 0x000009, "Member 'FVClassPhysicsControlSettings::bAreCodeDrivenPhysicsSettingsAllowed' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, DefaultCollisionProfileName) == 0x00000C, "Member 'FVClassPhysicsControlSettings::DefaultCollisionProfileName' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, CanEverAffectNavigationByDefault) == 0x000014, "Member 'FVClassPhysicsControlSettings::CanEverAffectNavigationByDefault' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bDoesGeneratePontoonsAtRuntime) == 0x000015, "Member 'FVClassPhysicsControlSettings::bDoesGeneratePontoonsAtRuntime' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bNeedsBuoyancyOrientationAdjustment) == 0x000016, "Member 'FVClassPhysicsControlSettings::bNeedsBuoyancyOrientationAdjustment' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, GeneratedPontoonSizeScale) == 0x000018, "Member 'FVClassPhysicsControlSettings::GeneratedPontoonSizeScale' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, BuoyancyCoefficient) == 0x00001C, "Member 'FVClassPhysicsControlSettings::BuoyancyCoefficient' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bDoesPlayCollisionSound) == 0x000020, "Member 'FVClassPhysicsControlSettings::bDoesPlayCollisionSound' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, DefaultSelfSurfaceType) == 0x000021, "Member 'FVClassPhysicsControlSettings::DefaultSelfSurfaceType' has a wrong offset!");
static_assert(offsetof(FVClassPhysicsControlSettings, bCanSnapToEnvironment) == 0x000022, "Member 'FVClassPhysicsControlSettings::bCanSnapToEnvironment' has a wrong offset!");

// ScriptStruct UE5AltarPairing.VCreatureSpeedDataRow
// 0x0018 (0x0020 - 0x0008)
struct FVCreatureSpeedDataRow final : public FTableRowBase
{
public:
	class FString                                 CreatureFormID;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRunMult;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVCreatureSpeedDataRow) == 0x000008, "Wrong alignment on FVCreatureSpeedDataRow");
static_assert(sizeof(FVCreatureSpeedDataRow) == 0x000020, "Wrong size on FVCreatureSpeedDataRow");
static_assert(offsetof(FVCreatureSpeedDataRow, CreatureFormID) == 0x000008, "Member 'FVCreatureSpeedDataRow::CreatureFormID' has a wrong offset!");
static_assert(offsetof(FVCreatureSpeedDataRow, MoveRunMult) == 0x000018, "Member 'FVCreatureSpeedDataRow::MoveRunMult' has a wrong offset!");

}

