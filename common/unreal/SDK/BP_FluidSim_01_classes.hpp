#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluidSim_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FluidBoundary_structs.hpp"
#include "FluidForceImpulsePerInstanceData_structs.hpp"
#include "FluidSimSolverMode_structs.hpp"
#include "FluidTerrainModes_structs.hpp"
#include "FluidForceDynamicPerInstanceData_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FluidSim_01.BP_FluidSim_01_C
// 0x0358 (0x05F0 - 0x0298)
class ABP_FluidSim_01_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UJumpFlood_Component2D_C*               JumpFlood_Component2D;                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWaveFoamSimComponent_C*                WaveFoamSimComponent;                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UShallowWaterSimComponent_C*            ShallowWaterSimComponent;                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RippleSimMID;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RenderNormalsMID;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DisplayMID;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DisplayBottomMID;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CrossSectionMID;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Composite_DistanceField_MID;                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UTextureRenderTarget2D*>         RippleRTs;                                         // 0x02F8(0x0010)(Edit, BlueprintVisible)
	bool                                          Show_Simulation_Mesh;                              // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Display_Material;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EFluidSimSolverMode                           Solver;                                            // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Virtual_FPS;                                       // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Passes;                                            // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeAccumulator;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FixedStep;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Damping;                                           // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Simulation_World_Size;                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Resolution;                                        // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluidBoundary                                Boundary_Condition;                                // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Travel_Speed;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 NormalRT;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CutPos;                                            // 0x0370(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevLoc;                                           // 0x0388(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrecLoc2;                                          // 0x03A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevOffset;                                        // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevOffset2;                                       // 0x03D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GridCenter;                                        // 0x03E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 TempRT;                                            // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 ForcesRT;                                          // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ApplyForces;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Renders_Per_Frame;                                 // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Cross_Section;                                // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Perf_Test_Mode;                                    // 0x041D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E[0x2];                                      // 0x041E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 PerfRT;                                            // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFluidForceImpulsePerInstanceData> ImpulseForces;                                  // 0x0428(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TMap<class UActorComponent*, struct FFluidForceDynamicPerInstanceData> DynamicForces;            // 0x0438(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	TMap<class UMaterialInterface*, class UMaterialInstanceDynamic*> ForceParentAndMIDMap;           // 0x0488(0x0050)(Edit, BlueprintVisible)
	class UStaticMeshComponent*                   Fluid_Display_Mesh;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cross_Section_Mesh;                                // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        FluidSizeSquared;                                  // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalPawnRef;                                      // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Text;                                        // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F2[0x2];                                      // 0x04F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Pawn_Check_Every_N_Frames;                         // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UActorComponent*, struct FFluidForceDynamicPerInstanceData> ProjectileForces;         // 0x04F8(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Follow_Player_;                                    // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Frames_Since_Last_Active_Force;                    // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Water_Depth;                               // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fixed_Time_Step;                                   // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_559[0x3];                                      // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Frames_until_Simulation_Idle;                      // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               LandscapeWaterTexture;                             // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Wave_Foam;                                // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_569[0x3];                                      // 0x0569(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaveFoamDiffuseIdx;                                // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wave_Sim_World_Size;                               // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Wave_Foam_Resolution;                              // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fading;                                            // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wave_Time_Offset;                                  // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DepthCaptureRT;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 EdgeMaskRT;                                        // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 JumpFloodA;                                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 JumpFloodB;                                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Generate_SceneCapture_DistanceField;               // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterBody*                             WaterBody;                                         // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               EdgeMaskMID;                                       // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ComputeDistanceMID;                                // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 VoronoiDistance_RefCopy;                           // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EFluidTerrainModes                            Terrain_Mode;                                      // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALandscape*                             Landscape;                                         // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Wave_Threshold;                                    // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Allocate_RTs();
	void Apply_Fluid_Force_Impulse(const struct FFluidForceImpulse& Impulse_Settings);
	void Capture_Height_and_DF();
	void Clear_RTs();
	void Clear_Sim_from_Waterbody_MIDs();
	void Convert_Force_Position(const struct FVector& Force_Location, double Sine_Bob, struct FVector* UV_Location);
	void Cycle_Render_Targets(class UTextureRenderTarget2D** Current_Target);
	void Draw_Dynamic_Force(class UCanvas*& Canvas, struct FVector2D& Canvas_Size, struct FFluidForceDynamicPerInstanceData& Dynamic_Force_Settings);
	void Draw_Impulse_Force(class UCanvas* Canvas, const struct FVector2D& Canvas_Size, const struct FFluidForceImpulsePerInstanceData& Impulse_Settings);
	void ExecuteUbergraph_BP_FluidSim_01(int32 EntryPoint);
	void FluidGridDebug();
	void Get_Force_MID(class UMaterialInterface*& Parent, class UMaterialInstanceDynamic** Mid);
	void Get_Frames_Since_Last_Active_Force();
	void Get_LandscapeWaterInfo();
	void Get_Wave_Spectrum();
	void GetLocalPawn(class APawn** Pawn);
	void GetPlayerPawnForces();
	void GridMovement();
	void Initialize_In_Editor();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReCheckScalability();
	void Register_Dynamic_Force(const struct FFluidForceDynamic& Dynamic_Fluid_Force, class USceneComponent* Tracked_Component, double WaterLevel);
	void Register_Projectile_Force(const struct FFluidForceDynamic& Dynamic_Fluid_Force, class USceneComponent* Tracked_Component);
	void Release_RTs();
	void Remove_Dynamic_Force(class UActorComponent* Component);
	void Remove_Projectile_Force(class UActorComponent* Component);
	void Set_Waterbody_MID_Params();
	void Setup_SimMID_and_MPC_Values();
	void SetupDisplayMIDs();
	void Tick_Custom();
	void Update_Dynamic_Forces();
	void Update_Impulse_Lifetimes();
	void UserConstructionScript();
	void Validate_RTs(bool* RTs_All_Valid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FluidSim_01_C">();
	}
	static class ABP_FluidSim_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FluidSim_01_C>();
	}
};
static_assert(alignof(ABP_FluidSim_01_C) == 0x000008, "Wrong alignment on ABP_FluidSim_01_C");
static_assert(sizeof(ABP_FluidSim_01_C) == 0x0005F0, "Wrong size on ABP_FluidSim_01_C");
static_assert(offsetof(ABP_FluidSim_01_C, UberGraphFrame) == 0x000298, "Member 'ABP_FluidSim_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, JumpFlood_Component2D) == 0x0002A0, "Member 'ABP_FluidSim_01_C::JumpFlood_Component2D' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, SceneCaptureComponent2D) == 0x0002A8, "Member 'ABP_FluidSim_01_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, WaveFoamSimComponent) == 0x0002B0, "Member 'ABP_FluidSim_01_C::WaveFoamSimComponent' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ShallowWaterSimComponent) == 0x0002B8, "Member 'ABP_FluidSim_01_C::ShallowWaterSimComponent' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_FluidSim_01_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, RippleSimMID) == 0x0002C8, "Member 'ABP_FluidSim_01_C::RippleSimMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, RenderNormalsMID) == 0x0002D0, "Member 'ABP_FluidSim_01_C::RenderNormalsMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DisplayMID) == 0x0002D8, "Member 'ABP_FluidSim_01_C::DisplayMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DisplayBottomMID) == 0x0002E0, "Member 'ABP_FluidSim_01_C::DisplayBottomMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, CrossSectionMID) == 0x0002E8, "Member 'ABP_FluidSim_01_C::CrossSectionMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Composite_DistanceField_MID) == 0x0002F0, "Member 'ABP_FluidSim_01_C::Composite_DistanceField_MID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, RippleRTs) == 0x0002F8, "Member 'ABP_FluidSim_01_C::RippleRTs' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Show_Simulation_Mesh) == 0x000308, "Member 'ABP_FluidSim_01_C::Show_Simulation_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Display_Material) == 0x000310, "Member 'ABP_FluidSim_01_C::Display_Material' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Solver) == 0x000318, "Member 'ABP_FluidSim_01_C::Solver' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Virtual_FPS) == 0x000320, "Member 'ABP_FluidSim_01_C::Virtual_FPS' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Passes) == 0x000328, "Member 'ABP_FluidSim_01_C::Passes' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, TimeAccumulator) == 0x000330, "Member 'ABP_FluidSim_01_C::TimeAccumulator' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, FixedStep) == 0x000338, "Member 'ABP_FluidSim_01_C::FixedStep' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Damping) == 0x000340, "Member 'ABP_FluidSim_01_C::Damping' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Enabled) == 0x000348, "Member 'ABP_FluidSim_01_C::Enabled' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Simulation_World_Size) == 0x000350, "Member 'ABP_FluidSim_01_C::Simulation_World_Size' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Resolution) == 0x000358, "Member 'ABP_FluidSim_01_C::Resolution' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Boundary_Condition) == 0x00035C, "Member 'ABP_FluidSim_01_C::Boundary_Condition' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Travel_Speed) == 0x000360, "Member 'ABP_FluidSim_01_C::Travel_Speed' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, NormalRT) == 0x000368, "Member 'ABP_FluidSim_01_C::NormalRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, CutPos) == 0x000370, "Member 'ABP_FluidSim_01_C::CutPos' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrevLoc) == 0x000388, "Member 'ABP_FluidSim_01_C::PrevLoc' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrecLoc2) == 0x0003A0, "Member 'ABP_FluidSim_01_C::PrecLoc2' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrevOffset) == 0x0003B8, "Member 'ABP_FluidSim_01_C::PrevOffset' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrevOffset2) == 0x0003D0, "Member 'ABP_FluidSim_01_C::PrevOffset2' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, GridCenter) == 0x0003E8, "Member 'ABP_FluidSim_01_C::GridCenter' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, TempRT) == 0x000400, "Member 'ABP_FluidSim_01_C::TempRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ForcesRT) == 0x000408, "Member 'ABP_FluidSim_01_C::ForcesRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ApplyForces) == 0x000410, "Member 'ABP_FluidSim_01_C::ApplyForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Renders_Per_Frame) == 0x000418, "Member 'ABP_FluidSim_01_C::Renders_Per_Frame' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Show_Cross_Section) == 0x00041C, "Member 'ABP_FluidSim_01_C::Show_Cross_Section' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Perf_Test_Mode) == 0x00041D, "Member 'ABP_FluidSim_01_C::Perf_Test_Mode' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PerfRT) == 0x000420, "Member 'ABP_FluidSim_01_C::PerfRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ImpulseForces) == 0x000428, "Member 'ABP_FluidSim_01_C::ImpulseForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DynamicForces) == 0x000438, "Member 'ABP_FluidSim_01_C::DynamicForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ForceParentAndMIDMap) == 0x000488, "Member 'ABP_FluidSim_01_C::ForceParentAndMIDMap' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Fluid_Display_Mesh) == 0x0004D8, "Member 'ABP_FluidSim_01_C::Fluid_Display_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Cross_Section_Mesh) == 0x0004E0, "Member 'ABP_FluidSim_01_C::Cross_Section_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, FluidSizeSquared) == 0x0004E8, "Member 'ABP_FluidSim_01_C::FluidSizeSquared' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, LocalPawnRef) == 0x0004F0, "Member 'ABP_FluidSim_01_C::LocalPawnRef' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Debug_Text) == 0x0004F1, "Member 'ABP_FluidSim_01_C::Debug_Text' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Pawn_Check_Every_N_Frames) == 0x0004F4, "Member 'ABP_FluidSim_01_C::Pawn_Check_Every_N_Frames' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ProjectileForces) == 0x0004F8, "Member 'ABP_FluidSim_01_C::ProjectileForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Follow_Player_) == 0x000548, "Member 'ABP_FluidSim_01_C::Follow_Player_' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Frames_Since_Last_Active_Force) == 0x00054C, "Member 'ABP_FluidSim_01_C::Frames_Since_Last_Active_Force' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Default_Water_Depth) == 0x000550, "Member 'ABP_FluidSim_01_C::Default_Water_Depth' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Fixed_Time_Step) == 0x000558, "Member 'ABP_FluidSim_01_C::Fixed_Time_Step' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Frames_until_Simulation_Idle) == 0x00055C, "Member 'ABP_FluidSim_01_C::Frames_until_Simulation_Idle' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, LandscapeWaterTexture) == 0x000560, "Member 'ABP_FluidSim_01_C::LandscapeWaterTexture' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Simulate_Wave_Foam) == 0x000568, "Member 'ABP_FluidSim_01_C::Simulate_Wave_Foam' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, WaveFoamDiffuseIdx) == 0x00056C, "Member 'ABP_FluidSim_01_C::WaveFoamDiffuseIdx' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Wave_Sim_World_Size) == 0x000570, "Member 'ABP_FluidSim_01_C::Wave_Sim_World_Size' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Wave_Foam_Resolution) == 0x000578, "Member 'ABP_FluidSim_01_C::Wave_Foam_Resolution' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Fading) == 0x000580, "Member 'ABP_FluidSim_01_C::Fading' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Wave_Time_Offset) == 0x000588, "Member 'ABP_FluidSim_01_C::Wave_Time_Offset' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DepthCaptureRT) == 0x000590, "Member 'ABP_FluidSim_01_C::DepthCaptureRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, EdgeMaskRT) == 0x000598, "Member 'ABP_FluidSim_01_C::EdgeMaskRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, JumpFloodA) == 0x0005A0, "Member 'ABP_FluidSim_01_C::JumpFloodA' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, JumpFloodB) == 0x0005A8, "Member 'ABP_FluidSim_01_C::JumpFloodB' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Generate_SceneCapture_DistanceField) == 0x0005B0, "Member 'ABP_FluidSim_01_C::Generate_SceneCapture_DistanceField' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, WaterBody) == 0x0005B8, "Member 'ABP_FluidSim_01_C::WaterBody' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, EdgeMaskMID) == 0x0005C0, "Member 'ABP_FluidSim_01_C::EdgeMaskMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ComputeDistanceMID) == 0x0005C8, "Member 'ABP_FluidSim_01_C::ComputeDistanceMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, VoronoiDistance_RefCopy) == 0x0005D0, "Member 'ABP_FluidSim_01_C::VoronoiDistance_RefCopy' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Terrain_Mode) == 0x0005D8, "Member 'ABP_FluidSim_01_C::Terrain_Mode' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Landscape) == 0x0005E0, "Member 'ABP_FluidSim_01_C::Landscape' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Wave_Threshold) == 0x0005E8, "Member 'ABP_FluidSim_01_C::Wave_Threshold' has a wrong offset!");

}

