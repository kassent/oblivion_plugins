#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AltarTextBlock

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.ExecuteUbergraph_WBP_AltarTextBlock
// 0x0008 (0x0008 - 0x0000)
struct WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock) == 0x000004, "Wrong alignment on WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock");
static_assert(sizeof(WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock) == 0x000008, "Wrong size on WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock");
static_assert(offsetof(WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock, EntryPoint) == 0x000000, "Member 'WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_AltarTextBlock_C_ExecuteUbergraph_WBP_AltarTextBlock::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_AltarTextBlock_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AltarTextBlock_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_AltarTextBlock_C_PreConstruct");
static_assert(sizeof(WBP_AltarTextBlock_C_PreConstruct) == 0x000001, "Wrong size on WBP_AltarTextBlock_C_PreConstruct");
static_assert(offsetof(WBP_AltarTextBlock_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_AltarTextBlock_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.SetColor
// 0x0014 (0x0014 - 0x0000)
struct WBP_AltarTextBlock_C_SetColor final
{
public:
	struct FSlateColor                            Color_0;                                           // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_AltarTextBlock_C_SetColor) == 0x000004, "Wrong alignment on WBP_AltarTextBlock_C_SetColor");
static_assert(sizeof(WBP_AltarTextBlock_C_SetColor) == 0x000014, "Wrong size on WBP_AltarTextBlock_C_SetColor");
static_assert(offsetof(WBP_AltarTextBlock_C_SetColor, Color_0) == 0x000000, "Member 'WBP_AltarTextBlock_C_SetColor::Color_0' has a wrong offset!");

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.SetFont
// 0x0058 (0x0058 - 0x0000)
struct WBP_AltarTextBlock_C_SetFont final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AltarTextBlock_C_SetFont) == 0x000008, "Wrong alignment on WBP_AltarTextBlock_C_SetFont");
static_assert(sizeof(WBP_AltarTextBlock_C_SetFont) == 0x000058, "Wrong size on WBP_AltarTextBlock_C_SetFont");
static_assert(offsetof(WBP_AltarTextBlock_C_SetFont, Font) == 0x000000, "Member 'WBP_AltarTextBlock_C_SetFont::Font' has a wrong offset!");

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct WBP_AltarTextBlock_C_SetFontSize final
{
public:
	int32                                         NewFontSize;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AltarTextBlock_C_SetFontSize) == 0x000004, "Wrong alignment on WBP_AltarTextBlock_C_SetFontSize");
static_assert(sizeof(WBP_AltarTextBlock_C_SetFontSize) == 0x000004, "Wrong size on WBP_AltarTextBlock_C_SetFontSize");
static_assert(offsetof(WBP_AltarTextBlock_C_SetFontSize, NewFontSize) == 0x000000, "Member 'WBP_AltarTextBlock_C_SetFontSize::NewFontSize' has a wrong offset!");

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct WBP_AltarTextBlock_C_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_AltarTextBlock_C_SetText) == 0x000008, "Wrong alignment on WBP_AltarTextBlock_C_SetText");
static_assert(sizeof(WBP_AltarTextBlock_C_SetText) == 0x000018, "Wrong size on WBP_AltarTextBlock_C_SetText");
static_assert(offsetof(WBP_AltarTextBlock_C_SetText, InText) == 0x000000, "Member 'WBP_AltarTextBlock_C_SetText::InText' has a wrong offset!");

// Function WBP_AltarTextBlock.WBP_AltarTextBlock_C.ToggleScrollingText
// 0x0001 (0x0001 - 0x0000)
struct WBP_AltarTextBlock_C_ToggleScrollingText final
{
public:
	bool                                          bInIsEnable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AltarTextBlock_C_ToggleScrollingText) == 0x000001, "Wrong alignment on WBP_AltarTextBlock_C_ToggleScrollingText");
static_assert(sizeof(WBP_AltarTextBlock_C_ToggleScrollingText) == 0x000001, "Wrong size on WBP_AltarTextBlock_C_ToggleScrollingText");
static_assert(offsetof(WBP_AltarTextBlock_C_ToggleScrollingText, bInIsEnable) == 0x000000, "Member 'WBP_AltarTextBlock_C_ToggleScrollingText::bInIsEnable' has a wrong offset!");

}

