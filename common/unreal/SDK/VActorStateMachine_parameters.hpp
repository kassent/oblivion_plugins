#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VActorStateMachine

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function VActorStateMachine.VStateBase.GetCurrentStatesTags
// 0x0020 (0x0020 - 0x0000)
struct VStateBase_GetCurrentStatesTags final
{
public:
	struct FGameplayTagContainer                  CurrentStatesTags;                                 // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateBase_GetCurrentStatesTags) == 0x000008, "Wrong alignment on VStateBase_GetCurrentStatesTags");
static_assert(sizeof(VStateBase_GetCurrentStatesTags) == 0x000020, "Wrong size on VStateBase_GetCurrentStatesTags");
static_assert(offsetof(VStateBase_GetCurrentStatesTags, CurrentStatesTags) == 0x000000, "Member 'VStateBase_GetCurrentStatesTags::CurrentStatesTags' has a wrong offset!");

// Function VActorStateMachine.VStateBase.GetOwningStateMachineComponent
// 0x0008 (0x0008 - 0x0000)
struct VStateBase_GetOwningStateMachineComponent final
{
public:
	class UVStateMachineComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateBase_GetOwningStateMachineComponent) == 0x000008, "Wrong alignment on VStateBase_GetOwningStateMachineComponent");
static_assert(sizeof(VStateBase_GetOwningStateMachineComponent) == 0x000008, "Wrong size on VStateBase_GetOwningStateMachineComponent");
static_assert(offsetof(VStateBase_GetOwningStateMachineComponent, ReturnValue) == 0x000000, "Member 'VStateBase_GetOwningStateMachineComponent::ReturnValue' has a wrong offset!");

// Function VActorStateMachine.VStateBase.IsCurrentlyActive
// 0x0001 (0x0001 - 0x0000)
struct VStateBase_IsCurrentlyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateBase_IsCurrentlyActive) == 0x000001, "Wrong alignment on VStateBase_IsCurrentlyActive");
static_assert(sizeof(VStateBase_IsCurrentlyActive) == 0x000001, "Wrong size on VStateBase_IsCurrentlyActive");
static_assert(offsetof(VStateBase_IsCurrentlyActive, ReturnValue) == 0x000000, "Member 'VStateBase_IsCurrentlyActive::ReturnValue' has a wrong offset!");

// Function VActorStateMachine.VState.OnStateUpdate
// 0x0004 (0x0004 - 0x0000)
struct VState_OnStateUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VState_OnStateUpdate) == 0x000004, "Wrong alignment on VState_OnStateUpdate");
static_assert(sizeof(VState_OnStateUpdate) == 0x000004, "Wrong size on VState_OnStateUpdate");
static_assert(offsetof(VState_OnStateUpdate, DeltaTime) == 0x000000, "Member 'VState_OnStateUpdate::DeltaTime' has a wrong offset!");

// Function VActorStateMachine.VStateParameters.Apply
// 0x0008 (0x0008 - 0x0000)
struct VStateParameters_Apply final
{
public:
	class UVStateBase*                            CurrentState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateParameters_Apply) == 0x000008, "Wrong alignment on VStateParameters_Apply");
static_assert(sizeof(VStateParameters_Apply) == 0x000008, "Wrong size on VStateParameters_Apply");
static_assert(offsetof(VStateParameters_Apply, CurrentState) == 0x000000, "Member 'VStateParameters_Apply::CurrentState' has a wrong offset!");

// Function VActorStateMachine.VStateParameters.Remove
// 0x0008 (0x0008 - 0x0000)
struct VStateParameters_Remove final
{
public:
	class UVStateBase*                            CurrentState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateParameters_Remove) == 0x000008, "Wrong alignment on VStateParameters_Remove");
static_assert(sizeof(VStateParameters_Remove) == 0x000008, "Wrong size on VStateParameters_Remove");
static_assert(offsetof(VStateParameters_Remove, CurrentState) == 0x000000, "Member 'VStateParameters_Remove::CurrentState' has a wrong offset!");

// Function VActorStateMachine.VStateCondition.CheckCondition
// 0x0010 (0x0010 - 0x0000)
struct VStateCondition_CheckCondition final
{
public:
	class UVStateBase*                            CurrentState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VStateCondition_CheckCondition) == 0x000008, "Wrong alignment on VStateCondition_CheckCondition");
static_assert(sizeof(VStateCondition_CheckCondition) == 0x000010, "Wrong size on VStateCondition_CheckCondition");
static_assert(offsetof(VStateCondition_CheckCondition, CurrentState) == 0x000000, "Member 'VStateCondition_CheckCondition::CurrentState' has a wrong offset!");
static_assert(offsetof(VStateCondition_CheckCondition, ReturnValue) == 0x000008, "Member 'VStateCondition_CheckCondition::ReturnValue' has a wrong offset!");

// Function VActorStateMachine.VStateCondition.PostInit
// 0x0008 (0x0008 - 0x0000)
struct VStateCondition_PostInit final
{
public:
	class UVStateBase*                            OwnerState;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateCondition_PostInit) == 0x000008, "Wrong alignment on VStateCondition_PostInit");
static_assert(sizeof(VStateCondition_PostInit) == 0x000008, "Wrong size on VStateCondition_PostInit");
static_assert(offsetof(VStateCondition_PostInit, OwnerState) == 0x000000, "Member 'VStateCondition_PostInit::OwnerState' has a wrong offset!");

// Function VActorStateMachine.VStateMachineComponent.RegisterStateChange
// 0x0008 (0x0008 - 0x0000)
struct VStateMachineComponent_RegisterStateChange final
{
public:
	struct FGameplayTag                           NewState;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateMachineComponent_RegisterStateChange) == 0x000004, "Wrong alignment on VStateMachineComponent_RegisterStateChange");
static_assert(sizeof(VStateMachineComponent_RegisterStateChange) == 0x000008, "Wrong size on VStateMachineComponent_RegisterStateChange");
static_assert(offsetof(VStateMachineComponent_RegisterStateChange, NewState) == 0x000000, "Member 'VStateMachineComponent_RegisterStateChange::NewState' has a wrong offset!");

// Function VActorStateMachine.VStateMachineComponent.SendStateChangeListToServer
// 0x0010 (0x0010 - 0x0000)
struct VStateMachineComponent_SendStateChangeListToServer final
{
public:
	TArray<struct FGameplayTag>                   StateChangeList;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateMachineComponent_SendStateChangeListToServer) == 0x000008, "Wrong alignment on VStateMachineComponent_SendStateChangeListToServer");
static_assert(sizeof(VStateMachineComponent_SendStateChangeListToServer) == 0x000010, "Wrong size on VStateMachineComponent_SendStateChangeListToServer");
static_assert(offsetof(VStateMachineComponent_SendStateChangeListToServer, StateChangeList) == 0x000000, "Member 'VStateMachineComponent_SendStateChangeListToServer::StateChangeList' has a wrong offset!");

// Function VActorStateMachine.VStateMachineComponent.SendStateChangeToServer
// 0x0020 (0x0020 - 0x0000)
struct VStateMachineComponent_SendStateChangeToServer final
{
public:
	struct FGameplayTagContainer                  CurrentStatesTagContainer;                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateMachineComponent_SendStateChangeToServer) == 0x000008, "Wrong alignment on VStateMachineComponent_SendStateChangeToServer");
static_assert(sizeof(VStateMachineComponent_SendStateChangeToServer) == 0x000020, "Wrong size on VStateMachineComponent_SendStateChangeToServer");
static_assert(offsetof(VStateMachineComponent_SendStateChangeToServer, CurrentStatesTagContainer) == 0x000000, "Member 'VStateMachineComponent_SendStateChangeToServer::CurrentStatesTagContainer' has a wrong offset!");

// Function VActorStateMachine.VStateMachineComponent.GetStateFromTag
// 0x0010 (0x0010 - 0x0000)
struct VStateMachineComponent_GetStateFromTag final
{
public:
	struct FGameplayTag                           StateTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVStateBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStateMachineComponent_GetStateFromTag) == 0x000008, "Wrong alignment on VStateMachineComponent_GetStateFromTag");
static_assert(sizeof(VStateMachineComponent_GetStateFromTag) == 0x000010, "Wrong size on VStateMachineComponent_GetStateFromTag");
static_assert(offsetof(VStateMachineComponent_GetStateFromTag, StateTag) == 0x000000, "Member 'VStateMachineComponent_GetStateFromTag::StateTag' has a wrong offset!");
static_assert(offsetof(VStateMachineComponent_GetStateFromTag, ReturnValue) == 0x000008, "Member 'VStateMachineComponent_GetStateFromTag::ReturnValue' has a wrong offset!");

}

