#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Parent_Prefab_Sta

#include "Basic.hpp"

#include "BPE_WeatherResponse_Rain_structs.hpp"
#include "BPE_WeatherResponse_Snow_structs.hpp"
#include "ENiagara_WeatherState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Altar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Parent_Prefab_Sta.BP_Parent_Prefab_Sta_C
// 0x0138 (0x0480 - 0x0348)
class ABP_Parent_Prefab_Sta_C final : public AVStatic
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   One_PointLight;                                    // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Light;                                             // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_Component;                              // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_System_Component;                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot1;                                 // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Weather_Timeline_RampUp_7F10C38844443B94ABBC60AA8681E781; // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Debug_Weather_Timeline__Direction_7F10C38844443B94ABBC60AA8681E781; // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Debug_Weather_Timeline;                            // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         VFX;                                               // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StaticMesh;                                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Light_Function;                                // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     M_LF;                                              // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_LF;                                            // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Randomizer;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Intensity;                                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Attenuation_Radius;                                // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Radius;                                     // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x03CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OFF;                                               // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Indirect_Intensity;                                // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volumetric_Intensity;                              // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specular_Scale;                                    // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Color_Saturation;                                  // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          OFF_0;                                             // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Interior_Level;                                 // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Turn_OFF_Day;                                      // 0x03FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Night;                                          // 0x03FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Is_Day;                                            // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sunset;                                            // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Sunrise;                                           // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EBPE_WeatherResponse_Rain                     Rain_Response;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_WeatherResponse_Snow                     Snow_Response;                                     // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40A[0x6];                                      // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Adapted_Light_Intensity;                           // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Adapted_VFX_Intensity;                             // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENiagara_WeatherState                         Current_Weather;                                   // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Update_Value;                              // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Light_Transition_Start;                            // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Light_Transition_Done;                             // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Emissive_Intensity;                                // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VFX_Intensity;                                     // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_VFX_Intensity;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VFX_Intensity_Transition_Start;                    // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Current_VFX_Spawnrate;                             // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VFX_Spawnrate_Transition_Start;                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          VFX_Transition_Done;                               // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Emissive_Param_Name;                               // 0x0474(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Adapt_Light();
	void Debug_Day();
	void Debug_Exterior();
	void Debug_Interior();
	void Debug_Night();
	void Debug_Rain();
	void Debug_Snow();
	void Debug_Sunny();
	void Debug_Weather_Timeline__FinishedFunc();
	void Debug_Weather_Timeline__UpdateFunc();
	void ExecuteUbergraph_BP_Parent_Prefab_Sta(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Reset_to_Default();
	void Set_Day();
	void Set_Night();
	void Turn_Light_Off();
	void Update_Weather(ENiagara_WeatherState Weather, double Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Parent_Prefab_Sta_C">();
	}
	static class ABP_Parent_Prefab_Sta_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Parent_Prefab_Sta_C>();
	}
};
static_assert(alignof(ABP_Parent_Prefab_Sta_C) == 0x000008, "Wrong alignment on ABP_Parent_Prefab_Sta_C");
static_assert(sizeof(ABP_Parent_Prefab_Sta_C) == 0x000480, "Wrong size on ABP_Parent_Prefab_Sta_C");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, UberGraphFrame) == 0x000348, "Member 'ABP_Parent_Prefab_Sta_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, One_PointLight) == 0x000350, "Member 'ABP_Parent_Prefab_Sta_C::One_PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Light) == 0x000358, "Member 'ABP_Parent_Prefab_Sta_C::Light' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, StaticMesh_Component) == 0x000360, "Member 'ABP_Parent_Prefab_Sta_C::StaticMesh_Component' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Niagara_System_Component) == 0x000368, "Member 'ABP_Parent_Prefab_Sta_C::Niagara_System_Component' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, DefaultSceneRoot1) == 0x000370, "Member 'ABP_Parent_Prefab_Sta_C::DefaultSceneRoot1' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Debug_Weather_Timeline_RampUp_7F10C38844443B94ABBC60AA8681E781) == 0x000378, "Member 'ABP_Parent_Prefab_Sta_C::Debug_Weather_Timeline_RampUp_7F10C38844443B94ABBC60AA8681E781' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Debug_Weather_Timeline__Direction_7F10C38844443B94ABBC60AA8681E781) == 0x00037C, "Member 'ABP_Parent_Prefab_Sta_C::Debug_Weather_Timeline__Direction_7F10C38844443B94ABBC60AA8681E781' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Debug_Weather_Timeline) == 0x000380, "Member 'ABP_Parent_Prefab_Sta_C::Debug_Weather_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, VFX) == 0x000388, "Member 'ABP_Parent_Prefab_Sta_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, StaticMesh) == 0x000390, "Member 'ABP_Parent_Prefab_Sta_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Use_Light_Function) == 0x000398, "Member 'ABP_Parent_Prefab_Sta_C::Use_Light_Function' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, M_LF) == 0x0003A0, "Member 'ABP_Parent_Prefab_Sta_C::M_LF' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, MID_LF) == 0x0003A8, "Member 'ABP_Parent_Prefab_Sta_C::MID_LF' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Randomizer) == 0x0003B0, "Member 'ABP_Parent_Prefab_Sta_C::Randomizer' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Intensity) == 0x0003B8, "Member 'ABP_Parent_Prefab_Sta_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Attenuation_Radius) == 0x0003C0, "Member 'ABP_Parent_Prefab_Sta_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Source_Radius) == 0x0003C8, "Member 'ABP_Parent_Prefab_Sta_C::Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Color) == 0x0003CC, "Member 'ABP_Parent_Prefab_Sta_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Cast_Shadows) == 0x0003DC, "Member 'ABP_Parent_Prefab_Sta_C::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, OFF) == 0x0003DD, "Member 'ABP_Parent_Prefab_Sta_C::OFF' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Indirect_Intensity) == 0x0003E0, "Member 'ABP_Parent_Prefab_Sta_C::Indirect_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Volumetric_Intensity) == 0x0003E4, "Member 'ABP_Parent_Prefab_Sta_C::Volumetric_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Specular_Scale) == 0x0003E8, "Member 'ABP_Parent_Prefab_Sta_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Color_Saturation) == 0x0003F0, "Member 'ABP_Parent_Prefab_Sta_C::Color_Saturation' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, OFF_0) == 0x0003F8, "Member 'ABP_Parent_Prefab_Sta_C::OFF_0' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Is_Interior_Level) == 0x0003F9, "Member 'ABP_Parent_Prefab_Sta_C::Is_Interior_Level' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Turn_OFF_Day) == 0x0003FA, "Member 'ABP_Parent_Prefab_Sta_C::Turn_OFF_Day' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Is_Night) == 0x0003FB, "Member 'ABP_Parent_Prefab_Sta_C::Is_Night' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Is_Day) == 0x0003FC, "Member 'ABP_Parent_Prefab_Sta_C::Is_Day' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Sunset) == 0x000400, "Member 'ABP_Parent_Prefab_Sta_C::Sunset' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Sunrise) == 0x000404, "Member 'ABP_Parent_Prefab_Sta_C::Sunrise' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Rain_Response) == 0x000408, "Member 'ABP_Parent_Prefab_Sta_C::Rain_Response' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Snow_Response) == 0x000409, "Member 'ABP_Parent_Prefab_Sta_C::Snow_Response' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Adapted_Light_Intensity) == 0x000410, "Member 'ABP_Parent_Prefab_Sta_C::Adapted_Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Adapted_VFX_Intensity) == 0x000418, "Member 'ABP_Parent_Prefab_Sta_C::Adapted_VFX_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Current_Weather) == 0x000420, "Member 'ABP_Parent_Prefab_Sta_C::Current_Weather' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Weather_Update_Value) == 0x000428, "Member 'ABP_Parent_Prefab_Sta_C::Weather_Update_Value' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Light_Transition_Start) == 0x000430, "Member 'ABP_Parent_Prefab_Sta_C::Light_Transition_Start' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Light_Transition_Done) == 0x000438, "Member 'ABP_Parent_Prefab_Sta_C::Light_Transition_Done' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Emissive_Intensity) == 0x000440, "Member 'ABP_Parent_Prefab_Sta_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, VFX_Intensity) == 0x000448, "Member 'ABP_Parent_Prefab_Sta_C::VFX_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Current_VFX_Intensity) == 0x000450, "Member 'ABP_Parent_Prefab_Sta_C::Current_VFX_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, VFX_Intensity_Transition_Start) == 0x000458, "Member 'ABP_Parent_Prefab_Sta_C::VFX_Intensity_Transition_Start' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Current_VFX_Spawnrate) == 0x000460, "Member 'ABP_Parent_Prefab_Sta_C::Current_VFX_Spawnrate' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, VFX_Spawnrate_Transition_Start) == 0x000468, "Member 'ABP_Parent_Prefab_Sta_C::VFX_Spawnrate_Transition_Start' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, VFX_Transition_Done) == 0x000470, "Member 'ABP_Parent_Prefab_Sta_C::VFX_Transition_Done' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_Sta_C, Emissive_Param_Name) == 0x000474, "Member 'ABP_Parent_Prefab_Sta_C::Emissive_Param_Name' has a wrong offset!");

}

