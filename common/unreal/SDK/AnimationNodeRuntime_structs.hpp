#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationNodeRuntime

#include "Basic.hpp"

#include "RigVM_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "PBIK_structs.hpp"
#include "Engine_structs.hpp"
#include "ControlRig_structs.hpp"


namespace SDK
{

// Enum AnimationNodeRuntime.ESkeletonAxisForward
// NumValues: 0x0007
enum class ESkeletonAxisForward : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	NEG_X                                    = 3,
	NEG_Y                                    = 4,
	NEG_Z                                    = 5,
	ESkeletonAxisForward_MAX                 = 6,
};

// Enum AnimationNodeRuntime.EAdvancedLookAt_LookType
// NumValues: 0x0004
enum class EAdvancedLookAt_LookType : uint8
{
	GLANCE                                   = 0,
	HEAD_TRACKING                            = 1,
	UPPERBODY                                = 2,
	EAdvancedLookAt_MAX                      = 3,
};

// ScriptStruct AnimationNodeRuntime.ActorBlinkSettings
// 0x0078 (0x0078 - 0x0000)
struct FActorBlinkSettings final
{
public:
	TArray<class FName>                           PrimaryEyelidBones;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               PrimaryEyelidRotation;                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseSecondaryEyelids;                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SecondaryEyelidBones;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               SecondaryEyelidRotation;                           // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PrimaryBlinkCurve;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SecondaryBlinkCurve;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      UnconsciousAnimSequence;                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimSequenceBlendBone;                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorBlinkSettings) == 0x000008, "Wrong alignment on FActorBlinkSettings");
static_assert(sizeof(FActorBlinkSettings) == 0x000078, "Wrong size on FActorBlinkSettings");
static_assert(offsetof(FActorBlinkSettings, PrimaryEyelidBones) == 0x000000, "Member 'FActorBlinkSettings::PrimaryEyelidBones' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, PrimaryEyelidRotation) == 0x000010, "Member 'FActorBlinkSettings::PrimaryEyelidRotation' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, bUseSecondaryEyelids) == 0x000028, "Member 'FActorBlinkSettings::bUseSecondaryEyelids' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, SecondaryEyelidBones) == 0x000030, "Member 'FActorBlinkSettings::SecondaryEyelidBones' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, SecondaryEyelidRotation) == 0x000040, "Member 'FActorBlinkSettings::SecondaryEyelidRotation' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, PrimaryBlinkCurve) == 0x000058, "Member 'FActorBlinkSettings::PrimaryBlinkCurve' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, SecondaryBlinkCurve) == 0x000060, "Member 'FActorBlinkSettings::SecondaryBlinkCurve' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, UnconsciousAnimSequence) == 0x000068, "Member 'FActorBlinkSettings::UnconsciousAnimSequence' has a wrong offset!");
static_assert(offsetof(FActorBlinkSettings, AnimSequenceBlendBone) == 0x000070, "Member 'FActorBlinkSettings::AnimSequenceBlendBone' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.FeetIKInterpolationSettings
// 0x0008 (0x0008 - 0x0000)
struct FFeetIKInterpolationSettings final
{
public:
	float                                         SpringInterpolationStrength;                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringInterpolationCriticalDamping;                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeetIKInterpolationSettings) == 0x000004, "Wrong alignment on FFeetIKInterpolationSettings");
static_assert(sizeof(FFeetIKInterpolationSettings) == 0x000008, "Wrong size on FFeetIKInterpolationSettings");
static_assert(offsetof(FFeetIKInterpolationSettings, SpringInterpolationStrength) == 0x000000, "Member 'FFeetIKInterpolationSettings::SpringInterpolationStrength' has a wrong offset!");
static_assert(offsetof(FFeetIKInterpolationSettings, SpringInterpolationCriticalDamping) == 0x000004, "Member 'FFeetIKInterpolationSettings::SpringInterpolationCriticalDamping' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.LimbBoneSettings
// 0x0080 (0x0080 - 0x0000)
struct FLimbBoneSettings final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PositionStiffness;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationStiffness;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                XRotationType;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinMaxXRotation;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                YRotationType;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinMaxYRotation;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                ZRotationType;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinMaxZRotation;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePreferredAngles;                               // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreferredAngles;                                   // 0x0068(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimbBoneSettings) == 0x000008, "Wrong alignment on FLimbBoneSettings");
static_assert(sizeof(FLimbBoneSettings) == 0x000080, "Wrong size on FLimbBoneSettings");
static_assert(offsetof(FLimbBoneSettings, bone) == 0x000000, "Member 'FLimbBoneSettings::bone' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, PositionStiffness) == 0x000010, "Member 'FLimbBoneSettings::PositionStiffness' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, RotationStiffness) == 0x000014, "Member 'FLimbBoneSettings::RotationStiffness' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, XRotationType) == 0x000018, "Member 'FLimbBoneSettings::XRotationType' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, MinMaxXRotation) == 0x000020, "Member 'FLimbBoneSettings::MinMaxXRotation' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, YRotationType) == 0x000030, "Member 'FLimbBoneSettings::YRotationType' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, MinMaxYRotation) == 0x000038, "Member 'FLimbBoneSettings::MinMaxYRotation' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, ZRotationType) == 0x000048, "Member 'FLimbBoneSettings::ZRotationType' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, MinMaxZRotation) == 0x000050, "Member 'FLimbBoneSettings::MinMaxZRotation' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, bUsePreferredAngles) == 0x000060, "Member 'FLimbBoneSettings::bUsePreferredAngles' has a wrong offset!");
static_assert(offsetof(FLimbBoneSettings, PreferredAngles) == 0x000068, "Member 'FLimbBoneSettings::PreferredAngles' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.LimbSettings
// 0x0020 (0x0020 - 0x0000)
struct FLimbSettings final
{
public:
	struct FBoneReference                         FootBone;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLimbBoneSettings>              LimbBonesSettings;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimbSettings) == 0x000008, "Wrong alignment on FLimbSettings");
static_assert(sizeof(FLimbSettings) == 0x000020, "Wrong size on FLimbSettings");
static_assert(offsetof(FLimbSettings, FootBone) == 0x000000, "Member 'FLimbSettings::FootBone' has a wrong offset!");
static_assert(offsetof(FLimbSettings, LimbBonesSettings) == 0x000010, "Member 'FLimbSettings::LimbBonesSettings' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.ActorFeetIKSettings
// 0x0008 (0x0008 - 0x0000)
struct FActorFeetIKSettings final
{
public:
	class UActorFeetIKDataAsset*                  DataAsset;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorFeetIKSettings) == 0x000008, "Wrong alignment on FActorFeetIKSettings");
static_assert(sizeof(FActorFeetIKSettings) == 0x000008, "Wrong size on FActorFeetIKSettings");
static_assert(offsetof(FActorFeetIKSettings, DataAsset) == 0x000000, "Member 'FActorFeetIKSettings::DataAsset' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_Clamp
// 0x0010 (0x0010 - 0x0000)
struct FAdvancedLookAt_Clamp final
{
public:
	float                                         PitchMin;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMax;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawMin;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawMax;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdvancedLookAt_Clamp) == 0x000004, "Wrong alignment on FAdvancedLookAt_Clamp");
static_assert(sizeof(FAdvancedLookAt_Clamp) == 0x000010, "Wrong size on FAdvancedLookAt_Clamp");
static_assert(offsetof(FAdvancedLookAt_Clamp, PitchMin) == 0x000000, "Member 'FAdvancedLookAt_Clamp::PitchMin' has a wrong offset!");
static_assert(offsetof(FAdvancedLookAt_Clamp, PitchMax) == 0x000004, "Member 'FAdvancedLookAt_Clamp::PitchMax' has a wrong offset!");
static_assert(offsetof(FAdvancedLookAt_Clamp, YawMin) == 0x000008, "Member 'FAdvancedLookAt_Clamp::YawMin' has a wrong offset!");
static_assert(offsetof(FAdvancedLookAt_Clamp, YawMax) == 0x00000C, "Member 'FAdvancedLookAt_Clamp::YawMax' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_ChainItem
// 0x000C (0x000C - 0x0000)
struct FAdvancedLookAt_ChainItem final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneRatioInChain;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdvancedLookAt_ChainItem) == 0x000004, "Wrong alignment on FAdvancedLookAt_ChainItem");
static_assert(sizeof(FAdvancedLookAt_ChainItem) == 0x00000C, "Wrong size on FAdvancedLookAt_ChainItem");
static_assert(offsetof(FAdvancedLookAt_ChainItem, BoneName) == 0x000000, "Member 'FAdvancedLookAt_ChainItem::BoneName' has a wrong offset!");
static_assert(offsetof(FAdvancedLookAt_ChainItem, BoneRatioInChain) == 0x000008, "Member 'FAdvancedLookAt_ChainItem::BoneRatioInChain' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_BoneChain
// 0x0028 (0x0028 - 0x0000)
struct FAdvancedLookAt_BoneChain final
{
public:
	TArray<struct FAdvancedLookAt_ChainItem>      Bones;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAdvancedLookAt_Clamp                  BonesClamp;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BonesSpeed;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdvancedLookAt_BoneChain) == 0x000008, "Wrong alignment on FAdvancedLookAt_BoneChain");
static_assert(sizeof(FAdvancedLookAt_BoneChain) == 0x000028, "Wrong size on FAdvancedLookAt_BoneChain");
static_assert(offsetof(FAdvancedLookAt_BoneChain, Bones) == 0x000000, "Member 'FAdvancedLookAt_BoneChain::Bones' has a wrong offset!");
static_assert(offsetof(FAdvancedLookAt_BoneChain, BonesClamp) == 0x000010, "Member 'FAdvancedLookAt_BoneChain::BonesClamp' has a wrong offset!");
static_assert(offsetof(FAdvancedLookAt_BoneChain, BonesSpeed) == 0x000020, "Member 'FAdvancedLookAt_BoneChain::BonesSpeed' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_BoneData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FAdvancedLookAt_BoneData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdvancedLookAt_BoneData) == 0x000010, "Wrong alignment on FAdvancedLookAt_BoneData");
static_assert(sizeof(FAdvancedLookAt_BoneData) == 0x000040, "Wrong size on FAdvancedLookAt_BoneData");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_BoneChainData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FAdvancedLookAt_BoneChainData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdvancedLookAt_BoneChainData) == 0x000010, "Wrong alignment on FAdvancedLookAt_BoneChainData");
static_assert(sizeof(FAdvancedLookAt_BoneChainData) == 0x000040, "Wrong size on FAdvancedLookAt_BoneChainData");

// ScriptStruct AnimationNodeRuntime.AnimNode_AdvancedLookAt
// 0x0138 (0x0200 - 0x00C8)
struct alignas(0x10) FAnimNode_AdvancedLookAt final : public FAnimNode_SkeletalControlBase
{
public:
	class UAdvancedLookAtSettings*                LookAtSettings;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSitting;                                        // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x117];                                     // 0x00E9(0x0117)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AdvancedLookAt) == 0x000010, "Wrong alignment on FAnimNode_AdvancedLookAt");
static_assert(sizeof(FAnimNode_AdvancedLookAt) == 0x000200, "Wrong size on FAnimNode_AdvancedLookAt");
static_assert(offsetof(FAnimNode_AdvancedLookAt, LookAtSettings) == 0x0000C8, "Member 'FAnimNode_AdvancedLookAt::LookAtSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_AdvancedLookAt, Target) == 0x0000D0, "Member 'FAnimNode_AdvancedLookAt::Target' has a wrong offset!");
static_assert(offsetof(FAnimNode_AdvancedLookAt, bIsSitting) == 0x0000E8, "Member 'FAnimNode_AdvancedLookAt::bIsSitting' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_Override_BoneData
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FAdvancedLookAt_Override_BoneData final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdvancedLookAt_Override_BoneData) == 0x000010, "Wrong alignment on FAdvancedLookAt_Override_BoneData");
static_assert(sizeof(FAdvancedLookAt_Override_BoneData) == 0x0000E0, "Wrong size on FAdvancedLookAt_Override_BoneData");

// ScriptStruct AnimationNodeRuntime.AdvancedLookAt_Override_BoneChainData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAdvancedLookAt_Override_BoneChainData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdvancedLookAt_Override_BoneChainData) == 0x000008, "Wrong alignment on FAdvancedLookAt_Override_BoneChainData");
static_assert(sizeof(FAdvancedLookAt_Override_BoneChainData) == 0x000018, "Wrong size on FAdvancedLookAt_Override_BoneChainData");

// ScriptStruct AnimationNodeRuntime.AnimNode_AdvancedLookAt_Override
// 0x0228 (0x02F0 - 0x00C8)
struct alignas(0x10) FAnimNode_AdvancedLookAt_Override final : public FAnimNode_SkeletalControlBase
{
public:
	class UAdvancedLookAtSettings*                LookAtSettings;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x208];                                     // 0x00E8(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AdvancedLookAt_Override) == 0x000010, "Wrong alignment on FAnimNode_AdvancedLookAt_Override");
static_assert(sizeof(FAnimNode_AdvancedLookAt_Override) == 0x0002F0, "Wrong size on FAnimNode_AdvancedLookAt_Override");
static_assert(offsetof(FAnimNode_AdvancedLookAt_Override, LookAtSettings) == 0x0000C8, "Member 'FAnimNode_AdvancedLookAt_Override::LookAtSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_AdvancedLookAt_Override, Target) == 0x0000D0, "Member 'FAnimNode_AdvancedLookAt_Override::Target' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.AnimNode_Blink
// 0x00B8 (0x0180 - 0x00C8)
struct FAnimNode_Blink final : public FAnimNode_SkeletalControlBase
{
public:
	struct FActorBlinkSettings                    Settings;                                          // 0x00C8(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeValue;                                         // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x38];                                     // 0x0148(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Blink) == 0x000008, "Wrong alignment on FAnimNode_Blink");
static_assert(sizeof(FAnimNode_Blink) == 0x000180, "Wrong size on FAnimNode_Blink");
static_assert(offsetof(FAnimNode_Blink, Settings) == 0x0000C8, "Member 'FAnimNode_Blink::Settings' has a wrong offset!");
static_assert(offsetof(FAnimNode_Blink, RotationSpace) == 0x000140, "Member 'FAnimNode_Blink::RotationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_Blink, TimeValue) == 0x000144, "Member 'FAnimNode_Blink::TimeValue' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_CheckHierarchyUpdate
// 0x0010 (0x0170 - 0x0160)
struct FRigUnit_CheckHierarchyUpdate final : public FRigUnitMutable
{
public:
	bool                                          bIsValid;                                          // 0x0160(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0xF];                                      // 0x0161(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_CheckHierarchyUpdate) == 0x000010, "Wrong alignment on FRigUnit_CheckHierarchyUpdate");
static_assert(sizeof(FRigUnit_CheckHierarchyUpdate) == 0x000170, "Wrong size on FRigUnit_CheckHierarchyUpdate");
static_assert(offsetof(FRigUnit_CheckHierarchyUpdate, bIsValid) == 0x000160, "Member 'FRigUnit_CheckHierarchyUpdate::bIsValid' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_ExtractBlinkData
// 0x00E0 (0x0240 - 0x0160)
struct FRigUnit_ExtractBlinkData final : public FRigUnitMutable
{
public:
	struct FActorBlinkSettings                    Settings;                                          // 0x0160(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x01D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PrimaryEyelidBones;                                // 0x01E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               PrimaryEyelidRotation;                             // 0x01F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseSecondaryEyelids;                              // 0x0208(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SecondaryEyelidBones;                              // 0x0210(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               SecondaryEyelidRotation;                           // 0x0220(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ExtractBlinkData) == 0x000010, "Wrong alignment on FRigUnit_ExtractBlinkData");
static_assert(sizeof(FRigUnit_ExtractBlinkData) == 0x000240, "Wrong size on FRigUnit_ExtractBlinkData");
static_assert(offsetof(FRigUnit_ExtractBlinkData, Settings) == 0x000160, "Member 'FRigUnit_ExtractBlinkData::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractBlinkData, bSuccess) == 0x0001D8, "Member 'FRigUnit_ExtractBlinkData::bSuccess' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractBlinkData, PrimaryEyelidBones) == 0x0001E0, "Member 'FRigUnit_ExtractBlinkData::PrimaryEyelidBones' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractBlinkData, PrimaryEyelidRotation) == 0x0001F0, "Member 'FRigUnit_ExtractBlinkData::PrimaryEyelidRotation' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractBlinkData, bUseSecondaryEyelids) == 0x000208, "Member 'FRigUnit_ExtractBlinkData::bUseSecondaryEyelids' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractBlinkData, SecondaryEyelidBones) == 0x000210, "Member 'FRigUnit_ExtractBlinkData::SecondaryEyelidBones' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractBlinkData, SecondaryEyelidRotation) == 0x000220, "Member 'FRigUnit_ExtractBlinkData::SecondaryEyelidRotation' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.ActorFeetIKData
// 0x0090 (0x0090 - 0x0000)
struct FActorFeetIKData final
{
public:
	class FName                                   RootBone;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PelvisBone;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FeetBones;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LeanBones;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPBIKBoneSetting>               BonesSettings;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RootRotationAlpha;                                 // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           PelvisOffsetSettings;                              // 0x0044(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FeetRotationAlpha;                                 // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFeetHeightOffset;                               // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FootOffsetSettings;                                // 0x0054(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FootNormalSettings;                                // 0x005C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           LeanBonesRotationSettings;                         // 0x0064(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxForwardLeanOffsetAngle;                         // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBackwardLeanOffsetAngle;                        // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSideLeanOffsetAngle;                            // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootCheckOffset;                                   // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorCheckOffset;                                  // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyRadius;                                        // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElevationBalanceAlpha;                             // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FloorNormalSettings;                               // 0x0088(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorFeetIKData) == 0x000008, "Wrong alignment on FActorFeetIKData");
static_assert(sizeof(FActorFeetIKData) == 0x000090, "Wrong size on FActorFeetIKData");
static_assert(offsetof(FActorFeetIKData, RootBone) == 0x000000, "Member 'FActorFeetIKData::RootBone' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, PelvisBone) == 0x000008, "Member 'FActorFeetIKData::PelvisBone' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FeetBones) == 0x000010, "Member 'FActorFeetIKData::FeetBones' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, LeanBones) == 0x000020, "Member 'FActorFeetIKData::LeanBones' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, BonesSettings) == 0x000030, "Member 'FActorFeetIKData::BonesSettings' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, RootRotationAlpha) == 0x000040, "Member 'FActorFeetIKData::RootRotationAlpha' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, PelvisOffsetSettings) == 0x000044, "Member 'FActorFeetIKData::PelvisOffsetSettings' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FeetRotationAlpha) == 0x00004C, "Member 'FActorFeetIKData::FeetRotationAlpha' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, MaxFeetHeightOffset) == 0x000050, "Member 'FActorFeetIKData::MaxFeetHeightOffset' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FootOffsetSettings) == 0x000054, "Member 'FActorFeetIKData::FootOffsetSettings' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FootNormalSettings) == 0x00005C, "Member 'FActorFeetIKData::FootNormalSettings' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, LeanBonesRotationSettings) == 0x000064, "Member 'FActorFeetIKData::LeanBonesRotationSettings' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, MaxForwardLeanOffsetAngle) == 0x00006C, "Member 'FActorFeetIKData::MaxForwardLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, MaxBackwardLeanOffsetAngle) == 0x000070, "Member 'FActorFeetIKData::MaxBackwardLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, MaxSideLeanOffsetAngle) == 0x000074, "Member 'FActorFeetIKData::MaxSideLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FootCheckOffset) == 0x000078, "Member 'FActorFeetIKData::FootCheckOffset' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FloorCheckOffset) == 0x00007C, "Member 'FActorFeetIKData::FloorCheckOffset' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, BodyRadius) == 0x000080, "Member 'FActorFeetIKData::BodyRadius' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, ElevationBalanceAlpha) == 0x000084, "Member 'FActorFeetIKData::ElevationBalanceAlpha' has a wrong offset!");
static_assert(offsetof(FActorFeetIKData, FloorNormalSettings) == 0x000088, "Member 'FActorFeetIKData::FloorNormalSettings' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_ExtractFeetIKData
// 0x00A0 (0x0200 - 0x0160)
struct FRigUnit_ExtractFeetIKData final : public FRigUnitMutable
{
public:
	struct FActorFeetIKSettings                   Settings;                                          // 0x0160(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0168(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActorFeetIKData                       Data;                                              // 0x0170(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ExtractFeetIKData) == 0x000010, "Wrong alignment on FRigUnit_ExtractFeetIKData");
static_assert(sizeof(FRigUnit_ExtractFeetIKData) == 0x000200, "Wrong size on FRigUnit_ExtractFeetIKData");
static_assert(offsetof(FRigUnit_ExtractFeetIKData, Settings) == 0x000160, "Member 'FRigUnit_ExtractFeetIKData::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractFeetIKData, bSuccess) == 0x000168, "Member 'FRigUnit_ExtractFeetIKData::bSuccess' has a wrong offset!");
static_assert(offsetof(FRigUnit_ExtractFeetIKData, Data) == 0x000170, "Member 'FRigUnit_ExtractFeetIKData::Data' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.FeetIKSystemFootData
// 0x00D0 (0x00D0 - 0x0000)
struct FFeetIKSystemFootData final
{
public:
	struct FVector                                InitialLocation;                                   // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0080(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentOffset;                                     // 0x0098(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x00B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformationAlpha;                               // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRaycastHit;                                       // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeetIKSystemFootData) == 0x000010, "Wrong alignment on FFeetIKSystemFootData");
static_assert(sizeof(FFeetIKSystemFootData) == 0x0000D0, "Wrong size on FFeetIKSystemFootData");
static_assert(offsetof(FFeetIKSystemFootData, InitialLocation) == 0x000000, "Member 'FFeetIKSystemFootData::InitialLocation' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemFootData, Transform) == 0x000020, "Member 'FFeetIKSystemFootData::Transform' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemFootData, TargetOffset) == 0x000080, "Member 'FFeetIKSystemFootData::TargetOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemFootData, CurrentOffset) == 0x000098, "Member 'FFeetIKSystemFootData::CurrentOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemFootData, Normal) == 0x0000B0, "Member 'FFeetIKSystemFootData::Normal' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemFootData, TransformationAlpha) == 0x0000C8, "Member 'FFeetIKSystemFootData::TransformationAlpha' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemFootData, bRaycastHit) == 0x0000CC, "Member 'FFeetIKSystemFootData::bRaycastHit' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.FeetIKSystemLeanSettings
// 0x0048 (0x0048 - 0x0000)
struct FFeetIKSystemLeanSettings final
{
public:
	TArray<class FName>                           LeanBones;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         BonesNum;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           LeanBonesRotationSettings;                         // 0x0014(0x0008)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LeanBonesRotationAlpha;                            // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         MaxForwardLeanOffsetAngle;                         // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBackwardLeanOffsetAngle;                        // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSideLeanOffsetAngle;                            // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLeanCheckValue;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValueToLean;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLeanRatio;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeetIKSystemLeanSettings) == 0x000008, "Wrong alignment on FFeetIKSystemLeanSettings");
static_assert(sizeof(FFeetIKSystemLeanSettings) == 0x000048, "Wrong size on FFeetIKSystemLeanSettings");
static_assert(offsetof(FFeetIKSystemLeanSettings, LeanBones) == 0x000000, "Member 'FFeetIKSystemLeanSettings::LeanBones' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, BonesNum) == 0x000010, "Member 'FFeetIKSystemLeanSettings::BonesNum' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, LeanBonesRotationSettings) == 0x000014, "Member 'FFeetIKSystemLeanSettings::LeanBonesRotationSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, LeanBonesRotationAlpha) == 0x000020, "Member 'FFeetIKSystemLeanSettings::LeanBonesRotationAlpha' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, MaxForwardLeanOffsetAngle) == 0x000030, "Member 'FFeetIKSystemLeanSettings::MaxForwardLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, MaxBackwardLeanOffsetAngle) == 0x000034, "Member 'FFeetIKSystemLeanSettings::MaxBackwardLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, MaxSideLeanOffsetAngle) == 0x000038, "Member 'FFeetIKSystemLeanSettings::MaxSideLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, MaxLeanCheckValue) == 0x00003C, "Member 'FFeetIKSystemLeanSettings::MaxLeanCheckValue' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, MinValueToLean) == 0x000040, "Member 'FFeetIKSystemLeanSettings::MinValueToLean' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemLeanSettings, MinLeanRatio) == 0x000044, "Member 'FFeetIKSystemLeanSettings::MinLeanRatio' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.FeetIKSystemData
// 0x00B8 (0x00B8 - 0x0000)
struct FFeetIKSystemData final
{
public:
	TArray<struct FPBIKEffector>                  Effectors;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                FloorNormal;                                       // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SlopeNormal;                                       // 0x0028(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnevenGround;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedRatio;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PelvisOffset;                                      // 0x0048(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFeetIKSystemFootData>          FeetData;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          UpperBodyOffsetRotations;                          // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                PelvisUp;                                          // 0x0080(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisOffsetHeight;                                // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PelvisSneakOffset;                                 // 0x00A0(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeetIKSystemData) == 0x000008, "Wrong alignment on FFeetIKSystemData");
static_assert(sizeof(FFeetIKSystemData) == 0x0000B8, "Wrong size on FFeetIKSystemData");
static_assert(offsetof(FFeetIKSystemData, Effectors) == 0x000000, "Member 'FFeetIKSystemData::Effectors' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, FloorNormal) == 0x000010, "Member 'FFeetIKSystemData::FloorNormal' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, SlopeNormal) == 0x000028, "Member 'FFeetIKSystemData::SlopeNormal' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, bUnevenGround) == 0x000040, "Member 'FFeetIKSystemData::bUnevenGround' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, SpeedRatio) == 0x000044, "Member 'FFeetIKSystemData::SpeedRatio' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, PelvisOffset) == 0x000048, "Member 'FFeetIKSystemData::PelvisOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, FeetData) == 0x000060, "Member 'FFeetIKSystemData::FeetData' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, UpperBodyOffsetRotations) == 0x000070, "Member 'FFeetIKSystemData::UpperBodyOffsetRotations' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, PelvisUp) == 0x000080, "Member 'FFeetIKSystemData::PelvisUp' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, PelvisOffsetHeight) == 0x000098, "Member 'FFeetIKSystemData::PelvisOffsetHeight' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemData, PelvisSneakOffset) == 0x0000A0, "Member 'FFeetIKSystemData::PelvisSneakOffset' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.FeetIKSystemSettings
// 0x0128 (0x0128 - 0x0000)
struct FFeetIKSystemSettings final
{
public:
	struct FVector                                UpVector;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PelvisBone;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FeetBones;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FPBIKBoneSetting>               BoneSettings;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	int32                                         FBIKIterations;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorTolerance;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorMaxDistanceToTransform;                       // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorCheckOffset;                                  // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootCheckOffset;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakFootCheckOffset;                              // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HalfFloorRaycastNum;                               // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorRaycastNum;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinUnevenGroundValue;                              // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeedPelvisOffsetSmoothing;                    // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisHeight;                                      // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyRadius;                                        // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FeetNum;                                           // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FeetRotationAlpha;                                 // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FloorNormalSettings;                               // 0x0090(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           PelvisOffsetSettings;                              // 0x0098(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FootOffsetSettings;                                // 0x00A0(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FootNormalSettings;                                // 0x00A8(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           SpeedRatioSettings;                                // 0x00B0(0x0008)(Edit, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKSystemLeanSettings              LeanSettings;                                      // 0x00B8(0x0048)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	float                                         MaxFeetHeightOffset;                               // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapMaxDistanceToCapsule;                          // 0x0104(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBone;                                          // 0x0108(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFeetCanRotate;                                    // 0x0110(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootRotationAlpha;                                 // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlopeYToSneak;                                  // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakMovementPelvisOffsetScale;                    // 0x011C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakPelvisFeetHeightScale;                        // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSneakPelvisOffset;                              // 0x0124(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeetIKSystemSettings) == 0x000008, "Wrong alignment on FFeetIKSystemSettings");
static_assert(sizeof(FFeetIKSystemSettings) == 0x000128, "Wrong size on FFeetIKSystemSettings");
static_assert(offsetof(FFeetIKSystemSettings, UpVector) == 0x000000, "Member 'FFeetIKSystemSettings::UpVector' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, PelvisBone) == 0x000030, "Member 'FFeetIKSystemSettings::PelvisBone' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FeetBones) == 0x000038, "Member 'FFeetIKSystemSettings::FeetBones' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, BoneSettings) == 0x000048, "Member 'FFeetIKSystemSettings::BoneSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FBIKIterations) == 0x000058, "Member 'FFeetIKSystemSettings::FBIKIterations' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FloorTolerance) == 0x00005C, "Member 'FFeetIKSystemSettings::FloorTolerance' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FloorMaxDistanceToTransform) == 0x000060, "Member 'FFeetIKSystemSettings::FloorMaxDistanceToTransform' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FloorCheckOffset) == 0x000064, "Member 'FFeetIKSystemSettings::FloorCheckOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FootCheckOffset) == 0x000068, "Member 'FFeetIKSystemSettings::FootCheckOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, SneakFootCheckOffset) == 0x00006C, "Member 'FFeetIKSystemSettings::SneakFootCheckOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, HalfFloorRaycastNum) == 0x000070, "Member 'FFeetIKSystemSettings::HalfFloorRaycastNum' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FloorRaycastNum) == 0x000074, "Member 'FFeetIKSystemSettings::FloorRaycastNum' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, MinUnevenGroundValue) == 0x000078, "Member 'FFeetIKSystemSettings::MinUnevenGroundValue' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, HighSpeedPelvisOffsetSmoothing) == 0x00007C, "Member 'FFeetIKSystemSettings::HighSpeedPelvisOffsetSmoothing' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, PelvisHeight) == 0x000080, "Member 'FFeetIKSystemSettings::PelvisHeight' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, BodyRadius) == 0x000084, "Member 'FFeetIKSystemSettings::BodyRadius' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FeetNum) == 0x000088, "Member 'FFeetIKSystemSettings::FeetNum' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FeetRotationAlpha) == 0x00008C, "Member 'FFeetIKSystemSettings::FeetRotationAlpha' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FloorNormalSettings) == 0x000090, "Member 'FFeetIKSystemSettings::FloorNormalSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, PelvisOffsetSettings) == 0x000098, "Member 'FFeetIKSystemSettings::PelvisOffsetSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FootOffsetSettings) == 0x0000A0, "Member 'FFeetIKSystemSettings::FootOffsetSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, FootNormalSettings) == 0x0000A8, "Member 'FFeetIKSystemSettings::FootNormalSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, SpeedRatioSettings) == 0x0000B0, "Member 'FFeetIKSystemSettings::SpeedRatioSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, LeanSettings) == 0x0000B8, "Member 'FFeetIKSystemSettings::LeanSettings' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, MaxFeetHeightOffset) == 0x000100, "Member 'FFeetIKSystemSettings::MaxFeetHeightOffset' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, SnapMaxDistanceToCapsule) == 0x000104, "Member 'FFeetIKSystemSettings::SnapMaxDistanceToCapsule' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, RootBone) == 0x000108, "Member 'FFeetIKSystemSettings::RootBone' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, bFeetCanRotate) == 0x000110, "Member 'FFeetIKSystemSettings::bFeetCanRotate' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, RootRotationAlpha) == 0x000114, "Member 'FFeetIKSystemSettings::RootRotationAlpha' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, MinSlopeYToSneak) == 0x000118, "Member 'FFeetIKSystemSettings::MinSlopeYToSneak' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, SneakMovementPelvisOffsetScale) == 0x00011C, "Member 'FFeetIKSystemSettings::SneakMovementPelvisOffsetScale' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, SneakPelvisFeetHeightScale) == 0x000120, "Member 'FFeetIKSystemSettings::SneakPelvisFeetHeightScale' has a wrong offset!");
static_assert(offsetof(FFeetIKSystemSettings, MaxSneakPelvisOffset) == 0x000124, "Member 'FFeetIKSystemSettings::MaxSneakPelvisOffset' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_FeetIKBaseMutable
// 0x0000 (0x0160 - 0x0160)
struct FRigUnit_FeetIKBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_FeetIKBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_FeetIKBaseMutable");
static_assert(sizeof(FRigUnit_FeetIKBaseMutable) == 0x000160, "Wrong size on FRigUnit_FeetIKBaseMutable");

// ScriptStruct AnimationNodeRuntime.RigUnit_InitBiped
// 0x03A0 (0x0500 - 0x0160)
struct FRigUnit_InitBiped final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FActorFeetIKData                       InData;                                            // 0x0160(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  InSettings;                                        // 0x01F0(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0318(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFeetIKSystemData                      OutData;                                           // 0x0320(0x00B8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  OutSettings;                                       // 0x03D8(0x0128)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_InitBiped) == 0x000010, "Wrong alignment on FRigUnit_InitBiped");
static_assert(sizeof(FRigUnit_InitBiped) == 0x000500, "Wrong size on FRigUnit_InitBiped");
static_assert(offsetof(FRigUnit_InitBiped, InData) == 0x000160, "Member 'FRigUnit_InitBiped::InData' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitBiped, InSettings) == 0x0001F0, "Member 'FRigUnit_InitBiped::InSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitBiped, bSuccess) == 0x000318, "Member 'FRigUnit_InitBiped::bSuccess' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitBiped, OutData) == 0x000320, "Member 'FRigUnit_InitBiped::OutData' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitBiped, OutSettings) == 0x0003D8, "Member 'FRigUnit_InitBiped::OutSettings' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_InitLeaningBiped
// 0x03A0 (0x0500 - 0x0160)
struct FRigUnit_InitLeaningBiped final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FActorFeetIKData                       InData;                                            // 0x0160(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  InSettings;                                        // 0x01F0(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0318(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFeetIKSystemData                      OutData;                                           // 0x0320(0x00B8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  OutSettings;                                       // 0x03D8(0x0128)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_InitLeaningBiped) == 0x000010, "Wrong alignment on FRigUnit_InitLeaningBiped");
static_assert(sizeof(FRigUnit_InitLeaningBiped) == 0x000500, "Wrong size on FRigUnit_InitLeaningBiped");
static_assert(offsetof(FRigUnit_InitLeaningBiped, InData) == 0x000160, "Member 'FRigUnit_InitLeaningBiped::InData' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitLeaningBiped, InSettings) == 0x0001F0, "Member 'FRigUnit_InitLeaningBiped::InSettings' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitLeaningBiped, bSuccess) == 0x000318, "Member 'FRigUnit_InitLeaningBiped::bSuccess' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitLeaningBiped, OutData) == 0x000320, "Member 'FRigUnit_InitLeaningBiped::OutData' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitLeaningBiped, OutSettings) == 0x0003D8, "Member 'FRigUnit_InitLeaningBiped::OutSettings' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_InitSpineRotationAlphas
// 0x01B0 (0x0310 - 0x0160)
struct FRigUnit_InitSpineRotationAlphas final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemSettings                  Settings;                                          // 0x0160(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0288(0x0088)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_InitSpineRotationAlphas) == 0x000010, "Wrong alignment on FRigUnit_InitSpineRotationAlphas");
static_assert(sizeof(FRigUnit_InitSpineRotationAlphas) == 0x000310, "Wrong size on FRigUnit_InitSpineRotationAlphas");
static_assert(offsetof(FRigUnit_InitSpineRotationAlphas, Settings) == 0x000160, "Member 'FRigUnit_InitSpineRotationAlphas::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_InitSpineRotationAlphas, Curve) == 0x000288, "Member 'FRigUnit_InitSpineRotationAlphas::Curve' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_CalculateFloorAndSlopeNormal
// 0x0240 (0x03A0 - 0x0160)
struct FRigUnit_CalculateFloorAndSlopeNormal final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemSettings                  Settings;                                          // 0x0160(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFeetIKSystemData                      Data;                                              // 0x0288(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        HitLocations;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                AverageHitNormal;                                  // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewFloorNormal;                                    // 0x0368(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewSlopeNormal;                                    // 0x0380(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_CalculateFloorAndSlopeNormal) == 0x000010, "Wrong alignment on FRigUnit_CalculateFloorAndSlopeNormal");
static_assert(sizeof(FRigUnit_CalculateFloorAndSlopeNormal) == 0x0003A0, "Wrong size on FRigUnit_CalculateFloorAndSlopeNormal");
static_assert(offsetof(FRigUnit_CalculateFloorAndSlopeNormal, Settings) == 0x000160, "Member 'FRigUnit_CalculateFloorAndSlopeNormal::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculateFloorAndSlopeNormal, Data) == 0x000288, "Member 'FRigUnit_CalculateFloorAndSlopeNormal::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculateFloorAndSlopeNormal, HitLocations) == 0x000340, "Member 'FRigUnit_CalculateFloorAndSlopeNormal::HitLocations' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculateFloorAndSlopeNormal, AverageHitNormal) == 0x000350, "Member 'FRigUnit_CalculateFloorAndSlopeNormal::AverageHitNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculateFloorAndSlopeNormal, NewFloorNormal) == 0x000368, "Member 'FRigUnit_CalculateFloorAndSlopeNormal::NewFloorNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculateFloorAndSlopeNormal, NewSlopeNormal) == 0x000380, "Member 'FRigUnit_CalculateFloorAndSlopeNormal::NewSlopeNormal' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_UpdateFloorAndSlopeNormal
// 0x00F0 (0x0250 - 0x0160)
struct FRigUnit_UpdateFloorAndSlopeNormal final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                NewFloorNormal;                                    // 0x0218(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewSlopeNormal;                                    // 0x0230(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_UpdateFloorAndSlopeNormal) == 0x000010, "Wrong alignment on FRigUnit_UpdateFloorAndSlopeNormal");
static_assert(sizeof(FRigUnit_UpdateFloorAndSlopeNormal) == 0x000250, "Wrong size on FRigUnit_UpdateFloorAndSlopeNormal");
static_assert(offsetof(FRigUnit_UpdateFloorAndSlopeNormal, Data) == 0x000160, "Member 'FRigUnit_UpdateFloorAndSlopeNormal::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFloorAndSlopeNormal, NewFloorNormal) == 0x000218, "Member 'FRigUnit_UpdateFloorAndSlopeNormal::NewFloorNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFloorAndSlopeNormal, NewSlopeNormal) == 0x000230, "Member 'FRigUnit_UpdateFloorAndSlopeNormal::NewSlopeNormal' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_UpdateFootData
// 0x0160 (0x02C0 - 0x0160)
struct FRigUnit_UpdateFootData final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0220(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHit;                                           // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x0288(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x02A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformationAlpha;                               // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_UpdateFootData) == 0x000010, "Wrong alignment on FRigUnit_UpdateFootData");
static_assert(sizeof(FRigUnit_UpdateFootData) == 0x0002C0, "Wrong size on FRigUnit_UpdateFootData");
static_assert(offsetof(FRigUnit_UpdateFootData, Data) == 0x000160, "Member 'FRigUnit_UpdateFootData::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFootData, Index) == 0x000218, "Member 'FRigUnit_UpdateFootData::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFootData, StartTransform) == 0x000220, "Member 'FRigUnit_UpdateFootData::StartTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFootData, bHasHit) == 0x000280, "Member 'FRigUnit_UpdateFootData::bHasHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFootData, TargetOffset) == 0x000288, "Member 'FRigUnit_UpdateFootData::TargetOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFootData, HitNormal) == 0x0002A0, "Member 'FRigUnit_UpdateFootData::HitNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateFootData, TransformationAlpha) == 0x0002B8, "Member 'FRigUnit_UpdateFootData::TransformationAlpha' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_UpdateBipedFootData
// 0x0290 (0x03F0 - 0x0160)
struct FRigUnit_UpdateBipedFootData final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  Settings;                                          // 0x0218(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_344[0xC];                                      // 0x0344(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0350(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHit;                                           // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x03D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformationAlpha;                               // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_UpdateBipedFootData) == 0x000010, "Wrong alignment on FRigUnit_UpdateBipedFootData");
static_assert(sizeof(FRigUnit_UpdateBipedFootData) == 0x0003F0, "Wrong size on FRigUnit_UpdateBipedFootData");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, Data) == 0x000160, "Member 'FRigUnit_UpdateBipedFootData::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, Settings) == 0x000218, "Member 'FRigUnit_UpdateBipedFootData::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, Index) == 0x000340, "Member 'FRigUnit_UpdateBipedFootData::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, StartTransform) == 0x000350, "Member 'FRigUnit_UpdateBipedFootData::StartTransform' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, bHasHit) == 0x0003B0, "Member 'FRigUnit_UpdateBipedFootData::bHasHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, TargetOffset) == 0x0003B8, "Member 'FRigUnit_UpdateBipedFootData::TargetOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, HitNormal) == 0x0003D0, "Member 'FRigUnit_UpdateBipedFootData::HitNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateBipedFootData, TransformationAlpha) == 0x0003E8, "Member 'FRigUnit_UpdateBipedFootData::TransformationAlpha' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigVMFunction_CalculateFootTransformationAlpha
// 0x0040 (0x0048 - 0x0008)
struct FRigVMFunction_CalculateFootTransformationAlpha final : public FRigVMStruct
{
public:
	struct FVector                                FootStart;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorTolerance;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorMaxDistanceToTransform;                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ALPHA;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigVMFunction_CalculateFootTransformationAlpha) == 0x000008, "Wrong alignment on FRigVMFunction_CalculateFootTransformationAlpha");
static_assert(sizeof(FRigVMFunction_CalculateFootTransformationAlpha) == 0x000048, "Wrong size on FRigVMFunction_CalculateFootTransformationAlpha");
static_assert(offsetof(FRigVMFunction_CalculateFootTransformationAlpha, FootStart) == 0x000008, "Member 'FRigVMFunction_CalculateFootTransformationAlpha::FootStart' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_CalculateFootTransformationAlpha, TraceStart) == 0x000020, "Member 'FRigVMFunction_CalculateFootTransformationAlpha::TraceStart' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_CalculateFootTransformationAlpha, FloorTolerance) == 0x000038, "Member 'FRigVMFunction_CalculateFootTransformationAlpha::FloorTolerance' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_CalculateFootTransformationAlpha, FloorMaxDistanceToTransform) == 0x00003C, "Member 'FRigVMFunction_CalculateFootTransformationAlpha::FloorMaxDistanceToTransform' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_CalculateFootTransformationAlpha, ALPHA) == 0x000040, "Member 'FRigVMFunction_CalculateFootTransformationAlpha::ALPHA' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_CalculatePelvisOffset
// 0x0200 (0x0360 - 0x0160)
struct FRigUnit_CalculatePelvisOffset : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  Settings;                                          // 0x0218(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PelvisOffset;                                      // 0x0348(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_CalculatePelvisOffset) == 0x000010, "Wrong alignment on FRigUnit_CalculatePelvisOffset");
static_assert(sizeof(FRigUnit_CalculatePelvisOffset) == 0x000360, "Wrong size on FRigUnit_CalculatePelvisOffset");
static_assert(offsetof(FRigUnit_CalculatePelvisOffset, Data) == 0x000160, "Member 'FRigUnit_CalculatePelvisOffset::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculatePelvisOffset, Settings) == 0x000218, "Member 'FRigUnit_CalculatePelvisOffset::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculatePelvisOffset, bIsMoving) == 0x000340, "Member 'FRigUnit_CalculatePelvisOffset::bIsMoving' has a wrong offset!");
static_assert(offsetof(FRigUnit_CalculatePelvisOffset, PelvisOffset) == 0x000348, "Member 'FRigUnit_CalculatePelvisOffset::PelvisOffset' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_CalculateHumanoidPelvisOffset
// 0x0010 (0x0370 - 0x0360)
struct FRigUnit_CalculateHumanoidPelvisOffset final : public FRigUnit_CalculatePelvisOffset
{
public:
	bool                                          bIsSneaking;                                       // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_361[0xF];                                      // 0x0361(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_CalculateHumanoidPelvisOffset) == 0x000010, "Wrong alignment on FRigUnit_CalculateHumanoidPelvisOffset");
static_assert(sizeof(FRigUnit_CalculateHumanoidPelvisOffset) == 0x000370, "Wrong size on FRigUnit_CalculateHumanoidPelvisOffset");
static_assert(offsetof(FRigUnit_CalculateHumanoidPelvisOffset, bIsSneaking) == 0x000360, "Member 'FRigUnit_CalculateHumanoidPelvisOffset::bIsSneaking' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_UpdatePelvisOffset
// 0x00D0 (0x0230 - 0x0160)
struct FRigUnit_UpdatePelvisOffset final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                PelvisOffset;                                      // 0x0218(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_UpdatePelvisOffset) == 0x000010, "Wrong alignment on FRigUnit_UpdatePelvisOffset");
static_assert(sizeof(FRigUnit_UpdatePelvisOffset) == 0x000230, "Wrong size on FRigUnit_UpdatePelvisOffset");
static_assert(offsetof(FRigUnit_UpdatePelvisOffset, Data) == 0x000160, "Member 'FRigUnit_UpdatePelvisOffset::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdatePelvisOffset, PelvisOffset) == 0x000218, "Member 'FRigUnit_UpdatePelvisOffset::PelvisOffset' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_AdjustFoot
// 0x0100 (0x0260 - 0x0160)
struct FRigUnit_AdjustFoot final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewOffset;                                         // 0x0220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NewRotation;                                       // 0x0240(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_AdjustFoot) == 0x000010, "Wrong alignment on FRigUnit_AdjustFoot");
static_assert(sizeof(FRigUnit_AdjustFoot) == 0x000260, "Wrong size on FRigUnit_AdjustFoot");
static_assert(offsetof(FRigUnit_AdjustFoot, Data) == 0x000160, "Member 'FRigUnit_AdjustFoot::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_AdjustFoot, Index) == 0x000218, "Member 'FRigUnit_AdjustFoot::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_AdjustFoot, NewOffset) == 0x000220, "Member 'FRigUnit_AdjustFoot::NewOffset' has a wrong offset!");
static_assert(offsetof(FRigUnit_AdjustFoot, NewRotation) == 0x000240, "Member 'FRigUnit_AdjustFoot::NewRotation' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_GetSpineTargetOffsetRotations
// 0x0200 (0x0360 - 0x0160)
struct FRigUnit_GetSpineTargetOffsetRotations final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFeetIKSystemSettings                  Settings;                                          // 0x0218(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SpeedRatio;                                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanLean;                                          // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuat>                          TargetOffsetRotations;                             // 0x0348(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_GetSpineTargetOffsetRotations) == 0x000010, "Wrong alignment on FRigUnit_GetSpineTargetOffsetRotations");
static_assert(sizeof(FRigUnit_GetSpineTargetOffsetRotations) == 0x000360, "Wrong size on FRigUnit_GetSpineTargetOffsetRotations");
static_assert(offsetof(FRigUnit_GetSpineTargetOffsetRotations, Data) == 0x000160, "Member 'FRigUnit_GetSpineTargetOffsetRotations::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpineTargetOffsetRotations, Settings) == 0x000218, "Member 'FRigUnit_GetSpineTargetOffsetRotations::Settings' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpineTargetOffsetRotations, SpeedRatio) == 0x000340, "Member 'FRigUnit_GetSpineTargetOffsetRotations::SpeedRatio' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpineTargetOffsetRotations, bCanLean) == 0x000344, "Member 'FRigUnit_GetSpineTargetOffsetRotations::bCanLean' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetSpineTargetOffsetRotations, TargetOffsetRotations) == 0x000348, "Member 'FRigUnit_GetSpineTargetOffsetRotations::TargetOffsetRotations' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_UpdateUpperBodyBoneOffsetRotation
// 0x00E0 (0x0240 - 0x0160)
struct FRigUnit_UpdateUpperBodyBoneOffsetRotation final : public FRigUnit_FeetIKBaseMutable
{
public:
	struct FFeetIKSystemData                      Data;                                              // 0x0160(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NewOffset;                                         // 0x0220(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_UpdateUpperBodyBoneOffsetRotation) == 0x000010, "Wrong alignment on FRigUnit_UpdateUpperBodyBoneOffsetRotation");
static_assert(sizeof(FRigUnit_UpdateUpperBodyBoneOffsetRotation) == 0x000240, "Wrong size on FRigUnit_UpdateUpperBodyBoneOffsetRotation");
static_assert(offsetof(FRigUnit_UpdateUpperBodyBoneOffsetRotation, Data) == 0x000160, "Member 'FRigUnit_UpdateUpperBodyBoneOffsetRotation::Data' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateUpperBodyBoneOffsetRotation, Index) == 0x000218, "Member 'FRigUnit_UpdateUpperBodyBoneOffsetRotation::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_UpdateUpperBodyBoneOffsetRotation, NewOffset) == 0x000220, "Member 'FRigUnit_UpdateUpperBodyBoneOffsetRotation::NewOffset' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigVMFunction_FeetIKTrace
// 0x0068 (0x0070 - 0x0008)
struct FRigVMFunction_FeetIKTrace final : public FRigVMStruct
{
public:
	struct FVector                                Start;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigVMFunction_FeetIKTrace) == 0x000008, "Wrong alignment on FRigVMFunction_FeetIKTrace");
static_assert(sizeof(FRigVMFunction_FeetIKTrace) == 0x000070, "Wrong size on FRigVMFunction_FeetIKTrace");
static_assert(offsetof(FRigVMFunction_FeetIKTrace, Start) == 0x000008, "Member 'FRigVMFunction_FeetIKTrace::Start' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_FeetIKTrace, End) == 0x000020, "Member 'FRigVMFunction_FeetIKTrace::End' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_FeetIKTrace, bHit) == 0x000038, "Member 'FRigVMFunction_FeetIKTrace::bHit' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_FeetIKTrace, HitLocation) == 0x000040, "Member 'FRigVMFunction_FeetIKTrace::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigVMFunction_FeetIKTrace, HitNormal) == 0x000058, "Member 'FRigVMFunction_FeetIKTrace::HitNormal' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_MathLibraryBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_MathLibraryBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_MathLibraryBase) == 0x000008, "Wrong alignment on FRigUnit_MathLibraryBase");
static_assert(sizeof(FRigUnit_MathLibraryBase) == 0x000008, "Wrong size on FRigUnit_MathLibraryBase");

// ScriptStruct AnimationNodeRuntime.RigUnit_ProjectVectorOntoVector
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_ProjectVectorOntoVector final : public FRigUnit_MathLibraryBase
{
public:
	struct FVector                                InVector;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetVector;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutVector;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ProjectVectorOntoVector) == 0x000008, "Wrong alignment on FRigUnit_ProjectVectorOntoVector");
static_assert(sizeof(FRigUnit_ProjectVectorOntoVector) == 0x000050, "Wrong size on FRigUnit_ProjectVectorOntoVector");
static_assert(offsetof(FRigUnit_ProjectVectorOntoVector, InVector) == 0x000008, "Member 'FRigUnit_ProjectVectorOntoVector::InVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectVectorOntoVector, TargetVector) == 0x000020, "Member 'FRigUnit_ProjectVectorOntoVector::TargetVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectVectorOntoVector, OutVector) == 0x000038, "Member 'FRigUnit_ProjectVectorOntoVector::OutVector' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_ProjectVectorOntoPlane
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_ProjectVectorOntoPlane final : public FRigUnit_MathLibraryBase
{
public:
	struct FVector                                InVector;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutVector;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_ProjectVectorOntoPlane) == 0x000008, "Wrong alignment on FRigUnit_ProjectVectorOntoPlane");
static_assert(sizeof(FRigUnit_ProjectVectorOntoPlane) == 0x000050, "Wrong size on FRigUnit_ProjectVectorOntoPlane");
static_assert(offsetof(FRigUnit_ProjectVectorOntoPlane, InVector) == 0x000008, "Member 'FRigUnit_ProjectVectorOntoPlane::InVector' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectVectorOntoPlane, PlaneNormal) == 0x000020, "Member 'FRigUnit_ProjectVectorOntoPlane::PlaneNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_ProjectVectorOntoPlane, OutVector) == 0x000038, "Member 'FRigUnit_ProjectVectorOntoPlane::OutVector' has a wrong offset!");

// ScriptStruct AnimationNodeRuntime.RigUnit_GetReflectionVector
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_GetReflectionVector final : public FRigUnit_MathLibraryBase
{
public:
	struct FVector                                Direction;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutVector;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetReflectionVector) == 0x000008, "Wrong alignment on FRigUnit_GetReflectionVector");
static_assert(sizeof(FRigUnit_GetReflectionVector) == 0x000050, "Wrong size on FRigUnit_GetReflectionVector");
static_assert(offsetof(FRigUnit_GetReflectionVector, Direction) == 0x000008, "Member 'FRigUnit_GetReflectionVector::Direction' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetReflectionVector, SurfaceNormal) == 0x000020, "Member 'FRigUnit_GetReflectionVector::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetReflectionVector, OutVector) == 0x000038, "Member 'FRigUnit_GetReflectionVector::OutVector' has a wrong offset!");

}

