#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Amulet

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_Amulet.ABP_Amulet_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Amulet_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Amulet_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Amulet_C_AnimGraph");
static_assert(sizeof(ABP_Amulet_C_AnimGraph) == 0x000010, "Wrong size on ABP_Amulet_C_AnimGraph");
static_assert(offsetof(ABP_Amulet_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Amulet_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Amulet.ABP_Amulet_C.ExecuteUbergraph_ABP_Amulet
// 0x0004 (0x0004 - 0x0000)
struct ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet) == 0x000004, "Wrong alignment on ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet");
static_assert(sizeof(ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet) == 0x000004, "Wrong size on ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet");
static_assert(offsetof(ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet, EntryPoint) == 0x000000, "Member 'ABP_Amulet_C_ExecuteUbergraph_ABP_Amulet::EntryPoint' has a wrong offset!");

// Function ABP_Amulet.ABP_Amulet_C.SetOffsetTransforms
// 0x0150 (0x0150 - 0x0000)
struct ABP_Amulet_C_SetOffsetTransforms final
{
public:
	struct FTransform                             NeckTransform;                                     // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SpineTransform;                                    // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Amulet_C_SetOffsetTransforms) == 0x000010, "Wrong alignment on ABP_Amulet_C_SetOffsetTransforms");
static_assert(sizeof(ABP_Amulet_C_SetOffsetTransforms) == 0x000150, "Wrong size on ABP_Amulet_C_SetOffsetTransforms");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, NeckTransform) == 0x000000, "Member 'ABP_Amulet_C_SetOffsetTransforms::NeckTransform' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, SpineTransform) == 0x000060, "Member 'ABP_Amulet_C_SetOffsetTransforms::SpineTransform' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'ABP_Amulet_C_SetOffsetTransforms::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, CallFunc_BreakTransform_Rotation) == 0x0000D8, "Member 'ABP_Amulet_C_SetOffsetTransforms::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, CallFunc_BreakTransform_Scale) == 0x0000F0, "Member 'ABP_Amulet_C_SetOffsetTransforms::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, CallFunc_BreakTransform_Location_1) == 0x000108, "Member 'ABP_Amulet_C_SetOffsetTransforms::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, CallFunc_BreakTransform_Rotation_1) == 0x000120, "Member 'ABP_Amulet_C_SetOffsetTransforms::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetOffsetTransforms, CallFunc_BreakTransform_Scale_1) == 0x000138, "Member 'ABP_Amulet_C_SetOffsetTransforms::CallFunc_BreakTransform_Scale_1' has a wrong offset!");

// Function ABP_Amulet.ABP_Amulet_C.SetSnappingAlpha
// 0x0020 (0x0020 - 0x0000)
struct ABP_Amulet_C_SetSnappingAlpha final
{
public:
	double                                        ALPHA;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSpine04;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Amulet_C_SetSnappingAlpha) == 0x000008, "Wrong alignment on ABP_Amulet_C_SetSnappingAlpha");
static_assert(sizeof(ABP_Amulet_C_SetSnappingAlpha) == 0x000020, "Wrong size on ABP_Amulet_C_SetSnappingAlpha");
static_assert(offsetof(ABP_Amulet_C_SetSnappingAlpha, ALPHA) == 0x000000, "Member 'ABP_Amulet_C_SetSnappingAlpha::ALPHA' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetSnappingAlpha, bUseSpine04) == 0x000008, "Member 'ABP_Amulet_C_SetSnappingAlpha::bUseSpine04' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetSnappingAlpha, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'ABP_Amulet_C_SetSnappingAlpha::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Amulet_C_SetSnappingAlpha, CallFunc_SelectFloat_ReturnValue_1) == 0x000018, "Member 'ABP_Amulet_C_SetSnappingAlpha::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

}

