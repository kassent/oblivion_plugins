#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QMPUnrealIntegration

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum QMPUnrealIntegration.EUIEventType
// NumValues: 0x0002
enum class EUIEventType : uint8
{
	CLICK                                    = 0,
	EUIEventType_MAX                         = 1,
};

// Enum QMPUnrealIntegration.EKeyInputReplayInputType
// NumValues: 0x000C
enum class EKeyInputReplayInputType : uint8
{
	KeyDown                                  = 0,
	KeyUp                                    = 1,
	AnalogInput                              = 2,
	MouseMove                                = 3,
	MouseButtonDown                          = 4,
	MouseButtonUp                            = 5,
	MouseButtonDoubleClick                   = 6,
	MouseWheelOrGesture                      = 7,
	MotionDetected                           = 8,
	SkippedInput                             = 9,
	Invalid                                  = 10,
	EKeyInputReplayInputType_MAX             = 11,
};

// Enum QMPUnrealIntegration.EAIControllerState
// NumValues: 0x0005
enum class EAIControllerState : uint8
{
	DEFAULT                                  = 0,
	ISMOVINGTOINTERACT                       = 1,
	ENDMOVETOINTERACT                        = 2,
	RESYNCING                                = 4,
	EAIControllerState_MAX                   = 5,
};

// ScriptStruct QMPUnrealIntegration.GameLocationEntry
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FGameLocationEntry final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameLocationEntry) == 0x000008, "Wrong alignment on FGameLocationEntry");
static_assert(sizeof(FGameLocationEntry) == 0x000028, "Wrong size on FGameLocationEntry");

// ScriptStruct QMPUnrealIntegration.RecordEventInfo
// 0x0004 (0x0004 - 0x0000)
struct FRecordEventInfo
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecordEventInfo) == 0x000004, "Wrong alignment on FRecordEventInfo");
static_assert(sizeof(FRecordEventInfo) == 0x000004, "Wrong size on FRecordEventInfo");
static_assert(offsetof(FRecordEventInfo, Time) == 0x000000, "Member 'FRecordEventInfo::Time' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.SyncEventInfo
// 0x0014 (0x0018 - 0x0004)
struct FSyncEventInfo final : public FRecordEventInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSyncEventInfo) == 0x000008, "Wrong alignment on FSyncEventInfo");
static_assert(sizeof(FSyncEventInfo) == 0x000018, "Wrong size on FSyncEventInfo");
static_assert(offsetof(FSyncEventInfo, EventName) == 0x000008, "Member 'FSyncEventInfo::EventName' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.ActorEventInfo
// 0x002C (0x0030 - 0x0004)
struct FActorEventInfo final : public FRecordEventInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActorID;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorEquivalentID;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EventType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorEventInfo) == 0x000008, "Wrong alignment on FActorEventInfo");
static_assert(sizeof(FActorEventInfo) == 0x000030, "Wrong size on FActorEventInfo");
static_assert(offsetof(FActorEventInfo, ActorID) == 0x000008, "Member 'FActorEventInfo::ActorID' has a wrong offset!");
static_assert(offsetof(FActorEventInfo, ActorEquivalentID) == 0x000018, "Member 'FActorEventInfo::ActorEquivalentID' has a wrong offset!");
static_assert(offsetof(FActorEventInfo, EventType) == 0x000028, "Member 'FActorEventInfo::EventType' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.UIEvent
// 0x002C (0x0030 - 0x0004)
struct FUIEvent final : public FRecordEventInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PrimaryID;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondID;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIEventType                                  EventType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIEvent) == 0x000008, "Wrong alignment on FUIEvent");
static_assert(sizeof(FUIEvent) == 0x000030, "Wrong size on FUIEvent");
static_assert(offsetof(FUIEvent, PrimaryID) == 0x000008, "Member 'FUIEvent::PrimaryID' has a wrong offset!");
static_assert(offsetof(FUIEvent, SecondID) == 0x000018, "Member 'FUIEvent::SecondID' has a wrong offset!");
static_assert(offsetof(FUIEvent, EventType) == 0x000028, "Member 'FUIEvent::EventType' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.RecordHeader
// 0x0010 (0x0010 - 0x0000)
struct FRecordHeader final
{
public:
	bool                                          bGodModeAtStart;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastChunkCompressed;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndTime;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              RecordDuration;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecordHeader) == 0x000008, "Wrong alignment on FRecordHeader");
static_assert(sizeof(FRecordHeader) == 0x000010, "Wrong size on FRecordHeader");
static_assert(offsetof(FRecordHeader, bGodModeAtStart) == 0x000000, "Member 'FRecordHeader::bGodModeAtStart' has a wrong offset!");
static_assert(offsetof(FRecordHeader, bLastChunkCompressed) == 0x000001, "Member 'FRecordHeader::bLastChunkCompressed' has a wrong offset!");
static_assert(offsetof(FRecordHeader, EndTime) == 0x000004, "Member 'FRecordHeader::EndTime' has a wrong offset!");
static_assert(offsetof(FRecordHeader, RecordDuration) == 0x000008, "Member 'FRecordHeader::RecordDuration' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.KeyInputReplay_ModifierKeysState
// 0x0009 (0x0009 - 0x0000)
struct FKeyInputReplay_ModifierKeysState final
{
public:
	bool                                          bIsLeftShiftDown;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightShiftDown;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftControlDown;                                // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightControlDown;                               // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftAltDown;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightAltDown;                                   // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftCommandDown;                                // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightCommandDown;                               // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreCapsLocked;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyInputReplay_ModifierKeysState) == 0x000001, "Wrong alignment on FKeyInputReplay_ModifierKeysState");
static_assert(sizeof(FKeyInputReplay_ModifierKeysState) == 0x000009, "Wrong size on FKeyInputReplay_ModifierKeysState");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsLeftShiftDown) == 0x000000, "Member 'FKeyInputReplay_ModifierKeysState::bIsLeftShiftDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsRightShiftDown) == 0x000001, "Member 'FKeyInputReplay_ModifierKeysState::bIsRightShiftDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsLeftControlDown) == 0x000002, "Member 'FKeyInputReplay_ModifierKeysState::bIsLeftControlDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsRightControlDown) == 0x000003, "Member 'FKeyInputReplay_ModifierKeysState::bIsRightControlDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsLeftAltDown) == 0x000004, "Member 'FKeyInputReplay_ModifierKeysState::bIsLeftAltDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsRightAltDown) == 0x000005, "Member 'FKeyInputReplay_ModifierKeysState::bIsRightAltDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsLeftCommandDown) == 0x000006, "Member 'FKeyInputReplay_ModifierKeysState::bIsLeftCommandDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bIsRightCommandDown) == 0x000007, "Member 'FKeyInputReplay_ModifierKeysState::bIsRightCommandDown' has a wrong offset!");
static_assert(offsetof(FKeyInputReplay_ModifierKeysState, bAreCapsLocked) == 0x000008, "Member 'FKeyInputReplay_ModifierKeysState::bAreCapsLocked' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.KeyInputReplayInputEvents
// 0x0110 (0x0110 - 0x0000)
struct FKeyInputReplayInputEvents final
{
public:
	struct FKeyInputReplay_ModifierKeysState      ModifierKeys;                                      // 0x0000(0x0009)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsRepeat;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         UserIndex;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CharacterCode;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         KeyCode;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogValue;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenSpacePosition;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LastScreenSpacePosition;                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CursorDelta;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           PressedButtons;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKey                                   EffectingButton;                                   // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PointerIndex;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelDelta;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Tilt;                                              // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationRate;                                      // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyInputReplayInputEvents) == 0x000008, "Wrong alignment on FKeyInputReplayInputEvents");
static_assert(sizeof(FKeyInputReplayInputEvents) == 0x000110, "Wrong size on FKeyInputReplayInputEvents");
static_assert(offsetof(FKeyInputReplayInputEvents, ModifierKeys) == 0x000000, "Member 'FKeyInputReplayInputEvents::ModifierKeys' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, bIsRepeat) == 0x000009, "Member 'FKeyInputReplayInputEvents::bIsRepeat' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, UserIndex) == 0x000010, "Member 'FKeyInputReplayInputEvents::UserIndex' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, Key) == 0x000018, "Member 'FKeyInputReplayInputEvents::Key' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, CharacterCode) == 0x000030, "Member 'FKeyInputReplayInputEvents::CharacterCode' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, KeyCode) == 0x000038, "Member 'FKeyInputReplayInputEvents::KeyCode' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, AnalogValue) == 0x000040, "Member 'FKeyInputReplayInputEvents::AnalogValue' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, ScreenSpacePosition) == 0x000048, "Member 'FKeyInputReplayInputEvents::ScreenSpacePosition' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, LastScreenSpacePosition) == 0x000058, "Member 'FKeyInputReplayInputEvents::LastScreenSpacePosition' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, CursorDelta) == 0x000068, "Member 'FKeyInputReplayInputEvents::CursorDelta' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, PressedButtons) == 0x000078, "Member 'FKeyInputReplayInputEvents::PressedButtons' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, EffectingButton) == 0x000088, "Member 'FKeyInputReplayInputEvents::EffectingButton' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, PointerIndex) == 0x0000A0, "Member 'FKeyInputReplayInputEvents::PointerIndex' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, WheelDelta) == 0x0000A8, "Member 'FKeyInputReplayInputEvents::WheelDelta' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, Tilt) == 0x0000B0, "Member 'FKeyInputReplayInputEvents::Tilt' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, RotationRate) == 0x0000C8, "Member 'FKeyInputReplayInputEvents::RotationRate' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, Gravity) == 0x0000E0, "Member 'FKeyInputReplayInputEvents::Gravity' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayInputEvents, Acceleration) == 0x0000F8, "Member 'FKeyInputReplayInputEvents::Acceleration' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.KeyInputReplayKeyData
// 0x0118 (0x0118 - 0x0000)
struct FKeyInputReplayKeyData final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyInputReplayInputType                      InputType;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyInputReplayInputEvents             InputEvents;                                       // 0x0008(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyInputReplayKeyData) == 0x000008, "Wrong alignment on FKeyInputReplayKeyData");
static_assert(sizeof(FKeyInputReplayKeyData) == 0x000118, "Wrong size on FKeyInputReplayKeyData");
static_assert(offsetof(FKeyInputReplayKeyData, Time) == 0x000000, "Member 'FKeyInputReplayKeyData::Time' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayKeyData, InputType) == 0x000004, "Member 'FKeyInputReplayKeyData::InputType' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayKeyData, InputEvents) == 0x000008, "Member 'FKeyInputReplayKeyData::InputEvents' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.KeyInputReplayActorData
// 0x0038 (0x0038 - 0x0000)
struct FKeyInputReplayActorData final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CharacterPosition;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ControlRotation;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyInputReplayActorData) == 0x000008, "Wrong alignment on FKeyInputReplayActorData");
static_assert(sizeof(FKeyInputReplayActorData) == 0x000038, "Wrong size on FKeyInputReplayActorData");
static_assert(offsetof(FKeyInputReplayActorData, Time) == 0x000000, "Member 'FKeyInputReplayActorData::Time' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayActorData, CharacterPosition) == 0x000008, "Member 'FKeyInputReplayActorData::CharacterPosition' has a wrong offset!");
static_assert(offsetof(FKeyInputReplayActorData, ControlRotation) == 0x000020, "Member 'FKeyInputReplayActorData::ControlRotation' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.InteractInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FInteractInfo final
{
public:
	struct FTransform                             ActorTransform;                                    // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorEquivalentID;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovable;                                        // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InteractNumber;                                    // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalInteractPoint;                                // 0x0088(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractInfo) == 0x000010, "Wrong alignment on FInteractInfo");
static_assert(sizeof(FInteractInfo) == 0x0000A0, "Wrong size on FInteractInfo");
static_assert(offsetof(FInteractInfo, ActorTransform) == 0x000000, "Member 'FInteractInfo::ActorTransform' has a wrong offset!");
static_assert(offsetof(FInteractInfo, ActorName) == 0x000060, "Member 'FInteractInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FInteractInfo, ActorEquivalentID) == 0x000070, "Member 'FInteractInfo::ActorEquivalentID' has a wrong offset!");
static_assert(offsetof(FInteractInfo, bIsMovable) == 0x000080, "Member 'FInteractInfo::bIsMovable' has a wrong offset!");
static_assert(offsetof(FInteractInfo, InteractNumber) == 0x000084, "Member 'FInteractInfo::InteractNumber' has a wrong offset!");
static_assert(offsetof(FInteractInfo, LocalInteractPoint) == 0x000088, "Member 'FInteractInfo::LocalInteractPoint' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.ResyncStruct
// 0x0008 (0x0008 - 0x0000)
struct FResyncStruct final
{
public:
	float                                         PositionDifMax;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDifMax;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResyncStruct) == 0x000004, "Wrong alignment on FResyncStruct");
static_assert(sizeof(FResyncStruct) == 0x000008, "Wrong size on FResyncStruct");
static_assert(offsetof(FResyncStruct, PositionDifMax) == 0x000000, "Member 'FResyncStruct::PositionDifMax' has a wrong offset!");
static_assert(offsetof(FResyncStruct, RotationDifMax) == 0x000004, "Member 'FResyncStruct::RotationDifMax' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.TraversalSnapshot
// 0x0008 (0x0008 - 0x0000)
struct FTraversalSnapshot final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractCount;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTraversalSnapshot) == 0x000004, "Wrong alignment on FTraversalSnapshot");
static_assert(sizeof(FTraversalSnapshot) == 0x000008, "Wrong size on FTraversalSnapshot");
static_assert(offsetof(FTraversalSnapshot, Time) == 0x000000, "Member 'FTraversalSnapshot::Time' has a wrong offset!");
static_assert(offsetof(FTraversalSnapshot, InteractCount) == 0x000004, "Member 'FTraversalSnapshot::InteractCount' has a wrong offset!");

// ScriptStruct QMPUnrealIntegration.UIPhasesArray
// 0x0018 (0x0018 - 0x0000)
struct FUIPhasesArray final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUIPhase*>                       UIPhases;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIPhasesArray) == 0x000008, "Wrong alignment on FUIPhasesArray");
static_assert(sizeof(FUIPhasesArray) == 0x000018, "Wrong size on FUIPhasesArray");
static_assert(offsetof(FUIPhasesArray, UIPhases) == 0x000008, "Member 'FUIPhasesArray::UIPhases' has a wrong offset!");

}

