#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WaveFoamSimComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Water_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WaveFoamSimComponent.WaveFoamSimComponent_C
// 0x0080 (0x0120 - 0x00A0)
class UWaveFoamSimComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextureRenderTarget2D*                 Foam_RT_A;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Foam_RT_B;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Wave_RT;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DrawWave_MID;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FoamDiffuse_MID;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FoamToneMapMID;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         res;                                               // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fade;                                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Bias;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Freeze;                                            // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Simulation_World_Size;                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         idx;                                               // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGerstnerWave>                  WaveCopy;                                          // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UShallowWaterSimComponent_C*            ShallowWater;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Allocate_RTs();
	void Create_MIDs();
	void ExecuteUbergraph_WaveFoamSimComponent(int32 EntryPoint);
	void InitializeWaveFoamSim(int32 res_0, double WorldSize, double Fading, double TimeBias, class AWaterBody* WaterBody, class UShallowWaterSimComponent_C* ShallowWater_0);
	void Release_Foam_Sim_RTs();
	void Render_Waves_to_RT(TArray<struct FGerstnerWave>& NewParam);
	void Wave_Simulation_Step();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WaveFoamSimComponent_C">();
	}
	static class UWaveFoamSimComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaveFoamSimComponent_C>();
	}
};
static_assert(alignof(UWaveFoamSimComponent_C) == 0x000008, "Wrong alignment on UWaveFoamSimComponent_C");
static_assert(sizeof(UWaveFoamSimComponent_C) == 0x000120, "Wrong size on UWaveFoamSimComponent_C");
static_assert(offsetof(UWaveFoamSimComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UWaveFoamSimComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Foam_RT_A) == 0x0000A8, "Member 'UWaveFoamSimComponent_C::Foam_RT_A' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Foam_RT_B) == 0x0000B0, "Member 'UWaveFoamSimComponent_C::Foam_RT_B' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Wave_RT) == 0x0000B8, "Member 'UWaveFoamSimComponent_C::Wave_RT' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, DrawWave_MID) == 0x0000C0, "Member 'UWaveFoamSimComponent_C::DrawWave_MID' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, FoamDiffuse_MID) == 0x0000C8, "Member 'UWaveFoamSimComponent_C::FoamDiffuse_MID' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, FoamToneMapMID) == 0x0000D0, "Member 'UWaveFoamSimComponent_C::FoamToneMapMID' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, res) == 0x0000D8, "Member 'UWaveFoamSimComponent_C::res' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Fade) == 0x0000E0, "Member 'UWaveFoamSimComponent_C::Fade' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Time_Bias) == 0x0000E8, "Member 'UWaveFoamSimComponent_C::Time_Bias' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Freeze) == 0x0000F0, "Member 'UWaveFoamSimComponent_C::Freeze' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, Simulation_World_Size) == 0x0000F8, "Member 'UWaveFoamSimComponent_C::Simulation_World_Size' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, idx) == 0x000100, "Member 'UWaveFoamSimComponent_C::idx' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, WaveCopy) == 0x000108, "Member 'UWaveFoamSimComponent_C::WaveCopy' has a wrong offset!");
static_assert(offsetof(UWaveFoamSimComponent_C, ShallowWater) == 0x000118, "Member 'UWaveFoamSimComponent_C::ShallowWater' has a wrong offset!");

}

