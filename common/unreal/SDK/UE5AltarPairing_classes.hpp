#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UE5AltarPairing

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UE5AltarPairing_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class UE5AltarPairing.VOblivionInitialSettings
// 0x0918 (0x0940 - 0x0028)
class UVOblivionInitialSettings final : public UBlueprintFunctionLibrary
{
public:
	TArray<EVEnvironmentFormID>                   PairedClassesUsingChaosPhysics;                    // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FVInputMappingRegistration>     RegisteredInputMappings;                           // 0x0038(0x0010)(Edit, EditFixedSize, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bIsUsingPrePlacedDatatable;                        // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSavingPrePlacedDatatable;                       // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePreloadingOfInventoryItems;                 // 0x004A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePreloadingOfPickableItems;                  // 0x004B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePreloadingOfNPCsOutOfPlayerWorldSpace;      // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EarlyNPCPreloadingDistanceMax;                     // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnvironmentLuminanceValuePairedFromOblivion;    // 0x0054(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnvironmentLuminanceValueUpdateFrequency;          // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreHavokColliderInstancesAllowed;                 // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultLinearDampingValue;                         // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAngularDampingValue;                        // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlappingCollisionPenetrationThreshold;          // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PairedPawnPushForceFactor;                         // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PairedPawnInitialPushForceFactor;                  // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnPhysicsBodyColliderHeightOffset;               // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnPhysicsBodyColliderRadiusMargin;               // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CodeDrivenCollisionSystemBlacklistedProfiles;      // 0x0080(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<EVEnvironmentFormID, struct FVClassPhysicsControlSettings> ClassDefaultPhysicsSettings;     // 0x0090(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	int32                                         TeleportMaxIterationCount;                         // 0x00E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MainWorldLevelName;                                // 0x00E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AltarVSMapPath;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputTagBufferingDefaultTime;                      // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AgilityScalingWeaponsFileNames;                    // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         CombatHitConeAngle;                                // 0x0118(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationBeforeAttackFollowThrough;                 // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerCombatHitTraceSphereRadius;                  // 0x0120(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlayerCombatHitTraceDebugDraw;              // 0x0124(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerCombatHitTraceDebugDrawDuration;             // 0x0128(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenTwoWarningBorderRegion;                 // 0x012C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             PushbackForceScaling;                              // 0x0130(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushbackForceMultiplier;                           // 0x0158(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushbackForceMultiplierForPlayer;                  // 0x015C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushbackDuration;                                  // 0x0160(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             PushbackForceOverTime;                             // 0x0168(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushbackCooldown;                                  // 0x0190(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushbackPriority;                                  // 0x0194(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDisplayPushbackOnScreen;                     // 0x0198(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugOverridePushbackForce;                        // 0x019C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileCollisionForce;                          // 0x01A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PlayerCombatHitTraceDebugDrawColor;                // 0x01A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetReachHeightTolerance;                        // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResurrectStateDuration;                            // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilMoveMultiplier;                              // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerFatigueRestoration;                         // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockdownMinimalDuration;                          // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockdownFatigueRestoration;                       // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockdownHorizontalImpactForceMultiplier;          // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockdownVerticalImpactForceMultiplier;            // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatRagdollLinearDampingIncrease;                // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatRagdollAngularDampingIncrease;               // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatRagdollMaxLinearDamping;                     // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatRagdollMaxAngularDamping;                    // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollDurationAfterParalysis;                     // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatDeathForceMultiplier;                        // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OblivionToAltarKnockdownForceMultiplier;           // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultUseFakeRootLocationInterpolation;          // 0x01E4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultInterpolateFakeRootForHumanoids;           // 0x01E5(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultInterpolateFakeRootForCreatures;           // 0x01E6(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultInterpolateFakeRootOnlyZAxis;              // 0x01E7(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             DefaultFakeRootDistanceInterpSpeedFactorCurve;     // 0x01E8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             DefaultFakeRootVelocityInterpSpeedFactorCurve;     // 0x0210(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxFakeRootDistanceFromCapsule;             // 0x0238(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTimeToRejoinRootWhenStoppingFakeRootInterp; // 0x023C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DefaultTagsPreventingFakeRootInterp;               // 0x0240(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSprintFatigueBaseCostPerSec;            // 0x0260(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSprintFatigueRegenDelay;                // 0x0264(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallTimeMin;                                       // 0x0268(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallVelocityMin;                                   // 0x026C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallTimeBase;                                      // 0x0270(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallTimeMult;                                      // 0x0274(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDamageBase;                                    // 0x0278(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDamageMult;                                    // 0x027C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallRiderDamageMult;                               // 0x0280(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImmersionDepthToLockArmsRotation;                  // 0x0284(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsVisibilityUpward;                              // 0x0288(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsVisibilityDownward;                            // 0x028C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsSpeedAfterAttack;                              // 0x0290(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsSpeedAfterLookUpInSwim;                        // 0x0294(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusWhenDialogue;                                 // 0x0298(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedWhenStartTargetingInDialogue;                 // 0x029C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersuasionPercentageReductionFOV;                  // 0x02A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            FallbackDockingAnimationFormIDs;                   // 0x02A8(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            FallbackUndockingAnimationFormIDs;                 // 0x02F8(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlayerTagsPreventingInteractionInput;              // 0x0348(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         NoviceAcrobaticsJumpFatigueMult;                   // 0x0368(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApprenticeAcrobaticsJumpFatigueMult;               // 0x036C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanAcrobaticsJumpFatigueMult;               // 0x0370(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertAcrobaticsJumpFatigueMult;                   // 0x0374(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterAcrobaticsJumpFatigueMult;                   // 0x0378(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterAcrobaticsFallDamageMult;                    // 0x037C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DodgeCooldown;                                     // 0x0380(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkMarksmanExpertParalyzeChance;                  // 0x0384(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkMarksmanMasterParalyzeChance;                  // 0x0388(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkMarksmanExpertParalyzeDuration;                // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkMarksmanMasterParalyzeDuration;                // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoviceMarksmanBowDrawFatigueBurnPerSecond;         // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApprenticeMarksmanBowDrawFatigueBurnPerSecond;     // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanMarksmanBowDrawFatigueBurnPerSecond;     // 0x039C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertMarksmanBowDrawFatigueBurnPerSecond;         // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterMarksmanBowDrawFatigueBurnPerSecond;         // 0x03A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsNoviceRunFatigueRegenMult;            // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsApprenticeRunFatigueRegenMult;        // 0x03AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsJourneymanRunFatigueRegenMult;        // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsExpertRunFatigueRegenMult;            // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsMasterRunFatigueRegenMult;            // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsNoviceSprintFatigueCostMult;          // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsApprenticeSprintFatigueCostMult;      // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsJourneymanSprintFatigueCostMult;      // 0x03C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsExpertSprintFatigueCostMult;          // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerkAthleticsMasterSprintFatigueCostMult;          // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoviceBlockPerkFatigueDamageMod;                   // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanBlockPerkFatigueDamageMod;               // 0x03D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertBlockPerkFatigueDamageMod;                   // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterBlockPerkFatigueDamageMod;                   // 0x03DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueShieldBashBaseCost;                         // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueShieldBashWeightMult;                       // 0x03E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueShieldBashFinalMult;                        // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseShieldBashAttributeValue;                      // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributeShieldBashBonusScalingMultiplier;         // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseShieldBashSkillValue;                          // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillShieldBashBonusScalingMultiplier;             // 0x03F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalShieldBashDamageMultiplier;                   // 0x03FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockMasterLevelShieldBashDamageMultiplier;        // 0x0400(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockFormulaSkillMutliplier;                       // 0x0404(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockFormulaFinalSkillMultiplier;                  // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoviceHandToHandPowerAttackDamageMultiplier;       // 0x040C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApprenticeHandToHandPowerAttackDamageMultiplier;   // 0x0410(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanHandToHandPowerAttackDamageMultiplier;   // 0x0414(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertHandToHandPowerAttackDamageMultiplier;       // 0x0418(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterHandToHandPowerAttackDamageMultiplier;       // 0x041C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandToHandPerkNoviceLightAttackFatigueMultiplier;  // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandToHandPerkApprenticeLightAttackFatigueMultiplier; // 0x0424(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandToHandPerkJournyemanLightAttackFatigueMultiplier; // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandToHandPerkExpertLightAttackFatigueMultiplier;  // 0x042C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandToHandPerkMasterLightAttackFatigueMultiplier;  // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandToHandJourneymanPowerAttackDisarmChance;       // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoviceBluntPowerAttackDamageMultiplier;            // 0x0438(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApprenticeBluntPowerAttackDamageMultiplier;        // 0x043C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanBluntPowerAttackDamageMultiplier;        // 0x0440(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertBluntPowerAttackDamageMultiplier;            // 0x0444(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterBluntPowerAttackDamageMultiplier;            // 0x0448(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkApprenticeDurabilityLossPercentage;       // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkJourneymanPowerAttackSelfShieldMagnitude; // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkJourneymanPowerAttackSelfShieldDuration;  // 0x0454(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkMasterSelfShieldMagnitude;                // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkMasterPowerAttackSelfShieldDuration;      // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkPowerAttackSelfShieldChance;              // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkExpertLightAttackSilenceChance;           // 0x0464(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BluntPerkLightAttackSilenceDuration;               // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoviceBladePowerAttackDamageMultiplier;            // 0x046C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApprenticeBladePowerAttackDamageMultiplier;        // 0x0470(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanBladePowerAttackDamageMultiplier;        // 0x0474(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertBladePowerAttackDamageMultiplier;            // 0x0478(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterBladePowerAttackDamageMultiplier;            // 0x047C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkApprenticeDurabilityLossPercentage;       // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkJourneymanPowerAttackWeaknessToNormWeapMagnitude; // 0x0484(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkJourneymanPowerAttackWeaknessToNormWeapDuration; // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkMasterPowerAttackWeaknessToNormWeapMagnitude; // 0x048C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkMasterPowerAttackWeaknessToNormWeapDuration; // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkPowerAttackWeaknessToNormWeapChanceModifier; // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkExpertLightAttackDamageHealthChance;      // 0x0498(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkExpertLightAttackDamageHealthLevelMultiplier; // 0x049C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BladePerkExpertLightAttackDamageHealthDuration;    // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseWeaponDamageMultiplier;                        // 0x04A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributeDamageMultiplier;                         // 0x04A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumAttributeDamage;                            // 0x04AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillDamageMultiplier;                             // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumSkillDamage;                                // 0x04B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumHandToHandBlockValue;                       // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumWeaponBlockValue;                           // 0x04BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumShieldBlockValue;                           // 0x04C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakPerkExpertLightImpactModifier;                // 0x04C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstPersonArmsHeight;                             // 0x04C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakTransitionSpeed;                              // 0x04CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakNoticedMin;                                   // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakSeenMin;                                      // 0x04D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakUnseenMin;                                    // 0x04D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakLostMin;                                      // 0x04DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimalDetectionValue;                             // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionNightEyeBonus;                            // 0x04E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakMaxDistance;                                  // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakExteriorDistanceMult;                         // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakBootWeightBase;                               // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakBootWeightMult;                               // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakTargetInCombatBonus;                          // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakRunningMult;                                  // 0x04FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakSoundLosMult;                                 // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultNonSneakingSoundMult;                       // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoviceSneakSoundsMult;                             // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApprenticeSneakSoundsMult;                         // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JourneymanSneakSoundsMult;                         // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpertSneakSoundsMult;                             // 0x0514(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterSneakSoundsMult;                             // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionSneakLightMod;                            // 0x051C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakLightMult;                                    // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakSkillMult;                                    // 0x0524(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakTargetAttackBonus;                            // 0x0528(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakSwimmingLightMult;                            // 0x052C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakSleepBonus;                                   // 0x0530(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SneakBaseValue;                                    // 0x0534(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatAIHoldTimeMultiplier;                        // 0x0538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeight;                                        // 0x053C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlope;                                          // 0x0540(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOblivionLikeWalkingPhysics;                    // 0x0544(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultUseFlatBaseForFloorChecks;                 // 0x0545(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_546[0x2];                                      // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             DefaultNonLandscapeCollisionProfilesEligibleForAntiClimbing; // 0x0548(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         DefaultMaxSlopeAngleForFloorsNotEligibleForAntiClimbing; // 0x0598(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMinSlopeAntiClimbingActivationAngle;        // 0x059C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxSlopeAntiClimbingActivationAngle;        // 0x05A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSlopeAngleThresholdToUseDirectionalAntiClimbing; // 0x05A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxSlopeAngleBeforeSlide;                   // 0x05A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMinJumpOffSlopeAngle;                       // 0x05AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMinJumpOffSlopeVelocity;                    // 0x05B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMinAntiClimbingFactor;                      // 0x05B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxAntiClimbingFactor;                      // 0x05B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             DefaultAntiClimbingFactorAgainstSlopeAngleCurve;   // 0x05C0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             DefaultNonLandscapeFloorAntiClimbingReducingFactorAgainstSlopeAngleCurve; // 0x05E8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMinVelocitySmoothingSpeed;                  // 0x0610(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxVelocitySmoothingSpeed;                  // 0x0614(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             DefaultVelocitySmoothingAgainstSlopeAngleCurve;    // 0x0618(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultCapUpwardVelocityAtMaxSlopeAngle;          // 0x0640(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultPreventJumpOnStiffSlopes;                  // 0x0641(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_642[0x2];                                      // 0x0642(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultPreventJumpMinSlopeAngle;                   // 0x0644(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMaxSlopeAngleForFloorsNotEligibleForAntiClimbing; // 0x0648(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMinSlopeAntiClimbingActivationAngle;   // 0x064C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMaxSlopeAntiClimbingActivationAngle;   // 0x0650(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultSlopeAngleThresholdToUseDirectionalAntiClimbing; // 0x0654(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMaxSlopeAngleBeforeSlide;              // 0x0658(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMinJumpOffSlopeAngle;                  // 0x065C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMinJumpOffSlopeVelocity;               // 0x0660(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMinAntiClimbingFactor;                 // 0x0664(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMaxAntiClimbingFactor;                 // 0x0668(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             HorseDefaultAntiClimbingFactorAgainstSlopeAngleCurve; // 0x0670(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             HorseDefaultNonLandscapeFloorAntiClimbingReducingFactorAgainstSlopeAngleCurve; // 0x0698(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMinVelocitySmoothingSpeed;             // 0x06C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorseDefaultMaxVelocitySmoothingSpeed;             // 0x06C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             HorseDefaultVelocitySmoothingAgainstSlopeAngleCurve; // 0x06C8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorseDefaultCapUpwardVelocityAtMaxSlopeAngle;     // 0x06F0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorseDefaultPreventJumpOnStiffSlopes;             // 0x06F1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F2[0x2];                                      // 0x06F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorseDefaultPreventJumpMinSlopeAngle;              // 0x06F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveRunMult;                                // 0x06F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveRunAthleticsMult;                       // 0x06FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSwimRunAthleticsMult;                   // 0x0700(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSwimRunBase;                            // 0x0704(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSwimWalkAthleticsMult;                  // 0x0708(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSwimWalkBase;                           // 0x070C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultStrengthEncumbranceMult;                    // 0x0710(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveWeightMax;                              // 0x0714(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveWeightMin;                              // 0x0718(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSprintBaseMult;                         // 0x071C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSprintAthleticsMult;                    // 0x0720(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveCharWalkMax;                            // 0x0724(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveCharWalkMin;                            // 0x0728(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveCreatureWalkMax;                        // 0x072C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveCreatureWalkMin;                        // 0x0730(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveEncumEffectNoWea;                       // 0x0734(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveEncumEffect;                            // 0x0738(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveNoWeaponMult;                           // 0x073C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSneakMult;                              // 0x0740(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveSneakRunMult;                           // 0x0744(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveMaxFlySpeed;                            // 0x0748(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMoveMinFlySpeed;                            // 0x074C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverEncumbranceSpeed;                              // 0x0750(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControlModifier;                                // 0x0754(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillZTeleportCustomResearchDist;                   // 0x0758(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportHeightIfStuckInGround;                     // 0x075C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleMinDuration;                                   // 0x0760(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawWeaponDuration;                                // 0x0764(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreparePowerAttackDuration;                        // 0x0768(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowLifeDuration;                                 // 0x076C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPawnProjectilePenetrationDepth;                 // 0x0770(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPawnProjectilePenetrationDepth;                 // 0x0774(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPawnProjectileVelocityThreshold;                // 0x0778(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPawnProjectileVelocityThreshold;                // 0x077C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrowInventoryChancePercentOnTargetHit;            // 0x0780(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowFadeDuration;                                 // 0x0784(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpellCastingDuration;                              // 0x0788(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogProjectileLifeDuration;                         // 0x078C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ClairvoyanceRefreshDelay;                          // 0x0790(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TelekinesisThrowForce;                             // 0x0798(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BarBlinkAnimLoopNum;                               // 0x079C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarBlinkAnimSpeed;                                 // 0x07A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthBarBlinkProgressThreshold;                   // 0x07A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathBarBlinkProgressThreshold;                   // 0x07A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodDropEmergeSpeed;                              // 0x07AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodDropStayDuration;                             // 0x07B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodDropFadeOutSpeed;                             // 0x07B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamagePercentForBloodDropAppearance;            // 0x07B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamagePercentForBloodDropVisualEnhancement;     // 0x07BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBloodDropScaleFactor;                           // 0x07C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullProgressReductionDuration;                     // 0x07C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitToStartReductionAnimDuration;                  // 0x07C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7CC[0x4];                                      // 0x07CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             BowHoldPowerCurve;                                 // 0x07D0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BowHoldMinimumCompletion;                          // 0x07F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BowHoldCompletionPerSecond;                        // 0x07FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowWeakSpeedMultiplier;                          // 0x0800(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowInitialSpeedMultiplier;                       // 0x0804(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicProjectileSpeedMultiplier;                    // 0x0808(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFormulaMagickaReturnLinearMult;                 // 0x080C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFormulaMagickaReturnQuadraticMult;              // 0x0810(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PCHealthNewFormulaLevelEnduranceMult;              // 0x0814(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PCHealthNewFormulaEnduranceMult;                   // 0x0818(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PCHealthNewFormulaStrengthMult;                    // 0x081C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFormulaFatigueMult;                             // 0x0820(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFormulaWillpowerMult;                           // 0x0824(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFormulaAgilityMult;                             // 0x0828(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesOblivionShowPlayerLeveling;                   // 0x082C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82D[0x3];                                      // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkillLevelUpGrantedXPExponent;                     // 0x0830(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLevelUpBaseLevelXP;                          // 0x0834(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLevelUpXPFactor;                             // 0x0838(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLevelUpXPExponent;                           // 0x083C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerkMercantileApprenticeLevelOffset;               // 0x0840(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerkMercantileJourneymanLevelOffset;               // 0x0844(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerkMercantileMasterLevelOffset;                   // 0x0848(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlchemyApprenticeDoubleCraftChance;                // 0x084C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlchemyJourneymanDoubleCraftChance;                // 0x0850(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlchemyExpertDoubleCraftChance;                    // 0x0854(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlchemyMasterDoubleCraftChance;                    // 0x0858(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersuasionExpGainDispositionIncreased;             // 0x085C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersuasionExpGainDispositionDecreased;             // 0x0860(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MercantileExpTransactionMult;                      // 0x0864(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AthleticsExpRunning;                               // 0x0868(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AthleticsExpSwimming;                              // 0x086C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AthleticsExpSprinting;                             // 0x0870(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlterationExpCastMult;                             // 0x0874(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConjurationExpCastMult;                            // 0x0878(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionExpCastMult;                            // 0x087C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IllusionExpCastMult;                               // 0x0880(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MysticismExpCastMult;                              // 0x0884(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestorationExpCastMult;                            // 0x0888(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowThreatLevelOffset;                              // 0x088C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MediumThreatLevelOffset;                           // 0x0890(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighThreatLevelOffset;                             // 0x0894(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrokenWeaponDamageMultiplier;                      // 0x0898(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultWeaponDamageMultiplier;                     // 0x089C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImprovedWeaponDamageMultiplier;                    // 0x08A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrokenArmorEfficiencyMultiplier;                   // 0x08A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultArmorEfficiencyMultiplier;                  // 0x08A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImprovedArmorEfficiencyMultiplier;                 // 0x08AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatureHealthScalingMultiplier;                   // 0x08B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatureDamageScalingMultiplier;                   // 0x08B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatureFatigueScalingMultiplier;                  // 0x08B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatureWeaponDamageMultiplier;                    // 0x08BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterLowFatigueThreshold;                          // 0x08C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitLowFatigueThreshold;                           // 0x08C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesOblivionDrawCapsuleColliders;                 // 0x08C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesOblivionDrawGrabDebugDisplay;                 // 0x08C9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesOblivionShowPlayerDetectionLighting;          // 0x08CA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesOblivionOutputSaveGameFileDebugInfoOnSaving;  // 0x08CB(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesOblivionOutputSaveGameFileDebugInfoOnLoading; // 0x08CC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnsurePairingEntryValidityEnabledForOblivionSendHandler; // 0x08CD(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCameraTrackTarget;                          // 0x08CE(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGodMode;                                        // 0x08CF(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFastTransitionEnabled;                          // 0x08D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFastTransitionInjectedWorlds;               // 0x08D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFastTransitionParentNonWorldPartition;      // 0x08D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFastTransitionPreLoadHouses;                // 0x08D3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFastTransitionUnloadCacheSize;                  // 0x08D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FastTransitionLevelPreloadingDoorExtent;           // 0x08D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthRegenBase;                                   // 0x08F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthRegenEnduranceMult;                          // 0x08F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueRegenBase;                                  // 0x08F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueRegenAgilityMult;                           // 0x08FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthRegenDelay;                                  // 0x0900(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagickaRegenDelay;                                 // 0x0904(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueRegenDelay;                                 // 0x0908(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthRegenOutsideCombatMult;                      // 0x090C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagickaRegenOutsideCombatMult;                     // 0x0910(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatigueRegenOutsideCombatMult;                     // 0x0914(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerHealthRegenMult;                             // 0x0918(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCHealthRegenMult;                                // 0x091C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreDeadDefaultPosesEnabled;                       // 0x0920(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSaveDatatableDeadDefaultPose;               // 0x0921(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_922[0x2];                                      // 0x0922(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimSlowdownRaycastCheckDelay;                      // 0x0924(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillZOffset;                                       // 0x0928(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShakeCheckDelay;                             // 0x092C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                StatueAnimationSpecialIdle;                        // 0x0930(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static TArray<class FString> GetDefaultCollisionProfileNames();
	static const class UVOblivionInitialSettings* GetOblivionInitialSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VOblivionInitialSettings">();
	}
	static class UVOblivionInitialSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVOblivionInitialSettings>();
	}
};
static_assert(alignof(UVOblivionInitialSettings) == 0x000008, "Wrong alignment on UVOblivionInitialSettings");
static_assert(sizeof(UVOblivionInitialSettings) == 0x000940, "Wrong size on UVOblivionInitialSettings");
static_assert(offsetof(UVOblivionInitialSettings, PairedClassesUsingChaosPhysics) == 0x000028, "Member 'UVOblivionInitialSettings::PairedClassesUsingChaosPhysics' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, RegisteredInputMappings) == 0x000038, "Member 'UVOblivionInitialSettings::RegisteredInputMappings' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bIsUsingPrePlacedDatatable) == 0x000048, "Member 'UVOblivionInitialSettings::bIsUsingPrePlacedDatatable' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bIsSavingPrePlacedDatatable) == 0x000049, "Member 'UVOblivionInitialSettings::bIsSavingPrePlacedDatatable' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnablePreloadingOfInventoryItems) == 0x00004A, "Member 'UVOblivionInitialSettings::bEnablePreloadingOfInventoryItems' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnablePreloadingOfPickableItems) == 0x00004B, "Member 'UVOblivionInitialSettings::bEnablePreloadingOfPickableItems' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnablePreloadingOfNPCsOutOfPlayerWorldSpace) == 0x00004C, "Member 'UVOblivionInitialSettings::bEnablePreloadingOfNPCsOutOfPlayerWorldSpace' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, EarlyNPCPreloadingDistanceMax) == 0x000050, "Member 'UVOblivionInitialSettings::EarlyNPCPreloadingDistanceMax' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bIsEnvironmentLuminanceValuePairedFromOblivion) == 0x000054, "Member 'UVOblivionInitialSettings::bIsEnvironmentLuminanceValuePairedFromOblivion' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, EnvironmentLuminanceValueUpdateFrequency) == 0x000058, "Member 'UVOblivionInitialSettings::EnvironmentLuminanceValueUpdateFrequency' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bAreHavokColliderInstancesAllowed) == 0x00005C, "Member 'UVOblivionInitialSettings::bAreHavokColliderInstancesAllowed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultLinearDampingValue) == 0x000060, "Member 'UVOblivionInitialSettings::DefaultLinearDampingValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultAngularDampingValue) == 0x000064, "Member 'UVOblivionInitialSettings::DefaultAngularDampingValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, OverlappingCollisionPenetrationThreshold) == 0x000068, "Member 'UVOblivionInitialSettings::OverlappingCollisionPenetrationThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PairedPawnPushForceFactor) == 0x00006C, "Member 'UVOblivionInitialSettings::PairedPawnPushForceFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PairedPawnInitialPushForceFactor) == 0x000070, "Member 'UVOblivionInitialSettings::PairedPawnInitialPushForceFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PawnPhysicsBodyColliderHeightOffset) == 0x000074, "Member 'UVOblivionInitialSettings::PawnPhysicsBodyColliderHeightOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PawnPhysicsBodyColliderRadiusMargin) == 0x000078, "Member 'UVOblivionInitialSettings::PawnPhysicsBodyColliderRadiusMargin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CodeDrivenCollisionSystemBlacklistedProfiles) == 0x000080, "Member 'UVOblivionInitialSettings::CodeDrivenCollisionSystemBlacklistedProfiles' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ClassDefaultPhysicsSettings) == 0x000090, "Member 'UVOblivionInitialSettings::ClassDefaultPhysicsSettings' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, TeleportMaxIterationCount) == 0x0000E0, "Member 'UVOblivionInitialSettings::TeleportMaxIterationCount' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MainWorldLevelName) == 0x0000E4, "Member 'UVOblivionInitialSettings::MainWorldLevelName' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AltarVSMapPath) == 0x0000F0, "Member 'UVOblivionInitialSettings::AltarVSMapPath' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, InputTagBufferingDefaultTime) == 0x000100, "Member 'UVOblivionInitialSettings::InputTagBufferingDefaultTime' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AgilityScalingWeaponsFileNames) == 0x000108, "Member 'UVOblivionInitialSettings::AgilityScalingWeaponsFileNames' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatHitConeAngle) == 0x000118, "Member 'UVOblivionInitialSettings::CombatHitConeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DurationBeforeAttackFollowThrough) == 0x00011C, "Member 'UVOblivionInitialSettings::DurationBeforeAttackFollowThrough' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerCombatHitTraceSphereRadius) == 0x000120, "Member 'UVOblivionInitialSettings::PlayerCombatHitTraceSphereRadius' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnablePlayerCombatHitTraceDebugDraw) == 0x000124, "Member 'UVOblivionInitialSettings::bEnablePlayerCombatHitTraceDebugDraw' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerCombatHitTraceDebugDrawDuration) == 0x000128, "Member 'UVOblivionInitialSettings::PlayerCombatHitTraceDebugDrawDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, TimeBetweenTwoWarningBorderRegion) == 0x00012C, "Member 'UVOblivionInitialSettings::TimeBetweenTwoWarningBorderRegion' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackForceScaling) == 0x000130, "Member 'UVOblivionInitialSettings::PushbackForceScaling' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackForceMultiplier) == 0x000158, "Member 'UVOblivionInitialSettings::PushbackForceMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackForceMultiplierForPlayer) == 0x00015C, "Member 'UVOblivionInitialSettings::PushbackForceMultiplierForPlayer' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackDuration) == 0x000160, "Member 'UVOblivionInitialSettings::PushbackDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackForceOverTime) == 0x000168, "Member 'UVOblivionInitialSettings::PushbackForceOverTime' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackCooldown) == 0x000190, "Member 'UVOblivionInitialSettings::PushbackCooldown' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PushbackPriority) == 0x000194, "Member 'UVOblivionInitialSettings::PushbackPriority' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDebugDisplayPushbackOnScreen) == 0x000198, "Member 'UVOblivionInitialSettings::bDebugDisplayPushbackOnScreen' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DebugOverridePushbackForce) == 0x00019C, "Member 'UVOblivionInitialSettings::DebugOverridePushbackForce' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ProjectileCollisionForce) == 0x0001A0, "Member 'UVOblivionInitialSettings::ProjectileCollisionForce' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerCombatHitTraceDebugDrawColor) == 0x0001A4, "Member 'UVOblivionInitialSettings::PlayerCombatHitTraceDebugDrawColor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, TargetReachHeightTolerance) == 0x0001A8, "Member 'UVOblivionInitialSettings::TargetReachHeightTolerance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ResurrectStateDuration) == 0x0001AC, "Member 'UVOblivionInitialSettings::ResurrectStateDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, RecoilMoveMultiplier) == 0x0001B0, "Member 'UVOblivionInitialSettings::RecoilMoveMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, StaggerFatigueRestoration) == 0x0001B4, "Member 'UVOblivionInitialSettings::StaggerFatigueRestoration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, KnockdownMinimalDuration) == 0x0001B8, "Member 'UVOblivionInitialSettings::KnockdownMinimalDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, KnockdownFatigueRestoration) == 0x0001BC, "Member 'UVOblivionInitialSettings::KnockdownFatigueRestoration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, KnockdownHorizontalImpactForceMultiplier) == 0x0001C0, "Member 'UVOblivionInitialSettings::KnockdownHorizontalImpactForceMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, KnockdownVerticalImpactForceMultiplier) == 0x0001C4, "Member 'UVOblivionInitialSettings::KnockdownVerticalImpactForceMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatRagdollLinearDampingIncrease) == 0x0001C8, "Member 'UVOblivionInitialSettings::CombatRagdollLinearDampingIncrease' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatRagdollAngularDampingIncrease) == 0x0001CC, "Member 'UVOblivionInitialSettings::CombatRagdollAngularDampingIncrease' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatRagdollMaxLinearDamping) == 0x0001D0, "Member 'UVOblivionInitialSettings::CombatRagdollMaxLinearDamping' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatRagdollMaxAngularDamping) == 0x0001D4, "Member 'UVOblivionInitialSettings::CombatRagdollMaxAngularDamping' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, RagdollDurationAfterParalysis) == 0x0001D8, "Member 'UVOblivionInitialSettings::RagdollDurationAfterParalysis' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatDeathForceMultiplier) == 0x0001DC, "Member 'UVOblivionInitialSettings::CombatDeathForceMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, OblivionToAltarKnockdownForceMultiplier) == 0x0001E0, "Member 'UVOblivionInitialSettings::OblivionToAltarKnockdownForceMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultUseFakeRootLocationInterpolation) == 0x0001E4, "Member 'UVOblivionInitialSettings::bDefaultUseFakeRootLocationInterpolation' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultInterpolateFakeRootForHumanoids) == 0x0001E5, "Member 'UVOblivionInitialSettings::bDefaultInterpolateFakeRootForHumanoids' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultInterpolateFakeRootForCreatures) == 0x0001E6, "Member 'UVOblivionInitialSettings::bDefaultInterpolateFakeRootForCreatures' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultInterpolateFakeRootOnlyZAxis) == 0x0001E7, "Member 'UVOblivionInitialSettings::bDefaultInterpolateFakeRootOnlyZAxis' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultFakeRootDistanceInterpSpeedFactorCurve) == 0x0001E8, "Member 'UVOblivionInitialSettings::DefaultFakeRootDistanceInterpSpeedFactorCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultFakeRootVelocityInterpSpeedFactorCurve) == 0x000210, "Member 'UVOblivionInitialSettings::DefaultFakeRootVelocityInterpSpeedFactorCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMaxFakeRootDistanceFromCapsule) == 0x000238, "Member 'UVOblivionInitialSettings::DefaultMaxFakeRootDistanceFromCapsule' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultTimeToRejoinRootWhenStoppingFakeRootInterp) == 0x00023C, "Member 'UVOblivionInitialSettings::DefaultTimeToRejoinRootWhenStoppingFakeRootInterp' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultTagsPreventingFakeRootInterp) == 0x000240, "Member 'UVOblivionInitialSettings::DefaultTagsPreventingFakeRootInterp' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSprintFatigueBaseCostPerSec) == 0x000260, "Member 'UVOblivionInitialSettings::DefaultMoveSprintFatigueBaseCostPerSec' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSprintFatigueRegenDelay) == 0x000264, "Member 'UVOblivionInitialSettings::DefaultMoveSprintFatigueRegenDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallTimeMin) == 0x000268, "Member 'UVOblivionInitialSettings::FallTimeMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallVelocityMin) == 0x00026C, "Member 'UVOblivionInitialSettings::FallVelocityMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallTimeBase) == 0x000270, "Member 'UVOblivionInitialSettings::FallTimeBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallTimeMult) == 0x000274, "Member 'UVOblivionInitialSettings::FallTimeMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallDamageBase) == 0x000278, "Member 'UVOblivionInitialSettings::FallDamageBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallDamageMult) == 0x00027C, "Member 'UVOblivionInitialSettings::FallDamageMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallRiderDamageMult) == 0x000280, "Member 'UVOblivionInitialSettings::FallRiderDamageMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ImmersionDepthToLockArmsRotation) == 0x000284, "Member 'UVOblivionInitialSettings::ImmersionDepthToLockArmsRotation' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArmsVisibilityUpward) == 0x000288, "Member 'UVOblivionInitialSettings::ArmsVisibilityUpward' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArmsVisibilityDownward) == 0x00028C, "Member 'UVOblivionInitialSettings::ArmsVisibilityDownward' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArmsSpeedAfterAttack) == 0x000290, "Member 'UVOblivionInitialSettings::ArmsSpeedAfterAttack' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArmsSpeedAfterLookUpInSwim) == 0x000294, "Member 'UVOblivionInitialSettings::ArmsSpeedAfterLookUpInSwim' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FocusWhenDialogue) == 0x000298, "Member 'UVOblivionInitialSettings::FocusWhenDialogue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SpeedWhenStartTargetingInDialogue) == 0x00029C, "Member 'UVOblivionInitialSettings::SpeedWhenStartTargetingInDialogue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PersuasionPercentageReductionFOV) == 0x0002A0, "Member 'UVOblivionInitialSettings::PersuasionPercentageReductionFOV' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallbackDockingAnimationFormIDs) == 0x0002A8, "Member 'UVOblivionInitialSettings::FallbackDockingAnimationFormIDs' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FallbackUndockingAnimationFormIDs) == 0x0002F8, "Member 'UVOblivionInitialSettings::FallbackUndockingAnimationFormIDs' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerTagsPreventingInteractionInput) == 0x000348, "Member 'UVOblivionInitialSettings::PlayerTagsPreventingInteractionInput' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceAcrobaticsJumpFatigueMult) == 0x000368, "Member 'UVOblivionInitialSettings::NoviceAcrobaticsJumpFatigueMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ApprenticeAcrobaticsJumpFatigueMult) == 0x00036C, "Member 'UVOblivionInitialSettings::ApprenticeAcrobaticsJumpFatigueMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanAcrobaticsJumpFatigueMult) == 0x000370, "Member 'UVOblivionInitialSettings::JourneymanAcrobaticsJumpFatigueMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertAcrobaticsJumpFatigueMult) == 0x000374, "Member 'UVOblivionInitialSettings::ExpertAcrobaticsJumpFatigueMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterAcrobaticsJumpFatigueMult) == 0x000378, "Member 'UVOblivionInitialSettings::MasterAcrobaticsJumpFatigueMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterAcrobaticsFallDamageMult) == 0x00037C, "Member 'UVOblivionInitialSettings::MasterAcrobaticsFallDamageMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DodgeCooldown) == 0x000380, "Member 'UVOblivionInitialSettings::DodgeCooldown' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMarksmanExpertParalyzeChance) == 0x000384, "Member 'UVOblivionInitialSettings::PerkMarksmanExpertParalyzeChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMarksmanMasterParalyzeChance) == 0x000388, "Member 'UVOblivionInitialSettings::PerkMarksmanMasterParalyzeChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMarksmanExpertParalyzeDuration) == 0x00038C, "Member 'UVOblivionInitialSettings::PerkMarksmanExpertParalyzeDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMarksmanMasterParalyzeDuration) == 0x000390, "Member 'UVOblivionInitialSettings::PerkMarksmanMasterParalyzeDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceMarksmanBowDrawFatigueBurnPerSecond) == 0x000394, "Member 'UVOblivionInitialSettings::NoviceMarksmanBowDrawFatigueBurnPerSecond' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ApprenticeMarksmanBowDrawFatigueBurnPerSecond) == 0x000398, "Member 'UVOblivionInitialSettings::ApprenticeMarksmanBowDrawFatigueBurnPerSecond' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanMarksmanBowDrawFatigueBurnPerSecond) == 0x00039C, "Member 'UVOblivionInitialSettings::JourneymanMarksmanBowDrawFatigueBurnPerSecond' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertMarksmanBowDrawFatigueBurnPerSecond) == 0x0003A0, "Member 'UVOblivionInitialSettings::ExpertMarksmanBowDrawFatigueBurnPerSecond' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterMarksmanBowDrawFatigueBurnPerSecond) == 0x0003A4, "Member 'UVOblivionInitialSettings::MasterMarksmanBowDrawFatigueBurnPerSecond' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsNoviceRunFatigueRegenMult) == 0x0003A8, "Member 'UVOblivionInitialSettings::PerkAthleticsNoviceRunFatigueRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsApprenticeRunFatigueRegenMult) == 0x0003AC, "Member 'UVOblivionInitialSettings::PerkAthleticsApprenticeRunFatigueRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsJourneymanRunFatigueRegenMult) == 0x0003B0, "Member 'UVOblivionInitialSettings::PerkAthleticsJourneymanRunFatigueRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsExpertRunFatigueRegenMult) == 0x0003B4, "Member 'UVOblivionInitialSettings::PerkAthleticsExpertRunFatigueRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsMasterRunFatigueRegenMult) == 0x0003B8, "Member 'UVOblivionInitialSettings::PerkAthleticsMasterRunFatigueRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsNoviceSprintFatigueCostMult) == 0x0003BC, "Member 'UVOblivionInitialSettings::PerkAthleticsNoviceSprintFatigueCostMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsApprenticeSprintFatigueCostMult) == 0x0003C0, "Member 'UVOblivionInitialSettings::PerkAthleticsApprenticeSprintFatigueCostMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsJourneymanSprintFatigueCostMult) == 0x0003C4, "Member 'UVOblivionInitialSettings::PerkAthleticsJourneymanSprintFatigueCostMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsExpertSprintFatigueCostMult) == 0x0003C8, "Member 'UVOblivionInitialSettings::PerkAthleticsExpertSprintFatigueCostMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkAthleticsMasterSprintFatigueCostMult) == 0x0003CC, "Member 'UVOblivionInitialSettings::PerkAthleticsMasterSprintFatigueCostMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceBlockPerkFatigueDamageMod) == 0x0003D0, "Member 'UVOblivionInitialSettings::NoviceBlockPerkFatigueDamageMod' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanBlockPerkFatigueDamageMod) == 0x0003D4, "Member 'UVOblivionInitialSettings::JourneymanBlockPerkFatigueDamageMod' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertBlockPerkFatigueDamageMod) == 0x0003D8, "Member 'UVOblivionInitialSettings::ExpertBlockPerkFatigueDamageMod' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterBlockPerkFatigueDamageMod) == 0x0003DC, "Member 'UVOblivionInitialSettings::MasterBlockPerkFatigueDamageMod' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueShieldBashBaseCost) == 0x0003E0, "Member 'UVOblivionInitialSettings::FatigueShieldBashBaseCost' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueShieldBashWeightMult) == 0x0003E4, "Member 'UVOblivionInitialSettings::FatigueShieldBashWeightMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueShieldBashFinalMult) == 0x0003E8, "Member 'UVOblivionInitialSettings::FatigueShieldBashFinalMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BaseShieldBashAttributeValue) == 0x0003EC, "Member 'UVOblivionInitialSettings::BaseShieldBashAttributeValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AttributeShieldBashBonusScalingMultiplier) == 0x0003F0, "Member 'UVOblivionInitialSettings::AttributeShieldBashBonusScalingMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BaseShieldBashSkillValue) == 0x0003F4, "Member 'UVOblivionInitialSettings::BaseShieldBashSkillValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SkillShieldBashBonusScalingMultiplier) == 0x0003F8, "Member 'UVOblivionInitialSettings::SkillShieldBashBonusScalingMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FinalShieldBashDamageMultiplier) == 0x0003FC, "Member 'UVOblivionInitialSettings::FinalShieldBashDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BlockMasterLevelShieldBashDamageMultiplier) == 0x000400, "Member 'UVOblivionInitialSettings::BlockMasterLevelShieldBashDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BlockFormulaSkillMutliplier) == 0x000404, "Member 'UVOblivionInitialSettings::BlockFormulaSkillMutliplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BlockFormulaFinalSkillMultiplier) == 0x000408, "Member 'UVOblivionInitialSettings::BlockFormulaFinalSkillMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceHandToHandPowerAttackDamageMultiplier) == 0x00040C, "Member 'UVOblivionInitialSettings::NoviceHandToHandPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ApprenticeHandToHandPowerAttackDamageMultiplier) == 0x000410, "Member 'UVOblivionInitialSettings::ApprenticeHandToHandPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanHandToHandPowerAttackDamageMultiplier) == 0x000414, "Member 'UVOblivionInitialSettings::JourneymanHandToHandPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertHandToHandPowerAttackDamageMultiplier) == 0x000418, "Member 'UVOblivionInitialSettings::ExpertHandToHandPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterHandToHandPowerAttackDamageMultiplier) == 0x00041C, "Member 'UVOblivionInitialSettings::MasterHandToHandPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HandToHandPerkNoviceLightAttackFatigueMultiplier) == 0x000420, "Member 'UVOblivionInitialSettings::HandToHandPerkNoviceLightAttackFatigueMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HandToHandPerkApprenticeLightAttackFatigueMultiplier) == 0x000424, "Member 'UVOblivionInitialSettings::HandToHandPerkApprenticeLightAttackFatigueMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HandToHandPerkJournyemanLightAttackFatigueMultiplier) == 0x000428, "Member 'UVOblivionInitialSettings::HandToHandPerkJournyemanLightAttackFatigueMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HandToHandPerkExpertLightAttackFatigueMultiplier) == 0x00042C, "Member 'UVOblivionInitialSettings::HandToHandPerkExpertLightAttackFatigueMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HandToHandPerkMasterLightAttackFatigueMultiplier) == 0x000430, "Member 'UVOblivionInitialSettings::HandToHandPerkMasterLightAttackFatigueMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HandToHandJourneymanPowerAttackDisarmChance) == 0x000434, "Member 'UVOblivionInitialSettings::HandToHandJourneymanPowerAttackDisarmChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceBluntPowerAttackDamageMultiplier) == 0x000438, "Member 'UVOblivionInitialSettings::NoviceBluntPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ApprenticeBluntPowerAttackDamageMultiplier) == 0x00043C, "Member 'UVOblivionInitialSettings::ApprenticeBluntPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanBluntPowerAttackDamageMultiplier) == 0x000440, "Member 'UVOblivionInitialSettings::JourneymanBluntPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertBluntPowerAttackDamageMultiplier) == 0x000444, "Member 'UVOblivionInitialSettings::ExpertBluntPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterBluntPowerAttackDamageMultiplier) == 0x000448, "Member 'UVOblivionInitialSettings::MasterBluntPowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkApprenticeDurabilityLossPercentage) == 0x00044C, "Member 'UVOblivionInitialSettings::BluntPerkApprenticeDurabilityLossPercentage' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkJourneymanPowerAttackSelfShieldMagnitude) == 0x000450, "Member 'UVOblivionInitialSettings::BluntPerkJourneymanPowerAttackSelfShieldMagnitude' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkJourneymanPowerAttackSelfShieldDuration) == 0x000454, "Member 'UVOblivionInitialSettings::BluntPerkJourneymanPowerAttackSelfShieldDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkMasterSelfShieldMagnitude) == 0x000458, "Member 'UVOblivionInitialSettings::BluntPerkMasterSelfShieldMagnitude' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkMasterPowerAttackSelfShieldDuration) == 0x00045C, "Member 'UVOblivionInitialSettings::BluntPerkMasterPowerAttackSelfShieldDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkPowerAttackSelfShieldChance) == 0x000460, "Member 'UVOblivionInitialSettings::BluntPerkPowerAttackSelfShieldChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkExpertLightAttackSilenceChance) == 0x000464, "Member 'UVOblivionInitialSettings::BluntPerkExpertLightAttackSilenceChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BluntPerkLightAttackSilenceDuration) == 0x000468, "Member 'UVOblivionInitialSettings::BluntPerkLightAttackSilenceDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceBladePowerAttackDamageMultiplier) == 0x00046C, "Member 'UVOblivionInitialSettings::NoviceBladePowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ApprenticeBladePowerAttackDamageMultiplier) == 0x000470, "Member 'UVOblivionInitialSettings::ApprenticeBladePowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanBladePowerAttackDamageMultiplier) == 0x000474, "Member 'UVOblivionInitialSettings::JourneymanBladePowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertBladePowerAttackDamageMultiplier) == 0x000478, "Member 'UVOblivionInitialSettings::ExpertBladePowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterBladePowerAttackDamageMultiplier) == 0x00047C, "Member 'UVOblivionInitialSettings::MasterBladePowerAttackDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkApprenticeDurabilityLossPercentage) == 0x000480, "Member 'UVOblivionInitialSettings::BladePerkApprenticeDurabilityLossPercentage' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkJourneymanPowerAttackWeaknessToNormWeapMagnitude) == 0x000484, "Member 'UVOblivionInitialSettings::BladePerkJourneymanPowerAttackWeaknessToNormWeapMagnitude' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkJourneymanPowerAttackWeaknessToNormWeapDuration) == 0x000488, "Member 'UVOblivionInitialSettings::BladePerkJourneymanPowerAttackWeaknessToNormWeapDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkMasterPowerAttackWeaknessToNormWeapMagnitude) == 0x00048C, "Member 'UVOblivionInitialSettings::BladePerkMasterPowerAttackWeaknessToNormWeapMagnitude' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkMasterPowerAttackWeaknessToNormWeapDuration) == 0x000490, "Member 'UVOblivionInitialSettings::BladePerkMasterPowerAttackWeaknessToNormWeapDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkPowerAttackWeaknessToNormWeapChanceModifier) == 0x000494, "Member 'UVOblivionInitialSettings::BladePerkPowerAttackWeaknessToNormWeapChanceModifier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkExpertLightAttackDamageHealthChance) == 0x000498, "Member 'UVOblivionInitialSettings::BladePerkExpertLightAttackDamageHealthChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkExpertLightAttackDamageHealthLevelMultiplier) == 0x00049C, "Member 'UVOblivionInitialSettings::BladePerkExpertLightAttackDamageHealthLevelMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BladePerkExpertLightAttackDamageHealthDuration) == 0x0004A0, "Member 'UVOblivionInitialSettings::BladePerkExpertLightAttackDamageHealthDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BaseWeaponDamageMultiplier) == 0x0004A4, "Member 'UVOblivionInitialSettings::BaseWeaponDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AttributeDamageMultiplier) == 0x0004A8, "Member 'UVOblivionInitialSettings::AttributeDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinimumAttributeDamage) == 0x0004AC, "Member 'UVOblivionInitialSettings::MinimumAttributeDamage' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SkillDamageMultiplier) == 0x0004B0, "Member 'UVOblivionInitialSettings::SkillDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinimumSkillDamage) == 0x0004B4, "Member 'UVOblivionInitialSettings::MinimumSkillDamage' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinimumHandToHandBlockValue) == 0x0004B8, "Member 'UVOblivionInitialSettings::MinimumHandToHandBlockValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinimumWeaponBlockValue) == 0x0004BC, "Member 'UVOblivionInitialSettings::MinimumWeaponBlockValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinimumShieldBlockValue) == 0x0004C0, "Member 'UVOblivionInitialSettings::MinimumShieldBlockValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakPerkExpertLightImpactModifier) == 0x0004C4, "Member 'UVOblivionInitialSettings::SneakPerkExpertLightImpactModifier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FirstPersonArmsHeight) == 0x0004C8, "Member 'UVOblivionInitialSettings::FirstPersonArmsHeight' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakTransitionSpeed) == 0x0004CC, "Member 'UVOblivionInitialSettings::SneakTransitionSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakNoticedMin) == 0x0004D0, "Member 'UVOblivionInitialSettings::SneakNoticedMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakSeenMin) == 0x0004D4, "Member 'UVOblivionInitialSettings::SneakSeenMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakUnseenMin) == 0x0004D8, "Member 'UVOblivionInitialSettings::SneakUnseenMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakLostMin) == 0x0004DC, "Member 'UVOblivionInitialSettings::SneakLostMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinimalDetectionValue) == 0x0004E0, "Member 'UVOblivionInitialSettings::MinimalDetectionValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DetectionNightEyeBonus) == 0x0004E4, "Member 'UVOblivionInitialSettings::DetectionNightEyeBonus' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakMaxDistance) == 0x0004E8, "Member 'UVOblivionInitialSettings::SneakMaxDistance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakExteriorDistanceMult) == 0x0004EC, "Member 'UVOblivionInitialSettings::SneakExteriorDistanceMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakBootWeightBase) == 0x0004F0, "Member 'UVOblivionInitialSettings::SneakBootWeightBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakBootWeightMult) == 0x0004F4, "Member 'UVOblivionInitialSettings::SneakBootWeightMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakTargetInCombatBonus) == 0x0004F8, "Member 'UVOblivionInitialSettings::SneakTargetInCombatBonus' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakRunningMult) == 0x0004FC, "Member 'UVOblivionInitialSettings::SneakRunningMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakSoundLosMult) == 0x000500, "Member 'UVOblivionInitialSettings::SneakSoundLosMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultNonSneakingSoundMult) == 0x000504, "Member 'UVOblivionInitialSettings::DefaultNonSneakingSoundMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NoviceSneakSoundsMult) == 0x000508, "Member 'UVOblivionInitialSettings::NoviceSneakSoundsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ApprenticeSneakSoundsMult) == 0x00050C, "Member 'UVOblivionInitialSettings::ApprenticeSneakSoundsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, JourneymanSneakSoundsMult) == 0x000510, "Member 'UVOblivionInitialSettings::JourneymanSneakSoundsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExpertSneakSoundsMult) == 0x000514, "Member 'UVOblivionInitialSettings::ExpertSneakSoundsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MasterSneakSoundsMult) == 0x000518, "Member 'UVOblivionInitialSettings::MasterSneakSoundsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DetectionSneakLightMod) == 0x00051C, "Member 'UVOblivionInitialSettings::DetectionSneakLightMod' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakLightMult) == 0x000520, "Member 'UVOblivionInitialSettings::SneakLightMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakSkillMult) == 0x000524, "Member 'UVOblivionInitialSettings::SneakSkillMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakTargetAttackBonus) == 0x000528, "Member 'UVOblivionInitialSettings::SneakTargetAttackBonus' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakSwimmingLightMult) == 0x00052C, "Member 'UVOblivionInitialSettings::SneakSwimmingLightMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakSleepBonus) == 0x000530, "Member 'UVOblivionInitialSettings::SneakSleepBonus' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SneakBaseValue) == 0x000534, "Member 'UVOblivionInitialSettings::SneakBaseValue' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CombatAIHoldTimeMultiplier) == 0x000538, "Member 'UVOblivionInitialSettings::CombatAIHoldTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, StepHeight) == 0x00053C, "Member 'UVOblivionInitialSettings::StepHeight' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MaxSlope) == 0x000540, "Member 'UVOblivionInitialSettings::MaxSlope' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bUseOblivionLikeWalkingPhysics) == 0x000544, "Member 'UVOblivionInitialSettings::bUseOblivionLikeWalkingPhysics' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultUseFlatBaseForFloorChecks) == 0x000545, "Member 'UVOblivionInitialSettings::bDefaultUseFlatBaseForFloorChecks' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultNonLandscapeCollisionProfilesEligibleForAntiClimbing) == 0x000548, "Member 'UVOblivionInitialSettings::DefaultNonLandscapeCollisionProfilesEligibleForAntiClimbing' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMaxSlopeAngleForFloorsNotEligibleForAntiClimbing) == 0x000598, "Member 'UVOblivionInitialSettings::DefaultMaxSlopeAngleForFloorsNotEligibleForAntiClimbing' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMinSlopeAntiClimbingActivationAngle) == 0x00059C, "Member 'UVOblivionInitialSettings::DefaultMinSlopeAntiClimbingActivationAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMaxSlopeAntiClimbingActivationAngle) == 0x0005A0, "Member 'UVOblivionInitialSettings::DefaultMaxSlopeAntiClimbingActivationAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultSlopeAngleThresholdToUseDirectionalAntiClimbing) == 0x0005A4, "Member 'UVOblivionInitialSettings::DefaultSlopeAngleThresholdToUseDirectionalAntiClimbing' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMaxSlopeAngleBeforeSlide) == 0x0005A8, "Member 'UVOblivionInitialSettings::DefaultMaxSlopeAngleBeforeSlide' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMinJumpOffSlopeAngle) == 0x0005AC, "Member 'UVOblivionInitialSettings::DefaultMinJumpOffSlopeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMinJumpOffSlopeVelocity) == 0x0005B0, "Member 'UVOblivionInitialSettings::DefaultMinJumpOffSlopeVelocity' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMinAntiClimbingFactor) == 0x0005B4, "Member 'UVOblivionInitialSettings::DefaultMinAntiClimbingFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMaxAntiClimbingFactor) == 0x0005B8, "Member 'UVOblivionInitialSettings::DefaultMaxAntiClimbingFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultAntiClimbingFactorAgainstSlopeAngleCurve) == 0x0005C0, "Member 'UVOblivionInitialSettings::DefaultAntiClimbingFactorAgainstSlopeAngleCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultNonLandscapeFloorAntiClimbingReducingFactorAgainstSlopeAngleCurve) == 0x0005E8, "Member 'UVOblivionInitialSettings::DefaultNonLandscapeFloorAntiClimbingReducingFactorAgainstSlopeAngleCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMinVelocitySmoothingSpeed) == 0x000610, "Member 'UVOblivionInitialSettings::DefaultMinVelocitySmoothingSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMaxVelocitySmoothingSpeed) == 0x000614, "Member 'UVOblivionInitialSettings::DefaultMaxVelocitySmoothingSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultVelocitySmoothingAgainstSlopeAngleCurve) == 0x000618, "Member 'UVOblivionInitialSettings::DefaultVelocitySmoothingAgainstSlopeAngleCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultCapUpwardVelocityAtMaxSlopeAngle) == 0x000640, "Member 'UVOblivionInitialSettings::bDefaultCapUpwardVelocityAtMaxSlopeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDefaultPreventJumpOnStiffSlopes) == 0x000641, "Member 'UVOblivionInitialSettings::bDefaultPreventJumpOnStiffSlopes' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultPreventJumpMinSlopeAngle) == 0x000644, "Member 'UVOblivionInitialSettings::DefaultPreventJumpMinSlopeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMaxSlopeAngleForFloorsNotEligibleForAntiClimbing) == 0x000648, "Member 'UVOblivionInitialSettings::HorseDefaultMaxSlopeAngleForFloorsNotEligibleForAntiClimbing' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMinSlopeAntiClimbingActivationAngle) == 0x00064C, "Member 'UVOblivionInitialSettings::HorseDefaultMinSlopeAntiClimbingActivationAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMaxSlopeAntiClimbingActivationAngle) == 0x000650, "Member 'UVOblivionInitialSettings::HorseDefaultMaxSlopeAntiClimbingActivationAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultSlopeAngleThresholdToUseDirectionalAntiClimbing) == 0x000654, "Member 'UVOblivionInitialSettings::HorseDefaultSlopeAngleThresholdToUseDirectionalAntiClimbing' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMaxSlopeAngleBeforeSlide) == 0x000658, "Member 'UVOblivionInitialSettings::HorseDefaultMaxSlopeAngleBeforeSlide' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMinJumpOffSlopeAngle) == 0x00065C, "Member 'UVOblivionInitialSettings::HorseDefaultMinJumpOffSlopeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMinJumpOffSlopeVelocity) == 0x000660, "Member 'UVOblivionInitialSettings::HorseDefaultMinJumpOffSlopeVelocity' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMinAntiClimbingFactor) == 0x000664, "Member 'UVOblivionInitialSettings::HorseDefaultMinAntiClimbingFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMaxAntiClimbingFactor) == 0x000668, "Member 'UVOblivionInitialSettings::HorseDefaultMaxAntiClimbingFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultAntiClimbingFactorAgainstSlopeAngleCurve) == 0x000670, "Member 'UVOblivionInitialSettings::HorseDefaultAntiClimbingFactorAgainstSlopeAngleCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultNonLandscapeFloorAntiClimbingReducingFactorAgainstSlopeAngleCurve) == 0x000698, "Member 'UVOblivionInitialSettings::HorseDefaultNonLandscapeFloorAntiClimbingReducingFactorAgainstSlopeAngleCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMinVelocitySmoothingSpeed) == 0x0006C0, "Member 'UVOblivionInitialSettings::HorseDefaultMinVelocitySmoothingSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultMaxVelocitySmoothingSpeed) == 0x0006C4, "Member 'UVOblivionInitialSettings::HorseDefaultMaxVelocitySmoothingSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultVelocitySmoothingAgainstSlopeAngleCurve) == 0x0006C8, "Member 'UVOblivionInitialSettings::HorseDefaultVelocitySmoothingAgainstSlopeAngleCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bHorseDefaultCapUpwardVelocityAtMaxSlopeAngle) == 0x0006F0, "Member 'UVOblivionInitialSettings::bHorseDefaultCapUpwardVelocityAtMaxSlopeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bHorseDefaultPreventJumpOnStiffSlopes) == 0x0006F1, "Member 'UVOblivionInitialSettings::bHorseDefaultPreventJumpOnStiffSlopes' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HorseDefaultPreventJumpMinSlopeAngle) == 0x0006F4, "Member 'UVOblivionInitialSettings::HorseDefaultPreventJumpMinSlopeAngle' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveRunMult) == 0x0006F8, "Member 'UVOblivionInitialSettings::DefaultMoveRunMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveRunAthleticsMult) == 0x0006FC, "Member 'UVOblivionInitialSettings::DefaultMoveRunAthleticsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSwimRunAthleticsMult) == 0x000700, "Member 'UVOblivionInitialSettings::DefaultMoveSwimRunAthleticsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSwimRunBase) == 0x000704, "Member 'UVOblivionInitialSettings::DefaultMoveSwimRunBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSwimWalkAthleticsMult) == 0x000708, "Member 'UVOblivionInitialSettings::DefaultMoveSwimWalkAthleticsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSwimWalkBase) == 0x00070C, "Member 'UVOblivionInitialSettings::DefaultMoveSwimWalkBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultStrengthEncumbranceMult) == 0x000710, "Member 'UVOblivionInitialSettings::DefaultStrengthEncumbranceMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveWeightMax) == 0x000714, "Member 'UVOblivionInitialSettings::DefaultMoveWeightMax' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveWeightMin) == 0x000718, "Member 'UVOblivionInitialSettings::DefaultMoveWeightMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSprintBaseMult) == 0x00071C, "Member 'UVOblivionInitialSettings::DefaultMoveSprintBaseMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSprintAthleticsMult) == 0x000720, "Member 'UVOblivionInitialSettings::DefaultMoveSprintAthleticsMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveCharWalkMax) == 0x000724, "Member 'UVOblivionInitialSettings::DefaultMoveCharWalkMax' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveCharWalkMin) == 0x000728, "Member 'UVOblivionInitialSettings::DefaultMoveCharWalkMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveCreatureWalkMax) == 0x00072C, "Member 'UVOblivionInitialSettings::DefaultMoveCreatureWalkMax' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveCreatureWalkMin) == 0x000730, "Member 'UVOblivionInitialSettings::DefaultMoveCreatureWalkMin' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveEncumEffectNoWea) == 0x000734, "Member 'UVOblivionInitialSettings::DefaultMoveEncumEffectNoWea' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveEncumEffect) == 0x000738, "Member 'UVOblivionInitialSettings::DefaultMoveEncumEffect' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveNoWeaponMult) == 0x00073C, "Member 'UVOblivionInitialSettings::DefaultMoveNoWeaponMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSneakMult) == 0x000740, "Member 'UVOblivionInitialSettings::DefaultMoveSneakMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveSneakRunMult) == 0x000744, "Member 'UVOblivionInitialSettings::DefaultMoveSneakRunMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveMaxFlySpeed) == 0x000748, "Member 'UVOblivionInitialSettings::DefaultMoveMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultMoveMinFlySpeed) == 0x00074C, "Member 'UVOblivionInitialSettings::DefaultMoveMinFlySpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, OverEncumbranceSpeed) == 0x000750, "Member 'UVOblivionInitialSettings::OverEncumbranceSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AirControlModifier) == 0x000754, "Member 'UVOblivionInitialSettings::AirControlModifier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, KillZTeleportCustomResearchDist) == 0x000758, "Member 'UVOblivionInitialSettings::KillZTeleportCustomResearchDist' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, TeleportHeightIfStuckInGround) == 0x00075C, "Member 'UVOblivionInitialSettings::TeleportHeightIfStuckInGround' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, IdleMinDuration) == 0x000760, "Member 'UVOblivionInitialSettings::IdleMinDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DrawWeaponDuration) == 0x000764, "Member 'UVOblivionInitialSettings::DrawWeaponDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PreparePowerAttackDuration) == 0x000768, "Member 'UVOblivionInitialSettings::PreparePowerAttackDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArrowLifeDuration) == 0x00076C, "Member 'UVOblivionInitialSettings::ArrowLifeDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinPawnProjectilePenetrationDepth) == 0x000770, "Member 'UVOblivionInitialSettings::MinPawnProjectilePenetrationDepth' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MaxPawnProjectilePenetrationDepth) == 0x000774, "Member 'UVOblivionInitialSettings::MaxPawnProjectilePenetrationDepth' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinPawnProjectileVelocityThreshold) == 0x000778, "Member 'UVOblivionInitialSettings::MinPawnProjectileVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MaxPawnProjectileVelocityThreshold) == 0x00077C, "Member 'UVOblivionInitialSettings::MaxPawnProjectileVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArrowInventoryChancePercentOnTargetHit) == 0x000780, "Member 'UVOblivionInitialSettings::ArrowInventoryChancePercentOnTargetHit' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArrowFadeDuration) == 0x000784, "Member 'UVOblivionInitialSettings::ArrowFadeDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SpellCastingDuration) == 0x000788, "Member 'UVOblivionInitialSettings::SpellCastingDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FogProjectileLifeDuration) == 0x00078C, "Member 'UVOblivionInitialSettings::FogProjectileLifeDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ClairvoyanceRefreshDelay) == 0x000790, "Member 'UVOblivionInitialSettings::ClairvoyanceRefreshDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, TelekinesisThrowForce) == 0x000798, "Member 'UVOblivionInitialSettings::TelekinesisThrowForce' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BarBlinkAnimLoopNum) == 0x00079C, "Member 'UVOblivionInitialSettings::BarBlinkAnimLoopNum' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BarBlinkAnimSpeed) == 0x0007A0, "Member 'UVOblivionInitialSettings::BarBlinkAnimSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HealthBarBlinkProgressThreshold) == 0x0007A4, "Member 'UVOblivionInitialSettings::HealthBarBlinkProgressThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BreathBarBlinkProgressThreshold) == 0x0007A8, "Member 'UVOblivionInitialSettings::BreathBarBlinkProgressThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BloodDropEmergeSpeed) == 0x0007AC, "Member 'UVOblivionInitialSettings::BloodDropEmergeSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BloodDropStayDuration) == 0x0007B0, "Member 'UVOblivionInitialSettings::BloodDropStayDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BloodDropFadeOutSpeed) == 0x0007B4, "Member 'UVOblivionInitialSettings::BloodDropFadeOutSpeed' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinDamagePercentForBloodDropAppearance) == 0x0007B8, "Member 'UVOblivionInitialSettings::MinDamagePercentForBloodDropAppearance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MaxDamagePercentForBloodDropVisualEnhancement) == 0x0007BC, "Member 'UVOblivionInitialSettings::MaxDamagePercentForBloodDropVisualEnhancement' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MinBloodDropScaleFactor) == 0x0007C0, "Member 'UVOblivionInitialSettings::MinBloodDropScaleFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FullProgressReductionDuration) == 0x0007C4, "Member 'UVOblivionInitialSettings::FullProgressReductionDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, WaitToStartReductionAnimDuration) == 0x0007C8, "Member 'UVOblivionInitialSettings::WaitToStartReductionAnimDuration' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BowHoldPowerCurve) == 0x0007D0, "Member 'UVOblivionInitialSettings::BowHoldPowerCurve' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BowHoldMinimumCompletion) == 0x0007F8, "Member 'UVOblivionInitialSettings::BowHoldMinimumCompletion' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BowHoldCompletionPerSecond) == 0x0007FC, "Member 'UVOblivionInitialSettings::BowHoldCompletionPerSecond' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArrowWeakSpeedMultiplier) == 0x000800, "Member 'UVOblivionInitialSettings::ArrowWeakSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ArrowInitialSpeedMultiplier) == 0x000804, "Member 'UVOblivionInitialSettings::ArrowInitialSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MagicProjectileSpeedMultiplier) == 0x000808, "Member 'UVOblivionInitialSettings::MagicProjectileSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NewFormulaMagickaReturnLinearMult) == 0x00080C, "Member 'UVOblivionInitialSettings::NewFormulaMagickaReturnLinearMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NewFormulaMagickaReturnQuadraticMult) == 0x000810, "Member 'UVOblivionInitialSettings::NewFormulaMagickaReturnQuadraticMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PCHealthNewFormulaLevelEnduranceMult) == 0x000814, "Member 'UVOblivionInitialSettings::PCHealthNewFormulaLevelEnduranceMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PCHealthNewFormulaEnduranceMult) == 0x000818, "Member 'UVOblivionInitialSettings::PCHealthNewFormulaEnduranceMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PCHealthNewFormulaStrengthMult) == 0x00081C, "Member 'UVOblivionInitialSettings::PCHealthNewFormulaStrengthMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NewFormulaFatigueMult) == 0x000820, "Member 'UVOblivionInitialSettings::NewFormulaFatigueMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NewFormulaWillpowerMult) == 0x000824, "Member 'UVOblivionInitialSettings::NewFormulaWillpowerMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NewFormulaAgilityMult) == 0x000828, "Member 'UVOblivionInitialSettings::NewFormulaAgilityMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDoesOblivionShowPlayerLeveling) == 0x00082C, "Member 'UVOblivionInitialSettings::bDoesOblivionShowPlayerLeveling' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, SkillLevelUpGrantedXPExponent) == 0x000830, "Member 'UVOblivionInitialSettings::SkillLevelUpGrantedXPExponent' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerLevelUpBaseLevelXP) == 0x000834, "Member 'UVOblivionInitialSettings::PlayerLevelUpBaseLevelXP' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerLevelUpXPFactor) == 0x000838, "Member 'UVOblivionInitialSettings::PlayerLevelUpXPFactor' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerLevelUpXPExponent) == 0x00083C, "Member 'UVOblivionInitialSettings::PlayerLevelUpXPExponent' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMercantileApprenticeLevelOffset) == 0x000840, "Member 'UVOblivionInitialSettings::PerkMercantileApprenticeLevelOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMercantileJourneymanLevelOffset) == 0x000844, "Member 'UVOblivionInitialSettings::PerkMercantileJourneymanLevelOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PerkMercantileMasterLevelOffset) == 0x000848, "Member 'UVOblivionInitialSettings::PerkMercantileMasterLevelOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AlchemyApprenticeDoubleCraftChance) == 0x00084C, "Member 'UVOblivionInitialSettings::AlchemyApprenticeDoubleCraftChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AlchemyJourneymanDoubleCraftChance) == 0x000850, "Member 'UVOblivionInitialSettings::AlchemyJourneymanDoubleCraftChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AlchemyExpertDoubleCraftChance) == 0x000854, "Member 'UVOblivionInitialSettings::AlchemyExpertDoubleCraftChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AlchemyMasterDoubleCraftChance) == 0x000858, "Member 'UVOblivionInitialSettings::AlchemyMasterDoubleCraftChance' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PersuasionExpGainDispositionIncreased) == 0x00085C, "Member 'UVOblivionInitialSettings::PersuasionExpGainDispositionIncreased' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PersuasionExpGainDispositionDecreased) == 0x000860, "Member 'UVOblivionInitialSettings::PersuasionExpGainDispositionDecreased' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MercantileExpTransactionMult) == 0x000864, "Member 'UVOblivionInitialSettings::MercantileExpTransactionMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AthleticsExpRunning) == 0x000868, "Member 'UVOblivionInitialSettings::AthleticsExpRunning' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AthleticsExpSwimming) == 0x00086C, "Member 'UVOblivionInitialSettings::AthleticsExpSwimming' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AthleticsExpSprinting) == 0x000870, "Member 'UVOblivionInitialSettings::AthleticsExpSprinting' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AlterationExpCastMult) == 0x000874, "Member 'UVOblivionInitialSettings::AlterationExpCastMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ConjurationExpCastMult) == 0x000878, "Member 'UVOblivionInitialSettings::ConjurationExpCastMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DestructionExpCastMult) == 0x00087C, "Member 'UVOblivionInitialSettings::DestructionExpCastMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, IllusionExpCastMult) == 0x000880, "Member 'UVOblivionInitialSettings::IllusionExpCastMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MysticismExpCastMult) == 0x000884, "Member 'UVOblivionInitialSettings::MysticismExpCastMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, RestorationExpCastMult) == 0x000888, "Member 'UVOblivionInitialSettings::RestorationExpCastMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, LowThreatLevelOffset) == 0x00088C, "Member 'UVOblivionInitialSettings::LowThreatLevelOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MediumThreatLevelOffset) == 0x000890, "Member 'UVOblivionInitialSettings::MediumThreatLevelOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HighThreatLevelOffset) == 0x000894, "Member 'UVOblivionInitialSettings::HighThreatLevelOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BrokenWeaponDamageMultiplier) == 0x000898, "Member 'UVOblivionInitialSettings::BrokenWeaponDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultWeaponDamageMultiplier) == 0x00089C, "Member 'UVOblivionInitialSettings::DefaultWeaponDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ImprovedWeaponDamageMultiplier) == 0x0008A0, "Member 'UVOblivionInitialSettings::ImprovedWeaponDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, BrokenArmorEfficiencyMultiplier) == 0x0008A4, "Member 'UVOblivionInitialSettings::BrokenArmorEfficiencyMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, DefaultArmorEfficiencyMultiplier) == 0x0008A8, "Member 'UVOblivionInitialSettings::DefaultArmorEfficiencyMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ImprovedArmorEfficiencyMultiplier) == 0x0008AC, "Member 'UVOblivionInitialSettings::ImprovedArmorEfficiencyMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CreatureHealthScalingMultiplier) == 0x0008B0, "Member 'UVOblivionInitialSettings::CreatureHealthScalingMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CreatureDamageScalingMultiplier) == 0x0008B4, "Member 'UVOblivionInitialSettings::CreatureDamageScalingMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CreatureFatigueScalingMultiplier) == 0x0008B8, "Member 'UVOblivionInitialSettings::CreatureFatigueScalingMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CreatureWeaponDamageMultiplier) == 0x0008BC, "Member 'UVOblivionInitialSettings::CreatureWeaponDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, EnterLowFatigueThreshold) == 0x0008C0, "Member 'UVOblivionInitialSettings::EnterLowFatigueThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, ExitLowFatigueThreshold) == 0x0008C4, "Member 'UVOblivionInitialSettings::ExitLowFatigueThreshold' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDoesOblivionDrawCapsuleColliders) == 0x0008C8, "Member 'UVOblivionInitialSettings::bDoesOblivionDrawCapsuleColliders' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDoesOblivionDrawGrabDebugDisplay) == 0x0008C9, "Member 'UVOblivionInitialSettings::bDoesOblivionDrawGrabDebugDisplay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDoesOblivionShowPlayerDetectionLighting) == 0x0008CA, "Member 'UVOblivionInitialSettings::bDoesOblivionShowPlayerDetectionLighting' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDoesOblivionOutputSaveGameFileDebugInfoOnSaving) == 0x0008CB, "Member 'UVOblivionInitialSettings::bDoesOblivionOutputSaveGameFileDebugInfoOnSaving' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bDoesOblivionOutputSaveGameFileDebugInfoOnLoading) == 0x0008CC, "Member 'UVOblivionInitialSettings::bDoesOblivionOutputSaveGameFileDebugInfoOnLoading' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bIsEnsurePairingEntryValidityEnabledForOblivionSendHandler) == 0x0008CD, "Member 'UVOblivionInitialSettings::bIsEnsurePairingEntryValidityEnabledForOblivionSendHandler' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bShouldCameraTrackTarget) == 0x0008CE, "Member 'UVOblivionInitialSettings::bShouldCameraTrackTarget' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bIsGodMode) == 0x0008CF, "Member 'UVOblivionInitialSettings::bIsGodMode' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bIsFastTransitionEnabled) == 0x0008D0, "Member 'UVOblivionInitialSettings::bIsFastTransitionEnabled' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnableFastTransitionInjectedWorlds) == 0x0008D1, "Member 'UVOblivionInitialSettings::bEnableFastTransitionInjectedWorlds' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnableFastTransitionParentNonWorldPartition) == 0x0008D2, "Member 'UVOblivionInitialSettings::bEnableFastTransitionParentNonWorldPartition' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bEnableFastTransitionPreLoadHouses) == 0x0008D3, "Member 'UVOblivionInitialSettings::bEnableFastTransitionPreLoadHouses' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MaxFastTransitionUnloadCacheSize) == 0x0008D4, "Member 'UVOblivionInitialSettings::MaxFastTransitionUnloadCacheSize' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FastTransitionLevelPreloadingDoorExtent) == 0x0008D8, "Member 'UVOblivionInitialSettings::FastTransitionLevelPreloadingDoorExtent' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HealthRegenBase) == 0x0008F0, "Member 'UVOblivionInitialSettings::HealthRegenBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HealthRegenEnduranceMult) == 0x0008F4, "Member 'UVOblivionInitialSettings::HealthRegenEnduranceMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueRegenBase) == 0x0008F8, "Member 'UVOblivionInitialSettings::FatigueRegenBase' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueRegenAgilityMult) == 0x0008FC, "Member 'UVOblivionInitialSettings::FatigueRegenAgilityMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HealthRegenDelay) == 0x000900, "Member 'UVOblivionInitialSettings::HealthRegenDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MagickaRegenDelay) == 0x000904, "Member 'UVOblivionInitialSettings::MagickaRegenDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueRegenDelay) == 0x000908, "Member 'UVOblivionInitialSettings::FatigueRegenDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, HealthRegenOutsideCombatMult) == 0x00090C, "Member 'UVOblivionInitialSettings::HealthRegenOutsideCombatMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, MagickaRegenOutsideCombatMult) == 0x000910, "Member 'UVOblivionInitialSettings::MagickaRegenOutsideCombatMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, FatigueRegenOutsideCombatMult) == 0x000914, "Member 'UVOblivionInitialSettings::FatigueRegenOutsideCombatMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, PlayerHealthRegenMult) == 0x000918, "Member 'UVOblivionInitialSettings::PlayerHealthRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, NPCHealthRegenMult) == 0x00091C, "Member 'UVOblivionInitialSettings::NPCHealthRegenMult' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bAreDeadDefaultPosesEnabled) == 0x000920, "Member 'UVOblivionInitialSettings::bAreDeadDefaultPosesEnabled' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, bShouldSaveDatatableDeadDefaultPose) == 0x000921, "Member 'UVOblivionInitialSettings::bShouldSaveDatatableDeadDefaultPose' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, AimSlowdownRaycastCheckDelay) == 0x000924, "Member 'UVOblivionInitialSettings::AimSlowdownRaycastCheckDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, KillZOffset) == 0x000928, "Member 'UVOblivionInitialSettings::KillZOffset' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, CameraShakeCheckDelay) == 0x00092C, "Member 'UVOblivionInitialSettings::CameraShakeCheckDelay' has a wrong offset!");
static_assert(offsetof(UVOblivionInitialSettings, StatueAnimationSpecialIdle) == 0x000930, "Member 'UVOblivionInitialSettings::StatueAnimationSpecialIdle' has a wrong offset!");

// Class UE5AltarPairing.WorldSpaceConversionLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldSpaceConversionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetTESWorldToUnrealWorldScale();
	static float GetUnrealWorldToTESWorldScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldSpaceConversionLibrary">();
	}
	static class UWorldSpaceConversionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldSpaceConversionLibrary>();
	}
};
static_assert(alignof(UWorldSpaceConversionLibrary) == 0x000008, "Wrong alignment on UWorldSpaceConversionLibrary");
static_assert(sizeof(UWorldSpaceConversionLibrary) == 0x000028, "Wrong size on UWorldSpaceConversionLibrary");

}

