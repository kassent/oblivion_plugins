#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_VideoMenu_ValueSwitcher

#include "Basic.hpp"

#include "WBP_VideoMenu_ValueSwitcher_classes.hpp"
#include "WBP_VideoMenu_ValueSwitcher_parameters.hpp"


namespace SDK
{

// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.BndEvt__WBP_VideoMenu_ValueSwitcher_RowOption_K2Node_ComponentBoundEvent_0_OnValueUpdated__DelegateSignature
// (BlueprintEvent)
// Parameters:
// const class FText&                      Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_VideoMenu_ValueSwitcher_C::BndEvt__WBP_VideoMenu_ValueSwitcher_RowOption_K2Node_ComponentBoundEvent_0_OnValueUpdated__DelegateSignature(const class FText& Value, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "BndEvt__WBP_VideoMenu_ValueSwitcher_RowOption_K2Node_ComponentBoundEvent_0_OnValueUpdated__DelegateSignature");

	Params::WBP_VideoMenu_ValueSwitcher_C_BndEvt__WBP_VideoMenu_ValueSwitcher_RowOption_K2Node_ComponentBoundEvent_0_OnValueUpdated__DelegateSignature Parms{};

	Parms.Value = std::move(Value);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.ExecuteUbergraph_WBP_VideoMenu_ValueSwitcher
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_VideoMenu_ValueSwitcher_C::ExecuteUbergraph_WBP_VideoMenu_ValueSwitcher(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "ExecuteUbergraph_WBP_VideoMenu_ValueSwitcher");

	Params::WBP_VideoMenu_ValueSwitcher_C_ExecuteUbergraph_WBP_VideoMenu_ValueSwitcher Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.OnFocus
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UWBP_VideoMenu_ValueSwitcher_C::OnFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "OnFocus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.OnRefresh
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UWBP_VideoMenu_ValueSwitcher_C::OnRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "OnRefresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.Prepare Screen Mode CMD
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    OptionLabel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          NewCMD                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_VideoMenu_ValueSwitcher_C::Prepare_Screen_Mode_CMD(const class FString& OptionLabel, class FString* NewCMD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "Prepare Screen Mode CMD");

	Params::WBP_VideoMenu_ValueSwitcher_C_Prepare_Screen_Mode_CMD Parms{};

	Parms.OptionLabel = std::move(OptionLabel);

	UObject::ProcessEvent(Func, &Parms);

	if (NewCMD != nullptr)
		*NewCMD = std::move(Parms.NewCMD);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.Prepare Supported Resolution Options
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_VideoMenu_ValueSwitcher_C::Prepare_Supported_Resolution_Options()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "Prepare Supported Resolution Options");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.Refresh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_VideoMenu_ValueSwitcher_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.Update Resolution in Game User Settings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Option_Label                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_VideoMenu_ValueSwitcher_C::Update_Resolution_in_Game_User_Settings(const class FString& Option_Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "Update Resolution in Game User Settings");

	Params::WBP_VideoMenu_ValueSwitcher_C_Update_Resolution_in_Game_User_Settings Parms{};

	Parms.Option_Label = std::move(Option_Label);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.Update Selected Resolution
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    OptionsText                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_VideoMenu_ValueSwitcher_C::Update_Selected_Resolution(TArray<class FText>& OptionsText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "Update Selected Resolution");

	Params::WBP_VideoMenu_ValueSwitcher_C_Update_Selected_Resolution Parms{};

	Parms.OptionsText = std::move(OptionsText);

	UObject::ProcessEvent(Func, &Parms);

	OptionsText = std::move(Parms.OptionsText);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.UpdateValue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_VideoMenu_ValueSwitcher_C::UpdateValue(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "UpdateValue");

	Params::WBP_VideoMenu_ValueSwitcher_C_UpdateValue Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_VideoMenu_ValueSwitcher.WBP_VideoMenu_ValueSwitcher_C.BP_GetDesiredFocusTarget
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UWBP_VideoMenu_ValueSwitcher_C::BP_GetDesiredFocusTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_VideoMenu_ValueSwitcher_C", "BP_GetDesiredFocusTarget");

	Params::WBP_VideoMenu_ValueSwitcher_C_BP_GetDesiredFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

