#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QMPUnrealIntegration

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "QMPUnrealIntegration_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class QMPUnrealIntegration.GameLocationRecorder
// 0x0010 (0x0038 - 0x0028)
class UGameLocationRecorder final : public UObject
{
public:
	TArray<struct FGameLocationEntry>             Records;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameLocationRecorder">();
	}
	static class UGameLocationRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameLocationRecorder>();
	}
};
static_assert(alignof(UGameLocationRecorder) == 0x000008, "Wrong alignment on UGameLocationRecorder");
static_assert(sizeof(UGameLocationRecorder) == 0x000038, "Wrong size on UGameLocationRecorder");
static_assert(offsetof(UGameLocationRecorder, Records) == 0x000028, "Member 'UGameLocationRecorder::Records' has a wrong offset!");

// Class QMPUnrealIntegration.InputRecordSave
// 0x0068 (0x0090 - 0x0028)
class UInputRecordSave : public USaveGame
{
public:
	TArray<struct FKeyInputReplayKeyData>         KeyData;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUIEvent>                       UIEventData;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKeyInputReplayActorData>       ActorData;                                         // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSyncEventInfo>                 SyncEvents;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInteractInfo>                  InteractEvents;                                    // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActorEventInfo>                ActorEvents;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bGodModeAtStart;                                   // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndTime;                                           // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputRecordSave">();
	}
	static class UInputRecordSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputRecordSave>();
	}
};
static_assert(alignof(UInputRecordSave) == 0x000008, "Wrong alignment on UInputRecordSave");
static_assert(sizeof(UInputRecordSave) == 0x000090, "Wrong size on UInputRecordSave");
static_assert(offsetof(UInputRecordSave, KeyData) == 0x000028, "Member 'UInputRecordSave::KeyData' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, UIEventData) == 0x000038, "Member 'UInputRecordSave::UIEventData' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, ActorData) == 0x000048, "Member 'UInputRecordSave::ActorData' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, SyncEvents) == 0x000058, "Member 'UInputRecordSave::SyncEvents' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, InteractEvents) == 0x000068, "Member 'UInputRecordSave::InteractEvents' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, ActorEvents) == 0x000078, "Member 'UInputRecordSave::ActorEvents' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, bGodModeAtStart) == 0x000088, "Member 'UInputRecordSave::bGodModeAtStart' has a wrong offset!");
static_assert(offsetof(UInputRecordSave, EndTime) == 0x00008C, "Member 'UInputRecordSave::EndTime' has a wrong offset!");

// Class QMPUnrealIntegration.PlaybackManager
// 0x0018 (0x0040 - 0x0028)
class UPlaybackManager : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaybackManager">();
	}
	static class UPlaybackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaybackManager>();
	}
};
static_assert(alignof(UPlaybackManager) == 0x000008, "Wrong alignment on UPlaybackManager");
static_assert(sizeof(UPlaybackManager) == 0x000040, "Wrong size on UPlaybackManager");

// Class QMPUnrealIntegration.InteractionManager
// 0x0140 (0x0180 - 0x0040)
class UInteractionManager final : public UPlaybackManager
{
public:
	TArray<struct FInteractInfo>                  InteractEvents;                                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractInfo                          CurrentInteractInfo;                               // 0x0060(0x00A0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x80];                                     // 0x0100(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractionManager">();
	}
	static class UInteractionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractionManager>();
	}
};
static_assert(alignof(UInteractionManager) == 0x000010, "Wrong alignment on UInteractionManager");
static_assert(sizeof(UInteractionManager) == 0x000180, "Wrong size on UInteractionManager");
static_assert(offsetof(UInteractionManager, InteractEvents) == 0x000040, "Member 'UInteractionManager::InteractEvents' has a wrong offset!");
static_assert(offsetof(UInteractionManager, CurrentInteractInfo) == 0x000060, "Member 'UInteractionManager::CurrentInteractInfo' has a wrong offset!");

// Class QMPUnrealIntegration.KeyInputActor
// 0x0128 (0x03C0 - 0x0298)
class AKeyInputActor : public AActor
{
public:
	class USpecificClassUtils*                    SpecificUtils;                                     // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x10];                                     // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UButtonLinker*>     LinkedButtonLinker;                                // 0x02B0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class USliderLinker*>     LinkedSliderLinker;                                // 0x0300(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class UListView*>         LinkedListView;                                    // 0x0350(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         PrefabButtonIdentifier;                            // 0x03A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         PrefabListIdentifier;                              // 0x03B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyInputActor">();
	}
	static class AKeyInputActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKeyInputActor>();
	}
};
static_assert(alignof(AKeyInputActor) == 0x000008, "Wrong alignment on AKeyInputActor");
static_assert(sizeof(AKeyInputActor) == 0x0003C0, "Wrong size on AKeyInputActor");
static_assert(offsetof(AKeyInputActor, SpecificUtils) == 0x000298, "Member 'AKeyInputActor::SpecificUtils' has a wrong offset!");
static_assert(offsetof(AKeyInputActor, LinkedButtonLinker) == 0x0002B0, "Member 'AKeyInputActor::LinkedButtonLinker' has a wrong offset!");
static_assert(offsetof(AKeyInputActor, LinkedSliderLinker) == 0x000300, "Member 'AKeyInputActor::LinkedSliderLinker' has a wrong offset!");
static_assert(offsetof(AKeyInputActor, LinkedListView) == 0x000350, "Member 'AKeyInputActor::LinkedListView' has a wrong offset!");
static_assert(offsetof(AKeyInputActor, PrefabButtonIdentifier) == 0x0003A0, "Member 'AKeyInputActor::PrefabButtonIdentifier' has a wrong offset!");
static_assert(offsetof(AKeyInputActor, PrefabListIdentifier) == 0x0003B0, "Member 'AKeyInputActor::PrefabListIdentifier' has a wrong offset!");

// Class QMPUnrealIntegration.KeyInputReplayRecordDataAsset
// 0x0038 (0x0068 - 0x0030)
class UKeyInputReplayRecordDataAsset final : public UDataAsset
{
public:
	bool                                          bRecorded;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyInputReplayKeyData>         KeyData;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKeyInputReplayActorData>       ActorData;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInteractInfo>                  InteractEvents;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyInputReplayRecordDataAsset">();
	}
	static class UKeyInputReplayRecordDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyInputReplayRecordDataAsset>();
	}
};
static_assert(alignof(UKeyInputReplayRecordDataAsset) == 0x000008, "Wrong alignment on UKeyInputReplayRecordDataAsset");
static_assert(sizeof(UKeyInputReplayRecordDataAsset) == 0x000068, "Wrong size on UKeyInputReplayRecordDataAsset");
static_assert(offsetof(UKeyInputReplayRecordDataAsset, bRecorded) == 0x000030, "Member 'UKeyInputReplayRecordDataAsset::bRecorded' has a wrong offset!");
static_assert(offsetof(UKeyInputReplayRecordDataAsset, KeyData) == 0x000038, "Member 'UKeyInputReplayRecordDataAsset::KeyData' has a wrong offset!");
static_assert(offsetof(UKeyInputReplayRecordDataAsset, ActorData) == 0x000048, "Member 'UKeyInputReplayRecordDataAsset::ActorData' has a wrong offset!");
static_assert(offsetof(UKeyInputReplayRecordDataAsset, InteractEvents) == 0x000058, "Member 'UKeyInputReplayRecordDataAsset::InteractEvents' has a wrong offset!");

// Class QMPUnrealIntegration.KeyInputReplayRecorder
// 0x00B0 (0x0470 - 0x03C0)
class AKeyInputReplayRecorder : public AKeyInputActor
{
public:
	class UTextRenderComponent*                   TextRenderComponent;                               // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputRecordSave*                       RecordSave;                                        // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRecordHeader                          RecordHeader;                                      // 0x03D0(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyInputReplayKeyData>         KeyData;                                           // 0x03E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FKeyInputReplayActorData>       ActorData;                                         // 0x03F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FInteractInfo>                  InteractData;                                      // 0x0408(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FUIEvent>                       UIEvent;                                           // 0x0418(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_428[0x20];                                     // 0x0428(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0448(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x20];                                     // 0x0450(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyInputReplayRecorder">();
	}
	static class AKeyInputReplayRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKeyInputReplayRecorder>();
	}
};
static_assert(alignof(AKeyInputReplayRecorder) == 0x000008, "Wrong alignment on AKeyInputReplayRecorder");
static_assert(sizeof(AKeyInputReplayRecorder) == 0x000470, "Wrong size on AKeyInputReplayRecorder");
static_assert(offsetof(AKeyInputReplayRecorder, TextRenderComponent) == 0x0003C0, "Member 'AKeyInputReplayRecorder::TextRenderComponent' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, RecordSave) == 0x0003C8, "Member 'AKeyInputReplayRecorder::RecordSave' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, RecordHeader) == 0x0003D0, "Member 'AKeyInputReplayRecorder::RecordHeader' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, Time) == 0x0003E0, "Member 'AKeyInputReplayRecorder::Time' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, KeyData) == 0x0003E8, "Member 'AKeyInputReplayRecorder::KeyData' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, ActorData) == 0x0003F8, "Member 'AKeyInputReplayRecorder::ActorData' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, InteractData) == 0x000408, "Member 'AKeyInputReplayRecorder::InteractData' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, UIEvent) == 0x000418, "Member 'AKeyInputReplayRecorder::UIEvent' has a wrong offset!");
static_assert(offsetof(AKeyInputReplayRecorder, StartTime) == 0x000448, "Member 'AKeyInputReplayRecorder::StartTime' has a wrong offset!");

// Class QMPUnrealIntegration.KeyInputReplaySettings
// 0x0078 (0x00A0 - 0x0028)
class UKeyInputReplaySettings final : public UObject
{
public:
	TArray<struct FKey>                           IgnoreRecordKeys;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ActionKeys;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           UIActionKeys;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FResyncStruct                          GenericResyncOffsetMax;                            // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FResyncStruct                          PreciseResyncOffsetMax;                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxResyncDistance;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeWaitingForEvent;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             InteractionChannel;                                // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTimeToDetectInteraction;                        // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNavigationForPlayerMovement;                    // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldInputDelay;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllowedDistanceRatio;                              // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDetectionSampleDelay;                      // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MovingDetectionSampleCount;                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MovingDetectionDistance;                           // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MovingDetectionDistanceSquared;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChunkSize;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NbChunksInMemory;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyInputReplaySettings">();
	}
	static class UKeyInputReplaySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyInputReplaySettings>();
	}
};
static_assert(alignof(UKeyInputReplaySettings) == 0x000008, "Wrong alignment on UKeyInputReplaySettings");
static_assert(sizeof(UKeyInputReplaySettings) == 0x0000A0, "Wrong size on UKeyInputReplaySettings");
static_assert(offsetof(UKeyInputReplaySettings, IgnoreRecordKeys) == 0x000028, "Member 'UKeyInputReplaySettings::IgnoreRecordKeys' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, ActionKeys) == 0x000038, "Member 'UKeyInputReplaySettings::ActionKeys' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, UIActionKeys) == 0x000048, "Member 'UKeyInputReplaySettings::UIActionKeys' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, GenericResyncOffsetMax) == 0x000058, "Member 'UKeyInputReplaySettings::GenericResyncOffsetMax' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, PreciseResyncOffsetMax) == 0x000060, "Member 'UKeyInputReplaySettings::PreciseResyncOffsetMax' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MaxResyncDistance) == 0x000068, "Member 'UKeyInputReplaySettings::MaxResyncDistance' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MaxTimeWaitingForEvent) == 0x00006C, "Member 'UKeyInputReplaySettings::MaxTimeWaitingForEvent' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, InteractionChannel) == 0x000070, "Member 'UKeyInputReplaySettings::InteractionChannel' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MinTimeToDetectInteraction) == 0x000074, "Member 'UKeyInputReplaySettings::MinTimeToDetectInteraction' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, UseNavigationForPlayerMovement) == 0x000078, "Member 'UKeyInputReplaySettings::UseNavigationForPlayerMovement' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, HoldInputDelay) == 0x00007C, "Member 'UKeyInputReplaySettings::HoldInputDelay' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, AllowedDistanceRatio) == 0x000080, "Member 'UKeyInputReplaySettings::AllowedDistanceRatio' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MovementDetectionSampleDelay) == 0x000084, "Member 'UKeyInputReplaySettings::MovementDetectionSampleDelay' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MovingDetectionSampleCount) == 0x000088, "Member 'UKeyInputReplaySettings::MovingDetectionSampleCount' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MovingDetectionDistance) == 0x00008C, "Member 'UKeyInputReplaySettings::MovingDetectionDistance' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MovingDetectionDistanceSquared) == 0x000090, "Member 'UKeyInputReplaySettings::MovingDetectionDistanceSquared' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, MaxChunkSize) == 0x000094, "Member 'UKeyInputReplaySettings::MaxChunkSize' has a wrong offset!");
static_assert(offsetof(UKeyInputReplaySettings, NbChunksInMemory) == 0x000098, "Member 'UKeyInputReplaySettings::NbChunksInMemory' has a wrong offset!");

// Class QMPUnrealIntegration.MovementManager
// 0x0068 (0x00A8 - 0x0040)
class UMovementManager final : public UPlaybackManager
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          PlayerAIController;                                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyInputReplayActorData>       ActorData;                                         // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        LastPlayerPositions;                               // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAIMoveCompleted(const struct FAIRequestID& Request, EPathFollowingResult Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementManager">();
	}
	static class UMovementManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovementManager>();
	}
};
static_assert(alignof(UMovementManager) == 0x000008, "Wrong alignment on UMovementManager");
static_assert(sizeof(UMovementManager) == 0x0000A8, "Wrong size on UMovementManager");
static_assert(offsetof(UMovementManager, PlayerAIController) == 0x000050, "Member 'UMovementManager::PlayerAIController' has a wrong offset!");
static_assert(offsetof(UMovementManager, ActorData) == 0x000070, "Member 'UMovementManager::ActorData' has a wrong offset!");
static_assert(offsetof(UMovementManager, LastPlayerPositions) == 0x000088, "Member 'UMovementManager::LastPlayerPositions' has a wrong offset!");

// Class QMPUnrealIntegration.PlaybackTraversal
// 0x0220 (0x05E0 - 0x03C0)
class alignas(0x10) APlaybackTraversal final : public AKeyInputActor
{
public:
	uint8                                         Pad_3C0[0x30];                                     // 0x03C0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlaying;                                          // 0x03F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalTime;                                        // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F8[0x98];                                     // 0x03F8(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRecordHeader                          RecordHeader;                                      // 0x0490(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	class UInputRecordSave*                       LastRecordSave;                                    // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorEventInfo>                ActorEvents;                                       // 0x04B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class URecordData*                            MainRecordData;                                    // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URecordData*                            PrioritaryRecordData;                              // 0x04C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPlaybackManager*>               Managers;                                          // 0x04D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E0[0x10];                                     // 0x04E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UObject*>                          WaitForManagerSet;                                 // 0x04F0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_540[0x8];                                      // 0x0540(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorEventInfo>                ResolvedActorEvents;                               // 0x0548(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           EventWaitingHandle;                                // 0x0558(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<struct FKey>                             PressedButtonsBuffer;                              // 0x0560(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B0[0x10];                                     // 0x05B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimeoutHandle;                                     // 0x05C0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C8[0x18];                                     // 0x05C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaybackTraversal">();
	}
	static class APlaybackTraversal* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlaybackTraversal>();
	}
};
static_assert(alignof(APlaybackTraversal) == 0x000010, "Wrong alignment on APlaybackTraversal");
static_assert(sizeof(APlaybackTraversal) == 0x0005E0, "Wrong size on APlaybackTraversal");
static_assert(offsetof(APlaybackTraversal, bPlaying) == 0x0003F0, "Member 'APlaybackTraversal::bPlaying' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, GlobalTime) == 0x0003F4, "Member 'APlaybackTraversal::GlobalTime' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, RecordHeader) == 0x000490, "Member 'APlaybackTraversal::RecordHeader' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, LastRecordSave) == 0x0004A0, "Member 'APlaybackTraversal::LastRecordSave' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, ActorEvents) == 0x0004B0, "Member 'APlaybackTraversal::ActorEvents' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, MainRecordData) == 0x0004C0, "Member 'APlaybackTraversal::MainRecordData' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, PrioritaryRecordData) == 0x0004C8, "Member 'APlaybackTraversal::PrioritaryRecordData' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, Managers) == 0x0004D0, "Member 'APlaybackTraversal::Managers' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, WaitForManagerSet) == 0x0004F0, "Member 'APlaybackTraversal::WaitForManagerSet' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, ResolvedActorEvents) == 0x000548, "Member 'APlaybackTraversal::ResolvedActorEvents' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, EventWaitingHandle) == 0x000558, "Member 'APlaybackTraversal::EventWaitingHandle' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, PressedButtonsBuffer) == 0x000560, "Member 'APlaybackTraversal::PressedButtonsBuffer' has a wrong offset!");
static_assert(offsetof(APlaybackTraversal, TimeoutHandle) == 0x0005C0, "Member 'APlaybackTraversal::TimeoutHandle' has a wrong offset!");

// Class QMPUnrealIntegration.QMPAIController
// 0x0000 (0x03C0 - 0x03C0)
class AQMPAIController : public AAIController
{
public:
	void OnTargetControllerPossessionChange(class APawn* OldPawn, class APawn* NewPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QMPAIController">();
	}
	static class AQMPAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AQMPAIController>();
	}
};
static_assert(alignof(AQMPAIController) == 0x000008, "Wrong alignment on AQMPAIController");
static_assert(sizeof(AQMPAIController) == 0x0003C0, "Wrong size on AQMPAIController");

// Class QMPUnrealIntegration.ButtonLinker
// 0x0030 (0x0058 - 0x0028)
class UButtonLinker final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                LinkedButton;                                      // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ButtonLinker">();
	}
	static class UButtonLinker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButtonLinker>();
	}
};
static_assert(alignof(UButtonLinker) == 0x000008, "Wrong alignment on UButtonLinker");
static_assert(sizeof(UButtonLinker) == 0x000058, "Wrong size on UButtonLinker");
static_assert(offsetof(UButtonLinker, LinkedButton) == 0x000038, "Member 'UButtonLinker::LinkedButton' has a wrong offset!");

// Class QMPUnrealIntegration.QMPGameInstance
// 0x00F0 (0x0120 - 0x0030)
class UQMPGameInstance : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          PlayerAIController;                                // 0x0048(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameLocationRecorder*                  RecorderLoading;                                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpecificClassUtils*                    SpecificUtils;                                     // 0x0068(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0088(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x80];                                      // 0x0090(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class USubsegmentSavesManager*                SubsegmentSavesManager;                            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPawnControllerChange(class APawn* Pawn, class AController* Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QMPGameInstance">();
	}
	static class UQMPGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQMPGameInstance>();
	}
};
static_assert(alignof(UQMPGameInstance) == 0x000008, "Wrong alignment on UQMPGameInstance");
static_assert(sizeof(UQMPGameInstance) == 0x000120, "Wrong size on UQMPGameInstance");
static_assert(offsetof(UQMPGameInstance, PlayerAIController) == 0x000048, "Member 'UQMPGameInstance::PlayerAIController' has a wrong offset!");
static_assert(offsetof(UQMPGameInstance, RecorderLoading) == 0x000060, "Member 'UQMPGameInstance::RecorderLoading' has a wrong offset!");
static_assert(offsetof(UQMPGameInstance, SpecificUtils) == 0x000068, "Member 'UQMPGameInstance::SpecificUtils' has a wrong offset!");
static_assert(offsetof(UQMPGameInstance, PlayerController) == 0x000088, "Member 'UQMPGameInstance::PlayerController' has a wrong offset!");
static_assert(offsetof(UQMPGameInstance, SubsegmentSavesManager) == 0x000110, "Member 'UQMPGameInstance::SubsegmentSavesManager' has a wrong offset!");

// Class QMPUnrealIntegration.QMPSettings
// 0x0008 (0x0030 - 0x0028)
class UQMPSettings final : public UObject
{
public:
	bool                                          bUseFPSChart;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCSVProfiler;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QMPSettings">();
	}
	static class UQMPSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQMPSettings>();
	}
};
static_assert(alignof(UQMPSettings) == 0x000008, "Wrong alignment on UQMPSettings");
static_assert(sizeof(UQMPSettings) == 0x000030, "Wrong size on UQMPSettings");
static_assert(offsetof(UQMPSettings, bUseFPSChart) == 0x000028, "Member 'UQMPSettings::bUseFPSChart' has a wrong offset!");
static_assert(offsetof(UQMPSettings, bUseCSVProfiler) == 0x000029, "Member 'UQMPSettings::bUseCSVProfiler' has a wrong offset!");

// Class QMPUnrealIntegration.SliderLinker
// 0x0028 (0x0050 - 0x0028)
class USliderLinker final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SliderName;                                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSliderValueUpdated(float NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SliderLinker">();
	}
	static class USliderLinker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USliderLinker>();
	}
};
static_assert(alignof(USliderLinker) == 0x000008, "Wrong alignment on USliderLinker");
static_assert(sizeof(USliderLinker) == 0x000050, "Wrong size on USliderLinker");
static_assert(offsetof(USliderLinker, SliderName) == 0x000040, "Member 'USliderLinker::SliderName' has a wrong offset!");

// Class QMPUnrealIntegration.RecordData
// 0x0028 (0x0050 - 0x0028)
class URecordData : public UObject
{
public:
	TArray<struct FKeyInputReplayKeyData>         KeyData;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSyncEventInfo>                 SyncEvents;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         KeyDataIndex;                                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecordData">();
	}
	static class URecordData* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecordData>();
	}
};
static_assert(alignof(URecordData) == 0x000008, "Wrong alignment on URecordData");
static_assert(sizeof(URecordData) == 0x000050, "Wrong size on URecordData");
static_assert(offsetof(URecordData, KeyData) == 0x000028, "Member 'URecordData::KeyData' has a wrong offset!");
static_assert(offsetof(URecordData, SyncEvents) == 0x000038, "Member 'URecordData::SyncEvents' has a wrong offset!");
static_assert(offsetof(URecordData, KeyDataIndex) == 0x000048, "Member 'URecordData::KeyDataIndex' has a wrong offset!");
static_assert(offsetof(URecordData, Time) == 0x00004C, "Member 'URecordData::Time' has a wrong offset!");

// Class QMPUnrealIntegration.RecordTraversal
// 0x0050 (0x04C0 - 0x0470)
class ARecordTraversal final : public AKeyInputReplayRecorder
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSyncEventInfo>                 RecordedInfo;                                      // 0x04A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FActorEventInfo>                ActorInfo;                                         // 0x04B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecordTraversal">();
	}
	static class ARecordTraversal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARecordTraversal>();
	}
};
static_assert(alignof(ARecordTraversal) == 0x000008, "Wrong alignment on ARecordTraversal");
static_assert(sizeof(ARecordTraversal) == 0x0004C0, "Wrong size on ARecordTraversal");
static_assert(offsetof(ARecordTraversal, RecordedInfo) == 0x0004A0, "Member 'ARecordTraversal::RecordedInfo' has a wrong offset!");
static_assert(offsetof(ARecordTraversal, ActorInfo) == 0x0004B0, "Member 'ARecordTraversal::ActorInfo' has a wrong offset!");

// Class QMPUnrealIntegration.SpecificClassUtils
// 0x0008 (0x0030 - 0x0028)
class USpecificClassUtils : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecificClassUtils">();
	}
	static class USpecificClassUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecificClassUtils>();
	}
};
static_assert(alignof(USpecificClassUtils) == 0x000008, "Wrong alignment on USpecificClassUtils");
static_assert(sizeof(USpecificClassUtils) == 0x000030, "Wrong size on USpecificClassUtils");

// Class QMPUnrealIntegration.RecordSnapshots
// 0x0010 (0x0038 - 0x0028)
class URecordSnapshots final : public USaveGame
{
public:
	TArray<struct FTraversalSnapshot>             Snapshots;                                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecordSnapshots">();
	}
	static class URecordSnapshots* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecordSnapshots>();
	}
};
static_assert(alignof(URecordSnapshots) == 0x000008, "Wrong alignment on URecordSnapshots");
static_assert(sizeof(URecordSnapshots) == 0x000038, "Wrong size on URecordSnapshots");
static_assert(offsetof(URecordSnapshots, Snapshots) == 0x000028, "Member 'URecordSnapshots::Snapshots' has a wrong offset!");

// Class QMPUnrealIntegration.SubsegmentSavesManager
// 0x0030 (0x0058 - 0x0028)
class USubsegmentSavesManager final : public UObject
{
public:
	class URecordSnapshots*                       RecordSnapshots;                                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SegmentName;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubsegmentSavesManager">();
	}
	static class USubsegmentSavesManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubsegmentSavesManager>();
	}
};
static_assert(alignof(USubsegmentSavesManager) == 0x000008, "Wrong alignment on USubsegmentSavesManager");
static_assert(sizeof(USubsegmentSavesManager) == 0x000058, "Wrong size on USubsegmentSavesManager");
static_assert(offsetof(USubsegmentSavesManager, RecordSnapshots) == 0x000028, "Member 'USubsegmentSavesManager::RecordSnapshots' has a wrong offset!");
static_assert(offsetof(USubsegmentSavesManager, SegmentName) == 0x000040, "Member 'USubsegmentSavesManager::SegmentName' has a wrong offset!");

// Class QMPUnrealIntegration.UIPhase
// 0x0030 (0x0080 - 0x0050)
class UUIPhase final : public URecordData
{
public:
	TArray<struct FUIEvent>                       UIEvents;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSyncEventInfo                         TriggerEvent;                                      // 0x0068(0x0018)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIPhase">();
	}
	static class UUIPhase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIPhase>();
	}
};
static_assert(alignof(UUIPhase) == 0x000008, "Wrong alignment on UUIPhase");
static_assert(sizeof(UUIPhase) == 0x000080, "Wrong size on UUIPhase");
static_assert(offsetof(UUIPhase, UIEvents) == 0x000050, "Member 'UUIPhase::UIEvents' has a wrong offset!");
static_assert(offsetof(UUIPhase, Duration) == 0x000060, "Member 'UUIPhase::Duration' has a wrong offset!");
static_assert(offsetof(UUIPhase, TriggerEvent) == 0x000068, "Member 'UUIPhase::TriggerEvent' has a wrong offset!");

// Class QMPUnrealIntegration.UIManager
// 0x0098 (0x00D8 - 0x0040)
class UUIManager final : public UPlaybackManager
{
public:
	TMap<class FString, struct FUIPhasesArray>    UIPhasesByType;                                    // 0x0040(0x0050)(NativeAccessSpecifierPrivate)
	class UUIPhase*                               CurrentUIPhase;                                    // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUIPhase*                               MainRecordData;                                    // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EventWaitingHandle;                                // 0x00B8(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIManager">();
	}
	static class UUIManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIManager>();
	}
};
static_assert(alignof(UUIManager) == 0x000008, "Wrong alignment on UUIManager");
static_assert(sizeof(UUIManager) == 0x0000D8, "Wrong size on UUIManager");
static_assert(offsetof(UUIManager, UIPhasesByType) == 0x000040, "Member 'UUIManager::UIPhasesByType' has a wrong offset!");
static_assert(offsetof(UUIManager, CurrentUIPhase) == 0x000090, "Member 'UUIManager::CurrentUIPhase' has a wrong offset!");
static_assert(offsetof(UUIManager, MainRecordData) == 0x000098, "Member 'UUIManager::MainRecordData' has a wrong offset!");
static_assert(offsetof(UUIManager, EventWaitingHandle) == 0x0000B8, "Member 'UUIManager::EventWaitingHandle' has a wrong offset!");

}

