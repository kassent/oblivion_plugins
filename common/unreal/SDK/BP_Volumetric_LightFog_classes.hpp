#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Volumetric_LightFog

#include "Basic.hpp"

#include "ENiagaraLinearColor_Channels_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Volumetric_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Volumetric_LightFog.BP_Volumetric_LightFog_C
// 0x0108 (0x0480 - 0x0378)
class ABP_Volumetric_LightFog_C : public ABP_Volumetric_C
{
public:
	float                                         Density;                                           // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Volume_Shape;                                // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Main_Color;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Shadow_Color;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shadow_Direction;                                  // 0x03A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shadow_Distance;                                   // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Volume_Noise_Texture;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ENiagaraLinearColor_Channels                  Volume_Noise_Channel;                              // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volume_Noise_Scale;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Volume_Noise_Tiling;                               // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Intensity;                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Erosion;                              // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Exponent;                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Speed;                                // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Offset;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Volume_Noise_Direction;                            // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Curl_Noise_Texture;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Intensity;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Scale;                                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Speed;                                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Offset;                                 // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Curl_Noise_Direction;                              // 0x0458(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive;                                          // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_Volume_Noise;                               // 0x0474(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Masked_Color_Blend;                                // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Setup_Shared_Light_Fog_Parameters();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Volumetric_LightFog_C">();
	}
	static class ABP_Volumetric_LightFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Volumetric_LightFog_C>();
	}
};
static_assert(alignof(ABP_Volumetric_LightFog_C) == 0x000008, "Wrong alignment on ABP_Volumetric_LightFog_C");
static_assert(sizeof(ABP_Volumetric_LightFog_C) == 0x000480, "Wrong size on ABP_Volumetric_LightFog_C");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Density) == 0x000378, "Member 'ABP_Volumetric_LightFog_C::Density' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Debug_Volume_Shape) == 0x00037C, "Member 'ABP_Volumetric_LightFog_C::Debug_Volume_Shape' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Main_Color) == 0x000380, "Member 'ABP_Volumetric_LightFog_C::Main_Color' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Shadow_Color) == 0x000390, "Member 'ABP_Volumetric_LightFog_C::Shadow_Color' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Shadow_Direction) == 0x0003A0, "Member 'ABP_Volumetric_LightFog_C::Shadow_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Shadow_Distance) == 0x0003B8, "Member 'ABP_Volumetric_LightFog_C::Shadow_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Texture) == 0x0003C0, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Channel) == 0x0003C8, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Channel' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Scale) == 0x0003D0, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Tiling) == 0x0003D8, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Intensity) == 0x0003F0, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Erosion) == 0x0003F8, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Erosion' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Exponent) == 0x000400, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Speed) == 0x000408, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Offset) == 0x000410, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Volume_Noise_Direction) == 0x000418, "Member 'ABP_Volumetric_LightFog_C::Volume_Noise_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Curl_Noise_Texture) == 0x000430, "Member 'ABP_Volumetric_LightFog_C::Curl_Noise_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Curl_Noise_Intensity) == 0x000438, "Member 'ABP_Volumetric_LightFog_C::Curl_Noise_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Curl_Noise_Scale) == 0x000440, "Member 'ABP_Volumetric_LightFog_C::Curl_Noise_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Curl_Noise_Speed) == 0x000448, "Member 'ABP_Volumetric_LightFog_C::Curl_Noise_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Curl_Noise_Offset) == 0x000450, "Member 'ABP_Volumetric_LightFog_C::Curl_Noise_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Curl_Noise_Direction) == 0x000458, "Member 'ABP_Volumetric_LightFog_C::Curl_Noise_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Emissive) == 0x000470, "Member 'ABP_Volumetric_LightFog_C::Emissive' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Invert_Volume_Noise) == 0x000474, "Member 'ABP_Volumetric_LightFog_C::Invert_Volume_Noise' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_C, Masked_Color_Blend) == 0x000478, "Member 'ABP_Volumetric_LightFog_C::Masked_Color_Blend' has a wrong offset!");

}

