#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FallingDust

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FallingDust.BP_FallingDust_C
// 0x00A0 (0x0338 - 0x0298)
class ABP_FallingDust_C final : public AActor
{
public:
	class UNiagaraComponent*                      Debugview_System;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FallingDustVFX;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Debugview_Mode;                             // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Global_Color;                                      // 0x02B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Global_LoopDelay_Min;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Secondary_FallingDust;                      // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FallingDust_SpawnRate;                             // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallingDust_Emissive_Intensity;                    // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallingDust_Lifetime;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallingDust_SpriteSize;                            // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FallingDust_Location_BoxSize;                      // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_DustParticles;                              // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DustParticles_SpawnRate;                           // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DustParticles_Emissive_Intensity;                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DustParticles_Lifetime;                            // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DustParticles_Location_BoxSize;                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_LoopDelay_Max;                              // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DustParticles_Sprite_Size;                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FallingDust_C">();
	}
	static class ABP_FallingDust_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FallingDust_C>();
	}
};
static_assert(alignof(ABP_FallingDust_C) == 0x000008, "Wrong alignment on ABP_FallingDust_C");
static_assert(sizeof(ABP_FallingDust_C) == 0x000338, "Wrong size on ABP_FallingDust_C");
static_assert(offsetof(ABP_FallingDust_C, Debugview_System) == 0x000298, "Member 'ABP_FallingDust_C::Debugview_System' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, FallingDustVFX) == 0x0002A0, "Member 'ABP_FallingDust_C::FallingDustVFX' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_FallingDust_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, Enable_Debugview_Mode) == 0x0002B0, "Member 'ABP_FallingDust_C::Enable_Debugview_Mode' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, Global_Color) == 0x0002B4, "Member 'ABP_FallingDust_C::Global_Color' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, Global_LoopDelay_Min) == 0x0002C8, "Member 'ABP_FallingDust_C::Global_LoopDelay_Min' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, Enable_Secondary_FallingDust) == 0x0002D0, "Member 'ABP_FallingDust_C::Enable_Secondary_FallingDust' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, FallingDust_SpawnRate) == 0x0002D4, "Member 'ABP_FallingDust_C::FallingDust_SpawnRate' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, FallingDust_Emissive_Intensity) == 0x0002D8, "Member 'ABP_FallingDust_C::FallingDust_Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, FallingDust_Lifetime) == 0x0002E0, "Member 'ABP_FallingDust_C::FallingDust_Lifetime' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, FallingDust_SpriteSize) == 0x0002E8, "Member 'ABP_FallingDust_C::FallingDust_SpriteSize' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, FallingDust_Location_BoxSize) == 0x0002F0, "Member 'ABP_FallingDust_C::FallingDust_Location_BoxSize' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, Enable_DustParticles) == 0x000308, "Member 'ABP_FallingDust_C::Enable_DustParticles' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, DustParticles_SpawnRate) == 0x00030C, "Member 'ABP_FallingDust_C::DustParticles_SpawnRate' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, DustParticles_Emissive_Intensity) == 0x000310, "Member 'ABP_FallingDust_C::DustParticles_Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, DustParticles_Lifetime) == 0x000318, "Member 'ABP_FallingDust_C::DustParticles_Lifetime' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, DustParticles_Location_BoxSize) == 0x000320, "Member 'ABP_FallingDust_C::DustParticles_Location_BoxSize' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, Global_LoopDelay_Max) == 0x000328, "Member 'ABP_FallingDust_C::Global_LoopDelay_Max' has a wrong offset!");
static_assert(offsetof(ABP_FallingDust_C, DustParticles_Sprite_Size) == 0x000330, "Member 'ABP_FallingDust_C::DustParticles_Sprite_Size' has a wrong offset!");

}

