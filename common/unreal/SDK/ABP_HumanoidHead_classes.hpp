#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_HumanoidHead

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_HumanoidHead_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Altar_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_HumanoidHead.ABP_HumanoidHead_C
// 0x0DB0 (0x1130 - 0x0380)
class UABP_HumanoidHead_C final : public UVHumanoidHeadCharacterAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_HumanoidHead::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;             // 0x0388(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0398(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03A0(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03A8(0x0020)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x03C8(0x0158)(ContainsInstancedReference)
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0520(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0610(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0638(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x0680(0x0080)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0700(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x0748(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x07C8(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0810(0x0028)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_1;                      // 0x0838(0x0010)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x0848(0x0010)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0858(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0880(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x08A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x08D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x08F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0920(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0948(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0970(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x09B8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x09D8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0A20(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0A40(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0A88(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0AA8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0AF0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0B10(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0B58(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0B78(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0BC0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0BE0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0C28(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0C48(0x00C8)()
	struct FAnimNode_LayeredBoneBlendTemplate     AnimGraphNode_LayeredBoneBlendTemplate;            // 0x0D10(0x0110)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0E20(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0E48(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0EC8(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0EF0(0x0070)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0F60(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0F88(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1050(0x0080)()
	bool                                          K2Node_PropertyAccess_11;                          // 0x10D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_10;                          // 0x10D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_9;                           // 0x10D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_8;                           // 0x10D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_7;                           // 0x10D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_6;                           // 0x10D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_5;                           // 0x10D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_4;                           // 0x10D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_3;                           // 0x10D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_2;                           // 0x10DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_PropertyAccess_1;                           // 0x10E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E4[0x4];                                     // 0x10E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 BodyMesh;                                          // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVHumanoidHeadComponent*                As_VHumanoidHeadComponent;                         // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimTarget;                                         // 0x10F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAim;                                            // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BodyMeshIsValid;                                   // 0x1111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1112[0x6];                                     // 0x1112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequence*>                  Emotions;                                          // 0x1118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   EyesBoneName;                                      // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AimHead();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_ABP_HumanoidHead(int32 EntryPoint);
	void OnBodyMeshUpdated(class USkeletalMeshComponent* NewBodyMesh);
	void UpdateBodyMesh(class USkeletalMeshComponent* BodyMesh_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_HumanoidHead_C">();
	}
	static class UABP_HumanoidHead_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_HumanoidHead_C>();
	}
};
static_assert(alignof(UABP_HumanoidHead_C) == 0x000010, "Wrong alignment on UABP_HumanoidHead_C");
static_assert(sizeof(UABP_HumanoidHead_C) == 0x001130, "Wrong size on UABP_HumanoidHead_C");
static_assert(offsetof(UABP_HumanoidHead_C, UberGraphFrame) == 0x000380, "Member 'UABP_HumanoidHead_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, __AnimBlueprintMutables) == 0x000388, "Member 'UABP_HumanoidHead_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimBlueprintExtension_PropertyAccess) == 0x000398, "Member 'UABP_HumanoidHead_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimBlueprintExtension_Base) == 0x0003A0, "Member 'UABP_HumanoidHead_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_Root) == 0x0003A8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_CopyPoseFromMesh) == 0x0003C8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_LayeredBoneBlend) == 0x000520, "Member 'UABP_HumanoidHead_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_UseCachedPose_4) == 0x000610, "Member 'UABP_HumanoidHead_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_BlendListByBool_1) == 0x000638, "Member 'UABP_HumanoidHead_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SaveCachedPose_3) == 0x000680, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_Slot) == 0x000700, "Member 'UABP_HumanoidHead_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SaveCachedPose_2) == 0x000748, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_BlendListByBool) == 0x0007C8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_UseCachedPose_3) == 0x000810, "Member 'UABP_HumanoidHead_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_LocalRefPose_1) == 0x000838, "Member 'UABP_HumanoidHead_C::AnimGraphNode_LocalRefPose_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_LocalRefPose) == 0x000848, "Member 'UABP_HumanoidHead_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult_6) == 0x000858, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult_5) == 0x000880, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult_4) == 0x0008A8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult_3) == 0x0008D0, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult_2) == 0x0008F8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult_1) == 0x000920, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_TransitionResult) == 0x000948, "Member 'UABP_HumanoidHead_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer_6) == 0x000970, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult_6) == 0x0009B8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer_5) == 0x0009D8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult_5) == 0x000A20, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer_4) == 0x000A40, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult_4) == 0x000A88, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer_3) == 0x000AA8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult_3) == 0x000AF0, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer_2) == 0x000B10, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult_2) == 0x000B58, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer_1) == 0x000B78, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult_1) == 0x000BC0, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SequencePlayer) == 0x000BE0, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateResult) == 0x000C28, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_StateMachine) == 0x000C48, "Member 'UABP_HumanoidHead_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_LayeredBoneBlendTemplate) == 0x000D10, "Member 'UABP_HumanoidHead_C::AnimGraphNode_LayeredBoneBlendTemplate' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_UseCachedPose_2) == 0x000E20, "Member 'UABP_HumanoidHead_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SaveCachedPose_1) == 0x000E48, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_UseCachedPose_1) == 0x000EC8, "Member 'UABP_HumanoidHead_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_BlendSpacePlayer) == 0x000EF0, "Member 'UABP_HumanoidHead_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_UseCachedPose) == 0x000F60, "Member 'UABP_HumanoidHead_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_ApplyAdditive) == 0x000F88, "Member 'UABP_HumanoidHead_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AnimGraphNode_SaveCachedPose) == 0x001050, "Member 'UABP_HumanoidHead_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_11) == 0x0010D0, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_11' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_10) == 0x0010D1, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_10' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_9) == 0x0010D2, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_9' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_8) == 0x0010D3, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_8' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_7) == 0x0010D4, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_7' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_6) == 0x0010D5, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_6' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_5) == 0x0010D6, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_5' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_4) == 0x0010D7, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_3) == 0x0010D8, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_2) == 0x0010DC, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, K2Node_PropertyAccess_1) == 0x0010E0, "Member 'UABP_HumanoidHead_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, BodyMesh) == 0x0010E8, "Member 'UABP_HumanoidHead_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, As_VHumanoidHeadComponent) == 0x0010F0, "Member 'UABP_HumanoidHead_C::As_VHumanoidHeadComponent' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, AimTarget) == 0x0010F8, "Member 'UABP_HumanoidHead_C::AimTarget' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, CanAim) == 0x001110, "Member 'UABP_HumanoidHead_C::CanAim' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, BodyMeshIsValid) == 0x001111, "Member 'UABP_HumanoidHead_C::BodyMeshIsValid' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, Emotions) == 0x001118, "Member 'UABP_HumanoidHead_C::Emotions' has a wrong offset!");
static_assert(offsetof(UABP_HumanoidHead_C, EyesBoneName) == 0x001128, "Member 'UABP_HumanoidHead_C::EyesBoneName' has a wrong offset!");

}

