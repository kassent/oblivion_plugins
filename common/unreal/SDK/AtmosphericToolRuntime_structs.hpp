#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AtmosphericToolRuntime

#include "Basic.hpp"


namespace SDK
{

// Enum AtmosphericToolRuntime.EPropertyApplication
// NumValues: 0x0004
enum class EPropertyApplication : uint8
{
	Override                                 = 0,
	Addition                                 = 1,
	Multiplication                           = 2,
	EPropertyApplication_MAX                 = 3,
};

// Enum AtmosphericToolRuntime.EATMTimeUpdateSource
// NumValues: 0x0005
enum class EATMTimeUpdateSource : uint8
{
	FROM_INIT                                = 0,
	FROM_TICK                                = 1,
	FROM_GAMEPLAY                            = 2,
	FROM_DEBUG                               = 3,
	FROM_MAX                                 = 4,
};

// ScriptStruct AtmosphericToolRuntime.ATMWrapperStore
// 0x0050 (0x0050 - 0x0000)
struct FATMWrapperStore final
{
public:
	TMap<class FName, class UATMWrapperFactory*>  Factories;                                         // 0x0000(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FATMWrapperStore) == 0x000008, "Wrong alignment on FATMWrapperStore");
static_assert(sizeof(FATMWrapperStore) == 0x000050, "Wrong size on FATMWrapperStore");
static_assert(offsetof(FATMWrapperStore, Factories) == 0x000000, "Member 'FATMWrapperStore::Factories' has a wrong offset!");

// ScriptStruct AtmosphericToolRuntime.ATMModifiedObject
// 0x00B8 (0x00B8 - 0x0000)
struct FATMModifiedObject final
{
public:
	class UObject*                                UnrealObject;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x50];                                       // 0x0008(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UObject*>                          DefaultPropertyRefs;                               // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             AssignedMaterials;                                 // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATMModifiedObject) == 0x000008, "Wrong alignment on FATMModifiedObject");
static_assert(sizeof(FATMModifiedObject) == 0x0000B8, "Wrong size on FATMModifiedObject");
static_assert(offsetof(FATMModifiedObject, UnrealObject) == 0x000000, "Member 'FATMModifiedObject::UnrealObject' has a wrong offset!");
static_assert(offsetof(FATMModifiedObject, DefaultPropertyRefs) == 0x000058, "Member 'FATMModifiedObject::DefaultPropertyRefs' has a wrong offset!");
static_assert(offsetof(FATMModifiedObject, AssignedMaterials) == 0x0000A8, "Member 'FATMModifiedObject::AssignedMaterials' has a wrong offset!");

// ScriptStruct AtmosphericToolRuntime.ATMObject
// 0x00E0 (0x00E0 - 0x0000)
struct FATMObject final
{
public:
	TArray<struct FATMModifiedObject>             ModifiedObjects;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, class UATMProperty*>        Properties;                                        // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FName>                             PendingEmptyPropertyKeys;                          // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	class UATMBlendingPolicy*                     BlendingPolicy;                                    // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x28];                                      // 0x00B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATMObject) == 0x000008, "Wrong alignment on FATMObject");
static_assert(sizeof(FATMObject) == 0x0000E0, "Wrong size on FATMObject");
static_assert(offsetof(FATMObject, ModifiedObjects) == 0x000000, "Member 'FATMObject::ModifiedObjects' has a wrong offset!");
static_assert(offsetof(FATMObject, Properties) == 0x000010, "Member 'FATMObject::Properties' has a wrong offset!");
static_assert(offsetof(FATMObject, PendingEmptyPropertyKeys) == 0x000060, "Member 'FATMObject::PendingEmptyPropertyKeys' has a wrong offset!");
static_assert(offsetof(FATMObject, BlendingPolicy) == 0x0000B0, "Member 'FATMObject::BlendingPolicy' has a wrong offset!");

// ScriptStruct AtmosphericToolRuntime.ATMDebugSession
// 0x00C8 (0x00C8 - 0x0000)
struct FATMDebugSession final
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedGlobal;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedEventFadeIn;                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    EventWeights;                                      // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, float>                    BiomeWeights;                                      // 0x0078(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FATMDebugSession) == 0x000008, "Wrong alignment on FATMDebugSession");
static_assert(sizeof(FATMDebugSession) == 0x0000C8, "Wrong size on FATMDebugSession");
static_assert(offsetof(FATMDebugSession, TimeScale) == 0x000000, "Member 'FATMDebugSession::TimeScale' has a wrong offset!");
static_assert(offsetof(FATMDebugSession, SelectedGlobal) == 0x000008, "Member 'FATMDebugSession::SelectedGlobal' has a wrong offset!");
static_assert(offsetof(FATMDebugSession, SelectedEventFadeIn) == 0x000018, "Member 'FATMDebugSession::SelectedEventFadeIn' has a wrong offset!");
static_assert(offsetof(FATMDebugSession, EventWeights) == 0x000028, "Member 'FATMDebugSession::EventWeights' has a wrong offset!");
static_assert(offsetof(FATMDebugSession, BiomeWeights) == 0x000078, "Member 'FATMDebugSession::BiomeWeights' has a wrong offset!");

}

