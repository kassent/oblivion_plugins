#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Prefab_Fires_PL

#include "Basic.hpp"

#include "ENiagara_WeatherState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Parent_Prefab_PL_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Prefab_Fires_PL.BP_Prefab_Fires_PL_C
// 0x0080 (0x0550 - 0x04D0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Prefab_Fires_PL_C : public ABP_Parent_Prefab_PL_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Prefab_Fires_PL_C;               // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVDetectionLightingProfileComponent*    VDetectionLightingProfile;                         // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_FireBrazier;                                    // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Z_A050B4E248EDB73D62CABCB76D55AA1D;       // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Y_A050B4E248EDB73D62CABCB76D55AA1D;       // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_X_A050B4E248EDB73D62CABCB76D55AA1D;       // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_A050B4E248EDB73D62CABCB76D55AA1D; // 0x04F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Movement;                                      // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_UP;                                       // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_Y;                                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_X;                                        // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Tint;                                        // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Brazier_Transition_Done;                           // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          FirstPersonClippingFix_UseFix;                     // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_532[0x2];                                      // 0x0532(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseLightIntensity;                                // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstPersonClippingFixIntensityDivider;            // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerHasOwnership;                                // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Adapt_Light__Brazier_();
	void ExecuteUbergraph_BP_Prefab_Fires_PL(int32 EntryPoint);
	void OnPlayerUnpossessedByPlayer();
	void OnPossessedByPlayer();
	void Reset_To_Defaul__Brazier_();
	void Set_Day();
	void Set_Night();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void Turn_Light_Off__Brazier_();
	void Update_Weather(ENiagara_WeatherState Weather, double Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Prefab_Fires_PL_C">();
	}
	static class ABP_Prefab_Fires_PL_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Prefab_Fires_PL_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Prefab_Fires_PL_C) == 0x000010, "Wrong alignment on ABP_Prefab_Fires_PL_C");
static_assert(sizeof(ABP_Prefab_Fires_PL_C) == 0x000550, "Wrong size on ABP_Prefab_Fires_PL_C");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, UberGraphFrame_BP_Prefab_Fires_PL_C) == 0x0004D0, "Member 'ABP_Prefab_Fires_PL_C::UberGraphFrame_BP_Prefab_Fires_PL_C' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, VDetectionLightingProfile) == 0x0004D8, "Member 'ABP_Prefab_Fires_PL_C::VDetectionLightingProfile' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, NS_FireBrazier) == 0x0004E0, "Member 'ABP_Prefab_Fires_PL_C::NS_FireBrazier' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Timeline_Z_A050B4E248EDB73D62CABCB76D55AA1D) == 0x0004E8, "Member 'ABP_Prefab_Fires_PL_C::Timeline_Z_A050B4E248EDB73D62CABCB76D55AA1D' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Timeline_Y_A050B4E248EDB73D62CABCB76D55AA1D) == 0x0004EC, "Member 'ABP_Prefab_Fires_PL_C::Timeline_Y_A050B4E248EDB73D62CABCB76D55AA1D' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Timeline_X_A050B4E248EDB73D62CABCB76D55AA1D) == 0x0004F0, "Member 'ABP_Prefab_Fires_PL_C::Timeline_X_A050B4E248EDB73D62CABCB76D55AA1D' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Timeline__Direction_A050B4E248EDB73D62CABCB76D55AA1D) == 0x0004F4, "Member 'ABP_Prefab_Fires_PL_C::Timeline__Direction_A050B4E248EDB73D62CABCB76D55AA1D' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Timeline) == 0x0004F8, "Member 'ABP_Prefab_Fires_PL_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Use_Movement) == 0x000500, "Member 'ABP_Prefab_Fires_PL_C::Use_Movement' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Speed) == 0x000504, "Member 'ABP_Prefab_Fires_PL_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Movement_UP) == 0x000508, "Member 'ABP_Prefab_Fires_PL_C::Movement_UP' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Movement_Y) == 0x000510, "Member 'ABP_Prefab_Fires_PL_C::Movement_Y' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Movement_X) == 0x000518, "Member 'ABP_Prefab_Fires_PL_C::Movement_X' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Color_Tint) == 0x000520, "Member 'ABP_Prefab_Fires_PL_C::Color_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, Brazier_Transition_Done) == 0x000530, "Member 'ABP_Prefab_Fires_PL_C::Brazier_Transition_Done' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, FirstPersonClippingFix_UseFix) == 0x000531, "Member 'ABP_Prefab_Fires_PL_C::FirstPersonClippingFix_UseFix' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, BaseLightIntensity) == 0x000534, "Member 'ABP_Prefab_Fires_PL_C::BaseLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, FirstPersonClippingFixIntensityDivider) == 0x000538, "Member 'ABP_Prefab_Fires_PL_C::FirstPersonClippingFixIntensityDivider' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_PL_C, PlayerHasOwnership) == 0x000540, "Member 'ABP_Prefab_Fires_PL_C::PlayerHasOwnership' has a wrong offset!");

}

