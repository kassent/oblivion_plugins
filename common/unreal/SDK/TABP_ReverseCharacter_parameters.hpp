#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TABP_ReverseCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_AnimGraph) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_AnimGraph");
static_assert(sizeof(TABP_ReverseCharacter_C_AnimGraph) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_AnimGraph");
static_assert(offsetof(TABP_ReverseCharacter_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.AttackingLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_AttackingLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AttackingLayer_0;                                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_AttackingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_AttackingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_AttackingLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_AttackingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_AttackingLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_AttackingLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_AttackingLayer, AttackingLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_AttackingLayer::AttackingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.BlinkingLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_BlinkingLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BlinkingLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_BlinkingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_BlinkingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_BlinkingLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_BlinkingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_BlinkingLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_BlinkingLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_BlinkingLayer, BlinkingLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_BlinkingLayer::BlinkingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.BlockingLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_BlockingLayer final
{
public:
	struct FPoseLink                              BlockingLayer_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_BlockingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_BlockingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_BlockingLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_BlockingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_BlockingLayer, BlockingLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_BlockingLayer::BlockingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.BodyPhysics
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_BodyPhysics final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BodyPhysics_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_BodyPhysics) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_BodyPhysics");
static_assert(sizeof(TABP_ReverseCharacter_C_BodyPhysics) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_BodyPhysics");
static_assert(offsetof(TABP_ReverseCharacter_C_BodyPhysics, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_BodyPhysics::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_BodyPhysics, BodyPhysics_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_BodyPhysics::BodyPhysics_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.ConversationIdleLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_ConversationIdleLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ConversationIdleLayer_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_ConversationIdleLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_ConversationIdleLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_ConversationIdleLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_ConversationIdleLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_ConversationIdleLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_ConversationIdleLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_ConversationIdleLayer, ConversationIdleLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_ConversationIdleLayer::ConversationIdleLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.Death Layer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_Death_Layer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Death_Layer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_Death_Layer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_Death_Layer");
static_assert(sizeof(TABP_ReverseCharacter_C_Death_Layer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_Death_Layer");
static_assert(offsetof(TABP_ReverseCharacter_C_Death_Layer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_Death_Layer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_Death_Layer, Death_Layer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_Death_Layer::Death_Layer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.DodgeLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_DodgeLayer final
{
public:
	struct FPoseLink                              DodgeLayer_0;                                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_DodgeLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_DodgeLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_DodgeLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_DodgeLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_DodgeLayer, DodgeLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_DodgeLayer::DodgeLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.EnhancedLocomotionLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_EnhancedLocomotionLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              EnhancedLocomotionLayer_0;                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_EnhancedLocomotionLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_EnhancedLocomotionLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_EnhancedLocomotionLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_EnhancedLocomotionLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_EnhancedLocomotionLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_EnhancedLocomotionLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_EnhancedLocomotionLayer, EnhancedLocomotionLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_EnhancedLocomotionLayer::EnhancedLocomotionLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.EquipUnequipLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_EquipUnequipLayer final
{
public:
	struct FPoseLink                              EquipUnequipLayer_0;                               // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_EquipUnequipLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_EquipUnequipLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_EquipUnequipLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_EquipUnequipLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_EquipUnequipLayer, EquipUnequipLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_EquipUnequipLayer::EquipUnequipLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.ExecuteUbergraph_TABP_ReverseCharacter
// 0x0004 (0x0004 - 0x0000)
struct TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter) == 0x000004, "Wrong alignment on TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter");
static_assert(sizeof(TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter) == 0x000004, "Wrong size on TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter");
static_assert(offsetof(TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter, EntryPoint) == 0x000000, "Member 'TABP_ReverseCharacter_C_ExecuteUbergraph_TABP_ReverseCharacter::EntryPoint' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.FacialAnimationLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_FacialAnimationLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FacialAnimationLayer_0;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_FacialAnimationLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_FacialAnimationLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_FacialAnimationLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_FacialAnimationLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_FacialAnimationLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_FacialAnimationLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_FacialAnimationLayer, FacialAnimationLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_FacialAnimationLayer::FacialAnimationLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.FeetIKLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_FeetIKLayer final
{
public:
	struct FPoseLink                              AnimationPose;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FeetIKLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_FeetIKLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_FeetIKLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_FeetIKLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_FeetIKLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_FeetIKLayer, AnimationPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_FeetIKLayer::AnimationPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_FeetIKLayer, FeetIKLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_FeetIKLayer::FeetIKLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.GetUpLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_GetUpLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              GetUpLayer_0;                                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_GetUpLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_GetUpLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_GetUpLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_GetUpLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_GetUpLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_GetUpLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_GetUpLayer, GetUpLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_GetUpLayer::GetUpLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.HandPoseLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_HandPoseLayer final
{
public:
	struct FPoseLink                              AnimationPose;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandPoseLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_HandPoseLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_HandPoseLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_HandPoseLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_HandPoseLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_HandPoseLayer, AnimationPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_HandPoseLayer::AnimationPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_HandPoseLayer, HandPoseLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_HandPoseLayer::HandPoseLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.HitReactLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_HitReactLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HitReactLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_HitReactLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_HitReactLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_HitReactLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_HitReactLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_HitReactLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_HitReactLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_HitReactLayer, HitReactLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_HitReactLayer::HitReactLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.HorseRidingInAirLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_HorseRidingInAirLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HorseRidingInAirLayer_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_HorseRidingInAirLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_HorseRidingInAirLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_HorseRidingInAirLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_HorseRidingInAirLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_HorseRidingInAirLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_HorseRidingInAirLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_HorseRidingInAirLayer, HorseRidingInAirLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_HorseRidingInAirLayer::HorseRidingInAirLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.HorseRidingLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_HorseRidingLayer final
{
public:
	struct FPoseLink                              HorseRidingLayer_0;                                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_HorseRidingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_HorseRidingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_HorseRidingLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_HorseRidingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_HorseRidingLayer, HorseRidingLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_HorseRidingLayer::HorseRidingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.HorseRidingSwimLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_HorseRidingSwimLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HorseRidingSwimLayer_0;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_HorseRidingSwimLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_HorseRidingSwimLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_HorseRidingSwimLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_HorseRidingSwimLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_HorseRidingSwimLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_HorseRidingSwimLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_HorseRidingSwimLayer, HorseRidingSwimLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_HorseRidingSwimLayer::HorseRidingSwimLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.Humanoid Tail Physics
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_Humanoid_Tail_Physics final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Humanoid_Tail_Physics_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_Humanoid_Tail_Physics) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_Humanoid_Tail_Physics");
static_assert(sizeof(TABP_ReverseCharacter_C_Humanoid_Tail_Physics) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_Humanoid_Tail_Physics");
static_assert(offsetof(TABP_ReverseCharacter_C_Humanoid_Tail_Physics, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_Humanoid_Tail_Physics::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_Humanoid_Tail_Physics, Humanoid_Tail_Physics_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_Humanoid_Tail_Physics::Humanoid_Tail_Physics_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.LocomotionInAirLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_LocomotionInAirLayer final
{
public:
	struct FPoseLink                              LocomotionPose;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LocomotionInAirLayer_0;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_LocomotionInAirLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_LocomotionInAirLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_LocomotionInAirLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_LocomotionInAirLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_LocomotionInAirLayer, LocomotionPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_LocomotionInAirLayer::LocomotionPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_LocomotionInAirLayer, LocomotionInAirLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_LocomotionInAirLayer::LocomotionInAirLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.LookAtLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_LookAtLayer final
{
public:
	struct FPoseLink                              AnimationPose;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LookAtLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_LookAtLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_LookAtLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_LookAtLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_LookAtLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_LookAtLayer, AnimationPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_LookAtLayer::AnimationPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_LookAtLayer, LookAtLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_LookAtLayer::LookAtLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.LowerAndUpperBodyLayer
// 0x0030 (0x0030 - 0x0000)
struct TABP_ReverseCharacter_C_LowerAndUpperBodyLayer final
{
public:
	struct FPoseLink                              LowerBody;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBody;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LowerAndUpperBodyLayer_0;                          // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_LowerAndUpperBodyLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_LowerAndUpperBodyLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_LowerAndUpperBodyLayer) == 0x000030, "Wrong size on TABP_ReverseCharacter_C_LowerAndUpperBodyLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_LowerAndUpperBodyLayer, LowerBody) == 0x000000, "Member 'TABP_ReverseCharacter_C_LowerAndUpperBodyLayer::LowerBody' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_LowerAndUpperBodyLayer, UpperBody) == 0x000010, "Member 'TABP_ReverseCharacter_C_LowerAndUpperBodyLayer::UpperBody' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_LowerAndUpperBodyLayer, LowerAndUpperBodyLayer_0) == 0x000020, "Member 'TABP_ReverseCharacter_C_LowerAndUpperBodyLayer::LowerAndUpperBodyLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.Pose Snapshot Layer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_Pose_Snapshot_Layer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Pose_Snapshot_Layer_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_Pose_Snapshot_Layer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_Pose_Snapshot_Layer");
static_assert(sizeof(TABP_ReverseCharacter_C_Pose_Snapshot_Layer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_Pose_Snapshot_Layer");
static_assert(offsetof(TABP_ReverseCharacter_C_Pose_Snapshot_Layer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_Pose_Snapshot_Layer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_Pose_Snapshot_Layer, Pose_Snapshot_Layer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_Pose_Snapshot_Layer::Pose_Snapshot_Layer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.RecoilLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_RecoilLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              RecoilLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_RecoilLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_RecoilLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_RecoilLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_RecoilLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_RecoilLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_RecoilLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_RecoilLayer, RecoilLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_RecoilLayer::RecoilLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.ResurrectionLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_ResurrectionLayer final
{
public:
	struct FPoseLink                              ResurrectionLayer_0;                               // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_ResurrectionLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_ResurrectionLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_ResurrectionLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_ResurrectionLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_ResurrectionLayer, ResurrectionLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_ResurrectionLayer::ResurrectionLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.SneakingLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_SneakingLayer final
{
public:
	struct FPoseLink                              SneakingLayer_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_SneakingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_SneakingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_SneakingLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_SneakingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_SneakingLayer, SneakingLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_SneakingLayer::SneakingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.SpecialAndDynamicIdleLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SpecialAndDynamicIdleLayer_0;                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer, SpecialAndDynamicIdleLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_SpecialAndDynamicIdleLayer::SpecialAndDynamicIdleLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.SpellCastingLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_SpellCastingLayer final
{
public:
	struct FPoseLink                              SpellCastingLayer_0;                               // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_SpellCastingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_SpellCastingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_SpellCastingLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_SpellCastingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_SpellCastingLayer, SpellCastingLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_SpellCastingLayer::SpellCastingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.StaggerLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_StaggerLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              StaggerLayer_0;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_StaggerLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_StaggerLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_StaggerLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_StaggerLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_StaggerLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_StaggerLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_StaggerLayer, StaggerLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_StaggerLayer::StaggerLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.StandingLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_StandingLayer final
{
public:
	struct FPoseLink                              StandingLayer_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_StandingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_StandingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_StandingLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_StandingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_StandingLayer, StandingLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_StandingLayer::StandingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.SwimmingLayer
// 0x0010 (0x0010 - 0x0000)
struct TABP_ReverseCharacter_C_SwimmingLayer final
{
public:
	struct FPoseLink                              SwimmingLayer_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_SwimmingLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_SwimmingLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_SwimmingLayer) == 0x000010, "Wrong size on TABP_ReverseCharacter_C_SwimmingLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_SwimmingLayer, SwimmingLayer_0) == 0x000000, "Member 'TABP_ReverseCharacter_C_SwimmingLayer::SwimmingLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.TorchLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_TorchLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              TorchLayer_0;                                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_TorchLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_TorchLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_TorchLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_TorchLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_TorchLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_TorchLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_TorchLayer, TorchLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_TorchLayer::TorchLayer_0' has a wrong offset!");

// Function TABP_ReverseCharacter.TABP_ReverseCharacter_C.TurnInPlaceLayer
// 0x0020 (0x0020 - 0x0000)
struct TABP_ReverseCharacter_C_TurnInPlaceLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              TurnInPlaceLayer_0;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(TABP_ReverseCharacter_C_TurnInPlaceLayer) == 0x000008, "Wrong alignment on TABP_ReverseCharacter_C_TurnInPlaceLayer");
static_assert(sizeof(TABP_ReverseCharacter_C_TurnInPlaceLayer) == 0x000020, "Wrong size on TABP_ReverseCharacter_C_TurnInPlaceLayer");
static_assert(offsetof(TABP_ReverseCharacter_C_TurnInPlaceLayer, InPose) == 0x000000, "Member 'TABP_ReverseCharacter_C_TurnInPlaceLayer::InPose' has a wrong offset!");
static_assert(offsetof(TABP_ReverseCharacter_C_TurnInPlaceLayer, TurnInPlaceLayer_0) == 0x000010, "Member 'TABP_ReverseCharacter_C_TurnInPlaceLayer::TurnInPlaceLayer_0' has a wrong offset!");

}

