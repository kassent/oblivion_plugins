#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BrightnessCalibration

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_BrightnessCalibration.WBP_BrightnessCalibration_C.ExecuteUbergraph_WBP_BrightnessCalibration
// 0x0040 (0x0040 - 0x0000)
struct WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration) == 0x000004, "Wrong alignment on WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration");
static_assert(sizeof(WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration) == 0x000040, "Wrong size on WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration");
static_assert(offsetof(WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration, EntryPoint) == 0x000000, "Member 'WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_BrightnessCalibration_C_ExecuteUbergraph_WBP_BrightnessCalibration::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WBP_BrightnessCalibration.WBP_BrightnessCalibration_C.SetupCallibrationImage
// 0x0018 (0x0018 - 0x0000)
struct WBP_BrightnessCalibration_C_SetupCallibrationImage final
{
public:
	float                                         CallFunc_GetCommandFloatValue_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetBrushResourceAsMaterial_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrightnessCalibration_C_SetupCallibrationImage) == 0x000008, "Wrong alignment on WBP_BrightnessCalibration_C_SetupCallibrationImage");
static_assert(sizeof(WBP_BrightnessCalibration_C_SetupCallibrationImage) == 0x000018, "Wrong size on WBP_BrightnessCalibration_C_SetupCallibrationImage");
static_assert(offsetof(WBP_BrightnessCalibration_C_SetupCallibrationImage, CallFunc_GetCommandFloatValue_ReturnValue) == 0x000000, "Member 'WBP_BrightnessCalibration_C_SetupCallibrationImage::CallFunc_GetCommandFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_SetupCallibrationImage, CallFunc_GetBrushResourceAsMaterial_ReturnValue) == 0x000008, "Member 'WBP_BrightnessCalibration_C_SetupCallibrationImage::CallFunc_GetBrushResourceAsMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_SetupCallibrationImage, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WBP_BrightnessCalibration_C_SetupCallibrationImage::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WBP_BrightnessCalibration.WBP_BrightnessCalibration_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_BrightnessCalibration_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrightnessCalibration_C_Tick) == 0x000004, "Wrong alignment on WBP_BrightnessCalibration_C_Tick");
static_assert(sizeof(WBP_BrightnessCalibration_C_Tick) == 0x00003C, "Wrong size on WBP_BrightnessCalibration_C_Tick");
static_assert(offsetof(WBP_BrightnessCalibration_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_BrightnessCalibration_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_BrightnessCalibration_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_BrightnessCalibration.WBP_BrightnessCalibration_C.UpdateCallibrationImage
// 0x0028 (0x0028 - 0x0000)
struct WBP_BrightnessCalibration_C_UpdateCallibrationImage final
{
public:
	float                                         Local_OldValue;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Local_NewValue;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCommandFloatValue_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BrightnessCalibration_C_UpdateCallibrationImage) == 0x000008, "Wrong alignment on WBP_BrightnessCalibration_C_UpdateCallibrationImage");
static_assert(sizeof(WBP_BrightnessCalibration_C_UpdateCallibrationImage) == 0x000028, "Wrong size on WBP_BrightnessCalibration_C_UpdateCallibrationImage");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, Local_OldValue) == 0x000000, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::Local_OldValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, Local_NewValue) == 0x000004, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::Local_NewValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x00000C, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_GetCommandFloatValue_ReturnValue) == 0x000014, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_GetCommandFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x000018, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_BrightnessCalibration_C_UpdateCallibrationImage, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000020, "Member 'WBP_BrightnessCalibration_C_UpdateCallibrationImage::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");

}

