#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_Cloth_Scalabilty

#include "Basic.hpp"

#include "BPE_ClothingInstanceType_structs.hpp"
#include "Engine_classes.hpp"
#include "Altar_structs.hpp"
#include "BPE_ClothAssetPriority_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_Cloth_Scalabilty.BPC_Cloth_Scalabilty_C
// 0x0000 (0x00A0 - 0x00A0)
class UBPC_Cloth_Scalabilty_C final : public UActorComponent
{
public:
	void GetClothingInstanceType(const class FString& ParentActorName, const class FString& ParentComponentName, EBPE_ClothingInstanceType* Type);
	void GetClothQuality(const TDelegate<void(int32 NewValue)>& ClothQualityDelegate, const TDelegate<void(int32 NewValue)>& ViewDistanceDelegate, int32* ClothQuality, int32* ViewDistanceQuality);
	void HideClothMaterialSlots(TArray<class UChaosClothComponent*>& ClothComponents, class USkeletalMeshComponent* SkeletalMeshComponent, ECharacterSex CharacterSex, TArray<struct FBPS_ClothAssetAndMaterialSections>& MaleClothAssets, TArray<struct FBPS_ClothAssetAndMaterialSections>& FemaleClothAssets);
	void MakeClothComponentsArray(TArray<class UChaosClothComponent*>& ClothComponents);
	void Set_Cloth_Asset(TArray<class UChaosClothComponent*>& ClothComponents, ECharacterSex CharacterSex, class UTESRace* CharacterRace, TArray<struct FBPS_ClothAssetAndMaterialSections>& MaleClothAssets, TArray<struct FBPS_ClothAssetAndMaterialSections>& FemaleClothAssets);
	void SetFirstPersonCloth(TArray<class UChaosClothComponent*>& ClothComponents, ECharacterSex CharacterSex);
	void SetThirdPerson_Cloth(TArray<class UChaosClothComponent*>& ClothComponents, ECharacterSex CharacterSex, class UTESRace* CharacterRace);
	void ShouldSimulateBanner(int32 Cloth_Quality, bool IsWeatherValid, bool* Simulate);
	void ShouldSimulateCharacterCloth(int32 Cloth_Quality, EBPE_ClothAssetPriority MalePriority, EBPE_ClothAssetPriority FemalePriority, ECharacterSex Sex, TArray<class UChaosClothComponent*>& ClothComponents, TArray<struct FBPS_ClothAssetAndMaterialSections>& MaleClothAssets, TArray<struct FBPS_ClothAssetAndMaterialSections>& FemaleClothAssets, class AActor* ParentActor, bool* Simulate);
	void ShouldSimulateCloth(int32 Cloth_Quality, EBPE_ClothAssetPriority Priority, bool* Simulate);
	void ShowClothMaterialSlots(TArray<class UChaosClothComponent*>& ClothComponents, class USkeletalMeshComponent* SkeletalMeshComponent, ECharacterSex CharacterSex, TArray<struct FBPS_ClothAssetAndMaterialSections>& MaleClothAssets, TArray<struct FBPS_ClothAssetAndMaterialSections>& FemaleClothAssets, bool RemoveClothComponents, EBPE_ClothingInstanceType ClothingInstanceType);
	void SuspendSimulation(TArray<class UChaosClothComponent*>& ClothComponents, bool Suspend);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_Cloth_Scalabilty_C">();
	}
	static class UBPC_Cloth_Scalabilty_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_Cloth_Scalabilty_C>();
	}
};
static_assert(alignof(UBPC_Cloth_Scalabilty_C) == 0x000008, "Wrong alignment on UBPC_Cloth_Scalabilty_C");
static_assert(sizeof(UBPC_Cloth_Scalabilty_C) == 0x0000A0, "Wrong size on UBPC_Cloth_Scalabilty_C");

}

