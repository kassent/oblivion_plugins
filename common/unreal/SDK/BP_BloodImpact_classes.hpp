#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BloodImpact

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPE_ComponentState_structs.hpp"
#include "BPE_EffectSize_structs.hpp"
#include "BPE_BloodColor_structs.hpp"
#include "Altar_structs.hpp"
#include "Altar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BloodImpact.BP_BloodImpact_C
// 0x0430 (0x06D0 - 0x02A0)
class ABP_BloodImpact_C : public AVBloodSystemVFXBlueprint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  FPV_Distortion_PostProcess;                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  FPV_Blood_PostProcess;                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      BloodImpact_VFX;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Distortion_PP_Timeline_Fading_Value_C2B7C7D54536B91610432C87A98813AA; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Distortion_PP_Timeline__Direction_C2B7C7D54536B91610432C87A98813AA; // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Distortion_PP_Timeline;                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Blood_PP_Timeline_Fading_Value_D6CEBD8845F180F25F57518CC9B1A737; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Blood_PP_Timeline__Direction_D6CEBD8845F180F25F57518CC9B1A737; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Blood_PP_Timeline;                                 // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Debug;                                          // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Weapon_Hit;                                     // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Blood_Orient;                                      // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               Blood_Rotation;                                    // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FLinearColor                           Blood_Main_Color;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Blood_Shadow_Color;                                // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EBPE_EffectSize                               Blood_Impact_Size;                                 // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Is_Charged_Attack;                                 // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BloodSpray_Finished;                               // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_343[0x5];                                      // 0x0343(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Impact_Damages;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Target_Max_HP;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Damage_Over_Health;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Impact_Normal;                                     // 0x0360(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EBPE_BloodColor                               Blood_Color;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Hit_Direction;                                     // 0x0380(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EVHitSourceType                               Hit_Impact_Type;                                   // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EVHitSourceWeaponType                         Hit_Attack_Type;                                   // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Begin_as_FPV;                                      // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_39B[0x5];                                      // 0x039B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Blood_Impact_System;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Particle_Colision_Location;                        // 0x03A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Particle_Colision_Normal;                          // 0x03C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Particle_Colision_Direction;                       // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UDecalComponent*                        Blood_Decal_Component;                             // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Blood_Decal_MID;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class AActor*                                 Target_Actor;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Preview_Niagara_Orient;                            // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Preview_Decal_Orient;                              // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Preview_Decal_Splatter_Surface_Type;               // 0x040A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Is_Weapon_Value;                             // 0x040B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_BloodColor                               Debug_Blood_Color_Value;                           // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Debug_Damages_Value;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Long_Splatter_Decal_Material;                      // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Rounded_Splatter_Decal_Material;                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Splatter_Decal_Size_Range;                         // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Splatter_Decal_Lifetime;                           // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Splatter_Decal_Fade_In_Duration;                   // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Splatter_Decal_Fade_Out_Duration;                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Splatter_Is_Round;                                 // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Target_Actor_Is_Valid;                             // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Target_Velocity;                                   // 0x0458(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Target_Is_Player;                                  // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_OblivionPlayerCharacter_C*          Targeted_Player_Blueprint;                         // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Debug_Max_Target_Health;                           // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Does_Begin_in_FPV;                           // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVHitSourceType                               Debug_Hit_Source_Type;                             // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVHitSourceWeaponType                         Debug_Hit_Attack_Type;                             // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48B[0x5];                                      // 0x048B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Debug_Impact_Normal;                               // 0x0490(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Attacker_Actor;                                    // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Attacker_Is_Player;                                // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   Weapon_Mesh;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Weapon_Mesh_Is_Valid;                              // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0xF];                                      // 0x04C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Weapon_Socket_Transform;                           // 0x04D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Weapon_Socket_Location;                            // 0x0530(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               Weapon_Socket_Rotation;                            // 0x0548(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector                                Weapon_Socket_Orient;                              // 0x0560(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Weapon_Socket_Scale;                               // 0x0578(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Is_Slashing_Hit;                                   // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Attack_Actor_Is_Valid;                             // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_592[0x6];                                      // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Debug_Weapon_Orient;                               // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Skeleton_Impact_System;                            // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Blood_PP_Material;                                 // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Distortion_PP_Material;                            // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Blood_Lifetime;                                    // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blood_Fade_In;                                     // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blood_Fade_Out;                                    // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Blood_PP_MID;                                      // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Is_Currently_FPV;                                  // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Blood_PP_is_Valid;                                 // 0x05E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EBPE_ComponentState                           Blood_PostProcess_State;                           // 0x05EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_5EB[0x5];                                      // 0x05EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PostProcess_ScreenPos;                             // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Stop_Blood_Called;                                 // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Blood_PP_is_Finished;                              // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_602[0x6];                                      // 0x0602(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blood_PP_Fading_Value;                             // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Distortion_Lifetime;                               // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distortion_Fade_In;                                // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distortion_Fade_Out;                               // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Distortion_PP_MID;                                 // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Distortion_PP_is_Valid;                            // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EBPE_ComponentState                           Distortion_PostProcess_State;                      // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Stop_Distortion_Called;                            // 0x0632(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Distortion_PP_is_Finished;                         // 0x0633(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distortion_PP_Fading_Value;                        // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector2D                              Foward_Screen_Position;                            // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Debug_Hit_Direction;                               // 0x0658(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_Multiplier;                               // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Size_Multiplier;                                   // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, double>                   Blood_Size_Cap;                                    // 0x0680(0x0050)(Edit, BlueprintVisible)

public:
	void Activate_FPV_Blood_PP();
	void Activate_FPV_Distortion_PP();
	void BindControllerMappingSwitch();
	void Blood_PP_Activate(bool Is_Fading);
	void Blood_PP_Deactivate(bool Is_Fading, bool Is_Fast);
	void Blood_PP_Timeline__FinishedFunc();
	void Blood_PP_Timeline__UpdateFunc();
	void BndEvt__BP_BloodImpact_BloodSpray_VFX_K2Node_ComponentBoundEvent_0_OnNiagaraSystemFinished__DelegateSignature(class UNiagaraComponent* PSystem);
	void Calculate_PP_Screen_Position();
	void Calculate_Simplified_Niagara_Data();
	void Call_Fist_Blood_Event(EVBloodColor Blood_Color_0, EVHitSourceType Hit_Source_Type);
	void Call_Weapon_Blood_Event(EVBloodColor Blood_Color_0);
	void Distortion_PP_Activate(bool Is_Fading);
	void Distortion_PP_Deactivate(bool Is_Fading);
	void Distortion_PP_Timeline__FinishedFunc();
	void Distortion_PP_Timeline__UpdateFunc();
	void End_Tick();
	void ExecuteUbergraph_BP_BloodImpact(int32 EntryPoint);
	void OnChangeFirstPerson(bool bIsFirstPerson);
	void OnStartPlay(float Damages, EVBloodColor BloodColor, bool bIsUsingWeapon, class AActor* Target, const class AActor* Attacker, float TargetMaxHP, bool bDoesBeginInFirstPerson, EVHitSourceType HitSourceType, const class UStaticMeshComponent* WeaponComp, const struct FVector_NetQuantizeNormal& ImpactNormal, EVHitSourceWeaponType HitWeaponType, const struct FVector& HitDirection);
	void OnSwitchToGameMappings();
	void OnSwitchToUIMappings();
	void Preset_Decal_Dynamic_Material();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveParticleData(const TArray<struct FBasicParticleData>& Data, class UNiagaraSystem* NiagaraSystem, const struct FVector& SimulationPositionOffset);
	void Send_Random_Offsets_To_Blood_PP();
	void Send_Random_Offsets_To_Distortion_PP();
	void Setup_Blood_Niagara_Systems___Variables();
	void Spawn_Blood_Decal();
	void Stop_Blood_PP();
	void Stop_Distortion_PP();
	void Store_Data_From_Blood_Event(double Event_Damages, uint8 Event_Blood_Color, bool Event_Is_Weapon, class AActor* Event_Target_Actor, class AActor* Event_Attacker_Actor, double EventTarget_Max_HP, bool Event_Does_Begin_in_FPV, EVHitSourceType Event_Hit_Source_Type, class UStaticMeshComponent* Event_Weapon_Mesh, const struct FVector_NetQuantizeNormal& Event_Impact_Normal, EVHitSourceWeaponType Event_Hit_Weapon_Type, const struct FVector& Event_Hit_Direction);
	void Store_Particle_Colision_Data(const struct FVector& position, const struct FVector& Normal);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BloodImpact_C">();
	}
	static class ABP_BloodImpact_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BloodImpact_C>();
	}
};
static_assert(alignof(ABP_BloodImpact_C) == 0x000010, "Wrong alignment on ABP_BloodImpact_C");
static_assert(sizeof(ABP_BloodImpact_C) == 0x0006D0, "Wrong size on ABP_BloodImpact_C");
static_assert(offsetof(ABP_BloodImpact_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_BloodImpact_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, FPV_Distortion_PostProcess) == 0x0002A8, "Member 'ABP_BloodImpact_C::FPV_Distortion_PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, FPV_Blood_PostProcess) == 0x0002B0, "Member 'ABP_BloodImpact_C::FPV_Blood_PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, BloodImpact_VFX) == 0x0002B8, "Member 'ABP_BloodImpact_C::BloodImpact_VFX' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_BloodImpact_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_Timeline_Fading_Value_C2B7C7D54536B91610432C87A98813AA) == 0x0002C8, "Member 'ABP_BloodImpact_C::Distortion_PP_Timeline_Fading_Value_C2B7C7D54536B91610432C87A98813AA' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_Timeline__Direction_C2B7C7D54536B91610432C87A98813AA) == 0x0002CC, "Member 'ABP_BloodImpact_C::Distortion_PP_Timeline__Direction_C2B7C7D54536B91610432C87A98813AA' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_Timeline) == 0x0002D0, "Member 'ABP_BloodImpact_C::Distortion_PP_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_Timeline_Fading_Value_D6CEBD8845F180F25F57518CC9B1A737) == 0x0002D8, "Member 'ABP_BloodImpact_C::Blood_PP_Timeline_Fading_Value_D6CEBD8845F180F25F57518CC9B1A737' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_Timeline__Direction_D6CEBD8845F180F25F57518CC9B1A737) == 0x0002DC, "Member 'ABP_BloodImpact_C::Blood_PP_Timeline__Direction_D6CEBD8845F180F25F57518CC9B1A737' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_Timeline) == 0x0002E0, "Member 'ABP_BloodImpact_C::Blood_PP_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Is_Debug) == 0x0002E8, "Member 'ABP_BloodImpact_C::Is_Debug' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Is_Weapon_Hit) == 0x0002E9, "Member 'ABP_BloodImpact_C::Is_Weapon_Hit' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Orient) == 0x0002F0, "Member 'ABP_BloodImpact_C::Blood_Orient' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Rotation) == 0x000308, "Member 'ABP_BloodImpact_C::Blood_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Main_Color) == 0x000320, "Member 'ABP_BloodImpact_C::Blood_Main_Color' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Shadow_Color) == 0x000330, "Member 'ABP_BloodImpact_C::Blood_Shadow_Color' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Impact_Size) == 0x000340, "Member 'ABP_BloodImpact_C::Blood_Impact_Size' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Is_Charged_Attack) == 0x000341, "Member 'ABP_BloodImpact_C::Is_Charged_Attack' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, BloodSpray_Finished) == 0x000342, "Member 'ABP_BloodImpact_C::BloodSpray_Finished' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Impact_Damages) == 0x000348, "Member 'ABP_BloodImpact_C::Impact_Damages' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Target_Max_HP) == 0x000350, "Member 'ABP_BloodImpact_C::Target_Max_HP' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Damage_Over_Health) == 0x000358, "Member 'ABP_BloodImpact_C::Damage_Over_Health' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Impact_Normal) == 0x000360, "Member 'ABP_BloodImpact_C::Impact_Normal' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Color) == 0x000378, "Member 'ABP_BloodImpact_C::Blood_Color' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Hit_Direction) == 0x000380, "Member 'ABP_BloodImpact_C::Hit_Direction' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Hit_Impact_Type) == 0x000398, "Member 'ABP_BloodImpact_C::Hit_Impact_Type' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Hit_Attack_Type) == 0x000399, "Member 'ABP_BloodImpact_C::Hit_Attack_Type' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Begin_as_FPV) == 0x00039A, "Member 'ABP_BloodImpact_C::Begin_as_FPV' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Impact_System) == 0x0003A0, "Member 'ABP_BloodImpact_C::Blood_Impact_System' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Particle_Colision_Location) == 0x0003A8, "Member 'ABP_BloodImpact_C::Particle_Colision_Location' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Particle_Colision_Normal) == 0x0003C0, "Member 'ABP_BloodImpact_C::Particle_Colision_Normal' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Particle_Colision_Direction) == 0x0003D8, "Member 'ABP_BloodImpact_C::Particle_Colision_Direction' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Decal_Component) == 0x0003F0, "Member 'ABP_BloodImpact_C::Blood_Decal_Component' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Decal_MID) == 0x0003F8, "Member 'ABP_BloodImpact_C::Blood_Decal_MID' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Target_Actor) == 0x000400, "Member 'ABP_BloodImpact_C::Target_Actor' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Preview_Niagara_Orient) == 0x000408, "Member 'ABP_BloodImpact_C::Preview_Niagara_Orient' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Preview_Decal_Orient) == 0x000409, "Member 'ABP_BloodImpact_C::Preview_Decal_Orient' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Preview_Decal_Splatter_Surface_Type) == 0x00040A, "Member 'ABP_BloodImpact_C::Preview_Decal_Splatter_Surface_Type' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Is_Weapon_Value) == 0x00040B, "Member 'ABP_BloodImpact_C::Debug_Is_Weapon_Value' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Blood_Color_Value) == 0x00040C, "Member 'ABP_BloodImpact_C::Debug_Blood_Color_Value' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Damages_Value) == 0x000410, "Member 'ABP_BloodImpact_C::Debug_Damages_Value' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Long_Splatter_Decal_Material) == 0x000418, "Member 'ABP_BloodImpact_C::Long_Splatter_Decal_Material' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Rounded_Splatter_Decal_Material) == 0x000420, "Member 'ABP_BloodImpact_C::Rounded_Splatter_Decal_Material' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Splatter_Decal_Size_Range) == 0x000428, "Member 'ABP_BloodImpact_C::Splatter_Decal_Size_Range' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Splatter_Decal_Lifetime) == 0x000438, "Member 'ABP_BloodImpact_C::Splatter_Decal_Lifetime' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Splatter_Decal_Fade_In_Duration) == 0x000440, "Member 'ABP_BloodImpact_C::Splatter_Decal_Fade_In_Duration' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Splatter_Decal_Fade_Out_Duration) == 0x000448, "Member 'ABP_BloodImpact_C::Splatter_Decal_Fade_Out_Duration' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Splatter_Is_Round) == 0x000450, "Member 'ABP_BloodImpact_C::Splatter_Is_Round' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Target_Actor_Is_Valid) == 0x000451, "Member 'ABP_BloodImpact_C::Target_Actor_Is_Valid' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Target_Velocity) == 0x000458, "Member 'ABP_BloodImpact_C::Target_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Target_Is_Player) == 0x000470, "Member 'ABP_BloodImpact_C::Target_Is_Player' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Targeted_Player_Blueprint) == 0x000478, "Member 'ABP_BloodImpact_C::Targeted_Player_Blueprint' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Max_Target_Health) == 0x000480, "Member 'ABP_BloodImpact_C::Debug_Max_Target_Health' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Does_Begin_in_FPV) == 0x000488, "Member 'ABP_BloodImpact_C::Debug_Does_Begin_in_FPV' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Hit_Source_Type) == 0x000489, "Member 'ABP_BloodImpact_C::Debug_Hit_Source_Type' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Hit_Attack_Type) == 0x00048A, "Member 'ABP_BloodImpact_C::Debug_Hit_Attack_Type' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Impact_Normal) == 0x000490, "Member 'ABP_BloodImpact_C::Debug_Impact_Normal' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Attacker_Actor) == 0x0004A8, "Member 'ABP_BloodImpact_C::Attacker_Actor' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Attacker_Is_Player) == 0x0004B0, "Member 'ABP_BloodImpact_C::Attacker_Is_Player' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Mesh) == 0x0004B8, "Member 'ABP_BloodImpact_C::Weapon_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Mesh_Is_Valid) == 0x0004C0, "Member 'ABP_BloodImpact_C::Weapon_Mesh_Is_Valid' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Socket_Transform) == 0x0004D0, "Member 'ABP_BloodImpact_C::Weapon_Socket_Transform' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Socket_Location) == 0x000530, "Member 'ABP_BloodImpact_C::Weapon_Socket_Location' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Socket_Rotation) == 0x000548, "Member 'ABP_BloodImpact_C::Weapon_Socket_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Socket_Orient) == 0x000560, "Member 'ABP_BloodImpact_C::Weapon_Socket_Orient' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Weapon_Socket_Scale) == 0x000578, "Member 'ABP_BloodImpact_C::Weapon_Socket_Scale' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Is_Slashing_Hit) == 0x000590, "Member 'ABP_BloodImpact_C::Is_Slashing_Hit' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Attack_Actor_Is_Valid) == 0x000591, "Member 'ABP_BloodImpact_C::Attack_Actor_Is_Valid' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Weapon_Orient) == 0x000598, "Member 'ABP_BloodImpact_C::Debug_Weapon_Orient' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Skeleton_Impact_System) == 0x0005B0, "Member 'ABP_BloodImpact_C::Skeleton_Impact_System' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_Material) == 0x0005B8, "Member 'ABP_BloodImpact_C::Blood_PP_Material' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_Material) == 0x0005C0, "Member 'ABP_BloodImpact_C::Distortion_PP_Material' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Lifetime) == 0x0005C8, "Member 'ABP_BloodImpact_C::Blood_Lifetime' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Fade_In) == 0x0005D0, "Member 'ABP_BloodImpact_C::Blood_Fade_In' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Fade_Out) == 0x0005D8, "Member 'ABP_BloodImpact_C::Blood_Fade_Out' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_MID) == 0x0005E0, "Member 'ABP_BloodImpact_C::Blood_PP_MID' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Is_Currently_FPV) == 0x0005E8, "Member 'ABP_BloodImpact_C::Is_Currently_FPV' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_is_Valid) == 0x0005E9, "Member 'ABP_BloodImpact_C::Blood_PP_is_Valid' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PostProcess_State) == 0x0005EA, "Member 'ABP_BloodImpact_C::Blood_PostProcess_State' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, PostProcess_ScreenPos) == 0x0005F0, "Member 'ABP_BloodImpact_C::PostProcess_ScreenPos' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Stop_Blood_Called) == 0x000600, "Member 'ABP_BloodImpact_C::Stop_Blood_Called' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_is_Finished) == 0x000601, "Member 'ABP_BloodImpact_C::Blood_PP_is_Finished' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_PP_Fading_Value) == 0x000608, "Member 'ABP_BloodImpact_C::Blood_PP_Fading_Value' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_Lifetime) == 0x000610, "Member 'ABP_BloodImpact_C::Distortion_Lifetime' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_Fade_In) == 0x000618, "Member 'ABP_BloodImpact_C::Distortion_Fade_In' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_Fade_Out) == 0x000620, "Member 'ABP_BloodImpact_C::Distortion_Fade_Out' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_MID) == 0x000628, "Member 'ABP_BloodImpact_C::Distortion_PP_MID' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_is_Valid) == 0x000630, "Member 'ABP_BloodImpact_C::Distortion_PP_is_Valid' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PostProcess_State) == 0x000631, "Member 'ABP_BloodImpact_C::Distortion_PostProcess_State' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Stop_Distortion_Called) == 0x000632, "Member 'ABP_BloodImpact_C::Stop_Distortion_Called' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_is_Finished) == 0x000633, "Member 'ABP_BloodImpact_C::Distortion_PP_is_Finished' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Distortion_PP_Fading_Value) == 0x000638, "Member 'ABP_BloodImpact_C::Distortion_PP_Fading_Value' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Foward_Screen_Position) == 0x000640, "Member 'ABP_BloodImpact_C::Foward_Screen_Position' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Angle) == 0x000650, "Member 'ABP_BloodImpact_C::Angle' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Debug_Hit_Direction) == 0x000658, "Member 'ABP_BloodImpact_C::Debug_Hit_Direction' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Velocity_Multiplier) == 0x000670, "Member 'ABP_BloodImpact_C::Velocity_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Size_Multiplier) == 0x000678, "Member 'ABP_BloodImpact_C::Size_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_BloodImpact_C, Blood_Size_Cap) == 0x000680, "Member 'ABP_BloodImpact_C::Blood_Size_Cap' has a wrong offset!");

}

