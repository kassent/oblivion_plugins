#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TABP_HorseJump

#include "Basic.hpp"

#include "TABP_HorseJump_classes.hpp"
#include "TABP_HorseJump_parameters.hpp"


namespace SDK
{

// Function TABP_HorseJump.TABP_HorseJump_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink*                       AnimGraph_0                                            (Parm, OutParm, NoDestructor)

void UTABP_HorseJump_C::AnimGraph(struct FPoseLink* AnimGraph_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TABP_HorseJump_C", "AnimGraph");

	Params::TABP_HorseJump_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimGraph_0 != nullptr)
		*AnimGraph_0 = std::move(Parms.AnimGraph_0);
}


// Function TABP_HorseJump.TABP_HorseJump_C.ExecuteUbergraph_TABP_HorseJump
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTABP_HorseJump_C::ExecuteUbergraph_TABP_HorseJump(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TABP_HorseJump_C", "ExecuteUbergraph_TABP_HorseJump");

	Params::TABP_HorseJump_C_ExecuteUbergraph_TABP_HorseJump Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TABP_HorseJump.TABP_HorseJump_C.LocomotionInAirLayer
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 LocomotionPose                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       LocomotionInAirLayer_0                                 (Parm, OutParm, NoDestructor)

void UTABP_HorseJump_C::LocomotionInAirLayer(const struct FPoseLink& LocomotionPose, struct FPoseLink* LocomotionInAirLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TABP_HorseJump_C", "LocomotionInAirLayer");

	Params::TABP_HorseJump_C_LocomotionInAirLayer Parms{};

	Parms.LocomotionPose = std::move(LocomotionPose);

	UObject::ProcessEvent(Func, &Parms);

	if (LocomotionInAirLayer_0 != nullptr)
		*LocomotionInAirLayer_0 = std::move(Parms.LocomotionInAirLayer_0);
}


// Function TABP_HorseJump.TABP_HorseJump_C.OnStateEntry
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UTABP_HorseJump_C::OnStateEntry(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TABP_HorseJump_C", "OnStateEntry");

	Params::TABP_HorseJump_C_OnStateEntry Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TABP_HorseJump.TABP_HorseJump_C.OnStateExit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UTABP_HorseJump_C::OnStateExit(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TABP_HorseJump_C", "OnStateExit");

	Params::TABP_HorseJump_C_OnStateExit Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	UObject::ProcessEvent(Func, &Parms);
}

}

