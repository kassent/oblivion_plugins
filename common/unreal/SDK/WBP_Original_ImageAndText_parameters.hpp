#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Original_ImageAndText

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_Original_ImageAndText.WBP_Original_ImageAndText_C.ExecuteUbergraph_WBP_Original_ImageAndText
// 0x0008 (0x0008 - 0x0000)
struct WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText) == 0x000004, "Wrong alignment on WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText");
static_assert(sizeof(WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText) == 0x000008, "Wrong size on WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText");
static_assert(offsetof(WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText, EntryPoint) == 0x000000, "Member 'WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_Original_ImageAndText_C_ExecuteUbergraph_WBP_Original_ImageAndText::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_Original_ImageAndText.WBP_Original_ImageAndText_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Original_ImageAndText_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Original_ImageAndText_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Original_ImageAndText_C_PreConstruct");
static_assert(sizeof(WBP_Original_ImageAndText_C_PreConstruct) == 0x000001, "Wrong size on WBP_Original_ImageAndText_C_PreConstruct");
static_assert(offsetof(WBP_Original_ImageAndText_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Original_ImageAndText_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Original_ImageAndText.WBP_Original_ImageAndText_C.UpdateImage
// 0x00D0 (0x00D0 - 0x0000)
struct WBP_Original_ImageAndText_C_UpdateImage final
{
public:
	struct FSlateBrush                            NewImage;                                          // 0x0000(0x00D0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Original_ImageAndText_C_UpdateImage) == 0x000010, "Wrong alignment on WBP_Original_ImageAndText_C_UpdateImage");
static_assert(sizeof(WBP_Original_ImageAndText_C_UpdateImage) == 0x0000D0, "Wrong size on WBP_Original_ImageAndText_C_UpdateImage");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImage, NewImage) == 0x000000, "Member 'WBP_Original_ImageAndText_C_UpdateImage::NewImage' has a wrong offset!");

// Function WBP_Original_ImageAndText.WBP_Original_ImageAndText_C.UpdateImageSize
// 0x0038 (0x0038 - 0x0000)
struct WBP_Original_ImageAndText_C_UpdateImageSize final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Original_ImageAndText_C_UpdateImageSize) == 0x000008, "Wrong alignment on WBP_Original_ImageAndText_C_UpdateImageSize");
static_assert(sizeof(WBP_Original_ImageAndText_C_UpdateImageSize) == 0x000038, "Wrong size on WBP_Original_ImageAndText_C_UpdateImageSize");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, NewSize) == 0x000000, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::NewSize' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, CallFunc_BreakVector2D_X) == 0x000010, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, CallFunc_BreakVector2D_Y_1) == 0x000028, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000030, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateImageSize, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000034, "Member 'WBP_Original_ImageAndText_C_UpdateImageSize::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");

// Function WBP_Original_ImageAndText.WBP_Original_ImageAndText_C.UpdateText
// 0x0018 (0x0018 - 0x0000)
struct WBP_Original_ImageAndText_C_UpdateText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Original_ImageAndText_C_UpdateText) == 0x000008, "Wrong alignment on WBP_Original_ImageAndText_C_UpdateText");
static_assert(sizeof(WBP_Original_ImageAndText_C_UpdateText) == 0x000018, "Wrong size on WBP_Original_ImageAndText_C_UpdateText");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateText, NewText) == 0x000000, "Member 'WBP_Original_ImageAndText_C_UpdateText::NewText' has a wrong offset!");

// Function WBP_Original_ImageAndText.WBP_Original_ImageAndText_C.UpdateTextApperance
// 0x0070 (0x0070 - 0x0000)
struct WBP_Original_ImageAndText_C_UpdateTextApperance final
{
public:
	struct FSlateColor                            NewColorOpacity;                                   // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         NewFont;                                           // 0x0018(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Original_ImageAndText_C_UpdateTextApperance) == 0x000008, "Wrong alignment on WBP_Original_ImageAndText_C_UpdateTextApperance");
static_assert(sizeof(WBP_Original_ImageAndText_C_UpdateTextApperance) == 0x000070, "Wrong size on WBP_Original_ImageAndText_C_UpdateTextApperance");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateTextApperance, NewColorOpacity) == 0x000000, "Member 'WBP_Original_ImageAndText_C_UpdateTextApperance::NewColorOpacity' has a wrong offset!");
static_assert(offsetof(WBP_Original_ImageAndText_C_UpdateTextApperance, NewFont) == 0x000018, "Member 'WBP_Original_ImageAndText_C_UpdateTextApperance::NewFont' has a wrong offset!");

}

