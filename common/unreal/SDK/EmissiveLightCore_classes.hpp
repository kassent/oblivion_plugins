#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EmissiveLightCore

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EmissiveLightCore_structs.hpp"


namespace SDK
{

// Class EmissiveLightCore.EmissiveLight
// 0x0008 (0x02A0 - 0x0298)
class AEmissiveLight final : public AActor
{
public:
	class UEmissiveLightComponent*                EmissiveLightComponent;                            // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmissiveLight">();
	}
	static class AEmissiveLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEmissiveLight>();
	}
};
static_assert(alignof(AEmissiveLight) == 0x000008, "Wrong alignment on AEmissiveLight");
static_assert(sizeof(AEmissiveLight) == 0x0002A0, "Wrong size on AEmissiveLight");
static_assert(offsetof(AEmissiveLight, EmissiveLightComponent) == 0x000298, "Member 'AEmissiveLight::EmissiveLightComponent' has a wrong offset!");

// Class EmissiveLightCore.EmissiveLightComponent
// 0x0020 (0x0650 - 0x0630)
class UEmissiveLightComponent final : public UStaticMeshComponent
{
public:
	EEmissiveLightType                            LightType;                                         // 0x0630(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_631[0x3];                                      // 0x0631(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x0634(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIntersectionDistance;                           // 0x0638(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x063C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63D[0x13];                                     // 0x063D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColor(const struct FLinearColor& Color);
	void SetIntensity(float Intensity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmissiveLightComponent">();
	}
	static class UEmissiveLightComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmissiveLightComponent>();
	}
};
static_assert(alignof(UEmissiveLightComponent) == 0x000010, "Wrong alignment on UEmissiveLightComponent");
static_assert(sizeof(UEmissiveLightComponent) == 0x000650, "Wrong size on UEmissiveLightComponent");
static_assert(offsetof(UEmissiveLightComponent, LightType) == 0x000630, "Member 'UEmissiveLightComponent::LightType' has a wrong offset!");
static_assert(offsetof(UEmissiveLightComponent, MaxDrawDistance) == 0x000634, "Member 'UEmissiveLightComponent::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(UEmissiveLightComponent, MaxIntersectionDistance) == 0x000638, "Member 'UEmissiveLightComponent::MaxIntersectionDistance' has a wrong offset!");
static_assert(offsetof(UEmissiveLightComponent, bEnable) == 0x00063C, "Member 'UEmissiveLightComponent::bEnable' has a wrong offset!");

}

