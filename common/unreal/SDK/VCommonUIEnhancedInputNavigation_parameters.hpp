#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VCommonUIEnhancedInputNavigation

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "Slate_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "VCommonUIEnhancedInputNavigation_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function VCommonUIEnhancedInputNavigation.VEnhancedInputNavigable.GetWidgetLayer
// 0x0008 (0x0008 - 0x0000)
struct VEnhancedInputNavigable_GetWidgetLayer final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInputNavigable_GetWidgetLayer) == 0x000004, "Wrong alignment on VEnhancedInputNavigable_GetWidgetLayer");
static_assert(sizeof(VEnhancedInputNavigable_GetWidgetLayer) == 0x000008, "Wrong size on VEnhancedInputNavigable_GetWidgetLayer");
static_assert(offsetof(VEnhancedInputNavigable_GetWidgetLayer, ReturnValue) == 0x000000, "Member 'VEnhancedInputNavigable_GetWidgetLayer::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VEnhancedInputNavigable.GetNavigationWidgetForAction
// 0x0018 (0x0018 - 0x0000)
struct VEnhancedInputNavigable_GetNavigationWidgetForAction final
{
public:
	EVNavigationDirection                         Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IVEnhancedInputNavigable> ReturnValue;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInputNavigable_GetNavigationWidgetForAction) == 0x000008, "Wrong alignment on VEnhancedInputNavigable_GetNavigationWidgetForAction");
static_assert(sizeof(VEnhancedInputNavigable_GetNavigationWidgetForAction) == 0x000018, "Wrong size on VEnhancedInputNavigable_GetNavigationWidgetForAction");
static_assert(offsetof(VEnhancedInputNavigable_GetNavigationWidgetForAction, Action) == 0x000000, "Member 'VEnhancedInputNavigable_GetNavigationWidgetForAction::Action' has a wrong offset!");
static_assert(offsetof(VEnhancedInputNavigable_GetNavigationWidgetForAction, ReturnValue) == 0x000008, "Member 'VEnhancedInputNavigable_GetNavigationWidgetForAction::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VEnhancedInputNavigable.IsNavigable
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInputNavigable_IsNavigable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInputNavigable_IsNavigable) == 0x000001, "Wrong alignment on VEnhancedInputNavigable_IsNavigable");
static_assert(sizeof(VEnhancedInputNavigable_IsNavigable) == 0x000001, "Wrong size on VEnhancedInputNavigable_IsNavigable");
static_assert(offsetof(VEnhancedInputNavigable_IsNavigable, ReturnValue) == 0x000000, "Member 'VEnhancedInputNavigable_IsNavigable::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableActivatableWidgetBase.BindInputAction
// 0x0010 (0x0010 - 0x0000)
struct VNavigableActivatableWidgetBase_BindInputAction final
{
public:
	struct FVGenericInputActionData               InputActionData;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableActivatableWidgetBase_BindInputAction) == 0x000008, "Wrong alignment on VNavigableActivatableWidgetBase_BindInputAction");
static_assert(sizeof(VNavigableActivatableWidgetBase_BindInputAction) == 0x000010, "Wrong size on VNavigableActivatableWidgetBase_BindInputAction");
static_assert(offsetof(VNavigableActivatableWidgetBase_BindInputAction, InputActionData) == 0x000000, "Member 'VNavigableActivatableWidgetBase_BindInputAction::InputActionData' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableActivatableWidgetBase.GetIsFocussed
// 0x0001 (0x0001 - 0x0000)
struct VNavigableActivatableWidgetBase_GetIsFocussed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableActivatableWidgetBase_GetIsFocussed) == 0x000001, "Wrong alignment on VNavigableActivatableWidgetBase_GetIsFocussed");
static_assert(sizeof(VNavigableActivatableWidgetBase_GetIsFocussed) == 0x000001, "Wrong size on VNavigableActivatableWidgetBase_GetIsFocussed");
static_assert(offsetof(VNavigableActivatableWidgetBase_GetIsFocussed, ReturnValue) == 0x000000, "Member 'VNavigableActivatableWidgetBase_GetIsFocussed::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.OnButtonTextUpdated
// 0x0018 (0x0018 - 0x0000)
struct VNavigableButton_OnButtonTextUpdated final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_OnButtonTextUpdated) == 0x000008, "Wrong alignment on VNavigableButton_OnButtonTextUpdated");
static_assert(sizeof(VNavigableButton_OnButtonTextUpdated) == 0x000018, "Wrong size on VNavigableButton_OnButtonTextUpdated");
static_assert(offsetof(VNavigableButton_OnButtonTextUpdated, Value) == 0x000000, "Member 'VNavigableButton_OnButtonTextUpdated::Value' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.OnControllerActiveUpdated
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_OnControllerActiveUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_OnControllerActiveUpdated) == 0x000001, "Wrong alignment on VNavigableButton_OnControllerActiveUpdated");
static_assert(sizeof(VNavigableButton_OnControllerActiveUpdated) == 0x000001, "Wrong size on VNavigableButton_OnControllerActiveUpdated");
static_assert(offsetof(VNavigableButton_OnControllerActiveUpdated, Value) == 0x000000, "Member 'VNavigableButton_OnControllerActiveUpdated::Value' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.SetButtonText
// 0x0018 (0x0018 - 0x0000)
struct VNavigableButton_SetButtonText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_SetButtonText) == 0x000008, "Wrong alignment on VNavigableButton_SetButtonText");
static_assert(sizeof(VNavigableButton_SetButtonText) == 0x000018, "Wrong size on VNavigableButton_SetButtonText");
static_assert(offsetof(VNavigableButton_SetButtonText, Value) == 0x000000, "Member 'VNavigableButton_SetButtonText::Value' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.SetIsControllerActive
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_SetIsControllerActive final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_SetIsControllerActive) == 0x000001, "Wrong alignment on VNavigableButton_SetIsControllerActive");
static_assert(sizeof(VNavigableButton_SetIsControllerActive) == 0x000001, "Wrong size on VNavigableButton_SetIsControllerActive");
static_assert(offsetof(VNavigableButton_SetIsControllerActive, Value) == 0x000000, "Member 'VNavigableButton_SetIsControllerActive::Value' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.SetIsFocused
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_SetIsFocused final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_SetIsFocused) == 0x000001, "Wrong alignment on VNavigableButton_SetIsFocused");
static_assert(sizeof(VNavigableButton_SetIsFocused) == 0x000001, "Wrong size on VNavigableButton_SetIsFocused");
static_assert(offsetof(VNavigableButton_SetIsFocused, Value) == 0x000000, "Member 'VNavigableButton_SetIsFocused::Value' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.SetShouldApplyFocusEffectOnHover
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_SetShouldApplyFocusEffectOnHover final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_SetShouldApplyFocusEffectOnHover) == 0x000001, "Wrong alignment on VNavigableButton_SetShouldApplyFocusEffectOnHover");
static_assert(sizeof(VNavigableButton_SetShouldApplyFocusEffectOnHover) == 0x000001, "Wrong size on VNavigableButton_SetShouldApplyFocusEffectOnHover");
static_assert(offsetof(VNavigableButton_SetShouldApplyFocusEffectOnHover, NewValue) == 0x000000, "Member 'VNavigableButton_SetShouldApplyFocusEffectOnHover::NewValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.GetButtonText
// 0x0018 (0x0018 - 0x0000)
struct VNavigableButton_GetButtonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_GetButtonText) == 0x000008, "Wrong alignment on VNavigableButton_GetButtonText");
static_assert(sizeof(VNavigableButton_GetButtonText) == 0x000018, "Wrong size on VNavigableButton_GetButtonText");
static_assert(offsetof(VNavigableButton_GetButtonText, ReturnValue) == 0x000000, "Member 'VNavigableButton_GetButtonText::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.GetHasControllerSpecificBehavior
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_GetHasControllerSpecificBehavior final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_GetHasControllerSpecificBehavior) == 0x000001, "Wrong alignment on VNavigableButton_GetHasControllerSpecificBehavior");
static_assert(sizeof(VNavigableButton_GetHasControllerSpecificBehavior) == 0x000001, "Wrong size on VNavigableButton_GetHasControllerSpecificBehavior");
static_assert(offsetof(VNavigableButton_GetHasControllerSpecificBehavior, ReturnValue) == 0x000000, "Member 'VNavigableButton_GetHasControllerSpecificBehavior::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.GetIsControllerActive
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_GetIsControllerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_GetIsControllerActive) == 0x000001, "Wrong alignment on VNavigableButton_GetIsControllerActive");
static_assert(sizeof(VNavigableButton_GetIsControllerActive) == 0x000001, "Wrong size on VNavigableButton_GetIsControllerActive");
static_assert(offsetof(VNavigableButton_GetIsControllerActive, ReturnValue) == 0x000000, "Member 'VNavigableButton_GetIsControllerActive::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.GetIsFocused
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_GetIsFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_GetIsFocused) == 0x000001, "Wrong alignment on VNavigableButton_GetIsFocused");
static_assert(sizeof(VNavigableButton_GetIsFocused) == 0x000001, "Wrong size on VNavigableButton_GetIsFocused");
static_assert(offsetof(VNavigableButton_GetIsFocused, ReturnValue) == 0x000000, "Member 'VNavigableButton_GetIsFocused::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableButton.GetShouldApplyFocusEffectOnHover
// 0x0001 (0x0001 - 0x0000)
struct VNavigableButton_GetShouldApplyFocusEffectOnHover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableButton_GetShouldApplyFocusEffectOnHover) == 0x000001, "Wrong alignment on VNavigableButton_GetShouldApplyFocusEffectOnHover");
static_assert(sizeof(VNavigableButton_GetShouldApplyFocusEffectOnHover) == 0x000001, "Wrong size on VNavigableButton_GetShouldApplyFocusEffectOnHover");
static_assert(offsetof(VNavigableButton_GetShouldApplyFocusEffectOnHover, ReturnValue) == 0x000000, "Member 'VNavigableButton_GetShouldApplyFocusEffectOnHover::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.AddChild
// 0x0010 (0x0010 - 0x0000)
struct VNavigableCarousel_AddChild final
{
public:
	class UWidget*                                ChildToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_AddChild) == 0x000008, "Wrong alignment on VNavigableCarousel_AddChild");
static_assert(sizeof(VNavigableCarousel_AddChild) == 0x000010, "Wrong size on VNavigableCarousel_AddChild");
static_assert(offsetof(VNavigableCarousel_AddChild, ChildToAdd) == 0x000000, "Member 'VNavigableCarousel_AddChild::ChildToAdd' has a wrong offset!");
static_assert(offsetof(VNavigableCarousel_AddChild, ReturnValue) == 0x000008, "Member 'VNavigableCarousel_AddChild::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.InsertChild
// 0x0018 (0x0018 - 0x0000)
struct VNavigableCarousel_InsertChild final
{
public:
	class UWidget*                                ChildToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_InsertChild) == 0x000008, "Wrong alignment on VNavigableCarousel_InsertChild");
static_assert(sizeof(VNavigableCarousel_InsertChild) == 0x000018, "Wrong size on VNavigableCarousel_InsertChild");
static_assert(offsetof(VNavigableCarousel_InsertChild, ChildToAdd) == 0x000000, "Member 'VNavigableCarousel_InsertChild::ChildToAdd' has a wrong offset!");
static_assert(offsetof(VNavigableCarousel_InsertChild, Index_0) == 0x000008, "Member 'VNavigableCarousel_InsertChild::Index_0' has a wrong offset!");
static_assert(offsetof(VNavigableCarousel_InsertChild, ReturnValue) == 0x000010, "Member 'VNavigableCarousel_InsertChild::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.NavigateToElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableCarousel_NavigateToElement final
{
public:
	class UWidget*                                ItemToNavigateTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_NavigateToElement) == 0x000008, "Wrong alignment on VNavigableCarousel_NavigateToElement");
static_assert(sizeof(VNavigableCarousel_NavigateToElement) == 0x000008, "Wrong size on VNavigableCarousel_NavigateToElement");
static_assert(offsetof(VNavigableCarousel_NavigateToElement, ItemToNavigateTo) == 0x000000, "Member 'VNavigableCarousel_NavigateToElement::ItemToNavigateTo' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.NavigateToIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableCarousel_NavigateToIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableCarousel_NavigateToIndex");
static_assert(sizeof(VNavigableCarousel_NavigateToIndex) == 0x000004, "Wrong size on VNavigableCarousel_NavigateToIndex");
static_assert(offsetof(VNavigableCarousel_NavigateToIndex, NewIndex) == 0x000000, "Member 'VNavigableCarousel_NavigateToIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.DoesContaintItem
// 0x0010 (0x0010 - 0x0000)
struct VNavigableCarousel_DoesContaintItem final
{
public:
	class UWidget*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VNavigableCarousel_DoesContaintItem) == 0x000008, "Wrong alignment on VNavigableCarousel_DoesContaintItem");
static_assert(sizeof(VNavigableCarousel_DoesContaintItem) == 0x000010, "Wrong size on VNavigableCarousel_DoesContaintItem");
static_assert(offsetof(VNavigableCarousel_DoesContaintItem, Item) == 0x000000, "Member 'VNavigableCarousel_DoesContaintItem::Item' has a wrong offset!");
static_assert(offsetof(VNavigableCarousel_DoesContaintItem, ReturnValue) == 0x000008, "Member 'VNavigableCarousel_DoesContaintItem::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetCarousel
// 0x0008 (0x0008 - 0x0000)
struct VNavigableCarousel_GetCarousel final
{
public:
	class UCommonWidgetCarousel*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetCarousel) == 0x000008, "Wrong alignment on VNavigableCarousel_GetCarousel");
static_assert(sizeof(VNavigableCarousel_GetCarousel) == 0x000008, "Wrong size on VNavigableCarousel_GetCarousel");
static_assert(offsetof(VNavigableCarousel_GetCarousel, ReturnValue) == 0x000000, "Member 'VNavigableCarousel_GetCarousel::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableCarousel_GetCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetCurrentIndex) == 0x000004, "Wrong alignment on VNavigableCarousel_GetCurrentIndex");
static_assert(sizeof(VNavigableCarousel_GetCurrentIndex) == 0x000004, "Wrong size on VNavigableCarousel_GetCurrentIndex");
static_assert(offsetof(VNavigableCarousel_GetCurrentIndex, ReturnValue) == 0x000000, "Member 'VNavigableCarousel_GetCurrentIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetCurrentItem
// 0x0008 (0x0008 - 0x0000)
struct VNavigableCarousel_GetCurrentItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetCurrentItem) == 0x000008, "Wrong alignment on VNavigableCarousel_GetCurrentItem");
static_assert(sizeof(VNavigableCarousel_GetCurrentItem) == 0x000008, "Wrong size on VNavigableCarousel_GetCurrentItem");
static_assert(offsetof(VNavigableCarousel_GetCurrentItem, ReturnValue) == 0x000000, "Member 'VNavigableCarousel_GetCurrentItem::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetFirstIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableCarousel_GetFirstIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetFirstIndex) == 0x000004, "Wrong alignment on VNavigableCarousel_GetFirstIndex");
static_assert(sizeof(VNavigableCarousel_GetFirstIndex) == 0x000004, "Wrong size on VNavigableCarousel_GetFirstIndex");
static_assert(offsetof(VNavigableCarousel_GetFirstIndex, ReturnValue) == 0x000000, "Member 'VNavigableCarousel_GetFirstIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetItemAtIndex
// 0x0010 (0x0010 - 0x0000)
struct VNavigableCarousel_GetItemAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetItemAtIndex) == 0x000008, "Wrong alignment on VNavigableCarousel_GetItemAtIndex");
static_assert(sizeof(VNavigableCarousel_GetItemAtIndex) == 0x000010, "Wrong size on VNavigableCarousel_GetItemAtIndex");
static_assert(offsetof(VNavigableCarousel_GetItemAtIndex, Index_0) == 0x000000, "Member 'VNavigableCarousel_GetItemAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(VNavigableCarousel_GetItemAtIndex, ReturnValue) == 0x000008, "Member 'VNavigableCarousel_GetItemAtIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetItemIndex
// 0x0010 (0x0010 - 0x0000)
struct VNavigableCarousel_GetItemIndex final
{
public:
	class UWidget*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VNavigableCarousel_GetItemIndex) == 0x000008, "Wrong alignment on VNavigableCarousel_GetItemIndex");
static_assert(sizeof(VNavigableCarousel_GetItemIndex) == 0x000010, "Wrong size on VNavigableCarousel_GetItemIndex");
static_assert(offsetof(VNavigableCarousel_GetItemIndex, Item) == 0x000000, "Member 'VNavigableCarousel_GetItemIndex::Item' has a wrong offset!");
static_assert(offsetof(VNavigableCarousel_GetItemIndex, ReturnValue) == 0x000008, "Member 'VNavigableCarousel_GetItemIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetLastIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableCarousel_GetLastIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetLastIndex) == 0x000004, "Wrong alignment on VNavigableCarousel_GetLastIndex");
static_assert(sizeof(VNavigableCarousel_GetLastIndex) == 0x000004, "Wrong size on VNavigableCarousel_GetLastIndex");
static_assert(offsetof(VNavigableCarousel_GetLastIndex, ReturnValue) == 0x000000, "Member 'VNavigableCarousel_GetLastIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableCarousel.GetSize
// 0x0004 (0x0004 - 0x0000)
struct VNavigableCarousel_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableCarousel_GetSize) == 0x000004, "Wrong alignment on VNavigableCarousel_GetSize");
static_assert(sizeof(VNavigableCarousel_GetSize) == 0x000004, "Wrong size on VNavigableCarousel_GetSize");
static_assert(offsetof(VNavigableCarousel_GetSize, ReturnValue) == 0x000000, "Member 'VNavigableCarousel_GetSize::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableEditableText.HandleOnValueChanged
// 0x0018 (0x0018 - 0x0000)
struct VNavigableEditableText_HandleOnValueChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableEditableText_HandleOnValueChanged) == 0x000008, "Wrong alignment on VNavigableEditableText_HandleOnValueChanged");
static_assert(sizeof(VNavigableEditableText_HandleOnValueChanged) == 0x000018, "Wrong size on VNavigableEditableText_HandleOnValueChanged");
static_assert(offsetof(VNavigableEditableText_HandleOnValueChanged, Text) == 0x000000, "Member 'VNavigableEditableText_HandleOnValueChanged::Text' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableEditableText.HandleOnValueCommitted
// 0x0020 (0x0020 - 0x0000)
struct VNavigableEditableText_HandleOnValueCommitted final
{
public:
	class FText                                   CommittedValue;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VNavigableEditableText_HandleOnValueCommitted) == 0x000008, "Wrong alignment on VNavigableEditableText_HandleOnValueCommitted");
static_assert(sizeof(VNavigableEditableText_HandleOnValueCommitted) == 0x000020, "Wrong size on VNavigableEditableText_HandleOnValueCommitted");
static_assert(offsetof(VNavigableEditableText_HandleOnValueCommitted, CommittedValue) == 0x000000, "Member 'VNavigableEditableText_HandleOnValueCommitted::CommittedValue' has a wrong offset!");
static_assert(offsetof(VNavigableEditableText_HandleOnValueCommitted, CommitMethod) == 0x000018, "Member 'VNavigableEditableText_HandleOnValueCommitted::CommitMethod' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableEditableText.GetEditableText
// 0x0008 (0x0008 - 0x0000)
struct VNavigableEditableText_GetEditableText final
{
public:
	class UEditableText*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableEditableText_GetEditableText) == 0x000008, "Wrong alignment on VNavigableEditableText_GetEditableText");
static_assert(sizeof(VNavigableEditableText_GetEditableText) == 0x000008, "Wrong size on VNavigableEditableText_GetEditableText");
static_assert(offsetof(VNavigableEditableText_GetEditableText, ReturnValue) == 0x000000, "Member 'VNavigableEditableText_GetEditableText::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableEditableText.GetIsEditing
// 0x0001 (0x0001 - 0x0000)
struct VNavigableEditableText_GetIsEditing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableEditableText_GetIsEditing) == 0x000001, "Wrong alignment on VNavigableEditableText_GetIsEditing");
static_assert(sizeof(VNavigableEditableText_GetIsEditing) == 0x000001, "Wrong size on VNavigableEditableText_GetIsEditing");
static_assert(offsetof(VNavigableEditableText_GetIsEditing, ReturnValue) == 0x000000, "Member 'VNavigableEditableText_GetIsEditing::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.AddChild
// 0x0010 (0x0010 - 0x0000)
struct VNavigableHorizontalBox_AddChild final
{
public:
	class UCommonUserWidget*                      ChildToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_AddChild) == 0x000008, "Wrong alignment on VNavigableHorizontalBox_AddChild");
static_assert(sizeof(VNavigableHorizontalBox_AddChild) == 0x000010, "Wrong size on VNavigableHorizontalBox_AddChild");
static_assert(offsetof(VNavigableHorizontalBox_AddChild, ChildToAdd) == 0x000000, "Member 'VNavigableHorizontalBox_AddChild::ChildToAdd' has a wrong offset!");
static_assert(offsetof(VNavigableHorizontalBox_AddChild, ReturnValue) == 0x000008, "Member 'VNavigableHorizontalBox_AddChild::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.GetHorizontalBox
// 0x0008 (0x0008 - 0x0000)
struct VNavigableHorizontalBox_GetHorizontalBox final
{
public:
	class UHorizontalBox*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_GetHorizontalBox) == 0x000008, "Wrong alignment on VNavigableHorizontalBox_GetHorizontalBox");
static_assert(sizeof(VNavigableHorizontalBox_GetHorizontalBox) == 0x000008, "Wrong size on VNavigableHorizontalBox_GetHorizontalBox");
static_assert(offsetof(VNavigableHorizontalBox_GetHorizontalBox, ReturnValue) == 0x000000, "Member 'VNavigableHorizontalBox_GetHorizontalBox::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.NavigateToElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableHorizontalBox_NavigateToElement final
{
public:
	class UCommonUserWidget*                      ItemToNavigateTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_NavigateToElement) == 0x000008, "Wrong alignment on VNavigableHorizontalBox_NavigateToElement");
static_assert(sizeof(VNavigableHorizontalBox_NavigateToElement) == 0x000008, "Wrong size on VNavigableHorizontalBox_NavigateToElement");
static_assert(offsetof(VNavigableHorizontalBox_NavigateToElement, ItemToNavigateTo) == 0x000000, "Member 'VNavigableHorizontalBox_NavigateToElement::ItemToNavigateTo' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.NavigateToIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableHorizontalBox_NavigateToIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableHorizontalBox_NavigateToIndex");
static_assert(sizeof(VNavigableHorizontalBox_NavigateToIndex) == 0x000004, "Wrong size on VNavigableHorizontalBox_NavigateToIndex");
static_assert(offsetof(VNavigableHorizontalBox_NavigateToIndex, NewIndex) == 0x000000, "Member 'VNavigableHorizontalBox_NavigateToIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.OnChildHovered
// 0x0010 (0x0010 - 0x0000)
struct VNavigableHorizontalBox_OnChildHovered final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> HoveredWidget;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_OnChildHovered) == 0x000008, "Wrong alignment on VNavigableHorizontalBox_OnChildHovered");
static_assert(sizeof(VNavigableHorizontalBox_OnChildHovered) == 0x000010, "Wrong size on VNavigableHorizontalBox_OnChildHovered");
static_assert(offsetof(VNavigableHorizontalBox_OnChildHovered, HoveredWidget) == 0x000000, "Member 'VNavigableHorizontalBox_OnChildHovered::HoveredWidget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.GetFocusElementIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableHorizontalBox_GetFocusElementIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_GetFocusElementIndex) == 0x000004, "Wrong alignment on VNavigableHorizontalBox_GetFocusElementIndex");
static_assert(sizeof(VNavigableHorizontalBox_GetFocusElementIndex) == 0x000004, "Wrong size on VNavigableHorizontalBox_GetFocusElementIndex");
static_assert(offsetof(VNavigableHorizontalBox_GetFocusElementIndex, ReturnValue) == 0x000000, "Member 'VNavigableHorizontalBox_GetFocusElementIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox.GetSize
// 0x0004 (0x0004 - 0x0000)
struct VNavigableHorizontalBox_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableHorizontalBox_GetSize) == 0x000004, "Wrong alignment on VNavigableHorizontalBox_GetSize");
static_assert(sizeof(VNavigableHorizontalBox_GetSize) == 0x000004, "Wrong size on VNavigableHorizontalBox_GetSize");
static_assert(offsetof(VNavigableHorizontalBox_GetSize, ReturnValue) == 0x000000, "Member 'VNavigableHorizontalBox_GetSize::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.BPOnListenStateChanged
// 0x0001 (0x0001 - 0x0000)
struct VNavigableInputKeySelector_BPOnListenStateChanged final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_BPOnListenStateChanged) == 0x000001, "Wrong alignment on VNavigableInputKeySelector_BPOnListenStateChanged");
static_assert(sizeof(VNavigableInputKeySelector_BPOnListenStateChanged) == 0x000001, "Wrong size on VNavigableInputKeySelector_BPOnListenStateChanged");
static_assert(offsetof(VNavigableInputKeySelector_BPOnListenStateChanged, NewState) == 0x000000, "Member 'VNavigableInputKeySelector_BPOnListenStateChanged::NewState' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct VNavigableInputKeySelector_OnInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_OnInputMethodChanged) == 0x000001, "Wrong alignment on VNavigableInputKeySelector_OnInputMethodChanged");
static_assert(sizeof(VNavigableInputKeySelector_OnInputMethodChanged) == 0x000001, "Wrong size on VNavigableInputKeySelector_OnInputMethodChanged");
static_assert(offsetof(VNavigableInputKeySelector_OnInputMethodChanged, NewInputType) == 0x000000, "Member 'VNavigableInputKeySelector_OnInputMethodChanged::NewInputType' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.OnKeySelected
// 0x0020 (0x0020 - 0x0000)
struct VNavigableInputKeySelector_OnKeySelected final
{
public:
	struct FInputChord                            NewInputChord;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_OnKeySelected) == 0x000008, "Wrong alignment on VNavigableInputKeySelector_OnKeySelected");
static_assert(sizeof(VNavigableInputKeySelector_OnKeySelected) == 0x000020, "Wrong size on VNavigableInputKeySelector_OnKeySelected");
static_assert(offsetof(VNavigableInputKeySelector_OnKeySelected, NewInputChord) == 0x000000, "Member 'VNavigableInputKeySelector_OnKeySelected::NewInputChord' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.SetCurrentKey
// 0x0020 (0x0020 - 0x0000)
struct VNavigableInputKeySelector_SetCurrentKey final
{
public:
	struct FInputChord                            Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_SetCurrentKey) == 0x000008, "Wrong alignment on VNavigableInputKeySelector_SetCurrentKey");
static_assert(sizeof(VNavigableInputKeySelector_SetCurrentKey) == 0x000020, "Wrong size on VNavigableInputKeySelector_SetCurrentKey");
static_assert(offsetof(VNavigableInputKeySelector_SetCurrentKey, Value) == 0x000000, "Member 'VNavigableInputKeySelector_SetCurrentKey::Value' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.SetIsListening
// 0x0001 (0x0001 - 0x0000)
struct VNavigableInputKeySelector_SetIsListening final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_SetIsListening) == 0x000001, "Wrong alignment on VNavigableInputKeySelector_SetIsListening");
static_assert(sizeof(VNavigableInputKeySelector_SetIsListening) == 0x000001, "Wrong size on VNavigableInputKeySelector_SetIsListening");
static_assert(offsetof(VNavigableInputKeySelector_SetIsListening, NewState) == 0x000000, "Member 'VNavigableInputKeySelector_SetIsListening::NewState' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.UpdateSelectedKey
// 0x0020 (0x0020 - 0x0000)
struct VNavigableInputKeySelector_UpdateSelectedKey final
{
public:
	struct FInputChord                            InSelectedKey;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_UpdateSelectedKey) == 0x000008, "Wrong alignment on VNavigableInputKeySelector_UpdateSelectedKey");
static_assert(sizeof(VNavigableInputKeySelector_UpdateSelectedKey) == 0x000020, "Wrong size on VNavigableInputKeySelector_UpdateSelectedKey");
static_assert(offsetof(VNavigableInputKeySelector_UpdateSelectedKey, InSelectedKey) == 0x000000, "Member 'VNavigableInputKeySelector_UpdateSelectedKey::InSelectedKey' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.GetCurrentKey
// 0x0020 (0x0020 - 0x0000)
struct VNavigableInputKeySelector_GetCurrentKey final
{
public:
	struct FInputChord                            ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_GetCurrentKey) == 0x000008, "Wrong alignment on VNavigableInputKeySelector_GetCurrentKey");
static_assert(sizeof(VNavigableInputKeySelector_GetCurrentKey) == 0x000020, "Wrong size on VNavigableInputKeySelector_GetCurrentKey");
static_assert(offsetof(VNavigableInputKeySelector_GetCurrentKey, ReturnValue) == 0x000000, "Member 'VNavigableInputKeySelector_GetCurrentKey::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.GetIsListening
// 0x0001 (0x0001 - 0x0000)
struct VNavigableInputKeySelector_GetIsListening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_GetIsListening) == 0x000001, "Wrong alignment on VNavigableInputKeySelector_GetIsListening");
static_assert(sizeof(VNavigableInputKeySelector_GetIsListening) == 0x000001, "Wrong size on VNavigableInputKeySelector_GetIsListening");
static_assert(offsetof(VNavigableInputKeySelector_GetIsListening, ReturnValue) == 0x000000, "Member 'VNavigableInputKeySelector_GetIsListening::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector.IsCorrectInputType
// 0x0001 (0x0001 - 0x0000)
struct VNavigableInputKeySelector_IsCorrectInputType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableInputKeySelector_IsCorrectInputType) == 0x000001, "Wrong alignment on VNavigableInputKeySelector_IsCorrectInputType");
static_assert(sizeof(VNavigableInputKeySelector_IsCorrectInputType) == 0x000001, "Wrong size on VNavigableInputKeySelector_IsCorrectInputType");
static_assert(offsetof(VNavigableInputKeySelector_IsCorrectInputType, ReturnValue) == 0x000000, "Member 'VNavigableInputKeySelector_IsCorrectInputType::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.AddItem
// 0x0008 (0x0008 - 0x0000)
struct VNavigableListView_AddItem final
{
public:
	class UObject*                                ItemToAdd;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_AddItem) == 0x000008, "Wrong alignment on VNavigableListView_AddItem");
static_assert(sizeof(VNavigableListView_AddItem) == 0x000008, "Wrong size on VNavigableListView_AddItem");
static_assert(offsetof(VNavigableListView_AddItem, ItemToAdd) == 0x000000, "Member 'VNavigableListView_AddItem::ItemToAdd' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.NavigateToElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableListView_NavigateToElement final
{
public:
	class UObject*                                ItemToNavigateTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_NavigateToElement) == 0x000008, "Wrong alignment on VNavigableListView_NavigateToElement");
static_assert(sizeof(VNavigableListView_NavigateToElement) == 0x000008, "Wrong size on VNavigableListView_NavigateToElement");
static_assert(offsetof(VNavigableListView_NavigateToElement, ItemToNavigateTo) == 0x000000, "Member 'VNavigableListView_NavigateToElement::ItemToNavigateTo' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.NavigateToIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableListView_NavigateToIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableListView_NavigateToIndex");
static_assert(sizeof(VNavigableListView_NavigateToIndex) == 0x000004, "Wrong size on VNavigableListView_NavigateToIndex");
static_assert(offsetof(VNavigableListView_NavigateToIndex, NewIndex) == 0x000000, "Member 'VNavigableListView_NavigateToIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.GetCurrentElementIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableListView_GetCurrentElementIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_GetCurrentElementIndex) == 0x000004, "Wrong alignment on VNavigableListView_GetCurrentElementIndex");
static_assert(sizeof(VNavigableListView_GetCurrentElementIndex) == 0x000004, "Wrong size on VNavigableListView_GetCurrentElementIndex");
static_assert(offsetof(VNavigableListView_GetCurrentElementIndex, ReturnValue) == 0x000000, "Member 'VNavigableListView_GetCurrentElementIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.GetFocusedElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableListView_GetFocusedElement final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_GetFocusedElement) == 0x000008, "Wrong alignment on VNavigableListView_GetFocusedElement");
static_assert(sizeof(VNavigableListView_GetFocusedElement) == 0x000008, "Wrong size on VNavigableListView_GetFocusedElement");
static_assert(offsetof(VNavigableListView_GetFocusedElement, ReturnValue) == 0x000000, "Member 'VNavigableListView_GetFocusedElement::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.GetItemAt
// 0x0010 (0x0010 - 0x0000)
struct VNavigableListView_GetItemAt final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_GetItemAt) == 0x000008, "Wrong alignment on VNavigableListView_GetItemAt");
static_assert(sizeof(VNavigableListView_GetItemAt) == 0x000010, "Wrong size on VNavigableListView_GetItemAt");
static_assert(offsetof(VNavigableListView_GetItemAt, ItemIndex) == 0x000000, "Member 'VNavigableListView_GetItemAt::ItemIndex' has a wrong offset!");
static_assert(offsetof(VNavigableListView_GetItemAt, ReturnValue) == 0x000008, "Member 'VNavigableListView_GetItemAt::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.GetListView
// 0x0008 (0x0008 - 0x0000)
struct VNavigableListView_GetListView final
{
public:
	class UCommonListView*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_GetListView) == 0x000008, "Wrong alignment on VNavigableListView_GetListView");
static_assert(sizeof(VNavigableListView_GetListView) == 0x000008, "Wrong size on VNavigableListView_GetListView");
static_assert(offsetof(VNavigableListView_GetListView, ReturnValue) == 0x000000, "Member 'VNavigableListView_GetListView::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.GetSize
// 0x0004 (0x0004 - 0x0000)
struct VNavigableListView_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_GetSize) == 0x000004, "Wrong alignment on VNavigableListView_GetSize");
static_assert(sizeof(VNavigableListView_GetSize) == 0x000004, "Wrong size on VNavigableListView_GetSize");
static_assert(offsetof(VNavigableListView_GetSize, ReturnValue) == 0x000000, "Member 'VNavigableListView_GetSize::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.GetWidgetFromItem
// 0x0010 (0x0010 - 0x0000)
struct VNavigableListView_GetWidgetFromItem final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_GetWidgetFromItem) == 0x000008, "Wrong alignment on VNavigableListView_GetWidgetFromItem");
static_assert(sizeof(VNavigableListView_GetWidgetFromItem) == 0x000010, "Wrong size on VNavigableListView_GetWidgetFromItem");
static_assert(offsetof(VNavigableListView_GetWidgetFromItem, Item) == 0x000000, "Member 'VNavigableListView_GetWidgetFromItem::Item' has a wrong offset!");
static_assert(offsetof(VNavigableListView_GetWidgetFromItem, ReturnValue) == 0x000008, "Member 'VNavigableListView_GetWidgetFromItem::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableListView.ListViewIsVertical
// 0x0001 (0x0001 - 0x0000)
struct VNavigableListView_ListViewIsVertical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableListView_ListViewIsVertical) == 0x000001, "Wrong alignment on VNavigableListView_ListViewIsVertical");
static_assert(sizeof(VNavigableListView_ListViewIsVertical) == 0x000001, "Wrong size on VNavigableListView_ListViewIsVertical");
static_assert(offsetof(VNavigableListView_ListViewIsVertical, ReturnValue) == 0x000000, "Member 'VNavigableListView_ListViewIsVertical::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.AddChild
// 0x0010 (0x0010 - 0x0000)
struct VNavigableScrollBox_AddChild final
{
public:
	class UCommonUserWidget*                      ChildToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_AddChild) == 0x000008, "Wrong alignment on VNavigableScrollBox_AddChild");
static_assert(sizeof(VNavigableScrollBox_AddChild) == 0x000010, "Wrong size on VNavigableScrollBox_AddChild");
static_assert(offsetof(VNavigableScrollBox_AddChild, ChildToAdd) == 0x000000, "Member 'VNavigableScrollBox_AddChild::ChildToAdd' has a wrong offset!");
static_assert(offsetof(VNavigableScrollBox_AddChild, ReturnValue) == 0x000008, "Member 'VNavigableScrollBox_AddChild::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.GetScrollBox
// 0x0008 (0x0008 - 0x0000)
struct VNavigableScrollBox_GetScrollBox final
{
public:
	class UScrollBox*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_GetScrollBox) == 0x000008, "Wrong alignment on VNavigableScrollBox_GetScrollBox");
static_assert(sizeof(VNavigableScrollBox_GetScrollBox) == 0x000008, "Wrong size on VNavigableScrollBox_GetScrollBox");
static_assert(offsetof(VNavigableScrollBox_GetScrollBox, ReturnValue) == 0x000000, "Member 'VNavigableScrollBox_GetScrollBox::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.NavigateToElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableScrollBox_NavigateToElement final
{
public:
	class UCommonUserWidget*                      ItemToNavigateTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_NavigateToElement) == 0x000008, "Wrong alignment on VNavigableScrollBox_NavigateToElement");
static_assert(sizeof(VNavigableScrollBox_NavigateToElement) == 0x000008, "Wrong size on VNavigableScrollBox_NavigateToElement");
static_assert(offsetof(VNavigableScrollBox_NavigateToElement, ItemToNavigateTo) == 0x000000, "Member 'VNavigableScrollBox_NavigateToElement::ItemToNavigateTo' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.NavigateToIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableScrollBox_NavigateToIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableScrollBox_NavigateToIndex");
static_assert(sizeof(VNavigableScrollBox_NavigateToIndex) == 0x000004, "Wrong size on VNavigableScrollBox_NavigateToIndex");
static_assert(offsetof(VNavigableScrollBox_NavigateToIndex, NewIndex) == 0x000000, "Member 'VNavigableScrollBox_NavigateToIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.OnChildHovered
// 0x0010 (0x0010 - 0x0000)
struct VNavigableScrollBox_OnChildHovered final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> HoveredWidget;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_OnChildHovered) == 0x000008, "Wrong alignment on VNavigableScrollBox_OnChildHovered");
static_assert(sizeof(VNavigableScrollBox_OnChildHovered) == 0x000010, "Wrong size on VNavigableScrollBox_OnChildHovered");
static_assert(offsetof(VNavigableScrollBox_OnChildHovered, HoveredWidget) == 0x000000, "Member 'VNavigableScrollBox_OnChildHovered::HoveredWidget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.OnChildHoveredBP
// 0x0010 (0x0010 - 0x0000)
struct VNavigableScrollBox_OnChildHoveredBP final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> HoveredWidget;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_OnChildHoveredBP) == 0x000008, "Wrong alignment on VNavigableScrollBox_OnChildHoveredBP");
static_assert(sizeof(VNavigableScrollBox_OnChildHoveredBP) == 0x000010, "Wrong size on VNavigableScrollBox_OnChildHoveredBP");
static_assert(offsetof(VNavigableScrollBox_OnChildHoveredBP, HoveredWidget) == 0x000000, "Member 'VNavigableScrollBox_OnChildHoveredBP::HoveredWidget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.SetFocusedElementIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableScrollBox_SetFocusedElementIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_SetFocusedElementIndex) == 0x000004, "Wrong alignment on VNavigableScrollBox_SetFocusedElementIndex");
static_assert(sizeof(VNavigableScrollBox_SetFocusedElementIndex) == 0x000004, "Wrong size on VNavigableScrollBox_SetFocusedElementIndex");
static_assert(offsetof(VNavigableScrollBox_SetFocusedElementIndex, NewIndex) == 0x000000, "Member 'VNavigableScrollBox_SetFocusedElementIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.GetFocusedElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableScrollBox_GetFocusedElement final
{
public:
	class UCommonUserWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_GetFocusedElement) == 0x000008, "Wrong alignment on VNavigableScrollBox_GetFocusedElement");
static_assert(sizeof(VNavigableScrollBox_GetFocusedElement) == 0x000008, "Wrong size on VNavigableScrollBox_GetFocusedElement");
static_assert(offsetof(VNavigableScrollBox_GetFocusedElement, ReturnValue) == 0x000000, "Member 'VNavigableScrollBox_GetFocusedElement::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.GetFocusElementIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableScrollBox_GetFocusElementIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_GetFocusElementIndex) == 0x000004, "Wrong alignment on VNavigableScrollBox_GetFocusElementIndex");
static_assert(sizeof(VNavigableScrollBox_GetFocusElementIndex) == 0x000004, "Wrong size on VNavigableScrollBox_GetFocusElementIndex");
static_assert(offsetof(VNavigableScrollBox_GetFocusElementIndex, ReturnValue) == 0x000000, "Member 'VNavigableScrollBox_GetFocusElementIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableScrollBox.GetSize
// 0x0004 (0x0004 - 0x0000)
struct VNavigableScrollBox_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableScrollBox_GetSize) == 0x000004, "Wrong alignment on VNavigableScrollBox_GetSize");
static_assert(sizeof(VNavigableScrollBox_GetSize) == 0x000004, "Wrong size on VNavigableScrollBox_GetSize");
static_assert(offsetof(VNavigableScrollBox_GetSize, ReturnValue) == 0x000000, "Member 'VNavigableScrollBox_GetSize::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableSlider.GetSlider
// 0x0008 (0x0008 - 0x0000)
struct VNavigableSlider_GetSlider final
{
public:
	class UAnalogSlider*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableSlider_GetSlider) == 0x000008, "Wrong alignment on VNavigableSlider_GetSlider");
static_assert(sizeof(VNavigableSlider_GetSlider) == 0x000008, "Wrong size on VNavigableSlider_GetSlider");
static_assert(offsetof(VNavigableSlider_GetSlider, ReturnValue) == 0x000000, "Member 'VNavigableSlider_GetSlider::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableSlider.GetSliderValueAsPercentage
// 0x0008 (0x0008 - 0x0000)
struct VNavigableSlider_GetSliderValueAsPercentage final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableSlider_GetSliderValueAsPercentage) == 0x000004, "Wrong alignment on VNavigableSlider_GetSliderValueAsPercentage");
static_assert(sizeof(VNavigableSlider_GetSliderValueAsPercentage) == 0x000008, "Wrong size on VNavigableSlider_GetSliderValueAsPercentage");
static_assert(offsetof(VNavigableSlider_GetSliderValueAsPercentage, Value) == 0x000000, "Member 'VNavigableSlider_GetSliderValueAsPercentage::Value' has a wrong offset!");
static_assert(offsetof(VNavigableSlider_GetSliderValueAsPercentage, ReturnValue) == 0x000004, "Member 'VNavigableSlider_GetSliderValueAsPercentage::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.AddItem
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_AddItem final
{
public:
	class UObject*                                ItemToAdd;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_AddItem) == 0x000008, "Wrong alignment on VNavigableTileView_AddItem");
static_assert(sizeof(VNavigableTileView_AddItem) == 0x000008, "Wrong size on VNavigableTileView_AddItem");
static_assert(offsetof(VNavigableTileView_AddItem, ItemToAdd) == 0x000000, "Member 'VNavigableTileView_AddItem::ItemToAdd' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.BP_OnItemClicked
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_BP_OnItemClicked final
{
public:
	class UObject*                                ClickedItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_BP_OnItemClicked) == 0x000008, "Wrong alignment on VNavigableTileView_BP_OnItemClicked");
static_assert(sizeof(VNavigableTileView_BP_OnItemClicked) == 0x000008, "Wrong size on VNavigableTileView_BP_OnItemClicked");
static_assert(offsetof(VNavigableTileView_BP_OnItemClicked, ClickedItem) == 0x000000, "Member 'VNavigableTileView_BP_OnItemClicked::ClickedItem' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.BP_OnItemHovered
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_BP_OnItemHovered final
{
public:
	class UObject*                                NewHoveredItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_BP_OnItemHovered) == 0x000008, "Wrong alignment on VNavigableTileView_BP_OnItemHovered");
static_assert(sizeof(VNavigableTileView_BP_OnItemHovered) == 0x000008, "Wrong size on VNavigableTileView_BP_OnItemHovered");
static_assert(offsetof(VNavigableTileView_BP_OnItemHovered, NewHoveredItem) == 0x000000, "Member 'VNavigableTileView_BP_OnItemHovered::NewHoveredItem' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.NavigateToElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_NavigateToElement final
{
public:
	class UObject*                                ItemToNavigateTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_NavigateToElement) == 0x000008, "Wrong alignment on VNavigableTileView_NavigateToElement");
static_assert(sizeof(VNavigableTileView_NavigateToElement) == 0x000008, "Wrong size on VNavigableTileView_NavigateToElement");
static_assert(offsetof(VNavigableTileView_NavigateToElement, ItemToNavigateTo) == 0x000000, "Member 'VNavigableTileView_NavigateToElement::ItemToNavigateTo' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.NavigateToIndex
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_NavigateToIndex final
{
public:
	int32                                         NewLine;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewColumn;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableTileView_NavigateToIndex");
static_assert(sizeof(VNavigableTileView_NavigateToIndex) == 0x000008, "Wrong size on VNavigableTileView_NavigateToIndex");
static_assert(offsetof(VNavigableTileView_NavigateToIndex, NewLine) == 0x000000, "Member 'VNavigableTileView_NavigateToIndex::NewLine' has a wrong offset!");
static_assert(offsetof(VNavigableTileView_NavigateToIndex, NewColumn) == 0x000004, "Member 'VNavigableTileView_NavigateToIndex::NewColumn' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.NavigateToIndex1D
// 0x0004 (0x0004 - 0x0000)
struct VNavigableTileView_NavigateToIndex1D final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_NavigateToIndex1D) == 0x000004, "Wrong alignment on VNavigableTileView_NavigateToIndex1D");
static_assert(sizeof(VNavigableTileView_NavigateToIndex1D) == 0x000004, "Wrong size on VNavigableTileView_NavigateToIndex1D");
static_assert(offsetof(VNavigableTileView_NavigateToIndex1D, Index_0) == 0x000000, "Member 'VNavigableTileView_NavigateToIndex1D::Index_0' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.SetIndex
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_SetIndex final
{
public:
	int32                                         NewLine;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewColumn;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_SetIndex) == 0x000004, "Wrong alignment on VNavigableTileView_SetIndex");
static_assert(sizeof(VNavigableTileView_SetIndex) == 0x000008, "Wrong size on VNavigableTileView_SetIndex");
static_assert(offsetof(VNavigableTileView_SetIndex, NewLine) == 0x000000, "Member 'VNavigableTileView_SetIndex::NewLine' has a wrong offset!");
static_assert(offsetof(VNavigableTileView_SetIndex, NewColumn) == 0x000004, "Member 'VNavigableTileView_SetIndex::NewColumn' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetFocusedItemIndex
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_GetFocusedItemIndex final
{
public:
	struct FTileViewIndex                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetFocusedItemIndex) == 0x000004, "Wrong alignment on VNavigableTileView_GetFocusedItemIndex");
static_assert(sizeof(VNavigableTileView_GetFocusedItemIndex) == 0x000008, "Wrong size on VNavigableTileView_GetFocusedItemIndex");
static_assert(offsetof(VNavigableTileView_GetFocusedItemIndex, ReturnValue) == 0x000000, "Member 'VNavigableTileView_GetFocusedItemIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetIndexOfItem
// 0x0010 (0x0010 - 0x0000)
struct VNavigableTileView_GetIndexOfItem final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VNavigableTileView_GetIndexOfItem) == 0x000008, "Wrong alignment on VNavigableTileView_GetIndexOfItem");
static_assert(sizeof(VNavigableTileView_GetIndexOfItem) == 0x000010, "Wrong size on VNavigableTileView_GetIndexOfItem");
static_assert(offsetof(VNavigableTileView_GetIndexOfItem, Item) == 0x000000, "Member 'VNavigableTileView_GetIndexOfItem::Item' has a wrong offset!");
static_assert(offsetof(VNavigableTileView_GetIndexOfItem, ReturnValue) == 0x000008, "Member 'VNavigableTileView_GetIndexOfItem::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetItemAt
// 0x0010 (0x0010 - 0x0000)
struct VNavigableTileView_GetItemAt final
{
public:
	int32                                         Line;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetItemAt) == 0x000008, "Wrong alignment on VNavigableTileView_GetItemAt");
static_assert(sizeof(VNavigableTileView_GetItemAt) == 0x000010, "Wrong size on VNavigableTileView_GetItemAt");
static_assert(offsetof(VNavigableTileView_GetItemAt, Line) == 0x000000, "Member 'VNavigableTileView_GetItemAt::Line' has a wrong offset!");
static_assert(offsetof(VNavigableTileView_GetItemAt, Column) == 0x000004, "Member 'VNavigableTileView_GetItemAt::Column' has a wrong offset!");
static_assert(offsetof(VNavigableTileView_GetItemAt, ReturnValue) == 0x000008, "Member 'VNavigableTileView_GetItemAt::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetItemsPerLine
// 0x0004 (0x0004 - 0x0000)
struct VNavigableTileView_GetItemsPerLine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetItemsPerLine) == 0x000004, "Wrong alignment on VNavigableTileView_GetItemsPerLine");
static_assert(sizeof(VNavigableTileView_GetItemsPerLine) == 0x000004, "Wrong size on VNavigableTileView_GetItemsPerLine");
static_assert(offsetof(VNavigableTileView_GetItemsPerLine, ReturnValue) == 0x000000, "Member 'VNavigableTileView_GetItemsPerLine::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetLinesPerColumn
// 0x0004 (0x0004 - 0x0000)
struct VNavigableTileView_GetLinesPerColumn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetLinesPerColumn) == 0x000004, "Wrong alignment on VNavigableTileView_GetLinesPerColumn");
static_assert(sizeof(VNavigableTileView_GetLinesPerColumn) == 0x000004, "Wrong size on VNavigableTileView_GetLinesPerColumn");
static_assert(offsetof(VNavigableTileView_GetLinesPerColumn, ReturnValue) == 0x000000, "Member 'VNavigableTileView_GetLinesPerColumn::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetSize
// 0x0004 (0x0004 - 0x0000)
struct VNavigableTileView_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetSize) == 0x000004, "Wrong alignment on VNavigableTileView_GetSize");
static_assert(sizeof(VNavigableTileView_GetSize) == 0x000004, "Wrong size on VNavigableTileView_GetSize");
static_assert(offsetof(VNavigableTileView_GetSize, ReturnValue) == 0x000000, "Member 'VNavigableTileView_GetSize::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetTileView
// 0x0008 (0x0008 - 0x0000)
struct VNavigableTileView_GetTileView final
{
public:
	class UCommonTileView*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetTileView) == 0x000008, "Wrong alignment on VNavigableTileView_GetTileView");
static_assert(sizeof(VNavigableTileView_GetTileView) == 0x000008, "Wrong size on VNavigableTileView_GetTileView");
static_assert(offsetof(VNavigableTileView_GetTileView, ReturnValue) == 0x000000, "Member 'VNavigableTileView_GetTileView::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetTileViewItems
// 0x0010 (0x0010 - 0x0000)
struct VNavigableTileView_GetTileViewItems final
{
public:
	TArray<class UObject*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetTileViewItems) == 0x000008, "Wrong alignment on VNavigableTileView_GetTileViewItems");
static_assert(sizeof(VNavigableTileView_GetTileViewItems) == 0x000010, "Wrong size on VNavigableTileView_GetTileViewItems");
static_assert(offsetof(VNavigableTileView_GetTileViewItems, ReturnValue) == 0x000000, "Member 'VNavigableTileView_GetTileViewItems::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableTileView.GetWidgetFromItem
// 0x0010 (0x0010 - 0x0000)
struct VNavigableTileView_GetWidgetFromItem final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableTileView_GetWidgetFromItem) == 0x000008, "Wrong alignment on VNavigableTileView_GetWidgetFromItem");
static_assert(sizeof(VNavigableTileView_GetWidgetFromItem) == 0x000010, "Wrong size on VNavigableTileView_GetWidgetFromItem");
static_assert(offsetof(VNavigableTileView_GetWidgetFromItem, Item) == 0x000000, "Member 'VNavigableTileView_GetWidgetFromItem::Item' has a wrong offset!");
static_assert(offsetof(VNavigableTileView_GetWidgetFromItem, ReturnValue) == 0x000008, "Member 'VNavigableTileView_GetWidgetFromItem::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.AddChild
// 0x0010 (0x0010 - 0x0000)
struct VNavigableVerticalBox_AddChild final
{
public:
	class UCommonUserWidget*                      ChildToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_AddChild) == 0x000008, "Wrong alignment on VNavigableVerticalBox_AddChild");
static_assert(sizeof(VNavigableVerticalBox_AddChild) == 0x000010, "Wrong size on VNavigableVerticalBox_AddChild");
static_assert(offsetof(VNavigableVerticalBox_AddChild, ChildToAdd) == 0x000000, "Member 'VNavigableVerticalBox_AddChild::ChildToAdd' has a wrong offset!");
static_assert(offsetof(VNavigableVerticalBox_AddChild, ReturnValue) == 0x000008, "Member 'VNavigableVerticalBox_AddChild::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.GetVerticalBox
// 0x0008 (0x0008 - 0x0000)
struct VNavigableVerticalBox_GetVerticalBox final
{
public:
	class UVerticalBox*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_GetVerticalBox) == 0x000008, "Wrong alignment on VNavigableVerticalBox_GetVerticalBox");
static_assert(sizeof(VNavigableVerticalBox_GetVerticalBox) == 0x000008, "Wrong size on VNavigableVerticalBox_GetVerticalBox");
static_assert(offsetof(VNavigableVerticalBox_GetVerticalBox, ReturnValue) == 0x000000, "Member 'VNavigableVerticalBox_GetVerticalBox::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.NavigateToElement
// 0x0008 (0x0008 - 0x0000)
struct VNavigableVerticalBox_NavigateToElement final
{
public:
	class UCommonUserWidget*                      ItemToNavigateTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_NavigateToElement) == 0x000008, "Wrong alignment on VNavigableVerticalBox_NavigateToElement");
static_assert(sizeof(VNavigableVerticalBox_NavigateToElement) == 0x000008, "Wrong size on VNavigableVerticalBox_NavigateToElement");
static_assert(offsetof(VNavigableVerticalBox_NavigateToElement, ItemToNavigateTo) == 0x000000, "Member 'VNavigableVerticalBox_NavigateToElement::ItemToNavigateTo' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.NavigateToIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableVerticalBox_NavigateToIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableVerticalBox_NavigateToIndex");
static_assert(sizeof(VNavigableVerticalBox_NavigateToIndex) == 0x000004, "Wrong size on VNavigableVerticalBox_NavigateToIndex");
static_assert(offsetof(VNavigableVerticalBox_NavigateToIndex, NewIndex) == 0x000000, "Member 'VNavigableVerticalBox_NavigateToIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.OnChildHovered
// 0x0010 (0x0010 - 0x0000)
struct VNavigableVerticalBox_OnChildHovered final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> HoveredWidget;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_OnChildHovered) == 0x000008, "Wrong alignment on VNavigableVerticalBox_OnChildHovered");
static_assert(sizeof(VNavigableVerticalBox_OnChildHovered) == 0x000010, "Wrong size on VNavigableVerticalBox_OnChildHovered");
static_assert(offsetof(VNavigableVerticalBox_OnChildHovered, HoveredWidget) == 0x000000, "Member 'VNavigableVerticalBox_OnChildHovered::HoveredWidget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.GetFocusElementIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableVerticalBox_GetFocusElementIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_GetFocusElementIndex) == 0x000004, "Wrong alignment on VNavigableVerticalBox_GetFocusElementIndex");
static_assert(sizeof(VNavigableVerticalBox_GetFocusElementIndex) == 0x000004, "Wrong size on VNavigableVerticalBox_GetFocusElementIndex");
static_assert(offsetof(VNavigableVerticalBox_GetFocusElementIndex, ReturnValue) == 0x000000, "Member 'VNavigableVerticalBox_GetFocusElementIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableVerticalBox.GetSize
// 0x0004 (0x0004 - 0x0000)
struct VNavigableVerticalBox_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableVerticalBox_GetSize) == 0x000004, "Wrong alignment on VNavigableVerticalBox_GetSize");
static_assert(sizeof(VNavigableVerticalBox_GetSize) == 0x000004, "Wrong size on VNavigableVerticalBox_GetSize");
static_assert(offsetof(VNavigableVerticalBox_GetSize, ReturnValue) == 0x000000, "Member 'VNavigableVerticalBox_GetSize::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.AddChild
// 0x0010 (0x0010 - 0x0000)
struct VNavigableWidgetSwitcher_AddChild final
{
public:
	class UWidget*                                ChildToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_AddChild) == 0x000008, "Wrong alignment on VNavigableWidgetSwitcher_AddChild");
static_assert(sizeof(VNavigableWidgetSwitcher_AddChild) == 0x000010, "Wrong size on VNavigableWidgetSwitcher_AddChild");
static_assert(offsetof(VNavigableWidgetSwitcher_AddChild, ChildToAdd) == 0x000000, "Member 'VNavigableWidgetSwitcher_AddChild::ChildToAdd' has a wrong offset!");
static_assert(offsetof(VNavigableWidgetSwitcher_AddChild, ReturnValue) == 0x000008, "Member 'VNavigableWidgetSwitcher_AddChild::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.DisplayIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableWidgetSwitcher_DisplayIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_DisplayIndex) == 0x000004, "Wrong alignment on VNavigableWidgetSwitcher_DisplayIndex");
static_assert(sizeof(VNavigableWidgetSwitcher_DisplayIndex) == 0x000004, "Wrong size on VNavigableWidgetSwitcher_DisplayIndex");
static_assert(offsetof(VNavigableWidgetSwitcher_DisplayIndex, NewIndex) == 0x000000, "Member 'VNavigableWidgetSwitcher_DisplayIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.DisplayWidget
// 0x0008 (0x0008 - 0x0000)
struct VNavigableWidgetSwitcher_DisplayWidget final
{
public:
	class UWidget*                                NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_DisplayWidget) == 0x000008, "Wrong alignment on VNavigableWidgetSwitcher_DisplayWidget");
static_assert(sizeof(VNavigableWidgetSwitcher_DisplayWidget) == 0x000008, "Wrong size on VNavigableWidgetSwitcher_DisplayWidget");
static_assert(offsetof(VNavigableWidgetSwitcher_DisplayWidget, NewWidget) == 0x000000, "Member 'VNavigableWidgetSwitcher_DisplayWidget::NewWidget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.NavigateToIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableWidgetSwitcher_NavigateToIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_NavigateToIndex) == 0x000004, "Wrong alignment on VNavigableWidgetSwitcher_NavigateToIndex");
static_assert(sizeof(VNavigableWidgetSwitcher_NavigateToIndex) == 0x000004, "Wrong size on VNavigableWidgetSwitcher_NavigateToIndex");
static_assert(offsetof(VNavigableWidgetSwitcher_NavigateToIndex, NewIndex) == 0x000000, "Member 'VNavigableWidgetSwitcher_NavigateToIndex::NewIndex' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.NavigateToWidget
// 0x0008 (0x0008 - 0x0000)
struct VNavigableWidgetSwitcher_NavigateToWidget final
{
public:
	class UWidget*                                NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_NavigateToWidget) == 0x000008, "Wrong alignment on VNavigableWidgetSwitcher_NavigateToWidget");
static_assert(sizeof(VNavigableWidgetSwitcher_NavigateToWidget) == 0x000008, "Wrong size on VNavigableWidgetSwitcher_NavigateToWidget");
static_assert(offsetof(VNavigableWidgetSwitcher_NavigateToWidget, NewWidget) == 0x000000, "Member 'VNavigableWidgetSwitcher_NavigateToWidget::NewWidget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.GetCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct VNavigableWidgetSwitcher_GetCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_GetCurrentIndex) == 0x000004, "Wrong alignment on VNavigableWidgetSwitcher_GetCurrentIndex");
static_assert(sizeof(VNavigableWidgetSwitcher_GetCurrentIndex) == 0x000004, "Wrong size on VNavigableWidgetSwitcher_GetCurrentIndex");
static_assert(offsetof(VNavigableWidgetSwitcher_GetCurrentIndex, ReturnValue) == 0x000000, "Member 'VNavigableWidgetSwitcher_GetCurrentIndex::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.GetCurrentWidget
// 0x0008 (0x0008 - 0x0000)
struct VNavigableWidgetSwitcher_GetCurrentWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_GetCurrentWidget) == 0x000008, "Wrong alignment on VNavigableWidgetSwitcher_GetCurrentWidget");
static_assert(sizeof(VNavigableWidgetSwitcher_GetCurrentWidget) == 0x000008, "Wrong size on VNavigableWidgetSwitcher_GetCurrentWidget");
static_assert(offsetof(VNavigableWidgetSwitcher_GetCurrentWidget, ReturnValue) == 0x000000, "Member 'VNavigableWidgetSwitcher_GetCurrentWidget::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher.GetSwitcher
// 0x0008 (0x0008 - 0x0000)
struct VNavigableWidgetSwitcher_GetSwitcher final
{
public:
	class UWidgetSwitcher*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNavigableWidgetSwitcher_GetSwitcher) == 0x000008, "Wrong alignment on VNavigableWidgetSwitcher_GetSwitcher");
static_assert(sizeof(VNavigableWidgetSwitcher_GetSwitcher) == 0x000008, "Wrong size on VNavigableWidgetSwitcher_GetSwitcher");
static_assert(offsetof(VNavigableWidgetSwitcher_GetSwitcher, ReturnValue) == 0x000000, "Member 'VNavigableWidgetSwitcher_GetSwitcher::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationGlobalSubsystem.NavigateToWidget
// 0x0010 (0x0010 - 0x0000)
struct VUINavigationGlobalSubsystem_NavigateToWidget final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> Widget;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUINavigationGlobalSubsystem_NavigateToWidget) == 0x000008, "Wrong alignment on VUINavigationGlobalSubsystem_NavigateToWidget");
static_assert(sizeof(VUINavigationGlobalSubsystem_NavigateToWidget) == 0x000010, "Wrong size on VUINavigationGlobalSubsystem_NavigateToWidget");
static_assert(offsetof(VUINavigationGlobalSubsystem_NavigateToWidget, Widget) == 0x000000, "Member 'VUINavigationGlobalSubsystem_NavigateToWidget::Widget' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationGlobalSubsystem.GetGenericInputAction
// 0x0018 (0x0018 - 0x0000)
struct VUINavigationGlobalSubsystem_GetGenericInputAction final
{
public:
	EVGenericNavigationAction                     GenericInputActionType;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVGenericInputActionData               ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUINavigationGlobalSubsystem_GetGenericInputAction) == 0x000008, "Wrong alignment on VUINavigationGlobalSubsystem_GetGenericInputAction");
static_assert(sizeof(VUINavigationGlobalSubsystem_GetGenericInputAction) == 0x000018, "Wrong size on VUINavigationGlobalSubsystem_GetGenericInputAction");
static_assert(offsetof(VUINavigationGlobalSubsystem_GetGenericInputAction, GenericInputActionType) == 0x000000, "Member 'VUINavigationGlobalSubsystem_GetGenericInputAction::GenericInputActionType' has a wrong offset!");
static_assert(offsetof(VUINavigationGlobalSubsystem_GetGenericInputAction, ReturnValue) == 0x000008, "Member 'VUINavigationGlobalSubsystem_GetGenericInputAction::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationGlobalSubsystem.GetGenericNavigationInputMappingContext
// 0x0008 (0x0008 - 0x0000)
struct VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext final
{
public:
	class UInputMappingContext*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext) == 0x000008, "Wrong alignment on VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext");
static_assert(sizeof(VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext) == 0x000008, "Wrong size on VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext");
static_assert(offsetof(VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext, ReturnValue) == 0x000000, "Member 'VUINavigationGlobalSubsystem_GetGenericNavigationInputMappingContext::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationGlobalSubsystem.IsWidgetInTopMostFocusedStack
// 0x0018 (0x0018 - 0x0000)
struct VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> Widget;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack) == 0x000008, "Wrong alignment on VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack");
static_assert(sizeof(VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack) == 0x000018, "Wrong size on VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack");
static_assert(offsetof(VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack, Widget) == 0x000000, "Member 'VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack::Widget' has a wrong offset!");
static_assert(offsetof(VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack, ReturnValue) == 0x000010, "Member 'VUINavigationGlobalSubsystem_IsWidgetInTopMostFocusedStack::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationGlobalSubsystem.IsWidgetTopMostFocusedOne
// 0x0018 (0x0018 - 0x0000)
struct VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> Widget;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne) == 0x000008, "Wrong alignment on VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne");
static_assert(sizeof(VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne) == 0x000018, "Wrong size on VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne");
static_assert(offsetof(VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne, Widget) == 0x000000, "Member 'VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne::Widget' has a wrong offset!");
static_assert(offsetof(VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne, ReturnValue) == 0x000010, "Member 'VUINavigationGlobalSubsystem_IsWidgetTopMostFocusedOne::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationPlayerSubsystem.IsAltKeyDown
// 0x0001 (0x0001 - 0x0000)
struct VUINavigationPlayerSubsystem_IsAltKeyDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUINavigationPlayerSubsystem_IsAltKeyDown) == 0x000001, "Wrong alignment on VUINavigationPlayerSubsystem_IsAltKeyDown");
static_assert(sizeof(VUINavigationPlayerSubsystem_IsAltKeyDown) == 0x000001, "Wrong size on VUINavigationPlayerSubsystem_IsAltKeyDown");
static_assert(offsetof(VUINavigationPlayerSubsystem_IsAltKeyDown, ReturnValue) == 0x000000, "Member 'VUINavigationPlayerSubsystem_IsAltKeyDown::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationPlayerSubsystem.IsCtrlKeyDown
// 0x0001 (0x0001 - 0x0000)
struct VUINavigationPlayerSubsystem_IsCtrlKeyDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUINavigationPlayerSubsystem_IsCtrlKeyDown) == 0x000001, "Wrong alignment on VUINavigationPlayerSubsystem_IsCtrlKeyDown");
static_assert(sizeof(VUINavigationPlayerSubsystem_IsCtrlKeyDown) == 0x000001, "Wrong size on VUINavigationPlayerSubsystem_IsCtrlKeyDown");
static_assert(offsetof(VUINavigationPlayerSubsystem_IsCtrlKeyDown, ReturnValue) == 0x000000, "Member 'VUINavigationPlayerSubsystem_IsCtrlKeyDown::ReturnValue' has a wrong offset!");

// Function VCommonUIEnhancedInputNavigation.VUINavigationPlayerSubsystem.IsShiftKeyDown
// 0x0001 (0x0001 - 0x0000)
struct VUINavigationPlayerSubsystem_IsShiftKeyDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUINavigationPlayerSubsystem_IsShiftKeyDown) == 0x000001, "Wrong alignment on VUINavigationPlayerSubsystem_IsShiftKeyDown");
static_assert(sizeof(VUINavigationPlayerSubsystem_IsShiftKeyDown) == 0x000001, "Wrong size on VUINavigationPlayerSubsystem_IsShiftKeyDown");
static_assert(offsetof(VUINavigationPlayerSubsystem_IsShiftKeyDown, ReturnValue) == 0x000000, "Member 'VUINavigationPlayerSubsystem_IsShiftKeyDown::ReturnValue' has a wrong offset!");

}

