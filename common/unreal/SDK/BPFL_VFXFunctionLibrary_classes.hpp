#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_VFXFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ENiagara_FadingMode_structs.hpp"
#include "ENiagara_CharacterSockets_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_VFXFunctionLibrary.BPFL_VFXFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_VFXFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Activate_Actor_Component(class UActorComponent* Target, bool Reset, bool Condition, class UObject* __WorldContext);
	static void Activate_Niagara_System(class UNiagaraComponent* System, bool Condition, class UObject* __WorldContext);
	static void Activate_Niagara_System_Array(TArray<class UNiagaraComponent*>& System_Array, TArray<bool>& Condition, class UObject* __WorldContext);
	static void Deactivate_Actor_Component(class UActorComponent* Target, bool Condition, class UObject* __WorldContext);
	static void Debug_NiagaraBoxLocation(bool Enable, class UNiagaraComponent* Debug_System, const struct FVector& Parent_BoxLocation, const struct FVector& Parent_BoxOffset, class UObject* __WorldContext);
	static void Debug_NiagaraCylinderLocation(bool Enable, class UNiagaraComponent* Debug_System, double Parent_Cylinder_Radius, double Parent_Cylinder_Height, const struct FVector& Parent_Cylinder_Scale, const struct FVector& Parent_Cylinder_Offset, class UObject* __WorldContext);
	static void Debug_NiagaraSphereLocation(bool Enable, class UNiagaraComponent* Debug_System, double Parent_Sphere_Radius, const struct FVector& Parent_Sphere_Scale, const struct FVector& Parent_Sphere_Offset, class UObject* __WorldContext);
	static void Get_Actor_Component_Location_Data(class AActor* Target, class UClass* Component_Class, class UObject* __WorldContext, bool* Is_Player, struct FVector* Root_Location, struct FVector* MidPoint_Location, double* Height, double* Width, double* Depth);
	static void Get_Actor_Skeletal_Component_Location_Data(class AActor* Target, class UObject* __WorldContext, bool* Is_Player, struct FVector* Root_Location, struct FVector* MidPoint_Location, double* Height, double* Width, double* Depth);
	static void Get_Character_VFX_Socket_Location(class AActor* Target, ENiagara_CharacterSockets Socket_Selection, class UObject* __WorldContext, struct FVector* Location);
	static void Get_Player_VFX_Socket_Location(class AVOblivionPlayerCharacter* Player_Character, ENiagara_CharacterSockets Socket_Selection, bool Is_FPV, class UObject* __WorldContext, struct FVector* Location);
	static void Is_Inbetween(double Value, double Min, double Max, class UObject* __WorldContext, bool* NewParam);
	static void Is_Inbetween_or_Equal(double Value, double Min, double Max, class UObject* __WorldContext, bool* NewParam);
	static void Is_Player_Actor(class AActor* Target_Actor, class UObject* __WorldContext, bool* Is_Player, class AVOblivionPlayerCharacter** AsVOblivion_Player_Character);
	static void Point_Light_Fading(bool Enabled, class UPointLightComponent* Point_Light_Component, double Owner_Age, double Maximum_Intensity, double Fading_Duration, double Delay, bool Is_Fade_Out, double Owner_Death_Age, class UObject* __WorldContext, bool* NewParam);
	static void Post_Process_Fading(bool Enabled, class UPostProcessComponent* PostProcess_Component, double Owner_Age, double Maximum_Blend_Weight, double Fading_Duration, double Delay, bool Is_Fade_Out, double Owner_Death_Age, class UObject* __WorldContext, bool* Fading_Finished);
	static void Preset_Point_Light_Parameters(class UPointLightComponent* Point_Light_Component, bool Enable, double Attenuation_Radius, const struct FLinearColor& Light_Color, bool Cast_Shadow, double Indirect_Lighting_Intensity, double Volumetric_Scattering_Intensity, double Source_Radius, double Specular_Scale, class UObject* __WorldContext);
	static void Preset_PostProcess_Parameters(class UPostProcessComponent* PostProcess_Component, const struct FPostProcessSettings& Settings, double Priority, bool Enabled, class UObject* __WorldContext);
	static void Setup_Backup_System(class UNiagaraSystem* Target, class UNiagaraSystem* Backup, class UObject* __WorldContext, class UNiagaraSystem** Output);
	static void Time_of_Day_Fading(double Time_Of_Day, double Start, double End, double Fading_Duration, ENiagara_FadingMode Fading_Mode, class UCurveFloat* Custom_Curve, class UObject* __WorldContext, double* Alpha_Result);
	static void Update_Point_Light_Animation(bool Enabled, class UPointLightComponent* Point_Light_Component, double Component_Normalized_Age, double Maximum_Intensity, double Lifetime, double Delay, double Fade_In_Duration, double Fade_Out_Duration, class UObject* __WorldContext);
	static void Update_PostProcess_Animation(bool Enabled, class UPostProcessComponent* PostProcess_Component, double Component_Normalized_Age, double Maximum_Blend_Weight, double Lifetime, double Delay, double Fade_In_Duration, double Fade_Out_Duration, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_VFXFunctionLibrary_C">();
	}
	static class UBPFL_VFXFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_VFXFunctionLibrary_C>();
	}
};
static_assert(alignof(UBPFL_VFXFunctionLibrary_C) == 0x000008, "Wrong alignment on UBPFL_VFXFunctionLibrary_C");
static_assert(sizeof(UBPFL_VFXFunctionLibrary_C) == 0x000028, "Wrong size on UBPFL_VFXFunctionLibrary_C");

}

