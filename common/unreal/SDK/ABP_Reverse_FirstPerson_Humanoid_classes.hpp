#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Reverse_FirstPerson_Humanoid

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_Locomotion_structs.hpp"
#include "Struct_Stagger_structs.hpp"
#include "Struct_HumanoidLowerAndUpperBodySetup_structs.hpp"
#include "Struct_SpellCast_Single_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Altar_structs.hpp"
#include "Struct_Recoil_Multiple_structs.hpp"
#include "Struct_Sprinting_structs.hpp"
#include "Struct_EquipUnequip_StandSneakSwim_Single_structs.hpp"
#include "Struct_EnhancedLocomotionInAir_structs.hpp"
#include "TABP_ReverseCharacter_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Reverse_FirstPerson_Humanoid.ABP_Reverse_FirstPerson_Humanoid_C
// 0x0810 (0x4BF0 - 0x43E0)
class UABP_Reverse_FirstPerson_Humanoid_C final : public UTABP_ReverseCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ABP_Reverse_FirstPerson_Humanoid_C; // 0x43E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FStruct_HumanoidLowerAndUpperBodySetup LayerBlendSettings;                                // 0x43E8(0x002C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4414[0x4];                                     // 0x4414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShieldHandPoseSetup                   HandPoseSetup;                                     // 0x4418(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTorchAnimationData                    TorchAnim;                                         // 0x4430(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMap<struct FGameplayTag, struct FStruct_Locomotion> StandingMap;                                // 0x4470(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Sprinting> SprintingMap;                                // 0x44C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Locomotion> SneakingMap;                                // 0x4510(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Locomotion> SwimmingMap;                                // 0x4560(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FBlockShieldAnimationData> BlockingMap;                         // 0x45B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FStandSneakBowAttackAnimSet            Bow;                                               // 0x4600(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FStandSneakStaffAttackData             Staff;                                             // 0x4638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMeleeAttackComboAnimationData         HandToHand;                                        // 0x4648(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Dagger;                                            // 0x4688(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Shortsword;                                        // 0x46C8(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Longsword;                                         // 0x4708(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Axe;                                               // 0x4748(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Mace;                                              // 0x4788(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Claymore;                                          // 0x47C8(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Warhammer;                                         // 0x4808(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         BattleAxe;                                         // 0x4848(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Recoil_Multiple> RecoilMap;                             // 0x4888(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Stagger> StaggerSet;                                    // 0x48D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_SpellCast_Single> SpellMap;                             // 0x4928(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<struct FGameplayTag, struct FStruct_EquipUnequip_StandSneakSwim_Single> EquipUnequipMap;    // 0x4978(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHitReactionKeyframeData               HitReactSettings;                                  // 0x49C8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVHorseRiderLocomotionStanding         HorseRidingGroundData;                             // 0x49F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVHorseRiderLocomotionJump             HorseRidingInAirData;                              // 0x4A48(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMap<struct FGameplayTag, struct FHitReactionKeyframeData> HitReactMap;                          // 0x4A90(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVHorseRiderLocomotionSwim             HorseRidingSwimData;                               // 0x4AE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMap<struct FGameplayTag, struct FStruct_EnhancedLocomotionInAir> InAirMap;                      // 0x4AF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FDodgeAnimationData> DodgeMap;                                  // 0x4B48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FTurnInPlaceFP> TurningMap;                                     // 0x4B98(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BlueprintLinkedAnimationLayersInitialized();
	void ExecuteUbergraph_ABP_Reverse_FirstPerson_Humanoid(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Reverse_FirstPerson_Humanoid_C">();
	}
	static class UABP_Reverse_FirstPerson_Humanoid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Reverse_FirstPerson_Humanoid_C>();
	}
};
static_assert(alignof(UABP_Reverse_FirstPerson_Humanoid_C) == 0x000010, "Wrong alignment on UABP_Reverse_FirstPerson_Humanoid_C");
static_assert(sizeof(UABP_Reverse_FirstPerson_Humanoid_C) == 0x004BF0, "Wrong size on UABP_Reverse_FirstPerson_Humanoid_C");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, UberGraphFrame_ABP_Reverse_FirstPerson_Humanoid_C) == 0x0043E0, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::UberGraphFrame_ABP_Reverse_FirstPerson_Humanoid_C' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, LayerBlendSettings) == 0x0043E8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::LayerBlendSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HandPoseSetup) == 0x004418, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HandPoseSetup' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, TorchAnim) == 0x004430, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::TorchAnim' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, StandingMap) == 0x004470, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::StandingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, SprintingMap) == 0x0044C0, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::SprintingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, SneakingMap) == 0x004510, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::SneakingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, SwimmingMap) == 0x004560, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::SwimmingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, BlockingMap) == 0x0045B0, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::BlockingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Bow) == 0x004600, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Bow' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Staff) == 0x004638, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Staff' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HandToHand) == 0x004648, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HandToHand' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Dagger) == 0x004688, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Dagger' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Shortsword) == 0x0046C8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Shortsword' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Longsword) == 0x004708, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Longsword' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Axe) == 0x004748, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Axe' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Mace) == 0x004788, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Mace' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Claymore) == 0x0047C8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Claymore' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, Warhammer) == 0x004808, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::Warhammer' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, BattleAxe) == 0x004848, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::BattleAxe' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, RecoilMap) == 0x004888, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::RecoilMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, StaggerSet) == 0x0048D8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::StaggerSet' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, SpellMap) == 0x004928, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::SpellMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, EquipUnequipMap) == 0x004978, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::EquipUnequipMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HitReactSettings) == 0x0049C8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HitReactSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HorseRidingGroundData) == 0x0049F8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HorseRidingGroundData' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HorseRidingInAirData) == 0x004A48, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HorseRidingInAirData' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HitReactMap) == 0x004A90, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HitReactMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, HorseRidingSwimData) == 0x004AE0, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::HorseRidingSwimData' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, InAirMap) == 0x004AF8, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::InAirMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, DodgeMap) == 0x004B48, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::DodgeMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_FirstPerson_Humanoid_C, TurningMap) == 0x004B98, "Member 'UABP_Reverse_FirstPerson_Humanoid_C::TurningMap' has a wrong offset!");

}

