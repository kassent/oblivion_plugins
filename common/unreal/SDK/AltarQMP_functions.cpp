#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AltarQMP

#include "Basic.hpp"

#include "AltarQMP_classes.hpp"
#include "AltarQMP_parameters.hpp"


namespace SDK
{

// Function AltarQMP.AltarKeyInputReplayEditorLibrary.LoadAltarRecordData
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class FString&                    SegmentName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputRecordSave*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputRecordSave* UAltarKeyInputReplayEditorLibrary::LoadAltarRecordData(const class FString& SegmentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AltarKeyInputReplayEditorLibrary", "LoadAltarRecordData");

	Params::AltarKeyInputReplayEditorLibrary_LoadAltarRecordData Parms{};

	Parms.SegmentName = std::move(SegmentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AltarQMP.AltarSpecificQMPGameInstance.OnAsyncSaveComplete_Delegate
// (Final, Native, Private)
// Parameters:
// const class UVAltarSaveGame*            SaveGame                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarSpecificQMPGameInstance::OnAsyncSaveComplete_Delegate(const class UVAltarSaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarSpecificQMPGameInstance", "OnAsyncSaveComplete_Delegate");

	Params::AltarSpecificQMPGameInstance_OnAsyncSaveComplete_Delegate Parms{};

	Parms.SaveGame = SaveGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AltarQMP.AltarSpecificQMPGameInstance.OnSaveSlotLoaded_Delegate
// (Final, Native, Private)
// Parameters:
// class USaveGame*                        GenericSave                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarSpecificQMPGameInstance::OnSaveSlotLoaded_Delegate(class USaveGame* GenericSave, const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarSpecificQMPGameInstance", "OnSaveSlotLoaded_Delegate");

	Params::AltarSpecificQMPGameInstance_OnSaveSlotLoaded_Delegate Parms{};

	Parms.GenericSave = GenericSave;
	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AltarQMP.AltarSpecificQMPGameInstance.OnUIFocusChange
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              TopMostLayer                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonActivatableWidget*         TopMostWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarSpecificQMPGameInstance::OnUIFocusChange(const struct FGameplayTag& TopMostLayer, class UCommonActivatableWidget* TopMostWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarSpecificQMPGameInstance", "OnUIFocusChange");

	Params::AltarSpecificQMPGameInstance_OnUIFocusChange Parms{};

	Parms.TopMostLayer = std::move(TopMostLayer);
	Parms.TopMostWidget = TopMostWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

