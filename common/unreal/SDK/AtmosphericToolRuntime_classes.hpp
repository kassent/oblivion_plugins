#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AtmosphericToolRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"
#include "Engine_classes.hpp"
#include "AtmosphericToolRuntime_structs.hpp"


namespace SDK
{

// Class AtmosphericToolRuntime.ATMBiomeConstant
// 0x0058 (0x0080 - 0x0028)
class UATMBiomeConstant final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UATMBiomePreset*, float>           PresetWeights;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMBiomeConstant">();
	}
	static class UATMBiomeConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMBiomeConstant>();
	}
};
static_assert(alignof(UATMBiomeConstant) == 0x000008, "Wrong alignment on UATMBiomeConstant");
static_assert(sizeof(UATMBiomeConstant) == 0x000080, "Wrong size on UATMBiomeConstant");
static_assert(offsetof(UATMBiomeConstant, PresetWeights) == 0x000030, "Member 'UATMBiomeConstant::PresetWeights' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMPresetInstance
// 0x0020 (0x0048 - 0x0028)
class UATMPresetInstance : public UObject
{
public:
	class UATMPreset*                             PresetBase;                                        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UATMPresetInstanceUserData*             UserData;                                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedAlpha;                                       // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameTime                             CachedTime;                                        // 0x003C(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMPresetInstance">();
	}
	static class UATMPresetInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMPresetInstance>();
	}
};
static_assert(alignof(UATMPresetInstance) == 0x000008, "Wrong alignment on UATMPresetInstance");
static_assert(sizeof(UATMPresetInstance) == 0x000048, "Wrong size on UATMPresetInstance");
static_assert(offsetof(UATMPresetInstance, PresetBase) == 0x000028, "Member 'UATMPresetInstance::PresetBase' has a wrong offset!");
static_assert(offsetof(UATMPresetInstance, UserData) == 0x000030, "Member 'UATMPresetInstance::UserData' has a wrong offset!");
static_assert(offsetof(UATMPresetInstance, CachedAlpha) == 0x000038, "Member 'UATMPresetInstance::CachedAlpha' has a wrong offset!");
static_assert(offsetof(UATMPresetInstance, CachedTime) == 0x00003C, "Member 'UATMPresetInstance::CachedTime' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMBiomeInstance
// 0x0058 (0x00A0 - 0x0048)
class UATMBiomeInstance final : public UATMPresetInstance
{
public:
	class UATMBiomePreset*                        Preset;                                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class UObject*>                          Influencers;                                       // 0x0050(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMBiomeInstance">();
	}
	static class UATMBiomeInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMBiomeInstance>();
	}
};
static_assert(alignof(UATMBiomeInstance) == 0x000008, "Wrong alignment on UATMBiomeInstance");
static_assert(sizeof(UATMBiomeInstance) == 0x0000A0, "Wrong size on UATMBiomeInstance");
static_assert(offsetof(UATMBiomeInstance, Preset) == 0x000048, "Member 'UATMBiomeInstance::Preset' has a wrong offset!");
static_assert(offsetof(UATMBiomeInstance, Influencers) == 0x000050, "Member 'UATMBiomeInstance::Influencers' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMPreset
// 0x0030 (0x0060 - 0x0030)
class UATMPreset : public UDataAsset
{
public:
	class FString                                 Name_0;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldActivate;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneSequence*                    PresetSequence;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequence*                    PresetSequenceHalfBlend;                           // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class UATMPreset*> GetExistingPresets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMPreset">();
	}
	static class UATMPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMPreset>();
	}
};
static_assert(alignof(UATMPreset) == 0x000008, "Wrong alignment on UATMPreset");
static_assert(sizeof(UATMPreset) == 0x000060, "Wrong size on UATMPreset");
static_assert(offsetof(UATMPreset, Name_0) == 0x000030, "Member 'UATMPreset::Name_0' has a wrong offset!");
static_assert(offsetof(UATMPreset, ShouldActivate) == 0x000040, "Member 'UATMPreset::ShouldActivate' has a wrong offset!");
static_assert(offsetof(UATMPreset, PresetSequence) == 0x000048, "Member 'UATMPreset::PresetSequence' has a wrong offset!");
static_assert(offsetof(UATMPreset, PresetSequenceHalfBlend) == 0x000050, "Member 'UATMPreset::PresetSequenceHalfBlend' has a wrong offset!");
static_assert(offsetof(UATMPreset, Priority) == 0x000058, "Member 'UATMPreset::Priority' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMBiomePreset
// 0x0000 (0x0060 - 0x0060)
class UATMBiomePreset final : public UATMPreset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMBiomePreset">();
	}
	static class UATMBiomePreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMBiomePreset>();
	}
};
static_assert(alignof(UATMBiomePreset) == 0x000008, "Wrong alignment on UATMBiomePreset");
static_assert(sizeof(UATMBiomePreset) == 0x000060, "Wrong size on UATMBiomePreset");

// Class AtmosphericToolRuntime.ATMBiomeInfluencer
// 0x0000 (0x0000 - 0x0000)
class IATMBiomeInfluencer final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMBiomeInfluencer">();
	}
	static class IATMBiomeInfluencer* GetDefaultObj()
	{
		return GetDefaultObjImpl<IATMBiomeInfluencer>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IATMBiomeInfluencer) == 0x000001, "Wrong alignment on IATMBiomeInfluencer");
static_assert(sizeof(IATMBiomeInfluencer) == 0x000001, "Wrong size on IATMBiomeInfluencer");

// Class AtmosphericToolRuntime.ATMBiomeVolume
// 0x0020 (0x02F0 - 0x02D0)
class AATMBiomeVolume final : public AVolume
{
public:
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectDistance;                                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UATMBiomePreset*                        Preset;                                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedWeight;                                      // 0x02E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMBiomeVolume">();
	}
	static class AATMBiomeVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AATMBiomeVolume>();
	}
};
static_assert(alignof(AATMBiomeVolume) == 0x000008, "Wrong alignment on AATMBiomeVolume");
static_assert(sizeof(AATMBiomeVolume) == 0x0002F0, "Wrong size on AATMBiomeVolume");
static_assert(offsetof(AATMBiomeVolume, EffectDistance) == 0x0002D8, "Member 'AATMBiomeVolume::EffectDistance' has a wrong offset!");
static_assert(offsetof(AATMBiomeVolume, Preset) == 0x0002E0, "Member 'AATMBiomeVolume::Preset' has a wrong offset!");
static_assert(offsetof(AATMBiomeVolume, CachedWeight) == 0x0002E8, "Member 'AATMBiomeVolume::CachedWeight' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMEventInstance
// 0x0010 (0x0058 - 0x0048)
class UATMEventInstance final : public UATMPresetInstance
{
public:
	class UATMEventPreset*                        Preset;                                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMEventInstance">();
	}
	static class UATMEventInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMEventInstance>();
	}
};
static_assert(alignof(UATMEventInstance) == 0x000008, "Wrong alignment on UATMEventInstance");
static_assert(sizeof(UATMEventInstance) == 0x000058, "Wrong size on UATMEventInstance");
static_assert(offsetof(UATMEventInstance, Preset) == 0x000048, "Member 'UATMEventInstance::Preset' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMEventPreset
// 0x0008 (0x0068 - 0x0060)
class UATMEventPreset final : public UATMPreset
{
public:
	float                                         BlendTime;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMEventPreset">();
	}
	static class UATMEventPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMEventPreset>();
	}
};
static_assert(alignof(UATMEventPreset) == 0x000008, "Wrong alignment on UATMEventPreset");
static_assert(sizeof(UATMEventPreset) == 0x000068, "Wrong size on UATMEventPreset");
static_assert(offsetof(UATMEventPreset, BlendTime) == 0x000060, "Member 'UATMEventPreset::BlendTime' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMWrapAccessor
// 0x0008 (0x0030 - 0x0028)
class UATMWrapAccessor final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMWrapAccessor">();
	}
	static class UATMWrapAccessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMWrapAccessor>();
	}
};
static_assert(alignof(UATMWrapAccessor) == 0x000008, "Wrong alignment on UATMWrapAccessor");
static_assert(sizeof(UATMWrapAccessor) == 0x000030, "Wrong size on UATMWrapAccessor");

// Class AtmosphericToolRuntime.ATMWrapCurve
// 0x0008 (0x0030 - 0x0028)
class UATMWrapCurve final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMWrapCurve">();
	}
	static class UATMWrapCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMWrapCurve>();
	}
};
static_assert(alignof(UATMWrapCurve) == 0x000008, "Wrong alignment on UATMWrapCurve");
static_assert(sizeof(UATMWrapCurve) == 0x000030, "Wrong size on UATMWrapCurve");

// Class AtmosphericToolRuntime.ATMWrapDebugBlenderRow
// 0x0008 (0x0030 - 0x0028)
class UATMWrapDebugBlenderRow final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMWrapDebugBlenderRow">();
	}
	static class UATMWrapDebugBlenderRow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMWrapDebugBlenderRow>();
	}
};
static_assert(alignof(UATMWrapDebugBlenderRow) == 0x000008, "Wrong alignment on UATMWrapDebugBlenderRow");
static_assert(sizeof(UATMWrapDebugBlenderRow) == 0x000030, "Wrong size on UATMWrapDebugBlenderRow");

// Class AtmosphericToolRuntime.ATMWrapBlender
// 0x0008 (0x0030 - 0x0028)
class UATMWrapBlender final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMWrapBlender">();
	}
	static class UATMWrapBlender* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMWrapBlender>();
	}
};
static_assert(alignof(UATMWrapBlender) == 0x000008, "Wrong alignment on UATMWrapBlender");
static_assert(sizeof(UATMWrapBlender) == 0x000030, "Wrong size on UATMWrapBlender");

// Class AtmosphericToolRuntime.ATMProperty
// 0x0020 (0x0048 - 0x0028)
class UATMProperty final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UATMWrapCurve*                          Curve;                                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UATMWrapDebugBlenderRow*                DebugBlenderRow;                                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMProperty">();
	}
	static class UATMProperty* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMProperty>();
	}
};
static_assert(alignof(UATMProperty) == 0x000008, "Wrong alignment on UATMProperty");
static_assert(sizeof(UATMProperty) == 0x000048, "Wrong size on UATMProperty");
static_assert(offsetof(UATMProperty, Curve) == 0x000030, "Member 'UATMProperty::Curve' has a wrong offset!");
static_assert(offsetof(UATMProperty, DebugBlenderRow) == 0x000040, "Member 'UATMProperty::DebugBlenderRow' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMAccessorMaterialEntry
// 0x0058 (0x0080 - 0x0028)
class UATMAccessorMaterialEntry final : public UObject
{
public:
	TMap<class FName, class UATMWrapAccessor*>    AccessorMap;                                       // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	class UATMWrapAccessor*                       MaterialSwitcher;                                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMAccessorMaterialEntry">();
	}
	static class UATMAccessorMaterialEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMAccessorMaterialEntry>();
	}
};
static_assert(alignof(UATMAccessorMaterialEntry) == 0x000008, "Wrong alignment on UATMAccessorMaterialEntry");
static_assert(sizeof(UATMAccessorMaterialEntry) == 0x000080, "Wrong size on UATMAccessorMaterialEntry");
static_assert(offsetof(UATMAccessorMaterialEntry, AccessorMap) == 0x000028, "Member 'UATMAccessorMaterialEntry::AccessorMap' has a wrong offset!");
static_assert(offsetof(UATMAccessorMaterialEntry, MaterialSwitcher) == 0x000078, "Member 'UATMAccessorMaterialEntry::MaterialSwitcher' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMWrapperFactory
// 0x00C8 (0x00F0 - 0x0028)
class UATMWrapperFactory final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UATMWrapAccessor*>    AccessorsReflection;                               // 0x0030(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UATMWrapAccessor*                       AccessorTransform;                                 // 0x0080(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UATMAccessorMaterialEntry*>      AccessorsMaterial;                                 // 0x0088(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UATMWrapAccessor*>    AccessorsNiagara;                                  // 0x0098(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UATMWrapBlender*                        Blender;                                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMWrapperFactory">();
	}
	static class UATMWrapperFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMWrapperFactory>();
	}
};
static_assert(alignof(UATMWrapperFactory) == 0x000008, "Wrong alignment on UATMWrapperFactory");
static_assert(sizeof(UATMWrapperFactory) == 0x0000F0, "Wrong size on UATMWrapperFactory");
static_assert(offsetof(UATMWrapperFactory, AccessorsReflection) == 0x000030, "Member 'UATMWrapperFactory::AccessorsReflection' has a wrong offset!");
static_assert(offsetof(UATMWrapperFactory, AccessorTransform) == 0x000080, "Member 'UATMWrapperFactory::AccessorTransform' has a wrong offset!");
static_assert(offsetof(UATMWrapperFactory, AccessorsMaterial) == 0x000088, "Member 'UATMWrapperFactory::AccessorsMaterial' has a wrong offset!");
static_assert(offsetof(UATMWrapperFactory, AccessorsNiagara) == 0x000098, "Member 'UATMWrapperFactory::AccessorsNiagara' has a wrong offset!");
static_assert(offsetof(UATMWrapperFactory, Blender) == 0x0000E8, "Member 'UATMWrapperFactory::Blender' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMBlendingPolicy
// 0x0050 (0x0078 - 0x0028)
class UATMBlendingPolicy final : public UObject
{
public:
	TMap<class FName, float>                      ColorBlendingRGB;                                  // 0x0028(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMBlendingPolicy">();
	}
	static class UATMBlendingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMBlendingPolicy>();
	}
};
static_assert(alignof(UATMBlendingPolicy) == 0x000008, "Wrong alignment on UATMBlendingPolicy");
static_assert(sizeof(UATMBlendingPolicy) == 0x000078, "Wrong size on UATMBlendingPolicy");
static_assert(offsetof(UATMBlendingPolicy, ColorBlendingRGB) == 0x000028, "Member 'UATMBlendingPolicy::ColorBlendingRGB' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMPresetInstanceUserData
// 0x0000 (0x0028 - 0x0028)
class UATMPresetInstanceUserData : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMPresetInstanceUserData">();
	}
	static class UATMPresetInstanceUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMPresetInstanceUserData>();
	}
};
static_assert(alignof(UATMPresetInstanceUserData) == 0x000008, "Wrong alignment on UATMPresetInstanceUserData");
static_assert(sizeof(UATMPresetInstanceUserData) == 0x000028, "Wrong size on UATMPresetInstanceUserData");

// Class AtmosphericToolRuntime.ATMGameInstanceSubsystem
// 0x0008 (0x0038 - 0x0030)
class UATMGameInstanceSubsystem final : public UGameInstanceSubsystem
{
public:
	class UATMSubsystem*                          Impl;                                              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMGameInstanceSubsystem">();
	}
	static class UATMGameInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMGameInstanceSubsystem>();
	}
};
static_assert(alignof(UATMGameInstanceSubsystem) == 0x000008, "Wrong alignment on UATMGameInstanceSubsystem");
static_assert(sizeof(UATMGameInstanceSubsystem) == 0x000038, "Wrong size on UATMGameInstanceSubsystem");
static_assert(offsetof(UATMGameInstanceSubsystem, Impl) == 0x000030, "Member 'UATMGameInstanceSubsystem::Impl' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMSubsystem
// 0x0140 (0x0168 - 0x0028)
class UATMSubsystem final : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UATMPresetInstance*                     LastActiveGlobalInstance;                          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UATMBiomePreset*, class UATMBiomeInstance*> ActiveBiomes;                             // 0x0060(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class UATMEventPreset*, class UATMEventInstance*> ActiveEvents;                             // 0x00B0(0x0050)(NativeAccessSpecifierPrivate)
	class AATMTimeOfDayActor*                     ATMActor;                                          // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class UATMPreset*>          ExistingPresets;                                   // 0x0108(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UATMSubsystem* Get(class UObject* WorldContextObject);

	class UATMPresetInstance* AddActivePreset(const class FString& PresetName);
	class AATMTimeOfDayActor* GetATMActor();
	float GetDeltaTime();
	struct FVector GetReferencePosition();
	float GetTime();
	void SetDeltaTime(float NewDeltaTime, float NewTimeOfDay, EATMTimeUpdateSource NewUpdateSource);
	void SetReferencePosition(const struct FVector& position);
	void SetTime(float NewTime, EATMTimeUpdateSource NewUpdateSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMSubsystem">();
	}
	static class UATMSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMSubsystem>();
	}
};
static_assert(alignof(UATMSubsystem) == 0x000008, "Wrong alignment on UATMSubsystem");
static_assert(sizeof(UATMSubsystem) == 0x000168, "Wrong size on UATMSubsystem");
static_assert(offsetof(UATMSubsystem, LastActiveGlobalInstance) == 0x000058, "Member 'UATMSubsystem::LastActiveGlobalInstance' has a wrong offset!");
static_assert(offsetof(UATMSubsystem, ActiveBiomes) == 0x000060, "Member 'UATMSubsystem::ActiveBiomes' has a wrong offset!");
static_assert(offsetof(UATMSubsystem, ActiveEvents) == 0x0000B0, "Member 'UATMSubsystem::ActiveEvents' has a wrong offset!");
static_assert(offsetof(UATMSubsystem, ATMActor) == 0x000100, "Member 'UATMSubsystem::ATMActor' has a wrong offset!");
static_assert(offsetof(UATMSubsystem, ExistingPresets) == 0x000108, "Member 'UATMSubsystem::ExistingPresets' has a wrong offset!");

// Class AtmosphericToolRuntime.WrapTrackInstancePropertyBindings
// 0x0008 (0x0030 - 0x0028)
class UWrapTrackInstancePropertyBindings final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WrapTrackInstancePropertyBindings">();
	}
	static class UWrapTrackInstancePropertyBindings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWrapTrackInstancePropertyBindings>();
	}
};
static_assert(alignof(UWrapTrackInstancePropertyBindings) == 0x000008, "Wrong alignment on UWrapTrackInstancePropertyBindings");
static_assert(sizeof(UWrapTrackInstancePropertyBindings) == 0x000030, "Wrong size on UWrapTrackInstancePropertyBindings");

// Class AtmosphericToolRuntime.ATMTimeOfDayActor
// 0x0218 (0x04B0 - 0x0298)
class AATMTimeOfDayActor : public AActor
{
public:
	bool                                          StopTimeOfDay;                                     // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x029C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DayDuration;                                       // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, class UATMBlendingPolicy*> BlendingPoliciesWithGuid;                          // 0x02A8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FString, class UATMBlendingPolicy*> BlendingPoliciesSingle;                           // 0x02F8(0x0050)(NativeAccessSpecifierPrivate)
	TArray<struct FATMObject>                     ATMObjects;                                        // 0x0348(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<struct FGuid, int32>                     IndexMapWithGuid;                                  // 0x0358(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class UObject*, int32>                   IndexMapSingle;                                    // 0x03A8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UATMPreset*>                     PresetToLoad;                                      // 0x03F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FATMWrapperStore                       WrapperStore;                                      // 0x0408(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UWrapTrackInstancePropertyBindings*> TrackPropertyBindings;              // 0x0458(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsInitialized();
	void NotifyReconstruction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMTimeOfDayActor">();
	}
	static class AATMTimeOfDayActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AATMTimeOfDayActor>();
	}
};
static_assert(alignof(AATMTimeOfDayActor) == 0x000008, "Wrong alignment on AATMTimeOfDayActor");
static_assert(sizeof(AATMTimeOfDayActor) == 0x0004B0, "Wrong size on AATMTimeOfDayActor");
static_assert(offsetof(AATMTimeOfDayActor, StopTimeOfDay) == 0x000298, "Member 'AATMTimeOfDayActor::StopTimeOfDay' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, StartTime) == 0x00029C, "Member 'AATMTimeOfDayActor::StartTime' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, DayDuration) == 0x0002A0, "Member 'AATMTimeOfDayActor::DayDuration' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, BlendingPoliciesWithGuid) == 0x0002A8, "Member 'AATMTimeOfDayActor::BlendingPoliciesWithGuid' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, BlendingPoliciesSingle) == 0x0002F8, "Member 'AATMTimeOfDayActor::BlendingPoliciesSingle' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, ATMObjects) == 0x000348, "Member 'AATMTimeOfDayActor::ATMObjects' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, IndexMapWithGuid) == 0x000358, "Member 'AATMTimeOfDayActor::IndexMapWithGuid' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, IndexMapSingle) == 0x0003A8, "Member 'AATMTimeOfDayActor::IndexMapSingle' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, PresetToLoad) == 0x0003F8, "Member 'AATMTimeOfDayActor::PresetToLoad' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, WrapperStore) == 0x000408, "Member 'AATMTimeOfDayActor::WrapperStore' has a wrong offset!");
static_assert(offsetof(AATMTimeOfDayActor, TrackPropertyBindings) == 0x000458, "Member 'AATMTimeOfDayActor::TrackPropertyBindings' has a wrong offset!");

// Class AtmosphericToolRuntime.ATMDebugToolWidget
// 0x0010 (0x01A8 - 0x0198)
class UATMDebugToolWidget final : public UContentWidget
{
public:
	uint8                                         Pad_198[0x10];                                     // 0x0198(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATMDebugToolWidget">();
	}
	static class UATMDebugToolWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATMDebugToolWidget>();
	}
};
static_assert(alignof(UATMDebugToolWidget) == 0x000008, "Wrong alignment on UATMDebugToolWidget");
static_assert(sizeof(UATMDebugToolWidget) == 0x0001A8, "Wrong size on UATMDebugToolWidget");

}

