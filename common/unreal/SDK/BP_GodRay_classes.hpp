#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GodRay

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GodRay.BP_GodRay_C
// 0x00E8 (0x0380 - 0x0298)
class ABP_GodRay_C final : public AActor
{
public:
	class UBillboardComponent*                    UISprite;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GodRayMesh;                                        // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Light_Actor;                                       // 0x02A8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_light_for_rotation;                            // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Face_Cam;                                          // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               TX_Mask;                                           // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Mask_Opacity;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x02C8(0x0010)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brightness;                                        // 0x02D8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x02E0(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Width;                                             // 0x02E8(0x0008)(Edit, ConstParm, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_GodRay;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Noise_Intensity;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Noise_Contrast;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     M_GodRay;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomTime;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	double                                        Zero1_Tiling_x;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero1_Tiling_y;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero2_Tiling_x;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero2_Tiling_y;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero1_Speed_x;                                     // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero1_Speed_y;                                     // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero2_Speed_x;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero2_Speed_y;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DepthFadeDistance;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EndFadeDistance;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartFadeDistance;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoundScale;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CustomBounds;                                      // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GodRay_C">();
	}
	static class ABP_GodRay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GodRay_C>();
	}
};
static_assert(alignof(ABP_GodRay_C) == 0x000008, "Wrong alignment on ABP_GodRay_C");
static_assert(sizeof(ABP_GodRay_C) == 0x000380, "Wrong size on ABP_GodRay_C");
static_assert(offsetof(ABP_GodRay_C, UISprite) == 0x000298, "Member 'ABP_GodRay_C::UISprite' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, GodRayMesh) == 0x0002A0, "Member 'ABP_GodRay_C::GodRayMesh' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Light_Actor) == 0x0002A8, "Member 'ABP_GodRay_C::Light_Actor' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Use_light_for_rotation) == 0x0002B0, "Member 'ABP_GodRay_C::Use_light_for_rotation' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Face_Cam) == 0x0002B1, "Member 'ABP_GodRay_C::Face_Cam' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, TX_Mask) == 0x0002B8, "Member 'ABP_GodRay_C::TX_Mask' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Mask_Opacity) == 0x0002C0, "Member 'ABP_GodRay_C::Mask_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Color) == 0x0002C8, "Member 'ABP_GodRay_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Brightness) == 0x0002D8, "Member 'ABP_GodRay_C::Brightness' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Length) == 0x0002E0, "Member 'ABP_GodRay_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Width) == 0x0002E8, "Member 'ABP_GodRay_C::Width' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, MID_GodRay) == 0x0002F0, "Member 'ABP_GodRay_C::MID_GodRay' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Noise_Intensity) == 0x0002F8, "Member 'ABP_GodRay_C::Noise_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Noise_Contrast) == 0x000300, "Member 'ABP_GodRay_C::Noise_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, M_GodRay) == 0x000308, "Member 'ABP_GodRay_C::M_GodRay' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, RandomTime) == 0x000310, "Member 'ABP_GodRay_C::RandomTime' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero1_Tiling_x) == 0x000318, "Member 'ABP_GodRay_C::Zero1_Tiling_x' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero1_Tiling_y) == 0x000320, "Member 'ABP_GodRay_C::Zero1_Tiling_y' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero2_Tiling_x) == 0x000328, "Member 'ABP_GodRay_C::Zero2_Tiling_x' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero2_Tiling_y) == 0x000330, "Member 'ABP_GodRay_C::Zero2_Tiling_y' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero1_Speed_x) == 0x000338, "Member 'ABP_GodRay_C::Zero1_Speed_x' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero1_Speed_y) == 0x000340, "Member 'ABP_GodRay_C::Zero1_Speed_y' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero2_Speed_x) == 0x000348, "Member 'ABP_GodRay_C::Zero2_Speed_x' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, Zero2_Speed_y) == 0x000350, "Member 'ABP_GodRay_C::Zero2_Speed_y' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, DepthFadeDistance) == 0x000358, "Member 'ABP_GodRay_C::DepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, EndFadeDistance) == 0x000360, "Member 'ABP_GodRay_C::EndFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, StartFadeDistance) == 0x000368, "Member 'ABP_GodRay_C::StartFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, BoundScale) == 0x000370, "Member 'ABP_GodRay_C::BoundScale' has a wrong offset!");
static_assert(offsetof(ABP_GodRay_C, CustomBounds) == 0x000378, "Member 'ABP_GodRay_C::CustomBounds' has a wrong offset!");

}

