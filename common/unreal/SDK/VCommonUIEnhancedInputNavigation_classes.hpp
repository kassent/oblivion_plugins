#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VCommonUIEnhancedInputNavigation

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "CommonUI_classes.hpp"
#include "VCommonUIEnhancedInputNavigation_structs.hpp"
#include "Slate_structs.hpp"
#include "CommonInput_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "EnhancedInput_classes.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class VCommonUIEnhancedInputNavigation.VEnhancedInputNavigable
// 0x0000 (0x0000 - 0x0000)
class IVEnhancedInputNavigable final
{
public:
	struct FGameplayTag GetWidgetLayer();
	void OnFocus();
	void OnUnfocus();

	TScriptInterface<class IVEnhancedInputNavigable> GetNavigationWidgetForAction(EVNavigationDirection Action) const;
	bool IsNavigable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VEnhancedInputNavigable">();
	}
	static class IVEnhancedInputNavigable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVEnhancedInputNavigable>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IVEnhancedInputNavigable) == 0x000001, "Wrong alignment on IVEnhancedInputNavigable");
static_assert(sizeof(IVEnhancedInputNavigable) == 0x000001, "Wrong size on IVEnhancedInputNavigable");

// Class VCommonUIEnhancedInputNavigation.VInputNavigationSettings
// 0x0088 (0x00C0 - 0x0038)
class UVInputNavigationSettings final : public UDeveloperSettings
{
public:
	struct FVGenericInputActionData               UpNavigationIA;                                    // 0x0038(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVGenericInputActionData               RightNavigationIA;                                 // 0x0048(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVGenericInputActionData               DownNavigationIA;                                  // 0x0058(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVGenericInputActionData               LeftNavigationIA;                                  // 0x0068(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVGenericInputActionData               AcceptIA;                                          // 0x0078(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FVGenericInputActionData               BackIA;                                            // 0x0088(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputMappingContext>    GenericNavigationInputMappingContext;              // 0x0098(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VInputNavigationSettings">();
	}
	static class UVInputNavigationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVInputNavigationSettings>();
	}
};
static_assert(alignof(UVInputNavigationSettings) == 0x000008, "Wrong alignment on UVInputNavigationSettings");
static_assert(sizeof(UVInputNavigationSettings) == 0x0000C0, "Wrong size on UVInputNavigationSettings");
static_assert(offsetof(UVInputNavigationSettings, UpNavigationIA) == 0x000038, "Member 'UVInputNavigationSettings::UpNavigationIA' has a wrong offset!");
static_assert(offsetof(UVInputNavigationSettings, RightNavigationIA) == 0x000048, "Member 'UVInputNavigationSettings::RightNavigationIA' has a wrong offset!");
static_assert(offsetof(UVInputNavigationSettings, DownNavigationIA) == 0x000058, "Member 'UVInputNavigationSettings::DownNavigationIA' has a wrong offset!");
static_assert(offsetof(UVInputNavigationSettings, LeftNavigationIA) == 0x000068, "Member 'UVInputNavigationSettings::LeftNavigationIA' has a wrong offset!");
static_assert(offsetof(UVInputNavigationSettings, AcceptIA) == 0x000078, "Member 'UVInputNavigationSettings::AcceptIA' has a wrong offset!");
static_assert(offsetof(UVInputNavigationSettings, BackIA) == 0x000088, "Member 'UVInputNavigationSettings::BackIA' has a wrong offset!");
static_assert(offsetof(UVInputNavigationSettings, GenericNavigationInputMappingContext) == 0x000098, "Member 'UVInputNavigationSettings::GenericNavigationInputMappingContext' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VModifierKeysInputTrigger
// 0x0008 (0x0058 - 0x0050)
class UVModifierKeysInputTrigger final : public UInputTrigger
{
public:
	bool                                          Shift;                                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ctrl;                                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Alt;                                               // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cmd;                                               // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VModifierKeysInputTrigger">();
	}
	static class UVModifierKeysInputTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVModifierKeysInputTrigger>();
	}
};
static_assert(alignof(UVModifierKeysInputTrigger) == 0x000008, "Wrong alignment on UVModifierKeysInputTrigger");
static_assert(sizeof(UVModifierKeysInputTrigger) == 0x000058, "Wrong size on UVModifierKeysInputTrigger");
static_assert(offsetof(UVModifierKeysInputTrigger, Shift) == 0x000050, "Member 'UVModifierKeysInputTrigger::Shift' has a wrong offset!");
static_assert(offsetof(UVModifierKeysInputTrigger, Ctrl) == 0x000051, "Member 'UVModifierKeysInputTrigger::Ctrl' has a wrong offset!");
static_assert(offsetof(UVModifierKeysInputTrigger, Alt) == 0x000052, "Member 'UVModifierKeysInputTrigger::Alt' has a wrong offset!");
static_assert(offsetof(UVModifierKeysInputTrigger, Cmd) == 0x000053, "Member 'UVModifierKeysInputTrigger::Cmd' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableActivatableWidgetBase
// 0x00B0 (0x04C0 - 0x0410)
class UVNavigableActivatableWidgetBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_410[0x8];                                      // 0x0410(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVNavigationDirection, class UCommonUserWidget*> WidgetForNavigation;                       // 0x0418(0x0050)(Edit, ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bShouldFocusOnHover;                               // 0x0468(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldHandleTriggeringInputAction;                // 0x0469(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldGiveNavigationInputToParentOnBorder;        // 0x046A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_46B[0x45];                                     // 0x046B(0x0045)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NavigableParent;                                   // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UVUINavigationGlobalSubsystem> UINavigationSubsystem;                       // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BindInputAction(const struct FVGenericInputActionData& InputActionData);
	void BP_OnBackActionCommited();
	void BP_OnHovered();
	void BP_OnNavigateDown();
	void BP_OnNavigateLeft();
	void BP_OnNavigateRight();
	void BP_OnNavigateUp();
	void BP_OnTirggeringActionCommited();
	void BP_OnUnhovered();
	void UnBindAllSpecificInputAction();

	bool GetIsFocussed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableActivatableWidgetBase">();
	}
	static class UVNavigableActivatableWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableActivatableWidgetBase>();
	}
};
static_assert(alignof(UVNavigableActivatableWidgetBase) == 0x000008, "Wrong alignment on UVNavigableActivatableWidgetBase");
static_assert(sizeof(UVNavigableActivatableWidgetBase) == 0x0004C0, "Wrong size on UVNavigableActivatableWidgetBase");
static_assert(offsetof(UVNavigableActivatableWidgetBase, WidgetForNavigation) == 0x000418, "Member 'UVNavigableActivatableWidgetBase::WidgetForNavigation' has a wrong offset!");
static_assert(offsetof(UVNavigableActivatableWidgetBase, bShouldFocusOnHover) == 0x000468, "Member 'UVNavigableActivatableWidgetBase::bShouldFocusOnHover' has a wrong offset!");
static_assert(offsetof(UVNavigableActivatableWidgetBase, bShouldHandleTriggeringInputAction) == 0x000469, "Member 'UVNavigableActivatableWidgetBase::bShouldHandleTriggeringInputAction' has a wrong offset!");
static_assert(offsetof(UVNavigableActivatableWidgetBase, bShouldGiveNavigationInputToParentOnBorder) == 0x00046A, "Member 'UVNavigableActivatableWidgetBase::bShouldGiveNavigationInputToParentOnBorder' has a wrong offset!");
static_assert(offsetof(UVNavigableActivatableWidgetBase, NavigableParent) == 0x0004B0, "Member 'UVNavigableActivatableWidgetBase::NavigableParent' has a wrong offset!");
static_assert(offsetof(UVNavigableActivatableWidgetBase, UINavigationSubsystem) == 0x0004B8, "Member 'UVNavigableActivatableWidgetBase::UINavigationSubsystem' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableButton
// 0x00D0 (0x1650 - 0x1580)
class UVNavigableButton : public UCommonButtonBase
{
public:
	uint8                                         Pad_1580[0x8];                                     // 0x1580(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnHoldCanceledEvent;                               // 0x1588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UVUINavigationGlobalSubsystem> UINavigationSubsystem;                       // 0x1598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EVNavigationDirection, class UCommonUserWidget*> WidgetForNavigation;                       // 0x15A0(0x0050)(Edit, ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_15F0[0x10];                                    // 0x15F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NavigableParent;                                   // 0x1600(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasControllerSpecificBehavior;                     // 0x1608(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldFocusOnHover;                                // 0x1609(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldApplyFocusEffectOnHover;                     // 0x160A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160B[0x5];                                     // 0x160B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonText;                                        // 0x1610(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPrivate)
	bool                                          IsFocused;                                         // 0x1628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsControllerActive;                                // 0x1629(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_162A[0x26];                                    // 0x162A(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnHoldCanceled();
	void BP_OnNavigateDown();
	void BP_OnNavigateLeft();
	void BP_OnNavigateRight();
	void BP_OnNavigateUp();
	void OnButtonTextUpdated(const class FText& Value);
	void OnControllerActiveUpdated(const bool Value);
	void OnSynchronizeProperties();
	void SetButtonText(const class FText& Value);
	void SetIsControllerActive(const bool Value);
	void SetIsFocused(const bool Value);
	void SetShouldApplyFocusEffectOnHover(bool NewValue);

	class FText GetButtonText() const;
	bool GetHasControllerSpecificBehavior() const;
	bool GetIsControllerActive() const;
	bool GetIsFocused() const;
	bool GetShouldApplyFocusEffectOnHover() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableButton">();
	}
	static class UVNavigableButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableButton>();
	}
};
static_assert(alignof(UVNavigableButton) == 0x000010, "Wrong alignment on UVNavigableButton");
static_assert(sizeof(UVNavigableButton) == 0x001650, "Wrong size on UVNavigableButton");
static_assert(offsetof(UVNavigableButton, OnHoldCanceledEvent) == 0x001588, "Member 'UVNavigableButton::OnHoldCanceledEvent' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, UINavigationSubsystem) == 0x001598, "Member 'UVNavigableButton::UINavigationSubsystem' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, WidgetForNavigation) == 0x0015A0, "Member 'UVNavigableButton::WidgetForNavigation' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, NavigableParent) == 0x001600, "Member 'UVNavigableButton::NavigableParent' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, HasControllerSpecificBehavior) == 0x001608, "Member 'UVNavigableButton::HasControllerSpecificBehavior' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, ShouldFocusOnHover) == 0x001609, "Member 'UVNavigableButton::ShouldFocusOnHover' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, ShouldApplyFocusEffectOnHover) == 0x00160A, "Member 'UVNavigableButton::ShouldApplyFocusEffectOnHover' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, ButtonText) == 0x001610, "Member 'UVNavigableButton::ButtonText' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, IsFocused) == 0x001628, "Member 'UVNavigableButton::IsFocused' has a wrong offset!");
static_assert(offsetof(UVNavigableButton, IsControllerActive) == 0x001629, "Member 'UVNavigableButton::IsControllerActive' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableCarousel
// 0x0038 (0x04F8 - 0x04C0)
class UVNavigableCarousel : public UVNavigableActivatableWidgetBase
{
public:
	bool                                          bIsCyclic;                                         // 0x04C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHaveLeftDecorator;                                // 0x04C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                LeftDecoratorClass;                                // 0x04C8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHaveRightDecorator;                               // 0x04D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                RightDecoratorClass;                               // 0x04D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonWidgetCarousel*                  Carousel;                                          // 0x04E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                LeftDecorator;                                     // 0x04E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                RightDecorator;                                    // 0x04F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UPanelSlot* AddChild(class UWidget* ChildToAdd);
	void ClearChildren();
	class UPanelSlot* InsertChild(class UWidget* ChildToAdd, int32 Index_0);
	void NavigateToElement(class UWidget* ItemToNavigateTo);
	void NavigateToEnd();
	void NavigateToIndex(int32 NewIndex);
	void NavigateToNextElement();
	void NavigateToPrevElement();
	void NavigateToStart();

	bool DoesContaintItem(class UWidget* Item) const;
	class UCommonWidgetCarousel* GetCarousel() const;
	int32 GetCurrentIndex() const;
	class UWidget* GetCurrentItem() const;
	int32 GetFirstIndex() const;
	class UWidget* GetItemAtIndex(int32 Index_0) const;
	int32 GetItemIndex(class UWidget* Item) const;
	int32 GetLastIndex() const;
	int32 GetSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableCarousel">();
	}
	static class UVNavigableCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableCarousel>();
	}
};
static_assert(alignof(UVNavigableCarousel) == 0x000008, "Wrong alignment on UVNavigableCarousel");
static_assert(sizeof(UVNavigableCarousel) == 0x0004F8, "Wrong size on UVNavigableCarousel");
static_assert(offsetof(UVNavigableCarousel, bIsCyclic) == 0x0004C0, "Member 'UVNavigableCarousel::bIsCyclic' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, bHaveLeftDecorator) == 0x0004C1, "Member 'UVNavigableCarousel::bHaveLeftDecorator' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, LeftDecoratorClass) == 0x0004C8, "Member 'UVNavigableCarousel::LeftDecoratorClass' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, bHaveRightDecorator) == 0x0004D0, "Member 'UVNavigableCarousel::bHaveRightDecorator' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, RightDecoratorClass) == 0x0004D8, "Member 'UVNavigableCarousel::RightDecoratorClass' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, Carousel) == 0x0004E0, "Member 'UVNavigableCarousel::Carousel' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, LeftDecorator) == 0x0004E8, "Member 'UVNavigableCarousel::LeftDecorator' has a wrong offset!");
static_assert(offsetof(UVNavigableCarousel, RightDecorator) == 0x0004F0, "Member 'UVNavigableCarousel::RightDecorator' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableCommonUserWidgetBase
// 0x00A0 (0x0388 - 0x02E8)
class UVNavigableCommonUserWidgetBase : public UCommonUserWidget
{
public:
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVNavigationDirection, class UCommonUserWidget*> WidgetForNavigation;                       // 0x02F0(0x0050)(Edit, ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bShouldFocusOnHover;                               // 0x0340(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldHandleTriggeringInputAction;                 // 0x0341(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_342[0x16];                                     // 0x0342(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NavigableParent;                                   // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UVUINavigationGlobalSubsystem> UINavigationSubsystem;                       // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x20];                                     // 0x0368(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnHovered();
	void BP_OnNavigateDown();
	void BP_OnNavigateLeft();
	void BP_OnNavigateRight();
	void BP_OnNavigateUp();
	void BP_OnTirggeringActionCommited();
	void BP_OnUnhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableCommonUserWidgetBase">();
	}
	static class UVNavigableCommonUserWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableCommonUserWidgetBase>();
	}
};
static_assert(alignof(UVNavigableCommonUserWidgetBase) == 0x000008, "Wrong alignment on UVNavigableCommonUserWidgetBase");
static_assert(sizeof(UVNavigableCommonUserWidgetBase) == 0x000388, "Wrong size on UVNavigableCommonUserWidgetBase");
static_assert(offsetof(UVNavigableCommonUserWidgetBase, WidgetForNavigation) == 0x0002F0, "Member 'UVNavigableCommonUserWidgetBase::WidgetForNavigation' has a wrong offset!");
static_assert(offsetof(UVNavigableCommonUserWidgetBase, bShouldFocusOnHover) == 0x000340, "Member 'UVNavigableCommonUserWidgetBase::bShouldFocusOnHover' has a wrong offset!");
static_assert(offsetof(UVNavigableCommonUserWidgetBase, ShouldHandleTriggeringInputAction) == 0x000341, "Member 'UVNavigableCommonUserWidgetBase::ShouldHandleTriggeringInputAction' has a wrong offset!");
static_assert(offsetof(UVNavigableCommonUserWidgetBase, NavigableParent) == 0x000358, "Member 'UVNavigableCommonUserWidgetBase::NavigableParent' has a wrong offset!");
static_assert(offsetof(UVNavigableCommonUserWidgetBase, UINavigationSubsystem) == 0x000360, "Member 'UVNavigableCommonUserWidgetBase::UINavigationSubsystem' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableEditableText
// 0x0030 (0x04F0 - 0x04C0)
class UVNavigableEditableText : public UVNavigableActivatableWidgetBase
{
public:
	TMulticastInlineDelegate<void(const class FText& CommittedValue)> OnValueCommittedHandle;        // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Text)> OnValueChangedHandle;                    // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UEditableText*                          EditableText;                                      // 0x04E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E8[0x8];                                      // 0x04E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindEditableTextDelegates();
	void HandleOnValueChanged(const class FText& Text);
	void HandleOnValueCommitted(const class FText& CommittedValue, ETextCommit CommitMethod);
	void UnBindEditableTextDelegates();

	class UEditableText* GetEditableText() const;
	bool GetIsEditing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableEditableText">();
	}
	static class UVNavigableEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableEditableText>();
	}
};
static_assert(alignof(UVNavigableEditableText) == 0x000008, "Wrong alignment on UVNavigableEditableText");
static_assert(sizeof(UVNavigableEditableText) == 0x0004F0, "Wrong size on UVNavigableEditableText");
static_assert(offsetof(UVNavigableEditableText, OnValueCommittedHandle) == 0x0004C0, "Member 'UVNavigableEditableText::OnValueCommittedHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableEditableText, OnValueChangedHandle) == 0x0004D0, "Member 'UVNavigableEditableText::OnValueChangedHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableEditableText, EditableText) == 0x0004E0, "Member 'UVNavigableEditableText::EditableText' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableHorizontalBox
// 0x0018 (0x04D8 - 0x04C0)
class UVNavigableHorizontalBox : public UVNavigableActivatableWidgetBase
{
public:
	bool                                          bDoNavigationLoop;                                 // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         HorizontalBox;                                     // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldFocusLastFocusedItemOnFocus;                // 0x04D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPanelSlot* AddChild(class UCommonUserWidget* ChildToAdd);
	void ClearChildren();
	class UHorizontalBox* GetHorizontalBox();
	void NavigateToElement(class UCommonUserWidget* ItemToNavigateTo);
	void NavigateToIndex(int32 NewIndex);
	void NavigateToNextElement();
	void NavigateToPrevElement();
	void OnChildHovered(const TScriptInterface<class IVEnhancedInputNavigable>& HoveredWidget);

	int32 GetFocusElementIndex() const;
	int32 GetSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableHorizontalBox">();
	}
	static class UVNavigableHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableHorizontalBox>();
	}
};
static_assert(alignof(UVNavigableHorizontalBox) == 0x000008, "Wrong alignment on UVNavigableHorizontalBox");
static_assert(sizeof(UVNavigableHorizontalBox) == 0x0004D8, "Wrong size on UVNavigableHorizontalBox");
static_assert(offsetof(UVNavigableHorizontalBox, bDoNavigationLoop) == 0x0004C0, "Member 'UVNavigableHorizontalBox::bDoNavigationLoop' has a wrong offset!");
static_assert(offsetof(UVNavigableHorizontalBox, HorizontalBox) == 0x0004C8, "Member 'UVNavigableHorizontalBox::HorizontalBox' has a wrong offset!");
static_assert(offsetof(UVNavigableHorizontalBox, bShouldFocusLastFocusedItemOnFocus) == 0x0004D0, "Member 'UVNavigableHorizontalBox::bShouldFocusLastFocusedItemOnFocus' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableInputKeySelector
// 0x0090 (0x0550 - 0x04C0)
class UVNavigableInputKeySelector : public UVNavigableActivatableWidgetBase
{
public:
	TMulticastInlineDelegate<void()>              OnIsSelectingKeyChangedHandle;                     // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FInputChord& NewInputChord)> OnKeySelectedHandle;     // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UVNavigableInputKeySelector* Target, bool NewState)> OnListenStateChangedHandle; // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           BannedKey;                                         // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           CancelKey;                                         // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ECommonInputType                              BindingType;                                       // 0x0510(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_511[0x3F];                                     // 0x0511(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPOnListenStateChanged(bool NewState);
	void OnInputMethodChanged(ECommonInputType NewInputType);
	void OnKeyChanged();
	void OnKeySelected(const struct FInputChord& NewInputChord);
	void SetCurrentKey(const struct FInputChord& Value);
	void SetIsListening(bool NewState);
	void UpdateSelectedKey(const struct FInputChord& InSelectedKey);

	const struct FInputChord GetCurrentKey() const;
	bool GetIsListening() const;
	bool IsCorrectInputType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableInputKeySelector">();
	}
	static class UVNavigableInputKeySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableInputKeySelector>();
	}
};
static_assert(alignof(UVNavigableInputKeySelector) == 0x000008, "Wrong alignment on UVNavigableInputKeySelector");
static_assert(sizeof(UVNavigableInputKeySelector) == 0x000550, "Wrong size on UVNavigableInputKeySelector");
static_assert(offsetof(UVNavigableInputKeySelector, OnIsSelectingKeyChangedHandle) == 0x0004C0, "Member 'UVNavigableInputKeySelector::OnIsSelectingKeyChangedHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableInputKeySelector, OnKeySelectedHandle) == 0x0004D0, "Member 'UVNavigableInputKeySelector::OnKeySelectedHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableInputKeySelector, OnListenStateChangedHandle) == 0x0004E0, "Member 'UVNavigableInputKeySelector::OnListenStateChangedHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableInputKeySelector, BannedKey) == 0x0004F0, "Member 'UVNavigableInputKeySelector::BannedKey' has a wrong offset!");
static_assert(offsetof(UVNavigableInputKeySelector, CancelKey) == 0x000500, "Member 'UVNavigableInputKeySelector::CancelKey' has a wrong offset!");
static_assert(offsetof(UVNavigableInputKeySelector, BindingType) == 0x000510, "Member 'UVNavigableInputKeySelector::BindingType' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableListView
// 0x0080 (0x0540 - 0x04C0)
class UVNavigableListView : public UVNavigableActivatableWidgetBase
{
public:
	TMulticastInlineDelegate<void(class UObject* HoveredItem)> OnItemHovered;                        // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* SelectedItem)> OnItemClicked;                       // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* SelectedItem)> OnItemClickReleased;                 // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Multiplicator;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasedDelay;                                        // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesAllowLoopingNavigation;                       // 0x04FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNavigateOnHover;                                  // 0x04FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FE[0x2];                                      // 0x04FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonListView*                        ListView;                                          // 0x0500(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_508[0x20];                                     // 0x0508(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                HoveredItem;                                       // 0x0528(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_530[0x10];                                     // 0x0530(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddItem(class UObject* ItemToAdd);
	void ClearSelection();
	void NavigateToElement(class UObject* ItemToNavigateTo);
	void NavigateToIndex(int32 NewIndex);
	void NavigateToNextElement();
	void NavigateToPrevElement();
	void StopAutomaticElementNavigation();

	int32 GetCurrentElementIndex() const;
	class UObject* GetFocusedElement() const;
	class UObject* GetItemAt(int32 ItemIndex) const;
	class UCommonListView* GetListView() const;
	int32 GetSize() const;
	class UUserWidget* GetWidgetFromItem(class UObject* Item) const;
	bool ListViewIsVertical() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableListView">();
	}
	static class UVNavigableListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableListView>();
	}
};
static_assert(alignof(UVNavigableListView) == 0x000008, "Wrong alignment on UVNavigableListView");
static_assert(sizeof(UVNavigableListView) == 0x000540, "Wrong size on UVNavigableListView");
static_assert(offsetof(UVNavigableListView, OnItemHovered) == 0x0004C0, "Member 'UVNavigableListView::OnItemHovered' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, OnItemClicked) == 0x0004D0, "Member 'UVNavigableListView::OnItemClicked' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, OnItemClickReleased) == 0x0004E0, "Member 'UVNavigableListView::OnItemClickReleased' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, Multiplicator) == 0x0004F0, "Member 'UVNavigableListView::Multiplicator' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, BasedDelay) == 0x0004F4, "Member 'UVNavigableListView::BasedDelay' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, MinDelay) == 0x0004F8, "Member 'UVNavigableListView::MinDelay' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, bDoesAllowLoopingNavigation) == 0x0004FC, "Member 'UVNavigableListView::bDoesAllowLoopingNavigation' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, bNavigateOnHover) == 0x0004FD, "Member 'UVNavigableListView::bNavigateOnHover' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, ListView) == 0x000500, "Member 'UVNavigableListView::ListView' has a wrong offset!");
static_assert(offsetof(UVNavigableListView, HoveredItem) == 0x000528, "Member 'UVNavigableListView::HoveredItem' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableScrollBox
// 0x0028 (0x04E8 - 0x04C0)
class UVNavigableScrollBox : public UVNavigableActivatableWidgetBase
{
public:
	float                                         Multiplicator;                                     // 0x04C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasedDelay;                                        // 0x04C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNavigationLoop;                                 // 0x04CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox;                                         // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D8[0x10];                                     // 0x04D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPanelSlot* AddChild(class UCommonUserWidget* ChildToAdd);
	void ClearChildren();
	class UScrollBox* GetScrollBox();
	void NavigateToElement(class UCommonUserWidget* ItemToNavigateTo);
	void NavigateToIndex(int32 NewIndex);
	void NavigateToNextElement();
	void NavigateToPrevElement();
	void OnChildHovered(const TScriptInterface<class IVEnhancedInputNavigable>& HoveredWidget);
	void OnChildHoveredBP(const TScriptInterface<class IVEnhancedInputNavigable>& HoveredWidget);
	void SetFocusedElementIndex(int32 NewIndex);

	class UCommonUserWidget* GetFocusedElement() const;
	int32 GetFocusElementIndex() const;
	int32 GetSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableScrollBox">();
	}
	static class UVNavigableScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableScrollBox>();
	}
};
static_assert(alignof(UVNavigableScrollBox) == 0x000008, "Wrong alignment on UVNavigableScrollBox");
static_assert(sizeof(UVNavigableScrollBox) == 0x0004E8, "Wrong size on UVNavigableScrollBox");
static_assert(offsetof(UVNavigableScrollBox, Multiplicator) == 0x0004C0, "Member 'UVNavigableScrollBox::Multiplicator' has a wrong offset!");
static_assert(offsetof(UVNavigableScrollBox, BasedDelay) == 0x0004C4, "Member 'UVNavigableScrollBox::BasedDelay' has a wrong offset!");
static_assert(offsetof(UVNavigableScrollBox, MinDelay) == 0x0004C8, "Member 'UVNavigableScrollBox::MinDelay' has a wrong offset!");
static_assert(offsetof(UVNavigableScrollBox, bDoNavigationLoop) == 0x0004CC, "Member 'UVNavigableScrollBox::bDoNavigationLoop' has a wrong offset!");
static_assert(offsetof(UVNavigableScrollBox, ScrollBox) == 0x0004D0, "Member 'UVNavigableScrollBox::ScrollBox' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableSlider
// 0x0050 (0x0510 - 0x04C0)
class UVNavigableSlider : public UVNavigableActivatableWidgetBase
{
public:
	TMulticastInlineDelegate<void(float CommitedValue)> OnValueChanged;                              // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsWaiting;                                        // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnalogSlider*                          Slider;                                            // 0x04D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           IncreaseValueLoopTimerHandle;                      // 0x04E0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           DecreaseValueLoopTimerHandle;                      // 0x04E8(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ValueModificationOnNavigationRate;                 // 0x04F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinNavigationRate;                                 // 0x04F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MultiplicatorOnNavigationRate;                     // 0x04F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4FC[0x14];                                     // 0x04FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAnalogSlider* GetSlider() const;
	float GetSliderValueAsPercentage(float Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableSlider">();
	}
	static class UVNavigableSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableSlider>();
	}
};
static_assert(alignof(UVNavigableSlider) == 0x000008, "Wrong alignment on UVNavigableSlider");
static_assert(sizeof(UVNavigableSlider) == 0x000510, "Wrong size on UVNavigableSlider");
static_assert(offsetof(UVNavigableSlider, OnValueChanged) == 0x0004C0, "Member 'UVNavigableSlider::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, bIsWaiting) == 0x0004D0, "Member 'UVNavigableSlider::bIsWaiting' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, Slider) == 0x0004D8, "Member 'UVNavigableSlider::Slider' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, IncreaseValueLoopTimerHandle) == 0x0004E0, "Member 'UVNavigableSlider::IncreaseValueLoopTimerHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, DecreaseValueLoopTimerHandle) == 0x0004E8, "Member 'UVNavigableSlider::DecreaseValueLoopTimerHandle' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, ValueModificationOnNavigationRate) == 0x0004F0, "Member 'UVNavigableSlider::ValueModificationOnNavigationRate' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, MinNavigationRate) == 0x0004F4, "Member 'UVNavigableSlider::MinNavigationRate' has a wrong offset!");
static_assert(offsetof(UVNavigableSlider, MultiplicatorOnNavigationRate) == 0x0004F8, "Member 'UVNavigableSlider::MultiplicatorOnNavigationRate' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableTileView
// 0x0070 (0x0530 - 0x04C0)
class UVNavigableTileView : public UVNavigableActivatableWidgetBase
{
public:
	TMulticastInlineDelegate<void(class UObject* HoveredItem)> OnItemHovered;                        // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UObject* SelectedItem)> OnItemClicked;                       // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Multiplicator;                                     // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BasedDelay;                                        // 0x04E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinDelay;                                          // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHoverDisabled;                                  // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVTileViewWidget*                       TileView;                                          // 0x04F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldCycleOnColumnBoundaries;                    // 0x04F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F9[0x1F];                                     // 0x04F9(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                HoveredItem;                                       // 0x0518(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddItem(class UObject* ItemToAdd);
	void BP_OnItemClicked(class UObject* ClickedItem);
	void BP_OnItemHovered(class UObject* NewHoveredItem);
	void ClearTileViewItems();
	void NavigateToElement(class UObject* ItemToNavigateTo);
	void NavigateToIndex(int32 NewLine, int32 NewColumn);
	void NavigateToIndex1D(int32 Index_0);
	void SetIndex(int32 NewLine, int32 NewColumn);

	struct FTileViewIndex GetFocusedItemIndex() const;
	int32 GetIndexOfItem(class UObject* Item) const;
	class UObject* GetItemAt(int32 Line, int32 Column) const;
	int32 GetItemsPerLine() const;
	int32 GetLinesPerColumn() const;
	int32 GetSize() const;
	class UCommonTileView* GetTileView() const;
	TArray<class UObject*> GetTileViewItems() const;
	class UUserWidget* GetWidgetFromItem(class UObject* Item) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableTileView">();
	}
	static class UVNavigableTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableTileView>();
	}
};
static_assert(alignof(UVNavigableTileView) == 0x000008, "Wrong alignment on UVNavigableTileView");
static_assert(sizeof(UVNavigableTileView) == 0x000530, "Wrong size on UVNavigableTileView");
static_assert(offsetof(UVNavigableTileView, OnItemHovered) == 0x0004C0, "Member 'UVNavigableTileView::OnItemHovered' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, OnItemClicked) == 0x0004D0, "Member 'UVNavigableTileView::OnItemClicked' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, Multiplicator) == 0x0004E0, "Member 'UVNavigableTileView::Multiplicator' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, BasedDelay) == 0x0004E4, "Member 'UVNavigableTileView::BasedDelay' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, MinDelay) == 0x0004E8, "Member 'UVNavigableTileView::MinDelay' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, bIsHoverDisabled) == 0x0004EC, "Member 'UVNavigableTileView::bIsHoverDisabled' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, TileView) == 0x0004F0, "Member 'UVNavigableTileView::TileView' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, bShouldCycleOnColumnBoundaries) == 0x0004F8, "Member 'UVNavigableTileView::bShouldCycleOnColumnBoundaries' has a wrong offset!");
static_assert(offsetof(UVNavigableTileView, HoveredItem) == 0x000518, "Member 'UVNavigableTileView::HoveredItem' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableVerticalBox
// 0x0018 (0x04D8 - 0x04C0)
class UVNavigableVerticalBox : public UVNavigableActivatableWidgetBase
{
public:
	bool                                          bDoNavigationLoop;                                 // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           VerticalBox;                                       // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D0[0x8];                                      // 0x04D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPanelSlot* AddChild(class UCommonUserWidget* ChildToAdd);
	void ClearChildren();
	class UVerticalBox* GetVerticalBox();
	void NavigateToElement(class UCommonUserWidget* ItemToNavigateTo);
	void NavigateToIndex(int32 NewIndex);
	void NavigateToNextElement();
	void NavigateToPrevElement();
	void OnChildHovered(const TScriptInterface<class IVEnhancedInputNavigable>& HoveredWidget);

	int32 GetFocusElementIndex() const;
	int32 GetSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableVerticalBox">();
	}
	static class UVNavigableVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableVerticalBox>();
	}
};
static_assert(alignof(UVNavigableVerticalBox) == 0x000008, "Wrong alignment on UVNavigableVerticalBox");
static_assert(sizeof(UVNavigableVerticalBox) == 0x0004D8, "Wrong size on UVNavigableVerticalBox");
static_assert(offsetof(UVNavigableVerticalBox, bDoNavigationLoop) == 0x0004C0, "Member 'UVNavigableVerticalBox::bDoNavigationLoop' has a wrong offset!");
static_assert(offsetof(UVNavigableVerticalBox, VerticalBox) == 0x0004C8, "Member 'UVNavigableVerticalBox::VerticalBox' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VNavigableWidgetSwitcher
// 0x0020 (0x04E0 - 0x04C0)
class UVNavigableWidgetSwitcher : public UVNavigableActivatableWidgetBase
{
public:
	TMulticastInlineDelegate<void(class UWidget* NewWidget, int32 NewIndex)> OnSwitcherChangedDelegate; // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        Switcher;                                          // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D8[0x8];                                      // 0x04D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPanelSlot* AddChild(class UWidget* ChildToAdd);
	void ClearChildren();
	void DisplayIndex(int32 NewIndex);
	void DisplayWidget(class UWidget* NewWidget);
	void NavigateToIndex(int32 NewIndex);
	void NavigateToWidget(class UWidget* NewWidget);

	int32 GetCurrentIndex() const;
	class UWidget* GetCurrentWidget() const;
	class UWidgetSwitcher* GetSwitcher() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VNavigableWidgetSwitcher">();
	}
	static class UVNavigableWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVNavigableWidgetSwitcher>();
	}
};
static_assert(alignof(UVNavigableWidgetSwitcher) == 0x000008, "Wrong alignment on UVNavigableWidgetSwitcher");
static_assert(sizeof(UVNavigableWidgetSwitcher) == 0x0004E0, "Wrong size on UVNavigableWidgetSwitcher");
static_assert(offsetof(UVNavigableWidgetSwitcher, OnSwitcherChangedDelegate) == 0x0004C0, "Member 'UVNavigableWidgetSwitcher::OnSwitcherChangedDelegate' has a wrong offset!");
static_assert(offsetof(UVNavigableWidgetSwitcher, Switcher) == 0x0004D0, "Member 'UVNavigableWidgetSwitcher::Switcher' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VTileViewWidget
// 0x0000 (0x1010 - 0x1010)
class UVTileViewWidget final : public UCommonTileView
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VTileViewWidget">();
	}
	static class UVTileViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVTileViewWidget>();
	}
};
static_assert(alignof(UVTileViewWidget) == 0x000010, "Wrong alignment on UVTileViewWidget");
static_assert(sizeof(UVTileViewWidget) == 0x001010, "Wrong size on UVTileViewWidget");

// Class VCommonUIEnhancedInputNavigation.VUINavigationGlobalSubsystem
// 0x0098 (0x00C8 - 0x0030)
class UVUINavigationGlobalSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FGameplayTag& LayerTag)> OnNewLayerFocusedDelegate;   // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TScriptInterface<class IVEnhancedInputNavigable>& NewTopMostFocusedWidget)> OnNewTopMostWidgetFocusedDelegate; // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVGenericInputActionData               UpNavigationIA;                                    // 0x0060(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVGenericInputActionData               RightNavigationIA;                                 // 0x0070(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVGenericInputActionData               DownNavigationIA;                                  // 0x0080(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVGenericInputActionData               LeftNavigationIA;                                  // 0x0090(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVGenericInputActionData               AcceptIA;                                          // 0x00A0(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVGenericInputActionData               BackIA;                                            // 0x00B0(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	class UInputMappingContext*                   GenericNavigationInputMappingContext;              // 0x00C0(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void NavigateBack();
	void NavigateToPreviousLayer();
	void NavigateToWidget(const TScriptInterface<class IVEnhancedInputNavigable>& Widget);

	const struct FVGenericInputActionData GetGenericInputAction(EVGenericNavigationAction GenericInputActionType) const;
	class UInputMappingContext* GetGenericNavigationInputMappingContext() const;
	const bool IsWidgetInTopMostFocusedStack(const TScriptInterface<class IVEnhancedInputNavigable>& Widget) const;
	const bool IsWidgetTopMostFocusedOne(const TScriptInterface<class IVEnhancedInputNavigable>& Widget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VUINavigationGlobalSubsystem">();
	}
	static class UVUINavigationGlobalSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVUINavigationGlobalSubsystem>();
	}
};
static_assert(alignof(UVUINavigationGlobalSubsystem) == 0x000008, "Wrong alignment on UVUINavigationGlobalSubsystem");
static_assert(sizeof(UVUINavigationGlobalSubsystem) == 0x0000C8, "Wrong size on UVUINavigationGlobalSubsystem");
static_assert(offsetof(UVUINavigationGlobalSubsystem, OnNewLayerFocusedDelegate) == 0x000030, "Member 'UVUINavigationGlobalSubsystem::OnNewLayerFocusedDelegate' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, OnNewTopMostWidgetFocusedDelegate) == 0x000040, "Member 'UVUINavigationGlobalSubsystem::OnNewTopMostWidgetFocusedDelegate' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, UpNavigationIA) == 0x000060, "Member 'UVUINavigationGlobalSubsystem::UpNavigationIA' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, RightNavigationIA) == 0x000070, "Member 'UVUINavigationGlobalSubsystem::RightNavigationIA' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, DownNavigationIA) == 0x000080, "Member 'UVUINavigationGlobalSubsystem::DownNavigationIA' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, LeftNavigationIA) == 0x000090, "Member 'UVUINavigationGlobalSubsystem::LeftNavigationIA' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, AcceptIA) == 0x0000A0, "Member 'UVUINavigationGlobalSubsystem::AcceptIA' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, BackIA) == 0x0000B0, "Member 'UVUINavigationGlobalSubsystem::BackIA' has a wrong offset!");
static_assert(offsetof(UVUINavigationGlobalSubsystem, GenericNavigationInputMappingContext) == 0x0000C0, "Member 'UVUINavigationGlobalSubsystem::GenericNavigationInputMappingContext' has a wrong offset!");

// Class VCommonUIEnhancedInputNavigation.VUINavigationPlayerSubsystem
// 0x0000 (0x0030 - 0x0030)
class UVUINavigationPlayerSubsystem final : public ULocalPlayerSubsystem
{
public:
	bool IsAltKeyDown() const;
	bool IsCtrlKeyDown() const;
	bool IsShiftKeyDown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VUINavigationPlayerSubsystem">();
	}
	static class UVUINavigationPlayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVUINavigationPlayerSubsystem>();
	}
};
static_assert(alignof(UVUINavigationPlayerSubsystem) == 0x000008, "Wrong alignment on UVUINavigationPlayerSubsystem");
static_assert(sizeof(UVUINavigationPlayerSubsystem) == 0x000030, "Wrong size on UVUINavigationPlayerSubsystem");

}

