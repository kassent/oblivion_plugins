#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Prefab_Fires_Act

#include "Basic.hpp"

#include "ENiagara_WeatherState_structs.hpp"
#include "BP_Parent_Prefab_Act_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Prefab_Fires_Act.BP_Prefab_Fires_Act_C
// 0x0070 (0x0590 - 0x0520)
class ABP_Prefab_Fires_Act_C : public ABP_Parent_Prefab_Act_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Prefab_Fires_Act_C;              // 0x0520(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVDetectionLightingProfileComponent*    VDetectionLightingProfile;                         // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_FireBrazier;                                    // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Z_D87FBE6742F13BDA5EA6A6B5B64351F2;       // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Y_D87FBE6742F13BDA5EA6A6B5B64351F2;       // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_X_D87FBE6742F13BDA5EA6A6B5B64351F2;       // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_D87FBE6742F13BDA5EA6A6B5B64351F2; // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Movement;                                      // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_UP;                                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_Y;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_X;                                        // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Tint;                                        // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Brazier_Transition_Done;                           // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          DropEmbers;                                        // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Adapt_Light__Brazier_();
	void ExecuteUbergraph_BP_Prefab_Fires_Act(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Reset_To_Defaul__Brazier_();
	void Set_Day();
	void Set_Night();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void Turn_Light_Off__Brazier_();
	void Update_Weather(ENiagara_WeatherState Weather, double Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Prefab_Fires_Act_C">();
	}
	static class ABP_Prefab_Fires_Act_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Prefab_Fires_Act_C>();
	}
};
static_assert(alignof(ABP_Prefab_Fires_Act_C) == 0x000010, "Wrong alignment on ABP_Prefab_Fires_Act_C");
static_assert(sizeof(ABP_Prefab_Fires_Act_C) == 0x000590, "Wrong size on ABP_Prefab_Fires_Act_C");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, UberGraphFrame_BP_Prefab_Fires_Act_C) == 0x000520, "Member 'ABP_Prefab_Fires_Act_C::UberGraphFrame_BP_Prefab_Fires_Act_C' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, VDetectionLightingProfile) == 0x000528, "Member 'ABP_Prefab_Fires_Act_C::VDetectionLightingProfile' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, NS_FireBrazier) == 0x000530, "Member 'ABP_Prefab_Fires_Act_C::NS_FireBrazier' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Timeline_Z_D87FBE6742F13BDA5EA6A6B5B64351F2) == 0x000538, "Member 'ABP_Prefab_Fires_Act_C::Timeline_Z_D87FBE6742F13BDA5EA6A6B5B64351F2' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Timeline_Y_D87FBE6742F13BDA5EA6A6B5B64351F2) == 0x00053C, "Member 'ABP_Prefab_Fires_Act_C::Timeline_Y_D87FBE6742F13BDA5EA6A6B5B64351F2' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Timeline_X_D87FBE6742F13BDA5EA6A6B5B64351F2) == 0x000540, "Member 'ABP_Prefab_Fires_Act_C::Timeline_X_D87FBE6742F13BDA5EA6A6B5B64351F2' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Timeline__Direction_D87FBE6742F13BDA5EA6A6B5B64351F2) == 0x000544, "Member 'ABP_Prefab_Fires_Act_C::Timeline__Direction_D87FBE6742F13BDA5EA6A6B5B64351F2' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Timeline) == 0x000548, "Member 'ABP_Prefab_Fires_Act_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Use_Movement) == 0x000550, "Member 'ABP_Prefab_Fires_Act_C::Use_Movement' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Speed) == 0x000554, "Member 'ABP_Prefab_Fires_Act_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Movement_UP) == 0x000558, "Member 'ABP_Prefab_Fires_Act_C::Movement_UP' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Movement_Y) == 0x000560, "Member 'ABP_Prefab_Fires_Act_C::Movement_Y' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Movement_X) == 0x000568, "Member 'ABP_Prefab_Fires_Act_C::Movement_X' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Color_Tint) == 0x000570, "Member 'ABP_Prefab_Fires_Act_C::Color_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, Brazier_Transition_Done) == 0x000580, "Member 'ABP_Prefab_Fires_Act_C::Brazier_Transition_Done' has a wrong offset!");
static_assert(offsetof(ABP_Prefab_Fires_Act_C, DropEmbers) == 0x000581, "Member 'ABP_Prefab_Fires_Act_C::DropEmbers' has a wrong offset!");

}

