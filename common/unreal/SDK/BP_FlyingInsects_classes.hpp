#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlyingInsects

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlyingInsects.BP_FlyingInsects_C
// 0x0088 (0x0320 - 0x0298)
class ABP_FlyingInsects_C : public AActor
{
public:
	class UNiagaraComponent*                      DebugviewSystem;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FlyingInsectVFX;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         System;                                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpawnRate;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpriteSize;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Location_SphereRadius;                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Debugview_Mode;                             // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location_SphereScale;                              // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurlNoise_Strength_Min;                            // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurlNoise_Strength_Max;                            // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurlNoise_Strength;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurlNoise_Frequency;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VortexVelocity_Strength;                           // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlyingInsects_C">();
	}
	static class ABP_FlyingInsects_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlyingInsects_C>();
	}
};
static_assert(alignof(ABP_FlyingInsects_C) == 0x000008, "Wrong alignment on ABP_FlyingInsects_C");
static_assert(sizeof(ABP_FlyingInsects_C) == 0x000320, "Wrong size on ABP_FlyingInsects_C");
static_assert(offsetof(ABP_FlyingInsects_C, DebugviewSystem) == 0x000298, "Member 'ABP_FlyingInsects_C::DebugviewSystem' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, FlyingInsectVFX) == 0x0002A0, "Member 'ABP_FlyingInsects_C::FlyingInsectVFX' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_FlyingInsects_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, System) == 0x0002B0, "Member 'ABP_FlyingInsects_C::System' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, Color) == 0x0002B8, "Member 'ABP_FlyingInsects_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, SpawnRate) == 0x0002C8, "Member 'ABP_FlyingInsects_C::SpawnRate' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, SpriteSize) == 0x0002D0, "Member 'ABP_FlyingInsects_C::SpriteSize' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, Location_SphereRadius) == 0x0002D8, "Member 'ABP_FlyingInsects_C::Location_SphereRadius' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, Enable_Debugview_Mode) == 0x0002E0, "Member 'ABP_FlyingInsects_C::Enable_Debugview_Mode' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, Location_SphereScale) == 0x0002E8, "Member 'ABP_FlyingInsects_C::Location_SphereScale' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, CurlNoise_Strength_Min) == 0x000300, "Member 'ABP_FlyingInsects_C::CurlNoise_Strength_Min' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, CurlNoise_Strength_Max) == 0x000304, "Member 'ABP_FlyingInsects_C::CurlNoise_Strength_Max' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, CurlNoise_Strength) == 0x000308, "Member 'ABP_FlyingInsects_C::CurlNoise_Strength' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, CurlNoise_Frequency) == 0x000310, "Member 'ABP_FlyingInsects_C::CurlNoise_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_FlyingInsects_C, VortexVelocity_Strength) == 0x000318, "Member 'ABP_FlyingInsects_C::VortexVelocity_Strength' has a wrong offset!");

}

