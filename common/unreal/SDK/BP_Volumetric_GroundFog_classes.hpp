#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Volumetric_GroundFog

#include "Basic.hpp"

#include "ENiagaraLinearColor_Channels_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Volumetric_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Volumetric_GroundFog.BP_Volumetric_GroundFog_C
// 0x0160 (0x04D8 - 0x0378)
class ABP_Volumetric_GroundFog_C final : public ABP_Volumetric_C
{
public:
	bool                                          Debug_Volume_Mask;                                 // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Radial_Coordinates;                            // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A[0x2];                                      // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Density;                                           // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Main_Color;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Shadow_Color;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shadow_Direction;                                  // 0x03A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shadow_Distance;                                   // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Volume_Noise_Texture;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ENiagaraLinearColor_Channels                  Volume_Noise_Channel;                              // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volume_Noise_Erosion;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Intensity;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Exponent;                             // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Volume_Noise_Tiling;                               // 0x03E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Uniform_Scale;                        // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Speed;                                // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volume_Noise_Offset;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Volume_Noise_Direction;                            // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Curl_Noise_Texture;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Intensity;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Curl_Noise_Tiling;                                 // 0x0440(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Uniform_Scale;                          // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Curl_Noise_Direction;                              // 0x0460(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Speed;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curl_Noise_Offset;                                 // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Gradient_Size;                                     // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Gradient_Hardness;                                 // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Height_Mask;                                // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Height_Mask_Size;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_Height_Mask;                                // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DFAO_Gradient_Size;                                // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DFAO_Gradient_Hardness;                            // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DFAO_Density;                                      // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DFAO_Density_Blend;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DFAO_Color;                                        // 0x04B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DFAO_Color_Blend;                                  // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Intensity;                                // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Exponent;                                 // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_Volume_Noise;                               // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Masked_Color_Blend;                                // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Setup_Ground_Fog_Mask_Paarameters();
	void Setup_Ground_Fog_Material_Parameters();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Volumetric_GroundFog_C">();
	}
	static class ABP_Volumetric_GroundFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Volumetric_GroundFog_C>();
	}
};
static_assert(alignof(ABP_Volumetric_GroundFog_C) == 0x000008, "Wrong alignment on ABP_Volumetric_GroundFog_C");
static_assert(sizeof(ABP_Volumetric_GroundFog_C) == 0x0004D8, "Wrong size on ABP_Volumetric_GroundFog_C");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Debug_Volume_Mask) == 0x000378, "Member 'ABP_Volumetric_GroundFog_C::Debug_Volume_Mask' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Use_Radial_Coordinates) == 0x000379, "Member 'ABP_Volumetric_GroundFog_C::Use_Radial_Coordinates' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Density) == 0x00037C, "Member 'ABP_Volumetric_GroundFog_C::Density' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Main_Color) == 0x000380, "Member 'ABP_Volumetric_GroundFog_C::Main_Color' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Shadow_Color) == 0x000390, "Member 'ABP_Volumetric_GroundFog_C::Shadow_Color' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Shadow_Direction) == 0x0003A0, "Member 'ABP_Volumetric_GroundFog_C::Shadow_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Shadow_Distance) == 0x0003B8, "Member 'ABP_Volumetric_GroundFog_C::Shadow_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Texture) == 0x0003C0, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Channel) == 0x0003C8, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Channel' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Erosion) == 0x0003D0, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Erosion' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Intensity) == 0x0003D8, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Exponent) == 0x0003E0, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Tiling) == 0x0003E8, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Uniform_Scale) == 0x000400, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Uniform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Speed) == 0x000408, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Offset) == 0x000410, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Volume_Noise_Direction) == 0x000418, "Member 'ABP_Volumetric_GroundFog_C::Volume_Noise_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Texture) == 0x000430, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Texture' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Intensity) == 0x000438, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Tiling) == 0x000440, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Uniform_Scale) == 0x000458, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Uniform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Direction) == 0x000460, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Speed) == 0x000478, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Curl_Noise_Offset) == 0x000480, "Member 'ABP_Volumetric_GroundFog_C::Curl_Noise_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Gradient_Size) == 0x000488, "Member 'ABP_Volumetric_GroundFog_C::Gradient_Size' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Gradient_Hardness) == 0x00048C, "Member 'ABP_Volumetric_GroundFog_C::Gradient_Hardness' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Enable_Height_Mask) == 0x000490, "Member 'ABP_Volumetric_GroundFog_C::Enable_Height_Mask' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Height_Mask_Size) == 0x000498, "Member 'ABP_Volumetric_GroundFog_C::Height_Mask_Size' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Invert_Height_Mask) == 0x0004A0, "Member 'ABP_Volumetric_GroundFog_C::Invert_Height_Mask' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, DFAO_Gradient_Size) == 0x0004A4, "Member 'ABP_Volumetric_GroundFog_C::DFAO_Gradient_Size' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, DFAO_Gradient_Hardness) == 0x0004A8, "Member 'ABP_Volumetric_GroundFog_C::DFAO_Gradient_Hardness' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, DFAO_Density) == 0x0004AC, "Member 'ABP_Volumetric_GroundFog_C::DFAO_Density' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, DFAO_Density_Blend) == 0x0004B0, "Member 'ABP_Volumetric_GroundFog_C::DFAO_Density_Blend' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, DFAO_Color) == 0x0004B4, "Member 'ABP_Volumetric_GroundFog_C::DFAO_Color' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, DFAO_Color_Blend) == 0x0004C4, "Member 'ABP_Volumetric_GroundFog_C::DFAO_Color_Blend' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Emissive_Intensity) == 0x0004C8, "Member 'ABP_Volumetric_GroundFog_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Emissive_Exponent) == 0x0004CC, "Member 'ABP_Volumetric_GroundFog_C::Emissive_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Invert_Volume_Noise) == 0x0004D0, "Member 'ABP_Volumetric_GroundFog_C::Invert_Volume_Noise' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_GroundFog_C, Masked_Color_Blend) == 0x0004D4, "Member 'ABP_Volumetric_GroundFog_C::Masked_Color_Blend' has a wrong offset!");

}

