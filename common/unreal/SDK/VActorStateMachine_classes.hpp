#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VActorStateMachine

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "VActorStateMachine_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VActorStateMachine.VStateBase
// 0x0060 (0x0088 - 0x0028)
class UVStateBase : public UObject
{
public:
	struct FGameplayTag                           StateBaseTag;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVStateMachineComponent*                ParentStateMachineComponent;                       // 0x0030(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVStateMachineBase*                     ParentStateMachine;                                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x4];                                       // 0x0040(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThisStateTimer;                                    // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVStateConditionDataAggregate          DefaultConditions;                                 // 0x0048(0x0018)(Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVNextState>                    NextStates;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVStateParameters*>              StateParametersList;                               // 0x0078(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void GetCurrentStatesTags(struct FGameplayTagContainer* CurrentStatesTags);
	void OnEntered();
	void OnExited();
	void PostInit();
	void Reset();

	class UVStateMachineComponent* GetOwningStateMachineComponent() const;
	bool IsCurrentlyActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VStateBase">();
	}
	static class UVStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVStateBase>();
	}
};
static_assert(alignof(UVStateBase) == 0x000008, "Wrong alignment on UVStateBase");
static_assert(sizeof(UVStateBase) == 0x000088, "Wrong size on UVStateBase");
static_assert(offsetof(UVStateBase, StateBaseTag) == 0x000028, "Member 'UVStateBase::StateBaseTag' has a wrong offset!");
static_assert(offsetof(UVStateBase, ParentStateMachineComponent) == 0x000030, "Member 'UVStateBase::ParentStateMachineComponent' has a wrong offset!");
static_assert(offsetof(UVStateBase, ParentStateMachine) == 0x000038, "Member 'UVStateBase::ParentStateMachine' has a wrong offset!");
static_assert(offsetof(UVStateBase, ThisStateTimer) == 0x000044, "Member 'UVStateBase::ThisStateTimer' has a wrong offset!");
static_assert(offsetof(UVStateBase, DefaultConditions) == 0x000048, "Member 'UVStateBase::DefaultConditions' has a wrong offset!");
static_assert(offsetof(UVStateBase, NextStates) == 0x000060, "Member 'UVStateBase::NextStates' has a wrong offset!");
static_assert(offsetof(UVStateBase, StateParametersList) == 0x000078, "Member 'UVStateBase::StateParametersList' has a wrong offset!");

// Class VActorStateMachine.VStateMachineBase
// 0x0000 (0x0088 - 0x0088)
class UVStateMachineBase : public UVStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VStateMachineBase">();
	}
	static class UVStateMachineBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVStateMachineBase>();
	}
};
static_assert(alignof(UVStateMachineBase) == 0x000008, "Wrong alignment on UVStateMachineBase");
static_assert(sizeof(UVStateMachineBase) == 0x000088, "Wrong size on UVStateMachineBase");

// Class VActorStateMachine.VParallelStateMachine
// 0x0030 (0x00B8 - 0x0088)
class UVParallelStateMachine : public UVStateMachineBase
{
public:
	TArray<TSubclassOf<class UVStateBase>>        ParallelStateClasses;                              // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UVStateBase*>                    InitialParallelStateInstances;                     // 0x0098(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UVStateBase*>                    ParallelStateInstances;                            // 0x00A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VParallelStateMachine">();
	}
	static class UVParallelStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVParallelStateMachine>();
	}
};
static_assert(alignof(UVParallelStateMachine) == 0x000008, "Wrong alignment on UVParallelStateMachine");
static_assert(sizeof(UVParallelStateMachine) == 0x0000B8, "Wrong size on UVParallelStateMachine");
static_assert(offsetof(UVParallelStateMachine, ParallelStateClasses) == 0x000088, "Member 'UVParallelStateMachine::ParallelStateClasses' has a wrong offset!");
static_assert(offsetof(UVParallelStateMachine, InitialParallelStateInstances) == 0x000098, "Member 'UVParallelStateMachine::InitialParallelStateInstances' has a wrong offset!");
static_assert(offsetof(UVParallelStateMachine, ParallelStateInstances) == 0x0000A8, "Member 'UVParallelStateMachine::ParallelStateInstances' has a wrong offset!");

// Class VActorStateMachine.VState
// 0x0000 (0x0088 - 0x0088)
class UVState : public UVStateBase
{
public:
	void OnStateUpdate(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VState">();
	}
	static class UVState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVState>();
	}
};
static_assert(alignof(UVState) == 0x000008, "Wrong alignment on UVState");
static_assert(sizeof(UVState) == 0x000088, "Wrong size on UVState");

// Class VActorStateMachine.VStateParameters
// 0x0000 (0x0030 - 0x0030)
class UVStateParameters : public UPrimaryDataAsset
{
public:
	void Apply(class UVStateBase* CurrentState);
	void Remove(class UVStateBase* CurrentState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VStateParameters">();
	}
	static class UVStateParameters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVStateParameters>();
	}
};
static_assert(alignof(UVStateParameters) == 0x000008, "Wrong alignment on UVStateParameters");
static_assert(sizeof(UVStateParameters) == 0x000030, "Wrong size on UVStateParameters");

// Class VActorStateMachine.VStateCondition
// 0x0000 (0x0030 - 0x0030)
class UVStateCondition : public UPrimaryDataAsset
{
public:
	bool CheckCondition(class UVStateBase* CurrentState);
	void PostInit(class UVStateBase* OwnerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VStateCondition">();
	}
	static class UVStateCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVStateCondition>();
	}
};
static_assert(alignof(UVStateCondition) == 0x000008, "Wrong alignment on UVStateCondition");
static_assert(sizeof(UVStateCondition) == 0x000030, "Wrong size on UVStateCondition");

// Class VActorStateMachine.VStateMachine
// 0x0020 (0x00A8 - 0x0088)
class UVStateMachine : public UVStateMachineBase
{
public:
	TSubclassOf<class UVStateBase>                InitialState;                                      // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVStateBase*                            InitialStateInstance;                              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVStateBase*                            CurrentState;                                      // 0x0098(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVStateBase*                            PreviousState;                                     // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VStateMachine">();
	}
	static class UVStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVStateMachine>();
	}
};
static_assert(alignof(UVStateMachine) == 0x000008, "Wrong alignment on UVStateMachine");
static_assert(sizeof(UVStateMachine) == 0x0000A8, "Wrong size on UVStateMachine");
static_assert(offsetof(UVStateMachine, InitialState) == 0x000088, "Member 'UVStateMachine::InitialState' has a wrong offset!");
static_assert(offsetof(UVStateMachine, InitialStateInstance) == 0x000090, "Member 'UVStateMachine::InitialStateInstance' has a wrong offset!");
static_assert(offsetof(UVStateMachine, CurrentState) == 0x000098, "Member 'UVStateMachine::CurrentState' has a wrong offset!");
static_assert(offsetof(UVStateMachine, PreviousState) == 0x0000A0, "Member 'UVStateMachine::PreviousState' has a wrong offset!");

// Class VActorStateMachine.VStateMachineComponent
// 0x00D8 (0x0178 - 0x00A0)
class UVStateMachineComponent : public UActorComponent
{
public:
	TMap<struct FGameplayTag, class UVStateBase*> StateInstances;                                    // 0x00A0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   AutonomousStateChangeList;                         // 0x00F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bPrintCurrentStatesDebug;                          // 0x0100(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLocalOnlyDebug;                                   // 0x0101(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAuthorityOnlyDebug;                               // 0x0102(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStartStateMachineOnBeginPlay;                     // 0x0103(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PreviousAutonomousTags;                            // 0x0108(0x0020)(Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CurrentAutonomousTags;                             // 0x0128(0x0020)(Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ServerCurrentTags;                                 // 0x0148(0x0020)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UVStateMachine>             StateMachineClass;                                 // 0x0168(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVStateMachine*                         StateMachineInstance;                              // 0x0170(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnServerCurrentTagsChange();
	void RegisterStateChange(const struct FGameplayTag& NewState);
	void Reset();
	void SendStateChangeListToServer(const TArray<struct FGameplayTag>& StateChangeList);
	void SendStateChangeToServer(const struct FGameplayTagContainer& CurrentStatesTagContainer);

	class UVStateBase* GetStateFromTag(const struct FGameplayTag& StateTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VStateMachineComponent">();
	}
	static class UVStateMachineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVStateMachineComponent>();
	}
};
static_assert(alignof(UVStateMachineComponent) == 0x000008, "Wrong alignment on UVStateMachineComponent");
static_assert(sizeof(UVStateMachineComponent) == 0x000178, "Wrong size on UVStateMachineComponent");
static_assert(offsetof(UVStateMachineComponent, StateInstances) == 0x0000A0, "Member 'UVStateMachineComponent::StateInstances' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, AutonomousStateChangeList) == 0x0000F0, "Member 'UVStateMachineComponent::AutonomousStateChangeList' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, bPrintCurrentStatesDebug) == 0x000100, "Member 'UVStateMachineComponent::bPrintCurrentStatesDebug' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, bLocalOnlyDebug) == 0x000101, "Member 'UVStateMachineComponent::bLocalOnlyDebug' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, bAuthorityOnlyDebug) == 0x000102, "Member 'UVStateMachineComponent::bAuthorityOnlyDebug' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, bStartStateMachineOnBeginPlay) == 0x000103, "Member 'UVStateMachineComponent::bStartStateMachineOnBeginPlay' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, PreviousAutonomousTags) == 0x000108, "Member 'UVStateMachineComponent::PreviousAutonomousTags' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, CurrentAutonomousTags) == 0x000128, "Member 'UVStateMachineComponent::CurrentAutonomousTags' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, ServerCurrentTags) == 0x000148, "Member 'UVStateMachineComponent::ServerCurrentTags' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, StateMachineClass) == 0x000168, "Member 'UVStateMachineComponent::StateMachineClass' has a wrong offset!");
static_assert(offsetof(UVStateMachineComponent, StateMachineInstance) == 0x000170, "Member 'UVStateMachineComponent::StateMachineInstance' has a wrong offset!");

}

