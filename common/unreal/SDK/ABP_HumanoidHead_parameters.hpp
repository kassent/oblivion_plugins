#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_HumanoidHead

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_HumanoidHead.ABP_HumanoidHead_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_HumanoidHead_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_HumanoidHead_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_HumanoidHead_C_AnimGraph");
static_assert(sizeof(ABP_HumanoidHead_C_AnimGraph) == 0x000010, "Wrong size on ABP_HumanoidHead_C_AnimGraph");
static_assert(offsetof(ABP_HumanoidHead_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_HumanoidHead_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_HumanoidHead.ABP_HumanoidHead_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_HumanoidHead_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_HumanoidHead_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_HumanoidHead_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_HumanoidHead_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_HumanoidHead_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_HumanoidHead_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_HumanoidHead_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_HumanoidHead.ABP_HumanoidHead_C.ExecuteUbergraph_ABP_HumanoidHead
// 0x0038 (0x0038 - 0x0000)
struct ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVHumanoidHeadComponent*                K2Node_DynamicCast_AsVHumanoid_Head_Component;     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_CustomEvent_NewBodyMesh;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USkeletalMeshComponent* NewBodyMesh)> K2Node_CreateDelegate_OutputDelegate; // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead) == 0x000008, "Wrong alignment on ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead");
static_assert(sizeof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead) == 0x000038, "Wrong size on ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, EntryPoint) == 0x000000, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, CallFunc_GetOwningComponent_ReturnValue) == 0x000008, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, K2Node_DynamicCast_AsVHumanoid_Head_Component) == 0x000010, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::K2Node_DynamicCast_AsVHumanoid_Head_Component' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, K2Node_CustomEvent_NewBodyMesh) == 0x000020, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::K2Node_CustomEvent_NewBodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'ABP_HumanoidHead_C_ExecuteUbergraph_ABP_HumanoidHead::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function ABP_HumanoidHead.ABP_HumanoidHead_C.OnBodyMeshUpdated
// 0x0008 (0x0008 - 0x0000)
struct ABP_HumanoidHead_C_OnBodyMeshUpdated final
{
public:
	class USkeletalMeshComponent*                 NewBodyMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_HumanoidHead_C_OnBodyMeshUpdated) == 0x000008, "Wrong alignment on ABP_HumanoidHead_C_OnBodyMeshUpdated");
static_assert(sizeof(ABP_HumanoidHead_C_OnBodyMeshUpdated) == 0x000008, "Wrong size on ABP_HumanoidHead_C_OnBodyMeshUpdated");
static_assert(offsetof(ABP_HumanoidHead_C_OnBodyMeshUpdated, NewBodyMesh) == 0x000000, "Member 'ABP_HumanoidHead_C_OnBodyMeshUpdated::NewBodyMesh' has a wrong offset!");

// Function ABP_HumanoidHead.ABP_HumanoidHead_C.UpdateBodyMesh
// 0x0010 (0x0010 - 0x0000)
struct ABP_HumanoidHead_C_UpdateBodyMesh final
{
public:
	class USkeletalMeshComponent*                 BodyMesh_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_HumanoidHead_C_UpdateBodyMesh) == 0x000008, "Wrong alignment on ABP_HumanoidHead_C_UpdateBodyMesh");
static_assert(sizeof(ABP_HumanoidHead_C_UpdateBodyMesh) == 0x000010, "Wrong size on ABP_HumanoidHead_C_UpdateBodyMesh");
static_assert(offsetof(ABP_HumanoidHead_C_UpdateBodyMesh, BodyMesh_0) == 0x000000, "Member 'ABP_HumanoidHead_C_UpdateBodyMesh::BodyMesh_0' has a wrong offset!");
static_assert(offsetof(ABP_HumanoidHead_C_UpdateBodyMesh, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_HumanoidHead_C_UpdateBodyMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

