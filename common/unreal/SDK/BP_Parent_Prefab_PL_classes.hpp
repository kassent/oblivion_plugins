#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Parent_Prefab_PL

#include "Basic.hpp"

#include "BPE_WeatherResponse_Rain_structs.hpp"
#include "BPE_WeatherResponse_Snow_structs.hpp"
#include "ENiagara_WeatherState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Altar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Parent_Prefab_PL.BP_Parent_Prefab_PL_C
// 0x0178 (0x04D0 - 0x0358)
class ABP_Parent_Prefab_PL_C : public AVPointLight
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara_System_Component;                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Light;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   One_PointLight;                                    // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_Component;                              // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         VFX;                                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            StaticMesh;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Light_Function;                                // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     M_LF;                                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_LF;                                            // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Randomizer;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intensity;                                         // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Attenuation_Radius;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Source_Radius;                                     // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OFF;                                               // 0x03D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D6[0x2];                                      // 0x03D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Indirect_Intensity;                                // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volumetric_Intensity;                              // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specular_Scale;                                    // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Color_Saturation;                                  // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Custom_Transform;                                  // 0x03F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OFF_0;                                             // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Interior_Level;                                 // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Turn_OFF_Day;                                      // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_453[0x1];                                      // 0x0453(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sunset;                                            // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sunrise;                                           // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Night;                                          // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Day;                                            // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45E[0x2];                                      // 0x045E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Emissive_Intensity;                                // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_WeatherResponse_Rain                     Rain_Response;                                     // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_WeatherResponse_Snow                     Snow_Response;                                     // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Adapted_Light_Intensity;                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Adapted_VFX_Intensity;                             // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Update_Value;                              // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Light_Transition_Start;                            // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Light_Transition_Done;                             // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VFX_Intensity;                                     // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_VFX_Intensity;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VFX_Intensity_Transition_Start;                    // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Current_VFX_Spawnrate;                             // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        VFX_Spawnrate_Transition_Start;                    // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          VFX_Transition_Done;                               // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Emissive_Param_Name;                               // 0x04C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Adapt_Light();
	void ExecuteUbergraph_BP_Parent_Prefab_PL(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Reset_to_Default();
	void Set_Day();
	void Set_Night();
	void Turn_Light_Off();
	void Update_Weather(ENiagara_WeatherState Weather, double Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Parent_Prefab_PL_C">();
	}
	static class ABP_Parent_Prefab_PL_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Parent_Prefab_PL_C>();
	}
};
static_assert(alignof(ABP_Parent_Prefab_PL_C) == 0x000010, "Wrong alignment on ABP_Parent_Prefab_PL_C");
static_assert(sizeof(ABP_Parent_Prefab_PL_C) == 0x0004D0, "Wrong size on ABP_Parent_Prefab_PL_C");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, UberGraphFrame) == 0x000358, "Member 'ABP_Parent_Prefab_PL_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Niagara_System_Component) == 0x000360, "Member 'ABP_Parent_Prefab_PL_C::Niagara_System_Component' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Light) == 0x000368, "Member 'ABP_Parent_Prefab_PL_C::Light' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, One_PointLight) == 0x000370, "Member 'ABP_Parent_Prefab_PL_C::One_PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, StaticMesh_Component) == 0x000378, "Member 'ABP_Parent_Prefab_PL_C::StaticMesh_Component' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, VFX) == 0x000380, "Member 'ABP_Parent_Prefab_PL_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, StaticMesh) == 0x000388, "Member 'ABP_Parent_Prefab_PL_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Use_Light_Function) == 0x000390, "Member 'ABP_Parent_Prefab_PL_C::Use_Light_Function' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, M_LF) == 0x000398, "Member 'ABP_Parent_Prefab_PL_C::M_LF' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, MID_LF) == 0x0003A0, "Member 'ABP_Parent_Prefab_PL_C::MID_LF' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Randomizer) == 0x0003A8, "Member 'ABP_Parent_Prefab_PL_C::Randomizer' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Intensity) == 0x0003B0, "Member 'ABP_Parent_Prefab_PL_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Attenuation_Radius) == 0x0003B8, "Member 'ABP_Parent_Prefab_PL_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Source_Radius) == 0x0003C0, "Member 'ABP_Parent_Prefab_PL_C::Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Color) == 0x0003C4, "Member 'ABP_Parent_Prefab_PL_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Cast_Shadows) == 0x0003D4, "Member 'ABP_Parent_Prefab_PL_C::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, OFF) == 0x0003D5, "Member 'ABP_Parent_Prefab_PL_C::OFF' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Indirect_Intensity) == 0x0003D8, "Member 'ABP_Parent_Prefab_PL_C::Indirect_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Volumetric_Intensity) == 0x0003DC, "Member 'ABP_Parent_Prefab_PL_C::Volumetric_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Specular_Scale) == 0x0003E0, "Member 'ABP_Parent_Prefab_PL_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Color_Saturation) == 0x0003E8, "Member 'ABP_Parent_Prefab_PL_C::Color_Saturation' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Custom_Transform) == 0x0003F0, "Member 'ABP_Parent_Prefab_PL_C::Custom_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, OFF_0) == 0x000450, "Member 'ABP_Parent_Prefab_PL_C::OFF_0' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Is_Interior_Level) == 0x000451, "Member 'ABP_Parent_Prefab_PL_C::Is_Interior_Level' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Turn_OFF_Day) == 0x000452, "Member 'ABP_Parent_Prefab_PL_C::Turn_OFF_Day' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Sunset) == 0x000454, "Member 'ABP_Parent_Prefab_PL_C::Sunset' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Sunrise) == 0x000458, "Member 'ABP_Parent_Prefab_PL_C::Sunrise' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Is_Night) == 0x00045C, "Member 'ABP_Parent_Prefab_PL_C::Is_Night' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Is_Day) == 0x00045D, "Member 'ABP_Parent_Prefab_PL_C::Is_Day' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Emissive_Intensity) == 0x000460, "Member 'ABP_Parent_Prefab_PL_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Rain_Response) == 0x000468, "Member 'ABP_Parent_Prefab_PL_C::Rain_Response' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Snow_Response) == 0x000469, "Member 'ABP_Parent_Prefab_PL_C::Snow_Response' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Adapted_Light_Intensity) == 0x000470, "Member 'ABP_Parent_Prefab_PL_C::Adapted_Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Adapted_VFX_Intensity) == 0x000478, "Member 'ABP_Parent_Prefab_PL_C::Adapted_VFX_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Weather_Update_Value) == 0x000480, "Member 'ABP_Parent_Prefab_PL_C::Weather_Update_Value' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Light_Transition_Start) == 0x000488, "Member 'ABP_Parent_Prefab_PL_C::Light_Transition_Start' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Light_Transition_Done) == 0x000490, "Member 'ABP_Parent_Prefab_PL_C::Light_Transition_Done' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, VFX_Intensity) == 0x000498, "Member 'ABP_Parent_Prefab_PL_C::VFX_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Current_VFX_Intensity) == 0x0004A0, "Member 'ABP_Parent_Prefab_PL_C::Current_VFX_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, VFX_Intensity_Transition_Start) == 0x0004A8, "Member 'ABP_Parent_Prefab_PL_C::VFX_Intensity_Transition_Start' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Current_VFX_Spawnrate) == 0x0004B0, "Member 'ABP_Parent_Prefab_PL_C::Current_VFX_Spawnrate' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, VFX_Spawnrate_Transition_Start) == 0x0004B8, "Member 'ABP_Parent_Prefab_PL_C::VFX_Spawnrate_Transition_Start' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, VFX_Transition_Done) == 0x0004C0, "Member 'ABP_Parent_Prefab_PL_C::VFX_Transition_Done' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Prefab_PL_C, Emissive_Param_Name) == 0x0004C4, "Member 'ABP_Parent_Prefab_PL_C::Emissive_Param_Name' has a wrong offset!");

}

