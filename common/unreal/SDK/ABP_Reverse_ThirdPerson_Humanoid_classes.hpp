#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Reverse_ThirdPerson_Humanoid

#include "Basic.hpp"

#include "Struct_Recoil_Multiple_structs.hpp"
#include "Struct_HandPoseSetup_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Altar_structs.hpp"
#include "Struct_Stagger_Swim_structs.hpp"
#include "Struct_Torch_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_Locomotion_structs.hpp"
#include "Struct_SpellCast_Single_structs.hpp"
#include "Struct_SpecialIdleAndDock_structs.hpp"
#include "AnimationNodeRuntime_structs.hpp"
#include "Struct_EnhancedLocomotionInAir_structs.hpp"
#include "Struct_LookAt_structs.hpp"
#include "Struct_EquipUnequip_StandSneak_Single_structs.hpp"
#include "TABP_ReverseCharacter_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Reverse_ThirdPerson_Humanoid.ABP_Reverse_ThirdPerson_Humanoid_C
// 0x0820 (0x4C00 - 0x43E0)
class UABP_Reverse_ThirdPerson_Humanoid_C final : public UTABP_ReverseCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ABP_Reverse_ThirdPerson_Humanoid_C; // 0x43E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVHumanoidLowerAndUpperBodySetup       LayerBlendSettings;                                // 0x43E8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FStruct_HandPoseSetup                  HandPoseSetup;                                     // 0x4420(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FStruct_Torch                          TorchAnim;                                         // 0x4440(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, struct FLocomotionAnimationData> StandingMap;                          // 0x4488(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FSprintingAnimationData> SprintingMap;                          // 0x44D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Locomotion> SneakingMap;                                // 0x4528(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Locomotion> SwimmingMap;                                // 0x4578(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FBlockShieldAnimationData> BlockingMap;                         // 0x45C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FStandSneakBowAttackAnimSet            Bow;                                               // 0x4618(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FStandSneakStaffAttackData             Staff;                                             // 0x4650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMeleeAttackComboAnimationData         HandToHand;                                        // 0x4660(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Dagger;                                            // 0x46A0(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Shortsword;                                        // 0x46E0(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Longsword;                                         // 0x4720(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Axe;                                               // 0x4760(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Mace;                                              // 0x47A0(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Claymore;                                          // 0x47E0(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         Warhammer;                                         // 0x4820(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeleeAttackComboAnimationData         BattleAxe;                                         // 0x4860(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Recoil_Multiple> RecoilMap;                             // 0x48A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_Stagger_Swim> StaggerSwim;                              // 0x48F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FStruct_SpellCast_Single> SpellMap;                             // 0x4940(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FStruct_SpecialIdleAndDock             SpecialIdleAndDockSettings;                        // 0x4990(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActorFeetIKSettings                   FeetIKSettings;                                    // 0x49D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMap<struct FGameplayTag, struct FStruct_EnhancedLocomotionInAir> InAirMap;                      // 0x49D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FStruct_LookAt                         LookAt;                                            // 0x4A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FStruct_EnhancedLocomotionInAir        EnhancedLocomotionInAir;                           // 0x4A30(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVTurnInPlace                          TurnInPlaceSettings;                               // 0x4A70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMap<struct FGameplayTag, struct FStruct_EquipUnequip_StandSneak_Single> EquipUnequipMap;        // 0x4A98(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FResurrectionData                      ResurrectionSettings;                              // 0x4AE8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_4AEC[0x4];                                     // 0x4AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FGetUpAnimationData> GetUpMap;                                  // 0x4AF0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FHitReactionKeyframeData> HitReactMap;                          // 0x4B40(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FConversationIdleData                  ConversationIdleData;                              // 0x4B90(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FDodgeAnimationData> DodgeMap;                                  // 0x4BB0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BlueprintLinkedAnimationLayersInitialized();
	void ExecuteUbergraph_ABP_Reverse_ThirdPerson_Humanoid(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Reverse_ThirdPerson_Humanoid_C">();
	}
	static class UABP_Reverse_ThirdPerson_Humanoid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Reverse_ThirdPerson_Humanoid_C>();
	}
};
static_assert(alignof(UABP_Reverse_ThirdPerson_Humanoid_C) == 0x000010, "Wrong alignment on UABP_Reverse_ThirdPerson_Humanoid_C");
static_assert(sizeof(UABP_Reverse_ThirdPerson_Humanoid_C) == 0x004C00, "Wrong size on UABP_Reverse_ThirdPerson_Humanoid_C");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, UberGraphFrame_ABP_Reverse_ThirdPerson_Humanoid_C) == 0x0043E0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::UberGraphFrame_ABP_Reverse_ThirdPerson_Humanoid_C' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, LayerBlendSettings) == 0x0043E8, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::LayerBlendSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, HandPoseSetup) == 0x004420, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::HandPoseSetup' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, TorchAnim) == 0x004440, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::TorchAnim' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, StandingMap) == 0x004488, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::StandingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, SprintingMap) == 0x0044D8, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::SprintingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, SneakingMap) == 0x004528, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::SneakingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, SwimmingMap) == 0x004578, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::SwimmingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, BlockingMap) == 0x0045C8, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::BlockingMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Bow) == 0x004618, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Bow' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Staff) == 0x004650, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Staff' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, HandToHand) == 0x004660, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::HandToHand' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Dagger) == 0x0046A0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Dagger' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Shortsword) == 0x0046E0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Shortsword' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Longsword) == 0x004720, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Longsword' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Axe) == 0x004760, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Axe' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Mace) == 0x0047A0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Mace' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Claymore) == 0x0047E0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Claymore' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, Warhammer) == 0x004820, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::Warhammer' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, BattleAxe) == 0x004860, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::BattleAxe' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, RecoilMap) == 0x0048A0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::RecoilMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, StaggerSwim) == 0x0048F0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::StaggerSwim' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, SpellMap) == 0x004940, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::SpellMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, SpecialIdleAndDockSettings) == 0x004990, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::SpecialIdleAndDockSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, FeetIKSettings) == 0x0049D0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::FeetIKSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, InAirMap) == 0x0049D8, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::InAirMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, LookAt) == 0x004A28, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::LookAt' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, EnhancedLocomotionInAir) == 0x004A30, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::EnhancedLocomotionInAir' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, TurnInPlaceSettings) == 0x004A70, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::TurnInPlaceSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, EquipUnequipMap) == 0x004A98, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::EquipUnequipMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, ResurrectionSettings) == 0x004AE8, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::ResurrectionSettings' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, GetUpMap) == 0x004AF0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::GetUpMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, HitReactMap) == 0x004B40, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::HitReactMap' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, ConversationIdleData) == 0x004B90, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::ConversationIdleData' has a wrong offset!");
static_assert(offsetof(UABP_Reverse_ThirdPerson_Humanoid_C, DodgeMap) == 0x004BB0, "Member 'UABP_Reverse_ThirdPerson_Humanoid_C::DodgeMap' has a wrong offset!");

}

