#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VDoor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_VDoor.BP_VDoor_C.1 Rotation
// 0x0148 (0x0148 - 0x0000)
struct BP_VDoor_C_One_Rotation final
{
public:
	class USceneComponent*                        Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Original_Rotation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Target_Rotation;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Timeline_0;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0058(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_RLerp_Alpha_ImplicitCast;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VDoor_C_One_Rotation) == 0x000008, "Wrong alignment on BP_VDoor_C_One_Rotation");
static_assert(sizeof(BP_VDoor_C_One_Rotation) == 0x000148, "Wrong size on BP_VDoor_C_One_Rotation");
static_assert(offsetof(BP_VDoor_C_One_Rotation, Mesh) == 0x000000, "Member 'BP_VDoor_C_One_Rotation::Mesh' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Rotation, Original_Rotation) == 0x000008, "Member 'BP_VDoor_C_One_Rotation::Original_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Rotation, Target_Rotation) == 0x000020, "Member 'BP_VDoor_C_One_Rotation::Target_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Rotation, Timeline_0) == 0x000038, "Member 'BP_VDoor_C_One_Rotation::Timeline_0' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Rotation, CallFunc_RLerp_ReturnValue) == 0x000040, "Member 'BP_VDoor_C_One_Rotation::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Rotation, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000058, "Member 'BP_VDoor_C_One_Rotation::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Rotation, CallFunc_RLerp_Alpha_ImplicitCast) == 0x000140, "Member 'BP_VDoor_C_One_Rotation::CallFunc_RLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function BP_VDoor.BP_VDoor_C.1 Teleport
// 0x0208 (0x0208 - 0x0000)
struct BP_VDoor_C_One_Teleport final
{
public:
	class USceneComponent*                        Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Location;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Target_Rotation;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0038(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0120(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VDoor_C_One_Teleport) == 0x000008, "Wrong alignment on BP_VDoor_C_One_Teleport");
static_assert(sizeof(BP_VDoor_C_One_Teleport) == 0x000208, "Wrong size on BP_VDoor_C_One_Teleport");
static_assert(offsetof(BP_VDoor_C_One_Teleport, Mesh) == 0x000000, "Member 'BP_VDoor_C_One_Teleport::Mesh' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Teleport, Target_Location) == 0x000008, "Member 'BP_VDoor_C_One_Teleport::Target_Location' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Teleport, Target_Rotation) == 0x000020, "Member 'BP_VDoor_C_One_Teleport::Target_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Teleport, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000038, "Member 'BP_VDoor_C_One_Teleport::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Teleport, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000120, "Member 'BP_VDoor_C_One_Teleport::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_VDoor.BP_VDoor_C.1 Translation
// 0x0148 (0x0148 - 0x0000)
struct BP_VDoor_C_One_Translation final
{
public:
	class USceneComponent*                        Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Original_Location;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Location;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timeline_0;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0058(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VDoor_C_One_Translation) == 0x000008, "Wrong alignment on BP_VDoor_C_One_Translation");
static_assert(sizeof(BP_VDoor_C_One_Translation) == 0x000148, "Wrong size on BP_VDoor_C_One_Translation");
static_assert(offsetof(BP_VDoor_C_One_Translation, Mesh) == 0x000000, "Member 'BP_VDoor_C_One_Translation::Mesh' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Translation, Original_Location) == 0x000008, "Member 'BP_VDoor_C_One_Translation::Original_Location' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Translation, Target_Location) == 0x000020, "Member 'BP_VDoor_C_One_Translation::Target_Location' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Translation, Timeline_0) == 0x000038, "Member 'BP_VDoor_C_One_Translation::Timeline_0' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Translation, CallFunc_VLerp_ReturnValue) == 0x000040, "Member 'BP_VDoor_C_One_Translation::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Translation, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000058, "Member 'BP_VDoor_C_One_Translation::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_One_Translation, CallFunc_VLerp_Alpha_ImplicitCast) == 0x000140, "Member 'BP_VDoor_C_One_Translation::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function BP_VDoor.BP_VDoor_C.ExecuteUbergraph_BP_VDoor
// 0x0028 (0x0028 - 0x0000)
struct BP_VDoor_C_ExecuteUbergraph_BP_VDoor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_1_2_sec;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Second_1_2_sec;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Update_Timeline_1_2_sec_ImplicitCast;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Update_Timeline_Second_1_2_sec_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor) == 0x000008, "Wrong alignment on BP_VDoor_C_ExecuteUbergraph_BP_VDoor");
static_assert(sizeof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor) == 0x000028, "Wrong size on BP_VDoor_C_ExecuteUbergraph_BP_VDoor");
static_assert(offsetof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor, EntryPoint) == 0x000000, "Member 'BP_VDoor_C_ExecuteUbergraph_BP_VDoor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor, K2Node_CustomEvent_1_2_sec) == 0x000008, "Member 'BP_VDoor_C_ExecuteUbergraph_BP_VDoor::K2Node_CustomEvent_1_2_sec' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor, K2Node_CustomEvent_Second_1_2_sec) == 0x000010, "Member 'BP_VDoor_C_ExecuteUbergraph_BP_VDoor::K2Node_CustomEvent_Second_1_2_sec' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor, CallFunc_Update_Timeline_1_2_sec_ImplicitCast) == 0x000018, "Member 'BP_VDoor_C_ExecuteUbergraph_BP_VDoor::CallFunc_Update_Timeline_1_2_sec_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_ExecuteUbergraph_BP_VDoor, CallFunc_Update_Timeline_Second_1_2_sec_ImplicitCast) == 0x000020, "Member 'BP_VDoor_C_ExecuteUbergraph_BP_VDoor::CallFunc_Update_Timeline_Second_1_2_sec_ImplicitCast' has a wrong offset!");

// Function BP_VDoor.BP_VDoor_C.Update Timeline
// 0x0010 (0x0010 - 0x0000)
struct BP_VDoor_C_Update_Timeline final
{
public:
	double                                        Two_sec;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Two_sec_0;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VDoor_C_Update_Timeline) == 0x000008, "Wrong alignment on BP_VDoor_C_Update_Timeline");
static_assert(sizeof(BP_VDoor_C_Update_Timeline) == 0x000010, "Wrong size on BP_VDoor_C_Update_Timeline");
static_assert(offsetof(BP_VDoor_C_Update_Timeline, Two_sec) == 0x000000, "Member 'BP_VDoor_C_Update_Timeline::Two_sec' has a wrong offset!");
static_assert(offsetof(BP_VDoor_C_Update_Timeline, Two_sec_0) == 0x000008, "Member 'BP_VDoor_C_Update_Timeline::Two_sec_0' has a wrong offset!");

// Function BP_VDoor.BP_VDoor_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BP_VDoor_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VDoor_C_UserConstructionScript) == 0x000001, "Wrong alignment on BP_VDoor_C_UserConstructionScript");
static_assert(sizeof(BP_VDoor_C_UserConstructionScript) == 0x000001, "Wrong size on BP_VDoor_C_UserConstructionScript");
static_assert(offsetof(BP_VDoor_C_UserConstructionScript, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000000, "Member 'BP_VDoor_C_UserConstructionScript::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function BP_VDoor.BP_VDoor_C.IsDoorToExitSewers
// 0x0001 (0x0001 - 0x0000)
struct BP_VDoor_C_IsDoorToExitSewers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VDoor_C_IsDoorToExitSewers) == 0x000001, "Wrong alignment on BP_VDoor_C_IsDoorToExitSewers");
static_assert(sizeof(BP_VDoor_C_IsDoorToExitSewers) == 0x000001, "Wrong size on BP_VDoor_C_IsDoorToExitSewers");
static_assert(offsetof(BP_VDoor_C_IsDoorToExitSewers, ReturnValue) == 0x000000, "Member 'BP_VDoor_C_IsDoorToExitSewers::ReturnValue' has a wrong offset!");

}

