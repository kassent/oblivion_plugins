#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AltarQMP

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "QMPUnrealIntegration_classes.hpp"


namespace SDK
{

// Class AltarQMP.AltarKeyInputReplayEditorLibrary
// 0x0000 (0x0028 - 0x0028)
class UAltarKeyInputReplayEditorLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UInputRecordSave* LoadAltarRecordData(const class FString& SegmentName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AltarKeyInputReplayEditorLibrary">();
	}
	static class UAltarKeyInputReplayEditorLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAltarKeyInputReplayEditorLibrary>();
	}
};
static_assert(alignof(UAltarKeyInputReplayEditorLibrary) == 0x000008, "Wrong alignment on UAltarKeyInputReplayEditorLibrary");
static_assert(sizeof(UAltarKeyInputReplayEditorLibrary) == 0x000028, "Wrong size on UAltarKeyInputReplayEditorLibrary");

// Class AltarQMP.AltarInputRecordSave
// 0x0018 (0x00A8 - 0x0090)
class UAltarInputRecordSave final : public UInputRecordSave
{
public:
	float                                         CameraVerticalSensitivity;                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraHorizontalSensitivity;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCameraSensitivity;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFocusCameraSensitivity;                         // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStartInRunning;                             // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AltarInputRecordSave">();
	}
	static class UAltarInputRecordSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAltarInputRecordSave>();
	}
};
static_assert(alignof(UAltarInputRecordSave) == 0x000008, "Wrong alignment on UAltarInputRecordSave");
static_assert(sizeof(UAltarInputRecordSave) == 0x0000A8, "Wrong size on UAltarInputRecordSave");
static_assert(offsetof(UAltarInputRecordSave, CameraVerticalSensitivity) == 0x000090, "Member 'UAltarInputRecordSave::CameraVerticalSensitivity' has a wrong offset!");
static_assert(offsetof(UAltarInputRecordSave, CameraHorizontalSensitivity) == 0x000094, "Member 'UAltarInputRecordSave::CameraHorizontalSensitivity' has a wrong offset!");
static_assert(offsetof(UAltarInputRecordSave, AimCameraSensitivity) == 0x000098, "Member 'UAltarInputRecordSave::AimCameraSensitivity' has a wrong offset!");
static_assert(offsetof(UAltarInputRecordSave, AimFocusCameraSensitivity) == 0x00009C, "Member 'UAltarInputRecordSave::AimFocusCameraSensitivity' has a wrong offset!");
static_assert(offsetof(UAltarInputRecordSave, bShouldStartInRunning) == 0x0000A0, "Member 'UAltarInputRecordSave::bShouldStartInRunning' has a wrong offset!");

// Class AltarQMP.AltarQMPAIController
// 0x0000 (0x03C0 - 0x03C0)
class AAltarQMPAIController final : public AQMPAIController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AltarQMPAIController">();
	}
	static class AAltarQMPAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAltarQMPAIController>();
	}
};
static_assert(alignof(AAltarQMPAIController) == 0x000008, "Wrong alignment on AAltarQMPAIController");
static_assert(sizeof(AAltarQMPAIController) == 0x0003C0, "Wrong size on AAltarQMPAIController");

// Class AltarQMP.AltarSpecificQMPGameInstance
// 0x0038 (0x0158 - 0x0120)
class UAltarSpecificQMPGameInstance final : public UQMPGameInstance
{
public:
	uint8                                         Pad_120[0x38];                                     // 0x0120(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAsyncSaveComplete_Delegate(const class UVAltarSaveGame* SaveGame);
	void OnSaveSlotLoaded_Delegate(class USaveGame* GenericSave, const class FString& SlotName);
	void OnUIFocusChange(const struct FGameplayTag& TopMostLayer, class UCommonActivatableWidget* TopMostWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AltarSpecificQMPGameInstance">();
	}
	static class UAltarSpecificQMPGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAltarSpecificQMPGameInstance>();
	}
};
static_assert(alignof(UAltarSpecificQMPGameInstance) == 0x000008, "Wrong alignment on UAltarSpecificQMPGameInstance");
static_assert(sizeof(UAltarSpecificQMPGameInstance) == 0x000158, "Wrong size on UAltarSpecificQMPGameInstance");

// Class AltarQMP.AltarSpecificQMPUtils
// 0x0020 (0x0050 - 0x0030)
class UAltarSpecificQMPUtils final : public USpecificClassUtils
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         KilledID;                                          // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AltarSpecificQMPUtils">();
	}
	static class UAltarSpecificQMPUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAltarSpecificQMPUtils>();
	}
};
static_assert(alignof(UAltarSpecificQMPUtils) == 0x000008, "Wrong alignment on UAltarSpecificQMPUtils");
static_assert(sizeof(UAltarSpecificQMPUtils) == 0x000050, "Wrong size on UAltarSpecificQMPUtils");
static_assert(offsetof(UAltarSpecificQMPUtils, KilledID) == 0x000040, "Member 'UAltarSpecificQMPUtils::KilledID' has a wrong offset!");

}

