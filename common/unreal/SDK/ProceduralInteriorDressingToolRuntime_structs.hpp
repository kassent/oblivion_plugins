#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProceduralInteriorDressingToolRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum ProceduralInteriorDressingToolRuntime.EProceduralInstanceType
// NumValues: 0x0007
enum class EProceduralInstanceType : uint8
{
	EProceduralInstanceType_InstancedMesh    = 0,
	EProceduralInstanceType_StaticMeshActor  = 1,
	EProceduralInstanceType_ActorClass       = 2,
	EProceduralInstanceType_Decal            = 3,
	EProceduralInstanceType_Level            = 4,
	EProceduralInstanceType_Light            = 5,
	EProceduralInstanceType_MAX              = 6,
};

// ScriptStruct ProceduralInteriorDressingToolRuntime.InstancerKeys
// 0x0010 (0x0010 - 0x0000)
struct FInstancerKeys final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstancerKeys) == 0x000008, "Wrong alignment on FInstancerKeys");
static_assert(sizeof(FInstancerKeys) == 0x000010, "Wrong size on FInstancerKeys");
static_assert(offsetof(FInstancerKeys, StaticMesh) == 0x000000, "Member 'FInstancerKeys::StaticMesh' has a wrong offset!");
static_assert(offsetof(FInstancerKeys, Material) == 0x000008, "Member 'FInstancerKeys::Material' has a wrong offset!");

// ScriptStruct ProceduralInteriorDressingToolRuntime.ProceduralInstance
// 0x02B0 (0x02B0 - 0x0000)
struct FProceduralInstance final
{
public:
	class UActorComponent*                        Spawner;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ProceduralGuid;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnIndex;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProceduralInstanceType                       InstanceType;                                      // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  LevelInstance;                                     // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ALight>                     LightClass;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelectable;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          BodyInstance;                                      // 0x00F8(0x0190)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHasCustomNavigableGeometry                   CustomNavigableGeometry;                           // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowObjectOnTop;                                 // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InstanceActor;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          Instancer;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceIndex;                                     // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0xC];                                      // 0x02A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProceduralInstance) == 0x000010, "Wrong alignment on FProceduralInstance");
static_assert(sizeof(FProceduralInstance) == 0x0002B0, "Wrong size on FProceduralInstance");
static_assert(offsetof(FProceduralInstance, Spawner) == 0x000000, "Member 'FProceduralInstance::Spawner' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, ProceduralGuid) == 0x000008, "Member 'FProceduralInstance::ProceduralGuid' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, Transform) == 0x000020, "Member 'FProceduralInstance::Transform' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, SpawnIndex) == 0x000080, "Member 'FProceduralInstance::SpawnIndex' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, InstanceType) == 0x000084, "Member 'FProceduralInstance::InstanceType' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, StaticMesh) == 0x000088, "Member 'FProceduralInstance::StaticMesh' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, OverrideMaterial) == 0x000090, "Member 'FProceduralInstance::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, ActorClass) == 0x000098, "Member 'FProceduralInstance::ActorClass' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, DecalMaterial) == 0x0000A0, "Member 'FProceduralInstance::DecalMaterial' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, LevelInstance) == 0x0000A8, "Member 'FProceduralInstance::LevelInstance' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, LightClass) == 0x0000D0, "Member 'FProceduralInstance::LightClass' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, Intensity) == 0x0000D8, "Member 'FProceduralInstance::Intensity' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, Color) == 0x0000DC, "Member 'FProceduralInstance::Color' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, AttenuationRadius) == 0x0000EC, "Member 'FProceduralInstance::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, bIsSelectable) == 0x0000F0, "Member 'FProceduralInstance::bIsSelectable' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, BodyInstance) == 0x0000F8, "Member 'FProceduralInstance::BodyInstance' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, CustomNavigableGeometry) == 0x000288, "Member 'FProceduralInstance::CustomNavigableGeometry' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, bAllowObjectOnTop) == 0x000289, "Member 'FProceduralInstance::bAllowObjectOnTop' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, InstanceActor) == 0x000290, "Member 'FProceduralInstance::InstanceActor' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, Instancer) == 0x000298, "Member 'FProceduralInstance::Instancer' has a wrong offset!");
static_assert(offsetof(FProceduralInstance, InstanceIndex) == 0x0002A0, "Member 'FProceduralInstance::InstanceIndex' has a wrong offset!");

// ScriptStruct ProceduralInteriorDressingToolRuntime.SpawnedInstanceArray
// 0x0010 (0x0010 - 0x0000)
struct FSpawnedInstanceArray final
{
public:
	TArray<struct FProceduralInstance>            Instances;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnedInstanceArray) == 0x000008, "Wrong alignment on FSpawnedInstanceArray");
static_assert(sizeof(FSpawnedInstanceArray) == 0x000010, "Wrong size on FSpawnedInstanceArray");
static_assert(offsetof(FSpawnedInstanceArray, Instances) == 0x000000, "Member 'FSpawnedInstanceArray::Instances' has a wrong offset!");

}

