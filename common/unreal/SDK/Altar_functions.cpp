#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Altar

#include "Basic.hpp"

#include "Altar_classes.hpp"
#include "Altar_parameters.hpp"


namespace SDK
{

// Function Altar.VLayerCharacterAnimInstance.GetMainAnimInstance
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVMainCharacterAnimInstance*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVMainCharacterAnimInstance* UVLayerCharacterAnimInstance::GetMainAnimInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "GetMainAnimInstance");

	Params::VLayerCharacterAnimInstance_GetMainAnimInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLayerCharacterAnimInstance.GetMontageFromArrayWithGivenIndexIfValid
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GameplayArrayIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UAnimMontage*>&      MontageArray                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UVLayerCharacterAnimInstance::GetMontageFromArrayWithGivenIndexIfValid(int32 GameplayArrayIndex, const TArray<class UAnimMontage*>& MontageArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "GetMontageFromArrayWithGivenIndexIfValid");

	Params::VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid Parms{};

	Parms.GameplayArrayIndex = GameplayArrayIndex;
	Parms.MontageArray = std::move(MontageArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLayerCharacterAnimInstance.GetSequenceFromArrayWithGivenIndexIfValid
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GameplayArrayIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UAnimSequenceBase*>& ActionAnim                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequenceBase* UVLayerCharacterAnimInstance::GetSequenceFromArrayWithGivenIndexIfValid(int32 GameplayArrayIndex, const TArray<class UAnimSequenceBase*>& ActionAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "GetSequenceFromArrayWithGivenIndexIfValid");

	Params::VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid Parms{};

	Parms.GameplayArrayIndex = GameplayArrayIndex;
	Parms.ActionAnim = std::move(ActionAnim);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLayerCharacterAnimInstance.ScheduledPlayMontage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     MontageToPlay                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMontagePlayReturnType                  ReturnValueType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopAllMontages                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLayerCharacterAnimInstance::ScheduledPlayMontage(class UAnimMontage* MontageToPlay, float InPlayRate, class UAnimInstance* AnimInstance, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "ScheduledPlayMontage");

	Params::VLayerCharacterAnimInstance_ScheduledPlayMontage Parms{};

	Parms.MontageToPlay = MontageToPlay;
	Parms.InPlayRate = InPlayRate;
	Parms.AnimInstance = AnimInstance;
	Parms.ReturnValueType = ReturnValueType;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;
	Parms.bStopAllMontages = bStopAllMontages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLayerCharacterAnimInstance.UpdateActionData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ActionTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAnimSequenceBase*          ActionAnim                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLayerCharacterAnimInstance::UpdateActionData(const struct FGameplayTag& ActionTag, const class UAnimSequenceBase* ActionAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "UpdateActionData");

	Params::VLayerCharacterAnimInstance_UpdateActionData Parms{};

	Parms.ActionTag = std::move(ActionTag);
	Parms.ActionAnim = ActionAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLayerCharacterAnimInstance.UpdateActionDataFromArray
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ActionTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UAnimSequenceBase*>& ActionAnims                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLayerCharacterAnimInstance::UpdateActionDataFromArray(const struct FGameplayTag& ActionTag, const TArray<class UAnimSequenceBase*>& ActionAnims)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "UpdateActionDataFromArray");

	Params::VLayerCharacterAnimInstance_UpdateActionDataFromArray Parms{};

	Parms.ActionTag = std::move(ActionTag);
	Parms.ActionAnims = std::move(ActionAnims);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLayerCharacterAnimInstance.IsInCombat
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLayerCharacterAnimInstance::IsInCombat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLayerCharacterAnimInstance", "IsInCombat");

	Params::VLayerCharacterAnimInstance_IsInCombat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidLowerAndUpperCharacterAnimInstance.IsSneaking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidLowerAndUpperCharacterAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidLowerAndUpperCharacterAnimInstance", "IsSneaking");

	Params::VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidLowerAndUpperCharacterAnimInstance.IsSwimming
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidLowerAndUpperCharacterAnimInstance::IsSwimming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidLowerAndUpperCharacterAnimInstance", "IsSwimming");

	Params::VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidLowerAndUpperCharacterAnimInstance.IsUsingBow
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidLowerAndUpperCharacterAnimInstance::IsUsingBow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidLowerAndUpperCharacterAnimInstance", "IsUsingBow");

	Params::VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActor.BindVariantUpdates
// (Native, Event, Public, BlueprintEvent)

void AVActor::BindVariantUpdates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActor", "BindVariantUpdates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActor.OnActivateAnimation
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVActor::OnActivateAnimation(const class FString& AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActor", "OnActivateAnimation");

	Params::VActor_OnActivateAnimation Parms{};

	Parms.AnimationName = std::move(AnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActor.OnResetAnimation
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FramePosRatio                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _bIsDestroyed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVActor::OnResetAnimation(const class FString& AnimationName, float FramePosRatio, bool _bIsDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActor", "OnResetAnimation");

	Params::VActor_OnResetAnimation Parms{};

	Parms.AnimationName = std::move(AnimationName);
	Parms.FramePosRatio = FramePosRatio;
	Parms._bIsDestroyed = _bIsDestroyed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActor.GetDroppedItemSexVariant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterSex                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterSex AVActor::GetDroppedItemSexVariant() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActor", "GetDroppedItemSexVariant");

	Params::VActor_GetDroppedItemSexVariant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActor.GetItemStackCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AVActor::GetItemStackCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActor", "GetItemStackCount");

	Params::VActor_GetItemStackCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActor.GetVariantReferenceCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVPairedCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPairedCharacter* AVActor::GetVariantReferenceCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActor", "GetVariantReferenceCharacter");

	Params::VActor_GetVariantReferenceCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormTypeFromFormString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   formString                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFormID                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFormID UTESForm::GetFormTypeFromFormString(int64 formString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TESForm", "GetFormTypeFromFormString");

	Params::TESForm_GetFormTypeFromFormString Parms{};

	Parms.formString = formString;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UTESForm::GetComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetComponent");

	Params::TESForm_GetComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetDelete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESForm::GetDelete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetDelete");

	Params::TESForm_GetDelete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetEquipableBlueprintClass
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UTESForm::GetEquipableBlueprintClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetEquipableBlueprintClass");

	Params::TESForm_GetEquipableBlueprintClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormDetailedString
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTESForm::GetFormDetailedString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetFormDetailedString");

	Params::TESForm_GetFormDetailedString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.UpdateBlueprintClassesPostEdit
// (Final, Native, Public, BlueprintCallable)

void UTESForm::UpdateBlueprintClassesPostEdit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "UpdateBlueprintClassesPostEdit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TESForm.CanFormBeUsedAsPropItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESForm::CanFormBeUsedAsPropItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "CanFormBeUsedAsPropItem");

	Params::TESForm_CanFormBeUsedAsPropItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetBPFormID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UTESForm::GetBPFormID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetBPFormID");

	Params::TESForm_GetBPFormID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormEditorID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTESForm::GetFormEditorID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetFormEditorID");

	Params::TESForm_GetFormEditorID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UTESForm::GetFormFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetFormFlags");

	Params::TESForm_GetFormFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFormID                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFormID UTESForm::GetFormType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetFormType");

	Params::TESForm_GetFormType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormTypeString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTESForm::GetFormTypeString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetFormTypeString");

	Params::TESForm_GetFormTypeString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetFormTypeStringFromFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTESForm::GetFormTypeStringFromFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetFormTypeStringFromFlags");

	Params::TESForm_GetFormTypeStringFromFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetHexFormID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTESForm::GetHexFormID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetHexFormID");

	Params::TESForm_GetHexFormID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetMaster
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESForm::GetMaster() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetMaster");

	Params::TESForm_GetMaster Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESForm.GetTemporary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESForm::GetTemporary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESForm", "GetTemporary");

	Params::TESForm_GetTemporary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActivable.OnActivableSimulationStart
// (Event, Public, BlueprintEvent)

void AVActivable::OnActivableSimulationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActivable", "OnActivableSimulationStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VActivable.OnActivableSimulationStop
// (Event, Public, BlueprintEvent)

void AVActivable::OnActivableSimulationStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActivable", "OnActivableSimulationStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VActivable.TriggerActivateForPhysics
// (Final, Native, Public, BlueprintCallable)

void AVActivable::TriggerActivateForPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActivable", "TriggerActivateForPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModularBodyPartBase.GetModularBodyPartClassFromSlot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AVModularBodyPartBase>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AVModularBodyPartBase> AVModularBodyPartBase::GetModularBodyPartClassFromSlot(EBipedModularBodySlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModularBodyPartBase", "GetModularBodyPartClassFromSlot");

	Params::VModularBodyPartBase_GetModularBodyPartClassFromSlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModularBodyPartBase.OnAttachedInFirstPerson
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AVModularBodyPartBase::OnAttachedInFirstPerson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModularBodyPartBase", "OnAttachedInFirstPerson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModularBodyPartBase.OnAttachedToPhenotype
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVCharacterPhenotypeData*         PhenotypeData                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTESRace*                         CharacterRace                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterSex                           CharacterSex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVModularBodyPartBase::OnAttachedToPhenotype(class UVCharacterPhenotypeData* PhenotypeData, class UTESRace* CharacterRace, ECharacterSex CharacterSex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModularBodyPartBase", "OnAttachedToPhenotype");

	Params::VModularBodyPartBase_OnAttachedToPhenotype Parms{};

	Parms.PhenotypeData = PhenotypeData;
	Parms.CharacterRace = CharacterRace;
	Parms.CharacterSex = CharacterSex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModularBodyPartBase.OnAttachToLeaderComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           MasterComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVModularBodyPartBase::OnAttachToLeaderComponent(class USkeletalMeshComponent* MasterComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModularBodyPartBase", "OnAttachToLeaderComponent");

	Params::VModularBodyPartBase_OnAttachToLeaderComponent Parms{};

	Parms.MasterComponent = MasterComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_FOLLOW.GetFollowDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAIProcedureExecution_FOLLOW::GetFollowDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_FOLLOW", "GetFollowDistance");

	Params::VAIProcedureExecution_FOLLOW_GetFollowDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_FOLLOW.GetTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVAIProcedureExecution_FOLLOW::GetTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_FOLLOW", "GetTargetActor");

	Params::VAIProcedureExecution_FOLLOW_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESBoundObject.GetPropBlueprintClass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UTESBoundObject::GetPropBlueprintClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESBoundObject", "GetPropBlueprintClass");

	Params::TESBoundObject_GetPropBlueprintClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEquippable.IsEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVEquippable::IsEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquippable", "IsEquipped");

	Params::VEquippable_IsEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAmmunition.BeginPlay
// (Native, Public)

void AVAmmunition::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.Collide
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVProjectilePenetrationSettings&PenetrationSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class AActor*                     TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAmmunition::Collide(const struct FHitResult& HitResult, const struct FVProjectilePenetrationSettings& PenetrationSettings, const class AActor* TargetActor, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "Collide");

	Params::VAmmunition_Collide Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.PenetrationSettings = std::move(PenetrationSettings);
	Parms.TargetActor = TargetActor;
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.Despawn
// (Final, Native, Public)

void AVAmmunition::Despawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "Despawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.OnArrowLoadedInLevel
// (Native, Event, Public, BlueprintEvent)

void AVAmmunition::OnArrowLoadedInLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "OnArrowLoadedInLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.OnBounce
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAmmunition::OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "OnBounce");

	Params::VAmmunition_OnBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.OnStaticMeshBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVAmmunition::OnStaticMeshBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "OnStaticMeshBeginOverlap");

	Params::VAmmunition_OnStaticMeshBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.OnStaticMeshEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAmmunition::OnStaticMeshEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "OnStaticMeshEndOverlap");

	Params::VAmmunition_OnStaticMeshEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.SendCollide
// (Final, Native, Public)
// Parameters:
// float                                   ArrowAgeMaxOnceCollided                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           CollidedActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAmmunition::SendCollide(float ArrowAgeMaxOnceCollided, class AActor* CollidedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "SendCollide");

	Params::VAmmunition_SendCollide Parms{};

	Parms.ArrowAgeMaxOnceCollided = ArrowAgeMaxOnceCollided;
	Parms.CollidedActor = CollidedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAmmunition.ShootAmunition
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AVPairedPawn*                     Shooter                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAmmunition::ShootAmunition(class AVPairedPawn* Shooter, const struct FVector& Direction, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmmunition", "ShootAmunition");

	Params::VAmmunition_ShootAmunition Parms{};

	Parms.Shooter = Shooter;
	Parms.Direction = std::move(Direction);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorPairingComponent.InitializeFeaturePairing
// (Final, Native, Public)

void UVActorPairingComponent::InitializeFeaturePairing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorPairingComponent", "InitializeFeaturePairing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPawnSoundPairingComponent.UnloadNonPlayingDialogues
// (Final, Native, Private)

void UVPawnSoundPairingComponent::UnloadNonPlayingDialogues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPawnSoundPairingComponent", "UnloadNonPlayingDialogues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VArmor.OnReferenceCharacterSexChanged
// (Final, Native, Public)

void AVArmor::OnReferenceCharacterSexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VArmor", "OnReferenceCharacterSexChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCloth.OnReferenceCharacterSexChanged
// (Final, Native, Public)

void AVCloth::OnReferenceCharacterSexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCloth", "OnReferenceCharacterSexChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDockingPairingComponent.GetSitSleepState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESitSleepState                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESitSleepState UVDockingPairingComponent::GetSitSleepState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDockingPairingComponent", "GetSitSleepState");

	Params::VDockingPairingComponent_GetSitSleepState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDockingPairingComponent.GetUsedDockActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVDockingPairingComponent::GetUsedDockActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDockingPairingComponent", "GetUsedDockActor");

	Params::VDockingPairingComponent_GetUsedDockActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDockingPairingComponent.HasPendingDockingTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDockingPairingComponent::HasPendingDockingTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDockingPairingComponent", "HasPendingDockingTransition");

	Params::VDockingPairingComponent_HasPendingDockingTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDockingPairingComponent.IsDocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDockingPairingComponent::IsDocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDockingPairingComponent", "IsDocked");

	Params::VDockingPairingComponent_IsDocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainer.OnContainerOpenChanged
// (Event, Public, BlueprintEvent)

void AVContainer::OnContainerOpenChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainer", "OnContainerOpenChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VContainer.OnContainerUnlockedChanged
// (Event, Public, BlueprintEvent)

void AVContainer::OnContainerUnlockedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainer", "OnContainerUnlockedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VContainer.IsContainerOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVContainer::IsContainerOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainer", "IsContainerOpen");

	Params::VContainer_IsContainerOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainer.IsContainerUnlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVContainer::IsContainerUnlocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainer", "IsContainerUnlocked");

	Params::VContainer_IsContainerUnlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelChangeData.GetLevelChangeData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UWorld*                     InWorld                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVLevelChangeData*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLevelChangeData* UVLevelChangeData::GetLevelChangeData(const class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLevelChangeData", "GetLevelChangeData");

	Params::VLevelChangeData_GetLevelChangeData Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelChangeData.AfterFadeToBlackFromMoveTo
// (Final, Native, Private)

void UVLevelChangeData::AfterFadeToBlackFromMoveTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "AfterFadeToBlackFromMoveTo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.GoToMainMenuAfterFadeToBlack
// (Final, Native, Private)

void UVLevelChangeData::GoToMainMenuAfterFadeToBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "GoToMainMenuAfterFadeToBlack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnEndOfFadeToBlackInPlace
// (Final, Native, Private)

void UVLevelChangeData::OnEndOfFadeToBlackInPlace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnEndOfFadeToBlackInPlace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackAnimationOverAttach
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToBlackAnimationOverAttach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackAnimationOverAttach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackAnimationOverSeamless
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToBlackAnimationOverSeamless()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackAnimationOverSeamless");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackBeginEventReceived
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToBlackBeginEventReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackBeginEventReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackEndEventReceived
// (Final, Native, Private)
// Parameters:
// EVFadeTransitionType                    InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLevelChangeData::OnFadeToBlackEndEventReceived(EVFadeTransitionType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackEndEventReceived");

	Params::VLevelChangeData_OnFadeToBlackEndEventReceived Parms{};

	Parms.InType = InType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackInPlace
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToBlackInPlace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackInPlace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackOverBeforeFastTravel
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToBlackOverBeforeFastTravel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackOverBeforeFastTravel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToBlackThroughDoorOver
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToBlackThroughDoorOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToBlackThroughDoorOver");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToGameAnimationOver
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToGameAnimationOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToGameAnimationOver");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToGameBeginEventReceived
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToGameBeginEventReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToGameBeginEventReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.OnFadeToGameEndEventReceived
// (Final, Native, Private)

void UVLevelChangeData::OnFadeToGameEndEventReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "OnFadeToGameEndEventReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.QuickLoadSaveAfterFadeToBlack
// (Final, Native, Private)

void UVLevelChangeData::QuickLoadSaveAfterFadeToBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "QuickLoadSaveAfterFadeToBlack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.ReloadSaveAfterFadeToBlack
// (Final, Native, Private)

void UVLevelChangeData::ReloadSaveAfterFadeToBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "ReloadSaveAfterFadeToBlack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.UpdateWeatherAudioTexture
// (Final, Native, Private)

void UVLevelChangeData::UpdateWeatherAudioTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "UpdateWeatherAudioTexture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelChangeData.CompleteShadowCacheRefresh
// (Final, Native, Public, Const)

void UVLevelChangeData::CompleteShadowCacheRefresh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelChangeData", "CompleteShadowCacheRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.OnBeginOverlapPreLoadBox
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UnusedSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                EmptyHitResult                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVDoor::OnBeginOverlapPreLoadBox(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox, bool UnusedSweep, const struct FHitResult& EmptyHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "OnBeginOverlapPreLoadBox");

	Params::VDoor_OnBeginOverlapPreLoadBox Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;
	Parms.UnusedSweep = UnusedSweep;
	Parms.EmptyHitResult = std::move(EmptyHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.OnClose
// (Native, Event, Public, BlueprintEvent)

void AVDoor::OnClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "OnClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.OnEndOverlapPreLoadBox
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVDoor::OnEndOverlapPreLoadBox(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "OnEndOverlapPreLoadBox");

	Params::VDoor_OnEndOverlapPreLoadBox Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.OnOpen
// (Native, Event, Public, BlueprintEvent)

void AVDoor::OnOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "OnOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.OnPlayerTeleportationRequested
// (Event, Public, BlueprintEvent)

void AVDoor::OnPlayerTeleportationRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "OnPlayerTeleportationRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VDoor.SetAnimationTickEnable_Delegate
// (Final, Native, Private)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVDoor::SetAnimationTickEnable_Delegate(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "SetAnimationTickEnable_Delegate");

	Params::VDoor_SetAnimationTickEnable_Delegate Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.SetClosed
// (Native, Event, Public, BlueprintEvent)

void AVDoor::SetClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "SetClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.SetDestroyed
// (Native, Event, Public, BlueprintEvent)

void AVDoor::SetDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "SetDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.SetOpened
// (Native, Event, Public, BlueprintEvent)

void AVDoor::SetOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "SetOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDoor.IsAnimated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVDoor::IsAnimated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "IsAnimated");

	Params::VDoor_IsAnimated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDoor.IsDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVDoor::IsDestroyed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "IsDestroyed");

	Params::VDoor_IsDestroyed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDoor.IsDoorToExitSewers
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVDoor::IsDoorToExitSewers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoor", "IsDoorToExitSewers");

	Params::VDoor_IsDoorToExitSewers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VFlora.OnActivated
// (Event, Public, BlueprintEvent)
// Parameters:
// class AVPairedPawn*                     ActivatorPawn                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccessfullyPicked                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVFlora::OnActivated(class AVPairedPawn* ActivatorPawn, bool bSuccessfullyPicked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFlora", "OnActivated");

	Params::VFlora_OnActivated Parms{};

	Parms.ActivatorPawn = ActivatorPawn;
	Parms.bSuccessfullyPicked = bSuccessfullyPicked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VFlora.OnEmptyFlagChanged
// (Event, Protected, BlueprintEvent)

void AVFlora::OnEmptyFlagChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFlora", "OnEmptyFlagChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VFlora.CanBePicked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVFlora::CanBePicked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFlora", "CanBePicked");

	Params::VFlora_CanBePicked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnEnterStartState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEnhancedLocomotionSystemCharacterAnimInstance::OnEnterStartState(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedLocomotionSystemCharacterAnimInstance", "OnEnterStartState");

	Params::VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnLeftStartState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEnhancedLocomotionSystemCharacterAnimInstance::OnLeftStartState(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedLocomotionSystemCharacterAnimInstance", "OnLeftStartState");

	Params::VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnStandSneakTransitionFinished
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEnhancedLocomotionSystemCharacterAnimInstance::OnStandSneakTransitionFinished(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedLocomotionSystemCharacterAnimInstance", "OnStandSneakTransitionFinished");

	Params::VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnStandSneakTransitionUpdate
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEnhancedLocomotionSystemCharacterAnimInstance::OnStandSneakTransitionUpdate(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedLocomotionSystemCharacterAnimInstance", "OnStandSneakTransitionUpdate");

	Params::VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFurniture.ShouldUseLowLyingAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVFurniture::ShouldUseLowLyingAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFurniture", "ShouldUseLowLyingAnimation");

	Params::VFurniture_ShouldUseLowLyingAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarWidget.ForceSynchronizeProperties
// (Final, Native, Private, BlueprintCallable)

void UVAltarWidget::ForceSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarWidget", "ForceSynchronizeProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarWidget.OnSynchronizeProperties
// (Event, Public, BlueprintEvent)

void UVAltarWidget::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarWidget", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernRebindSettingWidget.ChangeErrorState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bErrorState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::ChangeErrorState(bool bErrorState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "ChangeErrorState");

	Params::VModernRebindSettingWidget_ChangeErrorState Parms{};

	Parms.bErrorState = bErrorState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernRebindSettingWidget.Deinitialize
// (Final, Native, Public, BlueprintCallable)

void UVModernRebindSettingWidget::Deinitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "Deinitialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.GetAllSelector
// (Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UVAltarNavigableInputKeySelector*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UVAltarNavigableInputKeySelector*> UVModernRebindSettingWidget::GetAllSelector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "GetAllSelector");

	Params::VModernRebindSettingWidget_GetAllSelector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernRebindSettingWidget.Init
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernRebindSettingTableRow&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::Init(const struct FModernRebindSettingTableRow& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "Init");

	Params::VModernRebindSettingWidget_Init Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.OnRefreshWidgetRequested
// (Final, Native, Public)

void UVModernRebindSettingWidget::OnRefreshWidgetRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "OnRefreshWidgetRequested");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.OnSelectorFocussed
// (Final, Native, Protected)
// Parameters:
// class UVNavigableInputKeySelector*      FocussedSelector                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SelectorIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::OnSelectorFocussed(class UVNavigableInputKeySelector* FocussedSelector, int32 SelectorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "OnSelectorFocussed");

	Params::VModernRebindSettingWidget_OnSelectorFocussed Parms{};

	Parms.FocussedSelector = FocussedSelector;
	Parms.SelectorIndex = SelectorIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.OnSelectorListenStateChanged
// (Final, Native, Protected)
// Parameters:
// class UVNavigableInputKeySelector*      Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::OnSelectorListenStateChanged(class UVNavigableInputKeySelector* Target, bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "OnSelectorListenStateChanged");

	Params::VModernRebindSettingWidget_OnSelectorListenStateChanged Parms{};

	Parms.Target = Target;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.OnUpdateWidgetBinding
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FKey&                      NewPrimaryKeyboard                                     (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      NewSecondaryKeyboard                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      NewPrimaryGamepad                                      (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::OnUpdateWidgetBinding(const struct FKey& NewPrimaryKeyboard, const struct FKey& NewSecondaryKeyboard, const struct FKey& NewPrimaryGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "OnUpdateWidgetBinding");

	Params::VModernRebindSettingWidget_OnUpdateWidgetBinding Parms{};

	Parms.NewPrimaryKeyboard = std::move(NewPrimaryKeyboard);
	Parms.NewSecondaryKeyboard = std::move(NewSecondaryKeyboard);
	Parms.NewPrimaryGamepad = std::move(NewPrimaryGamepad);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.RevertBindingSavedState
// (Final, Native, Public, BlueprintCallable)

void UVModernRebindSettingWidget::RevertBindingSavedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "RevertBindingSavedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.RevertBindingToDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSpreadChange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::RevertBindingToDefault(bool bSpreadChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "RevertBindingToDefault");

	Params::VModernRebindSettingWidget_RevertBindingToDefault Parms{};

	Parms.bSpreadChange = bSpreadChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.SaveRebind
// (Final, Native, Public, BlueprintCallable)

void UVModernRebindSettingWidget::SaveRebind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "SaveRebind");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.SetCurrentWidgetIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::SetCurrentWidgetIndex(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "SetCurrentWidgetIndex");

	Params::VModernRebindSettingWidget_SetCurrentWidgetIndex Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.SetNavigationIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::SetNavigationIndex(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "SetNavigationIndex");

	Params::VModernRebindSettingWidget_SetNavigationIndex Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.SetRebindData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernRebindSettingTableRow&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernRebindSettingWidget::SetRebindData(const struct FModernRebindSettingTableRow& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "SetRebindData");

	Params::VModernRebindSettingWidget_SetRebindData Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernRebindSettingWidget.DoesHaveAEmptyPrimaryBinding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernRebindSettingWidget::DoesHaveAEmptyPrimaryBinding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "DoesHaveAEmptyPrimaryBinding");

	Params::VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernRebindSettingWidget.GetCurrentWidgetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernRebindSettingWidget::GetCurrentWidgetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "GetCurrentWidgetIndex");

	Params::VModernRebindSettingWidget_GetCurrentWidgetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernRebindSettingWidget.GetNavigationIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernRebindSettingWidget::GetNavigationIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "GetNavigationIndex");

	Params::VModernRebindSettingWidget_GetNavigationIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernRebindSettingWidget.GetRebindData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernRebindSettingTableRowReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernRebindSettingTableRow UVModernRebindSettingWidget::GetRebindData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernRebindSettingWidget", "GetRebindData");

	Params::VModernRebindSettingWidget_GetRebindData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLeveledCreature.GetNameOptions
// (Final, Native, Private, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AVLeveledCreature::GetNameOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLeveledCreature", "GetNameOptions");

	Params::VLeveledCreature_GetNameOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPrimaryGameLayout.ResumeInputForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SuspendToken                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPrimaryGameLayout::ResumeInputForPlayer(class APlayerController* PlayerController, class FName SuspendToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPrimaryGameLayout", "ResumeInputForPlayer");

	Params::VPrimaryGameLayout_ResumeInputForPlayer Parms{};

	Parms.PlayerController = PlayerController;
	Parms.SuspendToken = SuspendToken;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPrimaryGameLayout.SuspendInputForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SuspendReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVPrimaryGameLayout::SuspendInputForPlayer(class APlayerController* PlayerController, class FName SuspendReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPrimaryGameLayout", "SuspendInputForPlayer");

	Params::VPrimaryGameLayout_SuspendInputForPlayer Parms{};

	Parms.PlayerController = PlayerController;
	Parms.SuspendReason = SuspendReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPrimaryGameLayout.EndLayersRegistration
// (Final, Native, Protected, BlueprintCallable)

void UVPrimaryGameLayout::EndLayersRegistration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPrimaryGameLayout", "EndLayersRegistration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPrimaryGameLayout.RegisterLayer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              LayerTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActivatableWidgetStack*         LayerWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPrimaryGameLayout::RegisterLayer(const struct FGameplayTag& LayerTag, class UVActivatableWidgetStack* LayerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPrimaryGameLayout", "RegisterLayer");

	Params::VPrimaryGameLayout_RegisterLayer Parms{};

	Parms.LayerTag = std::move(LayerTag);
	Parms.LayerWidget = LayerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPrimaryGameLayout.SetInputMode
// (Final, Native, Public, BlueprintCallable)

void UVPrimaryGameLayout::SetInputMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPrimaryGameLayout", "SetInputMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPrimaryGameLayout.GetBackgroundWidget
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UVBackgroundWidgetBase*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVBackgroundWidgetBase* UVPrimaryGameLayout::GetBackgroundWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPrimaryGameLayout", "GetBackgroundWidget");

	Params::VPrimaryGameLayout_GetBackgroundWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VPrimaryGameLayout.IsLayerActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              LayerTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPrimaryGameLayout::IsLayerActive(const struct FGameplayTag& LayerTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPrimaryGameLayout", "IsLayerActive");

	Params::VPrimaryGameLayout_IsLayerActive Parms{};

	Parms.LayerTag = std::move(LayerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicSpellVFX.SendVFXEndSignal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Blueprint                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVMagicSpellVFX::SendVFXEndSignal(class AActor* Blueprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VMagicSpellVFX", "SendVFXEndSignal");

	Params::VMagicSpellVFX_SendVFXEndSignal Parms{};

	Parms.Blueprint = Blueprint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicSpellVFX.OnSpellProjectileBounce
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVMagicSpellVFX::OnSpellProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicSpellVFX", "OnSpellProjectileBounce");

	Params::VMagicSpellVFX_OnSpellProjectileBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_ACTIVATE.OnSpecialIdleEnded
// (Final, Native, Private)

void UVAIProcedureExecution_ACTIVATE::OnSpecialIdleEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_ACTIVATE", "OnSpecialIdleEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_ACTIVATE.GetActivationRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAIProcedureExecution_ACTIVATE::GetActivationRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_ACTIVATE", "GetActivationRadius");

	Params::VAIProcedureExecution_ACTIVATE_GetActivationRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_ACTIVATE.GetTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVAIProcedureExecution_ACTIVATE::GetTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_ACTIVATE", "GetTargetActor");

	Params::VAIProcedureExecution_ACTIVATE_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarAnimationFunctionLibrary.DoesBlendspaceHaveAnimationForBlendValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBlendSpace*                      BlendspaceAsset                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BlendValues                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAltarAnimationFunctionLibrary::DoesBlendspaceHaveAnimationForBlendValue(class UBlendSpace* BlendspaceAsset, const struct FVector& BlendValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AltarAnimationFunctionLibrary", "DoesBlendspaceHaveAnimationForBlendValue");

	Params::AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue Parms{};

	Parms.BlendspaceAsset = BlendspaceAsset;
	Parms.BlendValues = std::move(BlendValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarAnimationFunctionLibrary.GetMostRelevantAnimationForBlendspaceBlendValues
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBlendSpace*                      BlendspaceAsset                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BlendValues                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequence* UAltarAnimationFunctionLibrary::GetMostRelevantAnimationForBlendspaceBlendValues(class UBlendSpace* BlendspaceAsset, const struct FVector& BlendValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AltarAnimationFunctionLibrary", "GetMostRelevantAnimationForBlendspaceBlendValues");

	Params::AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues Parms{};

	Parms.BlendspaceAsset = BlendspaceAsset;
	Parms.BlendValues = std::move(BlendValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetPawnMeleeHitboxFromBase
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   AimingStartPoint                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   StartPointOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   AimingDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReachMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBox&                      LocalSpaceBaseHitbox                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitboxCenter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitboxHalfExtent                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat*                           OutHitboxQuat                                          (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::GetPawnMeleeHitboxFromBase(const struct FVector& AimingStartPoint, float CapsuleRadius, const struct FVector& StartPointOffset, const struct FVector& AimingDirection, float ReachMultiplier, const struct FBox& LocalSpaceBaseHitbox, struct FVector* OutHitboxCenter, struct FVector* OutHitboxHalfExtent, struct FQuat* OutHitboxQuat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPairedPawn", "GetPawnMeleeHitboxFromBase");

	Params::VPairedPawn_GetPawnMeleeHitboxFromBase Parms{};

	Parms.AimingStartPoint = std::move(AimingStartPoint);
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.StartPointOffset = std::move(StartPointOffset);
	Parms.AimingDirection = std::move(AimingDirection);
	Parms.ReachMultiplier = ReachMultiplier;
	Parms.LocalSpaceBaseHitbox = std::move(LocalSpaceBaseHitbox);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitboxCenter != nullptr)
		*OutHitboxCenter = std::move(Parms.OutHitboxCenter);

	if (OutHitboxHalfExtent != nullptr)
		*OutHitboxHalfExtent = std::move(Parms.OutHitboxHalfExtent);

	if (OutHitboxQuat != nullptr)
		*OutHitboxQuat = std::move(Parms.OutHitboxQuat);
}


// Function Altar.VPairedPawn.ActivateFatigueFreeze
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::ActivateFatigueFreeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ActivateFatigueFreeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ActivatePerceptionDebugMode
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::ActivatePerceptionDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ActivatePerceptionDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.AddBufferedInputTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              TagToAdd                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::AddBufferedInputTag(const struct FGameplayTag& TagToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "AddBufferedInputTag");

	Params::VPairedPawn_AddBufferedInputTag Parms{};

	Parms.TagToAdd = std::move(TagToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.AddBufferedInputTagWithCustomTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              TagToAdd                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CustomBufferTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::AddBufferedInputTagWithCustomTime(const struct FGameplayTag& TagToAdd, float CustomBufferTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "AddBufferedInputTagWithCustomTime");

	Params::VPairedPawn_AddBufferedInputTagWithCustomTime Parms{};

	Parms.TagToAdd = std::move(TagToAdd);
	Parms.CustomBufferTime = CustomBufferTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.AddGameplayTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              TagToAdd                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::AddGameplayTag(const struct FGameplayTag& TagToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "AddGameplayTag");

	Params::VPairedPawn_AddGameplayTag Parms{};

	Parms.TagToAdd = std::move(TagToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.AddGameplayTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     GameplayTagsToAdd                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AVPairedPawn::AddGameplayTags(const struct FGameplayTagContainer& GameplayTagsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "AddGameplayTags");

	Params::VPairedPawn_AddGameplayTags Parms{};

	Parms.GameplayTagsToAdd = std::move(GameplayTagsToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ApplyAndSaveConstraintProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       ProfileName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::ApplyAndSaveConstraintProfile(const class FName ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ApplyAndSaveConstraintProfile");

	Params::VPairedPawn_ApplyAndSaveConstraintProfile Parms{};

	Parms.ProfileName = ProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.CancelAnimatedAction
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::CancelAnimatedAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "CancelAnimatedAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ConsumeDodgeFatigueCost
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::ConsumeDodgeFatigueCost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ConsumeDodgeFatigueCost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ConsumeKnockdownRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FVPawnKnockdownRequest*          LatestRequestData                                      (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void AVPairedPawn::ConsumeKnockdownRequest(struct FVPawnKnockdownRequest* LatestRequestData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ConsumeKnockdownRequest");

	Params::VPairedPawn_ConsumeKnockdownRequest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LatestRequestData != nullptr)
		*LatestRequestData = std::move(Parms.LatestRequestData);
}


// Function Altar.VPairedPawn.ConsumeMeleeAttackFatigue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPowerAttack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::ConsumeMeleeAttackFatigue(bool bIsPowerAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ConsumeMeleeAttackFatigue");

	Params::VPairedPawn_ConsumeMeleeAttackFatigue Parms{};

	Parms.bIsPowerAttack = bIsPowerAttack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ConsumeShieldBashFatigueCost
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::ConsumeShieldBashFatigueCost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ConsumeShieldBashFatigueCost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.DeactivatePerceptionDebugMode
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::DeactivatePerceptionDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "DeactivatePerceptionDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.DisableFatigueFreeze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FatigueRestorationPercentage                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::DisableFatigueFreeze(float FatigueRestorationPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "DisableFatigueFreeze");

	Params::VPairedPawn_DisableFatigueFreeze Parms{};

	Parms.FatigueRestorationPercentage = FatigueRestorationPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.DoRagdoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRagdollSetup                          Setup                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::DoRagdoll(EVRagdollSetup Setup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "DoRagdoll");

	Params::VPairedPawn_DoRagdoll Parms{};

	Parms.Setup = Setup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.GetBehaviorForTag
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActorBehaviorBase*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVActorBehaviorBase* AVPairedPawn::GetBehaviorForTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetBehaviorForTag");

	Params::VPairedPawn_GetBehaviorForTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetGroundMaterialType
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EGroundMaterialType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGroundMaterialType AVPairedPawn::GetGroundMaterialType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetGroundMaterialType");

	Params::VPairedPawn_GetGroundMaterialType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GroundMaterialTypeIsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::GroundMaterialTypeIsValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GroundMaterialTypeIsValid");

	Params::VPairedPawn_GroundMaterialTypeIsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.HideEntityDetailsWidget
// (Final, Native, Public)

void AVPairedPawn::HideEntityDetailsWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "HideEntityDetailsWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.IsValidTargetForStickyCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsValidTargetForStickyCollision(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsValidTargetForStickyCollision");

	Params::VPairedPawn_IsValidTargetForStickyCollision Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.OnActionStateEntered
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              InStateBaseTag                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnActionStateEntered(const struct FGameplayTag& InStateBaseTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnActionStateEntered");

	Params::VPairedPawn_OnActionStateEntered Parms{};

	Parms.InStateBaseTag = std::move(InStateBaseTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnActorValueChanged_Paralysis
// (Final, Native, Public)
// Parameters:
// EVActorValues                           ActorValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousBaseValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousModifiedValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewBaseValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewModifiedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnActorValueChanged_Paralysis(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnActorValueChanged_Paralysis");

	Params::VPairedPawn_OnActorValueChanged_Paralysis Parms{};

	Parms.ActorValue = ActorValue;
	Parms.PreviousBaseValue = PreviousBaseValue;
	Parms.PreviousModifiedValue = PreviousModifiedValue;
	Parms.NewBaseValue = NewBaseValue;
	Parms.NewModifiedValue = NewModifiedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnBeginOverlapWithBorder
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVPairedPawn::OnBeginOverlapWithBorder(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnBeginOverlapWithBorder");

	Params::VPairedPawn_OnBeginOverlapWithBorder Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnCapsuleHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVPairedPawn::OnCapsuleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnCapsuleHit");

	Params::VPairedPawn_OnCapsuleHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnCombatHitDealt
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPairedOblivionHitEvent&   HitEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVPairedPawn::OnCombatHitDealt(const struct FPairedOblivionHitEvent& HitEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnCombatHitDealt");

	Params::VPairedPawn_OnCombatHitDealt Parms{};

	Parms.HitEvent = std::move(HitEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnCombatHitTaken
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPairedOblivionHitEvent&   HitEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVPairedPawn::OnCombatHitTaken(const struct FPairedOblivionHitEvent& HitEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnCombatHitTaken");

	Params::VPairedPawn_OnCombatHitTaken Parms{};

	Parms.HitEvent = std::move(HitEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnCombatMiss
// (Final, Native, Private)

void AVPairedPawn::OnCombatMiss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnCombatMiss");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnDeathVFX
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVPairedPawn::OnDeathVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnDeathVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawn.OnEndOverlapWithBorder
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnEndOverlapWithBorder(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnEndOverlapWithBorder");

	Params::VPairedPawn_OnEndOverlapWithBorder Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnGhostStateChanged
// (Final, Native, Public)
// Parameters:
// bool                                    bIsGhost                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnGhostStateChanged(bool bIsGhost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnGhostStateChanged");

	Params::VPairedPawn_OnGhostStateChanged Parms{};

	Parms.bIsGhost = bIsGhost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnHitReaction
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReceivedDamage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitNormal                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnHitReaction(float ReceivedDamage, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& HitDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnHitReaction");

	Params::VPairedPawn_OnHitReaction Parms{};

	Parms.ReceivedDamage = ReceivedDamage;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.HitDirection = std::move(HitDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VPairedPawn.OnLoadFinished
// (Final, Native, Private)

void AVPairedPawn::OnLoadFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnLoadFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnPerceptionDebugModeActivated
// (Event, Protected, BlueprintEvent)

void AVPairedPawn::OnPerceptionDebugModeActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnPerceptionDebugModeActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawn.OnPerceptionDebugModeDeactivated
// (Event, Protected, BlueprintEvent)

void AVPairedPawn::OnPerceptionDebugModeDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnPerceptionDebugModeDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawn.OnPropItemEndingPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnPropItemEndingPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnPropItemEndingPlay");

	Params::VPairedPawn_OnPropItemEndingPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnShieldChanged
// (Native, Public)
// Parameters:
// const class AVShield*                   ShieldActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnShieldChanged(const class AVShield* ShieldActor, bool bEquipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnShieldChanged");

	Params::VPairedPawn_OnShieldChanged Parms{};

	Parms.ShieldActor = ShieldActor;
	Parms.bEquipping = bEquipping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnSpecialBloodVFX
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVPairedPawn::OnSpecialBloodVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnSpecialBloodVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawn.OnSummonPawn
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsSummoned                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnSummonPawn(bool bIsSummoned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnSummonPawn");

	Params::VPairedPawn_OnSummonPawn Parms{};

	Parms.bIsSummoned = bIsSummoned;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VPairedPawn.OnTorchVisibilityChanged
// (Native, Public)
// Parameters:
// const class AActor*                     TorchActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnTorchVisibilityChanged(const class AActor* TorchActor, bool bEquipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnTorchVisibilityChanged");

	Params::VPairedPawn_OnTorchVisibilityChanged Parms{};

	Parms.TorchActor = TorchActor;
	Parms.bEquipping = bEquipping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnUpdateOverEncumbrance
// (Final, Native, Protected)
// Parameters:
// EVActorValues                           ActorValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousBaseValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousModifiedValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewBaseValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewModifiedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnUpdateOverEncumbrance(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnUpdateOverEncumbrance");

	Params::VPairedPawn_OnUpdateOverEncumbrance Parms{};

	Parms.ActorValue = ActorValue;
	Parms.PreviousBaseValue = PreviousBaseValue;
	Parms.PreviousModifiedValue = PreviousModifiedValue;
	Parms.NewBaseValue = NewBaseValue;
	Parms.NewModifiedValue = NewModifiedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnWaterWalkingValueChanged
// (Final, Native, Protected)
// Parameters:
// EVActorValues                           ActorValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousBaseValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousModifiedValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewBaseValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewModifiedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnWaterWalkingValueChanged(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnWaterWalkingValueChanged");

	Params::VPairedPawn_OnWaterWalkingValueChanged Parms{};

	Parms.ActorValue = ActorValue;
	Parms.PreviousBaseValue = PreviousBaseValue;
	Parms.PreviousModifiedValue = PreviousModifiedValue;
	Parms.NewBaseValue = NewBaseValue;
	Parms.NewModifiedValue = NewModifiedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.OnWeaponChanged
// (Native, Public)
// Parameters:
// const class AVWeapon*                   WeaponForm                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnWeaponChanged(const class AVWeapon* WeaponForm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnWeaponChanged");

	Params::VPairedPawn_OnWeaponChanged Parms{};

	Parms.WeaponForm = WeaponForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RemoveGameplayTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              TagToRemove                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeChildTags                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::RemoveGameplayTag(const struct FGameplayTag& TagToRemove, bool bIncludeChildTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RemoveGameplayTag");

	Params::VPairedPawn_RemoveGameplayTag Parms{};

	Parms.TagToRemove = std::move(TagToRemove);
	Parms.bIncludeChildTags = bIncludeChildTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RemoveGameplayTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     GameplayTagsToRemove                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIncludeChildTags                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::RemoveGameplayTags(const struct FGameplayTagContainer& GameplayTagsToRemove, bool bIncludeChildTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RemoveGameplayTags");

	Params::VPairedPawn_RemoveGameplayTags Parms{};

	Parms.GameplayTagsToRemove = std::move(GameplayTagsToRemove);
	Parms.bIncludeChildTags = bIncludeChildTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RequestActiveEffectsFromOG
// (Final, Native, Public)

void AVPairedPawn::RequestActiveEffectsFromOG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RequestActiveEffectsFromOG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RequestApplyKnockForce
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FVPawnKnockdownRequest&    RequestData                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bCanSwitchToKnockdownState                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::RequestApplyKnockForce(const struct FVPawnKnockdownRequest& RequestData, bool bCanSwitchToKnockdownState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RequestApplyKnockForce");

	Params::VPairedPawn_RequestApplyKnockForce Parms{};

	Parms.RequestData = std::move(RequestData);
	Parms.bCanSwitchToKnockdownState = bCanSwitchToKnockdownState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RequestFootstepActionToWwise
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::RequestFootstepActionToWwise(class FName Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RequestFootstepActionToWwise");

	Params::VPairedPawn_RequestFootstepActionToWwise Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ResetGameplayTags
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::ResetGameplayTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ResetGameplayTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RunPawnMeleeHitDetection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBox&                      LocalSpaceBaseHitbox                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   CenterOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxHorizontalAngleDegrees                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxVerticalAngleDegrees                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AVPairedPawn*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AVPairedPawn*> AVPairedPawn::RunPawnMeleeHitDetection(const struct FBox& LocalSpaceBaseHitbox, const struct FVector& CenterOffset, float MaxHorizontalAngleDegrees, float MaxVerticalAngleDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RunPawnMeleeHitDetection");

	Params::VPairedPawn_RunPawnMeleeHitDetection Parms{};

	Parms.LocalSpaceBaseHitbox = std::move(LocalSpaceBaseHitbox);
	Parms.CenterOffset = std::move(CenterOffset);
	Parms.MaxHorizontalAngleDegrees = MaxHorizontalAngleDegrees;
	Parms.MaxVerticalAngleDegrees = MaxVerticalAngleDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.SendAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVActionType                            AttackType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AttackDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendAttack(EVActionType AttackType, float AttackDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendAttack");

	Params::VPairedPawn_SendAttack Parms{};

	Parms.AttackType = AttackType;
	Parms.AttackDuration = AttackDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendAttackStartedEvent
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendAttackStartedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendAttackStartedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendBlock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsBlocking                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendBlock(bool bIsBlocking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendBlock");

	Params::VPairedPawn_SendBlock Parms{};

	Parms.bIsBlocking = bIsBlocking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendBlockHit
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendBlockHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendBlockHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendBowAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DrawDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSwimming                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendBowAttack(float DrawDuration, bool bIsSwimming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendBowAttack");

	Params::VPairedPawn_SendBowAttack Parms{};

	Parms.DrawDuration = DrawDuration;
	Parms.bIsSwimming = bIsSwimming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendDrawWeaponSwitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldDrawWeapon                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendDrawWeaponSwitch(bool bShouldDrawWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendDrawWeaponSwitch");

	Params::VPairedPawn_SendDrawWeaponSwitch Parms{};

	Parms.bShouldDrawWeapon = bShouldDrawWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendKnockState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsKnockedOut                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendKnockState(bool bIsKnockedOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendKnockState");

	Params::VPairedPawn_SendKnockState Parms{};

	Parms.bIsKnockedOut = bIsKnockedOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendKnockStateGetUp
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendKnockStateGetUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendKnockStateGetUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendMeleeHitOnPairedPawn
// (Native, Public, BlueprintCallable)
// Parameters:
// class AVPairedPawn*                     StruckPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPowerAttack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SneakDamageMultiplier                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendMeleeHitOnPairedPawn(class AVPairedPawn* StruckPawn, bool bIsPowerAttack, float SneakDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendMeleeHitOnPairedPawn");

	Params::VPairedPawn_SendMeleeHitOnPairedPawn Parms{};

	Parms.StruckPawn = StruckPawn;
	Parms.bIsPowerAttack = bIsPowerAttack;
	Parms.SneakDamageMultiplier = SneakDamageMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendRecoil
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendRecoil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendRecoil");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendShieldBashHitOnPairedPawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVPairedPawn*                     StruckPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendShieldBashHitOnPairedPawn(class AVPairedPawn* StruckPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendShieldBashHitOnPairedPawn");

	Params::VPairedPawn_SendShieldBashHitOnPairedPawn Parms{};

	Parms.StruckPawn = StruckPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendSpellCast
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendSpellCast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendSpellCast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendSpellReleaseCast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsStaffCast                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendSpellReleaseCast(bool bIsStaffCast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendSpellReleaseCast");

	Params::VPairedPawn_SendSpellReleaseCast Parms{};

	Parms.bIsStaffCast = bIsStaffCast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendStagger
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendStagger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendStagger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendVampireFeed
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SendVampireFeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendVampireFeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SetIsPlayerCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewIsPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SetIsPlayerCharacter(bool NewIsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SetIsPlayerCharacter");

	Params::VPairedPawn_SetIsPlayerCharacter Parms{};

	Parms.NewIsPlayer = NewIsPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SetLifeState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVLifeState                             NewLifeState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SetLifeState(EVLifeState NewLifeState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SetLifeState");

	Params::VPairedPawn_SetLifeState Parms{};

	Parms.NewLifeState = NewLifeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SetOblivionAnimAction
// (Final, Native, Public)
// Parameters:
// EVAnimAction                            AnimAction                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SetOblivionAnimAction(EVAnimAction AnimAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SetOblivionAnimAction");

	Params::VPairedPawn_SetOblivionAnimAction Parms{};

	Parms.AnimAction = AnimAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SetRagdollConstraints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVConstrainingMode                      PawnRagdollConstrainingMode                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SetRagdollConstraints(EVConstrainingMode PawnRagdollConstrainingMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SetRagdollConstraints");

	Params::VPairedPawn_SetRagdollConstraints Parms{};

	Parms.PawnRagdollConstrainingMode = PawnRagdollConstrainingMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SetSneak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldSneak                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SetSneak(bool bShouldSneak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SetSneak");

	Params::VPairedPawn_SetSneak Parms{};

	Parms.bShouldSneak = bShouldSneak;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SetStickyCollisionStateEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableStickyCollision                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SetStickyCollisionStateEnabled(bool bEnableStickyCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SetStickyCollisionStateEnabled");

	Params::VPairedPawn_SetStickyCollisionStateEnabled Parms{};

	Parms.bEnableStickyCollision = bEnableStickyCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.ShowEntityDetailsWidget
// (Final, Native, Public)
// Parameters:
// int32                                   DebugIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::ShowEntityDetailsWidget(int32 DebugIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "ShowEntityDetailsWidget");

	Params::VPairedPawn_ShowEntityDetailsWidget Parms{};

	Parms.DebugIndex = DebugIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SpawnDrawnArrowMeshComponent
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SpawnDrawnArrowMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SpawnDrawnArrowMeshComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.StartDodgeCooldown
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::StartDodgeCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "StartDodgeCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SwitchRagdollState
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SwitchRagdollState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SwitchRagdollState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SwitchToCombatMoveset
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SwitchToCombatMoveset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SwitchToCombatMoveset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SwitchToPassiveMoveset
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::SwitchToPassiveMoveset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SwitchToPassiveMoveset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.TryLinkConversationIdle
// (Native, Public)

void AVPairedPawn::TryLinkConversationIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "TryLinkConversationIdle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.TryLinkTorch
// (Native, Public)

void AVPairedPawn::TryLinkTorch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "TryLinkTorch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.UndoRagdoll
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawn::UndoRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "UndoRagdoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.UpdateDrawnArrowVisibility
// (Native, Public)

void AVPairedPawn::UpdateDrawnArrowVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "UpdateDrawnArrowVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.CanBlink
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::CanBlink() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "CanBlink");

	Params::VPairedPawn_CanBlink Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.CanFly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::CanFly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "CanFly");

	Params::VPairedPawn_CanFly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.CanOnlySwim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::CanOnlySwim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "CanOnlySwim");

	Params::VPairedPawn_CanOnlySwim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.CanSwim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::CanSwim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "CanSwim");

	Params::VPairedPawn_CanSwim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.CanUseAimOffset
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::CanUseAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "CanUseAimOffset");

	Params::VPairedPawn_CanUseAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.FindFirstGameplayTagMatching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              TagToMatch                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AVPairedPawn::FindFirstGameplayTagMatching(const struct FGameplayTag& TagToMatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "FindFirstGameplayTagMatching");

	Params::VPairedPawn_FindFirstGameplayTagMatching Parms{};

	Parms.TagToMatch = std::move(TagToMatch);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetActorBlinkDelayMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedPawn::GetActorBlinkDelayMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetActorBlinkDelayMax");

	Params::VPairedPawn_GetActorBlinkDelayMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetActorBlinkDelayMin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedPawn::GetActorBlinkDelayMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetActorBlinkDelayMin");

	Params::VPairedPawn_GetActorBlinkDelayMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetActorBlinkDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedPawn::GetActorBlinkDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetActorBlinkDuration");

	Params::VPairedPawn_GetActorBlinkDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetAimingStartPosition
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AVPairedPawn::GetAimingStartPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetAimingStartPosition");

	Params::VPairedPawn_GetAimingStartPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetAliveProfileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AVPairedPawn::GetAliveProfileName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetAliveProfileName");

	Params::VPairedPawn_GetAliveProfileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetAllBufferedInputTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVBufferedInputTag>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVBufferedInputTag> AVPairedPawn::GetAllBufferedInputTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetAllBufferedInputTags");

	Params::VPairedPawn_GetAllBufferedInputTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetAllVisibleMeshComponents
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    bNeedToBeVisible                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMeshComponent*>           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMeshComponent*> AVPairedPawn::GetAllVisibleMeshComponents(bool bNeedToBeVisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetAllVisibleMeshComponents");

	Params::VPairedPawn_GetAllVisibleMeshComponents Parms{};

	Parms.bNeedToBeVisible = bNeedToBeVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetBaseSneakDamageMultiplierForCurrentWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedPawn::GetBaseSneakDamageMultiplierForCurrentWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetBaseSneakDamageMultiplierForCurrentWeapon");

	Params::VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetBodyMesh
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AVPairedPawn::GetBodyMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetBodyMesh");

	Params::VPairedPawn_GetBodyMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetCombatAimingDirectionVector
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AVPairedPawn::GetCombatAimingDirectionVector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetCombatAimingDirectionVector");

	Params::VPairedPawn_GetCombatAimingDirectionVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetCurrentPhysicsAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPhysicsAsset*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicsAsset* AVPairedPawn::GetCurrentPhysicsAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetCurrentPhysicsAsset");

	Params::VPairedPawn_GetCurrentPhysicsAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetCurrentProcedureType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVOblivionAIProcedureType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVOblivionAIProcedureType AVPairedPawn::GetCurrentProcedureType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetCurrentProcedureType");

	Params::VPairedPawn_GetCurrentProcedureType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetEquippedWeaponSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedPawn::GetEquippedWeaponSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetEquippedWeaponSpeed");

	Params::VPairedPawn_GetEquippedWeaponSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetInteractionAimingDirectionVector
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AVPairedPawn::GetInteractionAimingDirectionVector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetInteractionAimingDirectionVector");

	Params::VPairedPawn_GetInteractionAimingDirectionVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetIsStickyCollisionStateEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::GetIsStickyCollisionStateEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetIsStickyCollisionStateEnable");

	Params::VPairedPawn_GetIsStickyCollisionStateEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetLastFakeRootUpdateVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AVPairedPawn::GetLastFakeRootUpdateVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetLastFakeRootUpdateVelocity");

	Params::VPairedPawn_GetLastFakeRootUpdateVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetLifeState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVLifeState                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVLifeState AVPairedPawn::GetLifeState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetLifeState");

	Params::VPairedPawn_GetLifeState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetMeleeHitboxFromBase
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBox&                      LocalSpaceBaseHitbox                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   StartPointOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitboxCenter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitboxHalfExtent                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat*                           OutHitboxQuat                                          (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::GetMeleeHitboxFromBase(const struct FBox& LocalSpaceBaseHitbox, const struct FVector& StartPointOffset, struct FVector* OutHitboxCenter, struct FVector* OutHitboxHalfExtent, struct FQuat* OutHitboxQuat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetMeleeHitboxFromBase");

	Params::VPairedPawn_GetMeleeHitboxFromBase Parms{};

	Parms.LocalSpaceBaseHitbox = std::move(LocalSpaceBaseHitbox);
	Parms.StartPointOffset = std::move(StartPointOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitboxCenter != nullptr)
		*OutHitboxCenter = std::move(Parms.OutHitboxCenter);

	if (OutHitboxHalfExtent != nullptr)
		*OutHitboxHalfExtent = std::move(Parms.OutHitboxHalfExtent);

	if (OutHitboxQuat != nullptr)
		*OutHitboxQuat = std::move(Parms.OutHitboxQuat);
}


// Function Altar.VPairedPawn.GetOblivionAnimAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVAnimAction                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVAnimAction AVPairedPawn::GetOblivionAnimAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetOblivionAnimAction");

	Params::VPairedPawn_GetOblivionAnimAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetProjectileDirectionVector
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AVPairedPawn::GetProjectileDirectionVector(const struct FVector& SpawnLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetProjectileDirectionVector");

	Params::VPairedPawn_GetProjectileDirectionVector Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetSpellProjectileSpawnLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             CastingSocketName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AVPairedPawn::GetSpellProjectileSpawnLocation(class FName CastingSocketName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetSpellProjectileSpawnLocation");

	Params::VPairedPawn_GetSpellProjectileSpawnLocation Parms{};

	Parms.CastingSocketName = CastingSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.GetUnconsciousProfileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AVPairedPawn::GetUnconsciousProfileName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "GetUnconsciousProfileName");

	Params::VPairedPawn_GetUnconsciousProfileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.HasAllGameplayTags
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer&     CheckTags                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::HasAllGameplayTags(const struct FGameplayTagContainer& CheckTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "HasAllGameplayTags");

	Params::VPairedPawn_HasAllGameplayTags Parms{};

	Parms.CheckTags = std::move(CheckTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.HasAnyGameplayTag
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer&     CheckTags                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::HasAnyGameplayTag(const struct FGameplayTagContainer& CheckTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "HasAnyGameplayTag");

	Params::VPairedPawn_HasAnyGameplayTag Parms{};

	Parms.CheckTags = std::move(CheckTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.HasGameplayTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::HasGameplayTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "HasGameplayTag");

	Params::VPairedPawn_HasGameplayTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.HasValidLookAtPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::HasValidLookAtPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "HasValidLookAtPoint");

	Params::VPairedPawn_HasValidLookAtPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsAliveFromResurrection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsAliveFromResurrection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsAliveFromResurrection");

	Params::VPairedPawn_IsAliveFromResurrection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsAliveFromSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsAliveFromSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsAliveFromSpawn");

	Params::VPairedPawn_IsAliveFromSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsAliveFromUnconscious
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsAliveFromUnconscious() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsAliveFromUnconscious");

	Params::VPairedPawn_IsAliveFromUnconscious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsAttacking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsAttacking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsAttacking");

	Params::VPairedPawn_IsAttacking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsDead");

	Params::VPairedPawn_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsDeadFromKilled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsDeadFromKilled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsDeadFromKilled");

	Params::VPairedPawn_IsDeadFromKilled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsDeadFromSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsDeadFromSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsDeadFromSpawn");

	Params::VPairedPawn_IsDeadFromSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsHorse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsHorse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsHorse");

	Params::VPairedPawn_IsHorse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsMeleeObstructed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AVPairedPawn*               Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsMeleeObstructed(const class AVPairedPawn* Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsMeleeObstructed");

	Params::VPairedPawn_IsMeleeObstructed Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsOverEncumbered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsOverEncumbered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsOverEncumbered");

	Params::VPairedPawn_IsOverEncumbered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsPlayerCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsPlayerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsPlayerCharacter");

	Params::VPairedPawn_IsPlayerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsPlayingAnimatedAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsPlayingAnimatedAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsPlayingAnimatedAction");

	Params::VPairedPawn_IsPlayingAnimatedAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsRagdolling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsRagdolling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsRagdolling");

	Params::VPairedPawn_IsRagdolling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsUnconscious
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsUnconscious() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsUnconscious");

	Params::VPairedPawn_IsUnconscious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsUnderStatusEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StatusEffectName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsUnderStatusEffect(class FName StatusEffectName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsUnderStatusEffect");

	Params::VPairedPawn_IsUnderStatusEffect Parms{};

	Parms.StatusEffectName = StatusEffectName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsWeaponDrawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsWeaponDrawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsWeaponDrawn");

	Params::VPairedPawn_IsWeaponDrawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.IsWeaponEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawn::IsWeaponEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "IsWeaponEquipped");

	Params::VPairedPawn_IsWeaponEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawn.OnChangeActionState
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// EVActionType                            ActionState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::OnChangeActionState(EVActionType ActionState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "OnChangeActionState");

	Params::VPairedPawn_OnChangeActionState Parms{};

	Parms.ActionState = ActionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.RequestPowerAttackVocalization
// (Final, Native, Public, BlueprintCallable, Const)

void AVPairedPawn::RequestPowerAttackVocalization() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "RequestPowerAttackVocalization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendJump
// (Final, Native, Public, BlueprintCallable, Const)

void AVPairedPawn::SendJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendPuppetAnimAction
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// EVAnimAction                            AnimationAction                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendPuppetAnimAction(EVAnimAction AnimationAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendPuppetAnimAction");

	Params::VPairedPawn_SendPuppetAnimAction Parms{};

	Parms.AnimationAction = AnimationAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawn.SendPuppetAnimGroup
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// EVAnimGroupSection                      Section                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVAnimGroupAction                       Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVAnimGroup                             AnimGroup                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawn::SendPuppetAnimGroup(EVAnimGroupSection Section, EVAnimGroupAction Action, EVAnimGroup AnimGroup) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawn", "SendPuppetAnimGroup");

	Params::VPairedPawn_SendPuppetAnimGroup Parms{};

	Parms.Section = Section;
	Parms.Action = Action;
	Parms.AnimGroup = AnimGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VViewModelBase.GetGamertagText
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVViewModelBase::GetGamertagText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VViewModelBase", "GetGamertagText");

	Params::VViewModelBase_GetGamertagText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.ApplyBodyPartPropertiesToChildActor
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVCharacterBodyPartProperties&Properties                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AVPairedCharacter::ApplyBodyPartPropertiesToChildActor(EBipedModularBodySlot Slot, const struct FVCharacterBodyPartProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "ApplyBodyPartPropertiesToChildActor");

	Params::VPairedCharacter_ApplyBodyPartPropertiesToChildActor Parms{};

	Parms.Slot = Slot;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.CallTextureEffectBroadcastDelegate
// (Final, Native, Public)

void AVPairedCharacter::CallTextureEffectBroadcastDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "CallTextureEffectBroadcastDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.ClearAllDockingTags
// (Final, Native, Public, BlueprintCallable)

void AVPairedCharacter::ClearAllDockingTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "ClearAllDockingTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.FinishDockingToRequestedDockActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bSnapTransform                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::FinishDockingToRequestedDockActor(bool bSnapTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "FinishDockingToRequestedDockActor");

	Params::VPairedCharacter_FinishDockingToRequestedDockActor Parms{};

	Parms.bSnapTransform = bSnapTransform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.InitializeAppearanceFromForm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedCharacter::InitializeAppearanceFromForm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "InitializeAppearanceFromForm");

	Params::VPairedCharacter_InitializeAppearanceFromForm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.OnBodyPartPropertiesChanged
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVCharacterBodyPartProperties&Properties                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AVPairedCharacter::OnBodyPartPropertiesChanged(EBipedModularBodySlot Slot, const struct FVCharacterBodyPartProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "OnBodyPartPropertiesChanged");

	Params::VPairedCharacter_OnBodyPartPropertiesChanged Parms{};

	Parms.Slot = Slot;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.OnFacialAnimationMontageDone
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::OnFacialAnimationMontageDone(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "OnFacialAnimationMontageDone");

	Params::VPairedCharacter_OnFacialAnimationMontageDone Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.OnRaceOrSexChanged
// (Final, Native, Public)

void AVPairedCharacter::OnRaceOrSexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "OnRaceOrSexChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.OnWeaponDrawnStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsWeaponDrawn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::OnWeaponDrawnStateChanged(bool bIsWeaponDrawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "OnWeaponDrawnStateChanged");

	Params::VPairedCharacter_OnWeaponDrawnStateChanged Parms{};

	Parms.bIsWeaponDrawn = bIsWeaponDrawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.ProcessPendingUndockingRequest
// (Final, Native, Public, BlueprintCallable)

void AVPairedCharacter::ProcessPendingUndockingRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "ProcessPendingUndockingRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.RefreshAppearance
// (Native, Public, BlueprintCallable)
// Parameters:
// EVCharacterRefreshSelector              Selector                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::RefreshAppearance(EVCharacterRefreshSelector Selector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "RefreshAppearance");

	Params::VPairedCharacter_RefreshAppearance Parms{};

	Parms.Selector = Selector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.RefreshAppearanceAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVCharacterRefreshSelector              Selector                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::RefreshAppearanceAsync(EVCharacterRefreshSelector Selector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "RefreshAppearanceAsync");

	Params::VPairedCharacter_RefreshAppearanceAsync Parms{};

	Parms.Selector = Selector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.SetBodySectionsOnMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Components                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::SetBodySectionsOnMesh(class USkeletalMeshComponent* Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "SetBodySectionsOnMesh");

	Params::VPairedCharacter_SetBodySectionsOnMesh Parms{};

	Parms.Components = Components;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.SetRace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UTESRace*                   NewRace                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::SetRace(const class UTESRace* NewRace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "SetRace");

	Params::VPairedCharacter_SetRace Parms{};

	Parms.NewRace = NewRace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.SetSex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ECharacterSex                     NewSex                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::SetSex(const ECharacterSex NewSex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "SetSex");

	Params::VPairedCharacter_SetSex Parms{};

	Parms.NewSex = NewSex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.SetVoiceType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EVVoiceType                       NewVoiceType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::SetVoiceType(const EVVoiceType NewVoiceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "SetVoiceType");

	Params::VPairedCharacter_SetVoiceType Parms{};

	Parms.NewVoiceType = NewVoiceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.SnapToStandingPosition
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bUpdatePairedDockingState                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSnapToMarker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::SnapToStandingPosition(bool bUpdatePairedDockingState, bool bSnapToMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "SnapToStandingPosition");

	Params::VPairedCharacter_SnapToStandingPosition Parms{};

	Parms.bUpdatePairedDockingState = bUpdatePairedDockingState;
	Parms.bSnapToMarker = bSnapToMarker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.UpdateGenderAudioSwitch
// (Final, Native, Public)

void AVPairedCharacter::UpdateGenderAudioSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "UpdateGenderAudioSwitch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.UpdateRaceAudioSwitch
// (Final, Native, Public)

void AVPairedCharacter::UpdateRaceAudioSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "UpdateRaceAudioSwitch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.WaitForRefreshAppearanceToComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedCharacter::WaitForRefreshAppearanceToComplete(float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "WaitForRefreshAppearanceToComplete");

	Params::VPairedCharacter_WaitForRefreshAppearanceToComplete Parms{};

	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.WarpToDockingPosition
// (Final, Native, Public, BlueprintCallable)

void AVPairedCharacter::WarpToDockingPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "WarpToDockingPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedCharacter.GetBloodColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVBloodColor                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVBloodColor AVPairedCharacter::GetBloodColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetBloodColor");

	Params::VPairedCharacter_GetBloodColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetBoneScale
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedCharacter::GetBoneScale(const class FName& Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetBoneScale");

	Params::VPairedCharacter_GetBoneScale Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetBonesScale
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>&              Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, float>                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, float> AVPairedCharacter::GetBonesScale(const TArray<class FName>& Names) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetBonesScale");

	Params::VPairedCharacter_GetBonesScale Parms{};

	Parms.Names = std::move(Names);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetChildActorFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UChildActorComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UChildActorComponent* AVPairedCharacter::GetChildActorFromSlot(EBipedModularBodySlot Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetChildActorFromSlot");

	Params::VPairedCharacter_GetChildActorFromSlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetHorse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVPairedCreature*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPairedCreature* AVPairedCharacter::GetHorse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetHorse");

	Params::VPairedCharacter_GetHorse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetInitialEquipmentMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<EBipedModularBodySlot, class UTESForm*>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<EBipedModularBodySlot, class UTESForm*> AVPairedCharacter::GetInitialEquipmentMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetInitialEquipmentMap");

	Params::VPairedCharacter_GetInitialEquipmentMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetRace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTESRace*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESRace* AVPairedCharacter::GetRace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetRace");

	Params::VPairedCharacter_GetRace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetSex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterSex                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterSex AVPairedCharacter::GetSex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetSex");

	Params::VPairedCharacter_GetSex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetUsedDockActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AVPairedCharacter::GetUsedDockActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetUsedDockActor");

	Params::VPairedCharacter_GetUsedDockActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.GetVoiceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVVoiceType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVVoiceType AVPairedCharacter::GetVoiceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "GetVoiceType");

	Params::VPairedCharacter_GetVoiceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.IsDocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedCharacter::IsDocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "IsDocked");

	Params::VPairedCharacter_IsDocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.IsInDockingProcess
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedCharacter::IsInDockingProcess() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "IsInDockingProcess");

	Params::VPairedCharacter_IsInDockingProcess Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedCharacter.OnStartDockingToHorse
// (Final, Native, Public, BlueprintCallable, Const)

void AVPairedCharacter::OnStartDockingToHorse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedCharacter", "OnStartDockingToHorse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernMessageMenuSpecific.UpdateButtons
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              InNewButtonData                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernMessageMenuSpecific::UpdateButtons(const TArray<class FText>& InNewButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMessageMenuSpecific", "UpdateButtons");

	Params::VModernMessageMenuSpecific_UpdateButtons Parms{};

	Parms.InNewButtonData = std::move(InNewButtonData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernMessageMenuSpecific.UpdateMessage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      InNewMessage                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernMessageMenuSpecific::UpdateMessage(const class FText& InNewMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMessageMenuSpecific", "UpdateMessage");

	Params::VModernMessageMenuSpecific_UpdateMessage Parms{};

	Parms.InNewMessage = std::move(InNewMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernMessageMenuSpecific.UpdateTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      InNewTitle                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernMessageMenuSpecific::UpdateTitle(const class FText& InNewTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMessageMenuSpecific", "UpdateTitle");

	Params::VModernMessageMenuSpecific_UpdateTitle Parms{};

	Parms.InNewTitle = std::move(InNewTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLocomotionCharacterAnimInstance.OnSpecialJumpStarted
// (Native, Protected, HasDefaults)
// Parameters:
// const struct FVector&                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLocomotionCharacterAnimInstance::OnSpecialJumpStarted(const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionCharacterAnimInstance", "OnSpecialJumpStarted");

	Params::VLocomotionCharacterAnimInstance_OnSpecialJumpStarted Parms{};

	Parms.Velocity = std::move(Velocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLocomotionCharacterAnimInstance.GetIsMovingBackward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionCharacterAnimInstance::GetIsMovingBackward() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionCharacterAnimInstance", "GetIsMovingBackward");

	Params::VLocomotionCharacterAnimInstance_GetIsMovingBackward Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionCharacterAnimInstance.IsMoving
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionCharacterAnimInstance::IsMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionCharacterAnimInstance", "IsMoving");

	Params::VLocomotionCharacterAnimInstance_IsMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionCharacterAnimInstance.IsSprinting
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionCharacterAnimInstance::IsSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionCharacterAnimInstance", "IsSprinting");

	Params::VLocomotionCharacterAnimInstance_IsSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMagicMenuItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMagicMenuItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyMagicMenuItem::SetProperties(const struct FLegacyMagicMenuItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenuItem", "SetProperties");

	Params::VLegacyMagicMenuItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyMagicMenuItem.GetInventoryIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyMagicMenuItem::GetInventoryIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenuItem", "GetInventoryIndex");

	Params::VLegacyMagicMenuItem_GetInventoryIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMagicMenuItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMagicMenuItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyMagicMenuItemProperties UVLegacyMagicMenuItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenuItem", "GetProperties");

	Params::VLegacyMagicMenuItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPointLight.OnLightStatusChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPointLight::OnLightStatusChanged(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPointLight", "OnLightStatusChanged");

	Params::VPointLight_OnLightStatusChanged Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VSound.ResetSoundData
// (Final, Native, Public, BlueprintCallable)

void AVSound::ResetSoundData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSound", "ResetSoundData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatic.OnMagicEffectOnMarker
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    VFXName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVStatic::OnMagicEffectOnMarker(const class FString& VFXName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatic", "OnMagicEffectOnMarker");

	Params::VStatic_OnMagicEffectOnMarker Parms{};

	Parms.VFXName = std::move(VFXName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarPlayerController.ActivateUITexturePairing
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerController::ActivateUITexturePairing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ActivateUITexturePairing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.DeactivateUITexturePairing
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerController::DeactivateUITexturePairing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "DeactivateUITexturePairing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.DisplayPerformanceDebugInfo
// (Final, Native, Protected)

void AVAltarPlayerController::DisplayPerformanceDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "DisplayPerformanceDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.EnterVanityCamera
// (Final, Native, Protected, BlueprintCallable)

void AVAltarPlayerController::EnterVanityCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "EnterVanityCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ExitVanityCamera
// (Final, Native, Protected, BlueprintCallable)

void AVAltarPlayerController::ExitVanityCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ExitVanityCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.FindCameraTrackingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   MaxAngleDegrees                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AVPairedPawn*>&      PotentialTargets                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class AVPairedPawn*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPairedPawn* AVAltarPlayerController::FindCameraTrackingTarget(float MaxAngleDegrees, float MinDistance, float MaxDistance, const TArray<class AVPairedPawn*>& PotentialTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "FindCameraTrackingTarget");

	Params::VAltarPlayerController_FindCameraTrackingTarget Parms{};

	Parms.MaxAngleDegrees = MaxAngleDegrees;
	Parms.MinDistance = MinDistance;
	Parms.MaxDistance = MaxDistance;
	Parms.PotentialTargets = std::move(PotentialTargets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerController.ForceAndLockPOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVPlayerPOVType                         TargetPOV                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::ForceAndLockPOV(EVPlayerPOVType TargetPOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ForceAndLockPOV");

	Params::VAltarPlayerController_ForceAndLockPOV Parms{};

	Parms.TargetPOV = TargetPOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.OnConsoleActivationStateChanged
// (Final, Native, Public)
// Parameters:
// bool                                    Activated                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::OnConsoleActivationStateChanged(bool Activated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "OnConsoleActivationStateChanged");

	Params::VAltarPlayerController_OnConsoleActivationStateChanged Parms{};

	Parms.Activated = Activated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.OnJumpPressed
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVAltarPlayerController::OnJumpPressed(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "OnJumpPressed");

	Params::VAltarPlayerController_OnJumpPressed Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.OnLocomotionDebugModeActivated
// (Event, Protected, BlueprintEvent)

void AVAltarPlayerController::OnLocomotionDebugModeActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "OnLocomotionDebugModeActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarPlayerController.OnLocomotionDebugModeDeactivated
// (Event, Protected, BlueprintEvent)

void AVAltarPlayerController::OnLocomotionDebugModeDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "OnLocomotionDebugModeDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarPlayerController.OnUITexturePairingActivated
// (Event, Protected, BlueprintEvent)

void AVAltarPlayerController::OnUITexturePairingActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "OnUITexturePairingActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarPlayerController.OnUITexturePairingDeactivated
// (Event, Protected, BlueprintEvent)

void AVAltarPlayerController::OnUITexturePairingDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "OnUITexturePairingDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarPlayerController.RequestQuickLoad
// (Final, Native, Protected)

void AVAltarPlayerController::RequestQuickLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "RequestQuickLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SetControllerDesiredRotationRate
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  FirstPersonDesiredRotationRate                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  ThirdPersonDesiredRotationRate                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AVAltarPlayerController::SetControllerDesiredRotationRate(const struct FRotator& FirstPersonDesiredRotationRate, const struct FRotator& ThirdPersonDesiredRotationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SetControllerDesiredRotationRate");

	Params::VAltarPlayerController_SetControllerDesiredRotationRate Parms{};

	Parms.FirstPersonDesiredRotationRate = std::move(FirstPersonDesiredRotationRate);
	Parms.ThirdPersonDesiredRotationRate = std::move(ThirdPersonDesiredRotationRate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SetIsNewGameLoadingFromMainMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldBeNewGameLoadingFromMainMenu                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::SetIsNewGameLoadingFromMainMenu(bool bShouldBeNewGameLoadingFromMainMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SetIsNewGameLoadingFromMainMenu");

	Params::VAltarPlayerController_SetIsNewGameLoadingFromMainMenu Parms{};

	Parms.bShouldBeNewGameLoadingFromMainMenu = bShouldBeNewGameLoadingFromMainMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SetLeftThumbStickPressed
// (Final, Native, Protected)

void AVAltarPlayerController::SetLeftThumbStickPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SetLeftThumbStickPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SetLeftThumbStickReleased
// (Final, Native, Protected)

void AVAltarPlayerController::SetLeftThumbStickReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SetLeftThumbStickReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SetRightThumbStickPressed
// (Final, Native, Protected)

void AVAltarPlayerController::SetRightThumbStickPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SetRightThumbStickPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SetRightThumbStickReleased
// (Final, Native, Protected)

void AVAltarPlayerController::SetRightThumbStickReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SetRightThumbStickReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.StartAimingCrosshairAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsDrawing                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::StartAimingCrosshairAnimation(bool bIsDrawing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "StartAimingCrosshairAnimation");

	Params::VAltarPlayerController_StartAimingCrosshairAnimation Parms{};

	Parms.bIsDrawing = bIsDrawing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.StartCameraTrackingOnPawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVPairedPawn*                     Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RampUpEndThreshold                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RampDownStartThreshold                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      RampUpSpeedMultiplierCurve                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      RampDownSpeedMultiplierCurve                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllAxis                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::StartCameraTrackingOnPawn(class AVPairedPawn* Target, float Duration, float SpeedMultiplier, float RampUpEndThreshold, float RampDownStartThreshold, class UCurveFloat* RampUpSpeedMultiplierCurve, class UCurveFloat* RampDownSpeedMultiplierCurve, bool AllAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "StartCameraTrackingOnPawn");

	Params::VAltarPlayerController_StartCameraTrackingOnPawn Parms{};

	Parms.Target = Target;
	Parms.Duration = Duration;
	Parms.SpeedMultiplier = SpeedMultiplier;
	Parms.RampUpEndThreshold = RampUpEndThreshold;
	Parms.RampDownStartThreshold = RampDownStartThreshold;
	Parms.RampUpSpeedMultiplierCurve = RampUpSpeedMultiplierCurve;
	Parms.RampDownSpeedMultiplierCurve = RampDownSpeedMultiplierCurve;
	Parms.AllAxis = AllAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.StopCameraTracking
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerController::StopCameraTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "StopCameraTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.SwitchPOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVPlayerPOVType                         TargetPOV                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetToNewDefaultState                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::SwitchPOV(EVPlayerPOVType TargetPOV, bool bSetToNewDefaultState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "SwitchPOV");

	Params::VAltarPlayerController_SwitchPOV Parms{};

	Parms.TargetPOV = TargetPOV;
	Parms.bSetToNewDefaultState = bSetToNewDefaultState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ToggleDoCsvProfile
// (Final, Native, Protected)

void AVAltarPlayerController::ToggleDoCsvProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ToggleDoCsvProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ToggleFPSChart
// (Final, Native, Protected)

void AVAltarPlayerController::ToggleFPSChart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ToggleFPSChart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ToggleOblivionWindow
// (Final, Native, Protected, BlueprintCallable)

void AVAltarPlayerController::ToggleOblivionWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ToggleOblivionWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.TogglePrimaryGameLayoutDisplay
// (Final, Native, Protected, BlueprintCallable)

void AVAltarPlayerController::TogglePrimaryGameLayoutDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "TogglePrimaryGameLayoutDisplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ToggleShowFPSDebugInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::ToggleShowFPSDebugInfo(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ToggleShowFPSDebugInfo");

	Params::VAltarPlayerController_ToggleShowFPSDebugInfo Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ToggleShowVRAMDebugInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerController::ToggleShowVRAMDebugInfo(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ToggleShowVRAMDebugInfo");

	Params::VAltarPlayerController_ToggleShowVRAMDebugInfo Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.ToggleUITexturePairing
// (Final, Native, Protected, BlueprintCallable)

void AVAltarPlayerController::ToggleUITexturePairing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "ToggleUITexturePairing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.UnlockAndRestorePOV
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerController::UnlockAndRestorePOV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "UnlockAndRestorePOV");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerController.GetDesiredFOVDialogue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVAltarPlayerController::GetDesiredFOVDialogue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "GetDesiredFOVDialogue");

	Params::VAltarPlayerController_GetDesiredFOVDialogue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerController.GetGameplayCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AVAltarPlayerController::GetGameplayCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "GetGameplayCamera");

	Params::VAltarPlayerController_GetGameplayCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerController.GetLastInputRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AVAltarPlayerController::GetLastInputRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "GetLastInputRotation");

	Params::VAltarPlayerController_GetLastInputRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerController.GetLookAtRotationDialogue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AVAltarPlayerController::GetLookAtRotationDialogue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "GetLookAtRotationDialogue");

	Params::VAltarPlayerController_GetLookAtRotationDialogue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerController.GetPlayerCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVOblivionPlayerCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVOblivionPlayerCharacter* AVAltarPlayerController::GetPlayerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "GetPlayerCharacter");

	Params::VAltarPlayerController_GetPlayerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerController.IsHorseRiding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVAltarPlayerController::IsHorseRiding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerController", "IsHorseRiding");

	Params::VAltarPlayerController_IsHorseRiding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedAltarPlayerController.ActivateInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ActivateInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ActivateInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ActivateInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ActivateInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ActivateInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.AttackInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::AttackInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "AttackInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.AttackInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::AttackInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "AttackInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.AutoMoveInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::AutoMoveInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "AutoMoveInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.BlockInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::BlockInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "BlockInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.BlockInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::BlockInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "BlockInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.BP_FlushPressedKeys
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::BP_FlushPressedKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "BP_FlushPressedKeys");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.CastInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::CastInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "CastInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.CastInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::CastInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "CastInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.CrouchInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::CrouchInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "CrouchInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.CrouchInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::CrouchInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "CrouchInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.DisableAutoMoveToggle
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::DisableAutoMoveToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "DisableAutoMoveToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.DisableGallopToggle
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::DisableGallopToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "DisableGallopToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.DisableSneakToggle
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::DisableSneakToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "DisableSneakToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.DisableSprintToggle
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::DisableSprintToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "DisableSprintToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.DisableWalkToggle
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::DisableWalkToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "DisableWalkToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.HandleDeviceConnectionChange
// (Final, Native, Protected)
// Parameters:
// EInputDeviceConnectionState             NewConnectionState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPlatformUserId&           PlatformUserId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputDeviceId&            InputDeviceId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::HandleDeviceConnectionChange(EInputDeviceConnectionState NewConnectionState, const struct FPlatformUserId& PlatformUserId, const struct FInputDeviceId& InputDeviceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "HandleDeviceConnectionChange");

	Params::VEnhancedAltarPlayerController_HandleDeviceConnectionChange Parms{};

	Parms.NewConnectionState = NewConnectionState;
	Parms.PlatformUserId = std::move(PlatformUserId);
	Parms.InputDeviceId = std::move(InputDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.IsWalking
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVEnhancedAltarPlayerController::IsWalking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "IsWalking");

	Params::VEnhancedAltarPlayerController_IsWalking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedAltarPlayerController.LookUpInput
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::LookUpInput(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "LookUpInput");

	Params::VEnhancedAltarPlayerController_LookUpInput Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.LookUpInputCompleted
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::LookUpInputCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "LookUpInputCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MouseWheelUpInput
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::MouseWheelUpInput(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MouseWheelUpInput");

	Params::VEnhancedAltarPlayerController_MouseWheelUpInput Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementBackwardInput_Pressed
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::MovementBackwardInput_Pressed(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementBackwardInput_Pressed");

	Params::VEnhancedAltarPlayerController_MovementBackwardInput_Pressed Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementBackwardInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::MovementBackwardInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementBackwardInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementForwardInput_Pressed
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::MovementForwardInput_Pressed(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementForwardInput_Pressed");

	Params::VEnhancedAltarPlayerController_MovementForwardInput_Pressed Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementForwardInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::MovementForwardInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementForwardInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementLeftInput_Pressed
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::MovementLeftInput_Pressed(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementLeftInput_Pressed");

	Params::VEnhancedAltarPlayerController_MovementLeftInput_Pressed Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementLeftInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::MovementLeftInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementLeftInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementRightInput_Pressed
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::MovementRightInput_Pressed(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementRightInput_Pressed");

	Params::VEnhancedAltarPlayerController_MovementRightInput_Pressed Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.MovementRightInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::MovementRightInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "MovementRightInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OnAttackRequestPressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OnAttackRequestPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OnAttackRequestPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OnAttackRequestReleased
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OnAttackRequestReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OnAttackRequestReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OnDrawWeaponReleased
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OnDrawWeaponReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OnDrawWeaponReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OnLoadFinished
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OnLoadFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OnLoadFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OnLoadStarted
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OnLoadStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OnLoadStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OnUndrawBowReleased
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OnUndrawBowReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OnUndrawBowReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenHelpMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenHelpMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenHelpMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenHelpMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenHelpMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenHelpMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenInventoryMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenInventoryMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenInventoryMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenInventoryMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenInventoryMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenInventoryMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenMagicMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenMagicMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenMagicMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenMagicMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenMagicMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenMagicMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenMapMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenMapMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenMapMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenMapMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenMapMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenMapMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenOptionsMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenOptionsMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenOptionsMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenOptionsMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenOptionsMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenOptionsMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenQuestMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenQuestMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenQuestMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenQuestMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenQuestMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenQuestMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenRestMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenRestMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenRestMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenRestMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenRestMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenRestMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenStatsMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenStatsMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenStatsMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.OpenStatsMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::OpenStatsMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "OpenStatsMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick1Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick1Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick1Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick1Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick1Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick1Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick2Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick2Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick2Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick2Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick2Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick2Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick3Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick3Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick3Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick3Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick3Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick3Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick4Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick4Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick4Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick4Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick4Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick4Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick5Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick5Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick5Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick5Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick5Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick5Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick6Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick6Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick6Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick6Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick6Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick6Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick7Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick7Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick7Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick7Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick7Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick7Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick8Input_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick8Input_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick8Input_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.Quick8Input_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::Quick8Input_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "Quick8Input_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.QuickLoadInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::QuickLoadInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "QuickLoadInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.QuickLoadInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::QuickLoadInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "QuickLoadInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.QuickMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::QuickMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "QuickMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.QuickMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::QuickMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "QuickMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.QuickSaveInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::QuickSaveInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "QuickSaveInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.QuickSaveInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::QuickSaveInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "QuickSaveInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ReadyItemInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ReadyItemInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ReadyItemInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ReadyItemInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ReadyItemInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ReadyItemInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ReleaseAllQuickInputs
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ReleaseAllQuickInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ReleaseAllQuickInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ReleaseGrab
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ReleaseGrab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ReleaseGrab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.SetBlockFlushPressedKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewBlockFlushPressedKeys                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::SetBlockFlushPressedKeys(bool NewBlockFlushPressedKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "SetBlockFlushPressedKeys");

	Params::VEnhancedAltarPlayerController_SetBlockFlushPressedKeys Parms{};

	Parms.NewBlockFlushPressedKeys = NewBlockFlushPressedKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ShiftKeyInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ShiftKeyInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ShiftKeyInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ShiftKeyInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ShiftKeyInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ShiftKeyInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ShowDebugMenu
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ShowDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ShowDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.SwitchToGameInputMappings
// (Final, Native, Public, BlueprintCallable)

void AVEnhancedAltarPlayerController::SwitchToGameInputMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "SwitchToGameInputMappings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.SwitchToUserInterfaceInputMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDoRemoveQuickKeysInputMapping                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::SwitchToUserInterfaceInputMapping(bool bDoRemoveQuickKeysInputMapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "SwitchToUserInterfaceInputMapping");

	Params::VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping Parms{};

	Parms.bDoRemoveQuickKeysInputMapping = bDoRemoveQuickKeysInputMapping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TelekinesisLaunchItem
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TelekinesisLaunchItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TelekinesisLaunchItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TelekinesisReleaseItem
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TelekinesisReleaseItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TelekinesisReleaseItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TelekinesisTryToPullItem_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TelekinesisTryToPullItem_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TelekinesisTryToPullItem_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TelekinesisTryToPullItem_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TelekinesisTryToPullItem_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TelekinesisTryToPullItem_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TelekinesisTryToPushItem_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TelekinesisTryToPushItem_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TelekinesisTryToPushItem_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TelekinesisTryToPushItem_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TelekinesisTryToPushItem_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TelekinesisTryToPushItem_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleBlockPressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleBlockPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleBlockPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleBlockReleased
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleBlockReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleBlockReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleCharacterMenuInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleCharacterMenuInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleCharacterMenuInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleCharacterMenuInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleCharacterMenuInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleCharacterMenuInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleDrawWeaponPressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleDrawWeaponPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleDrawWeaponPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleDrawWeaponReleased
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleDrawWeaponReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleDrawWeaponReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleGallop
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::ToggleGallop(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleGallop");

	Params::VEnhancedAltarPlayerController_ToggleGallop Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleGrabPressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleGrabPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleGrabPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleHorseWalk
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::ToggleHorseWalk(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleHorseWalk");

	Params::VEnhancedAltarPlayerController_ToggleHorseWalk Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TogglePOVInput_Pressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TogglePOVInput_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TogglePOVInput_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TogglePOVInput_Released
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TogglePOVInput_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TogglePOVInput_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleSneak
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::ToggleSneak(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleSneak");

	Params::VEnhancedAltarPlayerController_ToggleSneak Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleSpellCastPressed
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::ToggleSpellCastPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleSpellCastPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleSprint
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::ToggleSprint(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleSprint");

	Params::VEnhancedAltarPlayerController_ToggleSprint Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.ToggleWalk
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::ToggleWalk(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "ToggleWalk");

	Params::VEnhancedAltarPlayerController_ToggleWalk Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TurnInput
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInputActionValue&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AVEnhancedAltarPlayerController::TurnInput(const struct FInputActionValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TurnInput");

	Params::VEnhancedAltarPlayerController_TurnInput Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.TurnInputCompleted
// (Final, Native, Private)

void AVEnhancedAltarPlayerController::TurnInputCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "TurnInputCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnhancedAltarPlayerController.GetWantsToGallop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVEnhancedAltarPlayerController::GetWantsToGallop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "GetWantsToGallop");

	Params::VEnhancedAltarPlayerController_GetWantsToGallop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedAltarPlayerController.GetWantsToSprint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVEnhancedAltarPlayerController::GetWantsToSprint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "GetWantsToSprint");

	Params::VEnhancedAltarPlayerController_GetWantsToSprint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedAltarPlayerController.IsInGameConfiguration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVEnhancedAltarPlayerController::IsInGameConfiguration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedAltarPlayerController", "IsInGameConfiguration");

	Params::VEnhancedAltarPlayerController_IsInGameConfiguration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeapon.ActivateWeaponShadows
// (Final, Native, Public)

void AVWeapon::ActivateWeaponShadows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "ActivateWeaponShadows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon.DeactivateWeaponShadows
// (Final, Native, Public)

void AVWeapon::DeactivateWeaponShadows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "DeactivateWeaponShadows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon.OnAttachmentUpdate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           TargetSkeletalMeshComponent                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDrawn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVWeapon::OnAttachmentUpdate(class USkeletalMeshComponent* TargetSkeletalMeshComponent, bool bIsDrawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "OnAttachmentUpdate");

	Params::VWeapon_OnAttachmentUpdate Parms{};

	Parms.TargetSkeletalMeshComponent = TargetSkeletalMeshComponent;
	Parms.bIsDrawn = bIsDrawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon.GetDrawnAttachmentSocketName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AVWeapon::GetDrawnAttachmentSocketName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "GetDrawnAttachmentSocketName");

	Params::VWeapon_GetDrawnAttachmentSocketName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeapon.GetLocomotionMovesetTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AVWeapon::GetLocomotionMovesetTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "GetLocomotionMovesetTag");

	Params::VWeapon_GetLocomotionMovesetTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeapon.GetSheathedAttachmentSocketName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AVWeapon::GetSheathedAttachmentSocketName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "GetSheathedAttachmentSocketName");

	Params::VWeapon_GetSheathedAttachmentSocketName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeapon.GetWeaponScalingAttribute
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVAttribute                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVAttribute AVWeapon::GetWeaponScalingAttribute() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "GetWeaponScalingAttribute");

	Params::VWeapon_GetWeaponScalingAttribute Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeapon.GetWeaponTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AVWeapon::GetWeaponTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon", "GetWeaponTag");

	Params::VWeapon_GetWeaponTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDroppedAmmo.ReinitializePhysicsSimulationState
// (Final, Native, Public, BlueprintCallable)

void AVDroppedAmmo::ReinitializePhysicsSimulationState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDroppedAmmo", "ReinitializePhysicsSimulationState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.AltarSpawn
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// class FString&                          Race                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarCheatManager::AltarSpawn(class FString& Race)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "AltarSpawn");

	Params::AltarCheatManager_AltarSpawn Parms{};

	Parms.Race = std::move(Race);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Race = std::move(Parms.Race);
}


// Function Altar.AltarCheatManager.CrashGame
// (Final, Native, Public)

void UAltarCheatManager::CrashGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "CrashGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.DebugMenuCommand
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// class FString&                          Command                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarCheatManager::DebugMenuCommand(class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "DebugMenuCommand");

	Params::AltarCheatManager_DebugMenuCommand Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Command = std::move(Parms.Command);
}


// Function Altar.AltarCheatManager.GiveViolence
// (Final, Native, Public)

void UAltarCheatManager::GiveViolence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "GiveViolence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.ObvConselect
// (Final, Exec, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString&                          Arg                                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarCheatManager::ObvConselect(class FString& Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "ObvConselect");

	Params::AltarCheatManager_ObvConselect Parms{};

	Parms.Arg = std::move(Arg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Arg = std::move(Parms.Arg);
}


// Function Altar.AltarCheatManager.ObvConsole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString&                          Arg                                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarCheatManager::ObvConsole(class FString& Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "ObvConsole");

	Params::AltarCheatManager_ObvConsole Parms{};

	Parms.Arg = std::move(Arg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Arg = std::move(Parms.Arg);
}


// Function Altar.AltarCheatManager.ObvGodMode
// (Final, Native, Public, BlueprintCallable)

void UAltarCheatManager::ObvGodMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "ObvGodMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.SendMultipleOblivionCommand
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            CommandeLists                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UAltarCheatManager::SendMultipleOblivionCommand(const TArray<class FString>& CommandeLists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "SendMultipleOblivionCommand");

	Params::AltarCheatManager_SendMultipleOblivionCommand Parms{};

	Parms.CommandeLists = std::move(CommandeLists);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.SkipTutorialQuest
// (Final, Native, Public)

void UAltarCheatManager::SkipTutorialQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "SkipTutorialQuest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.ToggleLocalMapMode
// (Final, Exec, Native, Public, BlueprintCallable)

void UAltarCheatManager::ToggleLocalMapMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "ToggleLocalMapMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.XSXC
// (Final, Exec, Native, Public)

void UAltarCheatManager::XSXC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "XSXC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarCheatManager.IsInGodMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAltarCheatManager::IsInGodMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarCheatManager", "IsInGodMode");

	Params::AltarCheatManager_IsInGodMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.Back
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingMenu::Back()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "Back");

	Params::VModernOnboardingMenu_Back Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.CleanOnboarding
// (Final, Native, Protected, BlueprintCallable)

void UVModernOnboardingMenu::CleanOnboarding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "CleanOnboarding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingMenu.OnAnimationEnded
// (Final, Native, Protected)
// Parameters:
// TScriptInterface<class IVOnboardingPageInterface>Caller                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernOnboardingMenu::OnAnimationEnded(TScriptInterface<class IVOnboardingPageInterface> Caller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "OnAnimationEnded");

	Params::VModernOnboardingMenu_OnAnimationEnded Parms{};

	Parms.Caller = Caller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingMenu.OnEnd
// (Event, Protected, BlueprintEvent)

void UVModernOnboardingMenu::OnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "OnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernOnboardingMenu.OnPageChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernOnboardingMenu::OnPageChanged(int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "OnPageChanged");

	Params::VModernOnboardingMenu_OnPageChanged Parms{};

	Parms.NewIndex = NewIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernOnboardingMenu.OnRun
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Outcome                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernOnboardingMenu::OnRun(bool Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "OnRun");

	Params::VModernOnboardingMenu_OnRun Parms{};

	Parms.Outcome = Outcome;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernOnboardingMenu.OnStart
// (Event, Protected, BlueprintEvent)

void UVModernOnboardingMenu::OnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "OnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernOnboardingMenu.Skip
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingMenu::Skip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "Skip");

	Params::VModernOnboardingMenu_Skip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.GetCurrentPage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IVOnboardingPageInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IVOnboardingPageInterface> UVModernOnboardingMenu::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "GetCurrentPage");

	Params::VModernOnboardingMenu_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.GetNextUnskipableIndex
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernOnboardingMenu::GetNextUnskipableIndex(int32 StartIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "GetNextUnskipableIndex");

	Params::VModernOnboardingMenu_GetNextUnskipableIndex Parms{};

	Parms.StartIndex = StartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.GetOffsetedNextPage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IVOnboardingPageInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IVOnboardingPageInterface> UVModernOnboardingMenu::GetOffsetedNextPage(int32 Offset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "GetOffsetedNextPage");

	Params::VModernOnboardingMenu_GetOffsetedNextPage Parms{};

	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.GetPage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IVOnboardingPageInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IVOnboardingPageInterface> UVModernOnboardingMenu::GetPage(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "GetPage");

	Params::VModernOnboardingMenu_GetPage Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingMenu.IsOnboardingFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingMenu::IsOnboardingFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingMenu", "IsOnboardingFinished");

	Params::VModernOnboardingMenu_IsOnboardingFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIHelpersFunctionLibrary.SortActorsByGameTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class AActor*>&            InActors                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AActor*>*                  SortedActors                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVAIHelpersFunctionLibrary::SortActorsByGameTime(const TArray<class AActor*>& InActors, TArray<class AActor*>* SortedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAIHelpersFunctionLibrary", "SortActorsByGameTime");

	Params::VAIHelpersFunctionLibrary_SortActorsByGameTime Parms{};

	Parms.InActors = std::move(InActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SortedActors != nullptr)
		*SortedActors = std::move(Parms.SortedActors);
}


// Function Altar.VLegacyStatsMenuSkillHeader.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyStatsMenuSkillHeader::SetProperties(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuSkillHeader", "SetProperties");

	Params::VLegacyStatsMenuSkillHeader_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyStatsMenuSkillHeader.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyStatsMenuSkillHeader::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuSkillHeader", "GetProperties");

	Params::VLegacyStatsMenuSkillHeader_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.GetInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAltarGameUserSetting*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAltarGameUserSetting* UAltarGameUserSetting::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AltarGameUserSetting", "GetInstance");

	Params::AltarGameUserSetting_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.AcceptEULA
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::AcceptEULA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "AcceptEULA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.AddOrUpdateRebindToSave
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERebindSaveSlot                         Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarGameUserSetting::AddOrUpdateRebindToSave(class UInputMappingContext* MappingContext, class UInputAction* InputAction, const struct FKey& Key, ERebindSaveSlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "AddOrUpdateRebindToSave");

	Params::AltarGameUserSetting_AddOrUpdateRebindToSave Parms{};

	Parms.MappingContext = MappingContext;
	Parms.InputAction = InputAction;
	Parms.Key = std::move(Key);
	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.AddOrUpdateSettingsToSave
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernSettingCommand&     Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAltarGameUserSetting::AddOrUpdateSettingsToSave(const struct FModernSettingCommand& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "AddOrUpdateSettingsToSave");

	Params::AltarGameUserSetting_AddOrUpdateSettingsToSave Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.ApplyAltarCVARSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarGameUserSetting::ApplyAltarCVARSettings(bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ApplyAltarCVARSettings");

	Params::AltarGameUserSetting_ApplyAltarCVARSettings Parms{};

	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.ApplyAltarRebind
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::ApplyAltarRebind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ApplyAltarRebind");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.DoAutoDetect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceSync                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAltarGameUserSetting::DoAutoDetect(bool bForceSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "DoAutoDetect");

	Params::AltarGameUserSetting_DoAutoDetect Parms{};

	Parms.bForceSync = bForceSync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.GetOrAddRebindFromSaved
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERebindSaveSlot                         Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEnhancedActionKeyMapping  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FEnhancedActionKeyMapping UAltarGameUserSetting::GetOrAddRebindFromSaved(class UInputMappingContext* MappingContext, class UInputAction* InputAction, ERebindSaveSlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetOrAddRebindFromSaved");

	Params::AltarGameUserSetting_GetOrAddRebindFromSaved Parms{};

	Parms.MappingContext = MappingContext;
	Parms.InputAction = InputAction;
	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.GetOrAddValueFromSavedSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAltarGameUserSetting::GetOrAddValueFromSavedSettings(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetOrAddValueFromSavedSettings");

	Params::AltarGameUserSetting_GetOrAddValueFromSavedSettings Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.GetSavedKeyForBind
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInputMappingContext*             MappingContext                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERebindSaveSlot                         Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UAltarGameUserSetting::GetSavedKeyForBind(class UInputMappingContext* MappingContext, class UInputAction* InputAction, ERebindSaveSlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetSavedKeyForBind");

	Params::AltarGameUserSetting_GetSavedKeyForBind Parms{};

	Parms.MappingContext = MappingContext;
	Parms.InputAction = InputAction;
	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.ResetBindingsToDefault
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::ResetBindingsToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ResetBindingsToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.ResetSettingsToDefault
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::ResetSettingsToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ResetSettingsToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.ValidateOnboardingBrighnessSettings
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::ValidateOnboardingBrighnessSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ValidateOnboardingBrighnessSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.ValidateOnboardingGameplaySettings
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::ValidateOnboardingGameplaySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ValidateOnboardingGameplaySettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.ValidateOnboardingSoundSettings
// (Final, Native, Public, BlueprintCallable)

void UAltarGameUserSetting::ValidateOnboardingSoundSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "ValidateOnboardingSoundSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AltarGameUserSetting.GetDefaultSavedRebind
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FVAltarRebindMap>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FVAltarRebindMap> UAltarGameUserSetting::GetDefaultSavedRebind() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetDefaultSavedRebind");

	Params::AltarGameUserSetting_GetDefaultSavedRebind Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.GetDefaultSavedSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, class FString>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, class FString> UAltarGameUserSetting::GetDefaultSavedSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetDefaultSavedSettings");

	Params::AltarGameUserSetting_GetDefaultSavedSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.GetSavedSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, class FString>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, class FString> UAltarGameUserSetting::GetSavedSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetSavedSettings");

	Params::AltarGameUserSetting_GetSavedSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.GetSettingPageTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVModernSettingPageTable*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVModernSettingPageTable* UAltarGameUserSetting::GetSettingPageTable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "GetSettingPageTable");

	Params::AltarGameUserSetting_GetSettingPageTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.IsEULAAccepted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAltarGameUserSetting::IsEULAAccepted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "IsEULAAccepted");

	Params::AltarGameUserSetting_IsEULAAccepted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AltarGameUserSetting.IsOnboardingSettingsDone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAltarGameUserSetting::IsOnboardingSettingsDone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AltarGameUserSetting", "IsOnboardingSettingsDone");

	Params::AltarGameUserSetting_IsOnboardingSettingsDone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernScrollbar.OnPropertiesChanged
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FModernScrollbarProperties&Values                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModernScrollbar::OnPropertiesChanged(const struct FModernScrollbarProperties& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "OnPropertiesChanged");

	Params::VModernScrollbar_OnPropertiesChanged Parms{};

	Parms.Values = std::move(Values);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernScrollbar.OnValueUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernScrollbar::OnValueUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "OnValueUpdated");

	Params::VModernScrollbar_OnValueUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernScrollbar.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernScrollbarProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModernScrollbar::SetProperties(const struct FModernScrollbarProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "SetProperties");

	Params::VModernScrollbar_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernScrollbar.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernScrollbar::SetValue(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "SetValue");

	Params::VModernScrollbar_SetValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernScrollbar.UpdateValueFromSlider
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernScrollbar::UpdateValueFromSlider(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "UpdateValueFromSlider");

	Params::VModernScrollbar_UpdateValueFromSlider Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernScrollbar.GetHandle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UVModernScrollbar::GetHandle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "GetHandle");

	Params::VModernScrollbar_GetHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernScrollbar.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernScrollbarProperties ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FModernScrollbarProperties UVModernScrollbar::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "GetProperties");

	Params::VModernScrollbar_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernScrollbar.GetSlider
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnalogSlider*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnalogSlider* UVModernScrollbar::GetSlider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollbar", "GetSlider");

	Params::VModernScrollbar_GetSlider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_SummonCreatureDefend.GetAccompanyProcedure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAIProcedureExecution_ACCOMPANY* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAIProcedureExecution_ACCOMPANY* UVAIProcedureExecution_SummonCreatureDefend::GetAccompanyProcedure() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_SummonCreatureDefend", "GetAccompanyProcedure");

	Params::VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_SummonCreatureDefend.GetFollowProcedure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAIProcedureExecution_FOLLOW*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAIProcedureExecution_FOLLOW* UVAIProcedureExecution_SummonCreatureDefend::GetFollowProcedure() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_SummonCreatureDefend", "GetFollowProcedure");

	Params::VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPauseMenuViewModel.NotifySaveLoadMenuIsClosing
// (Final, Native, Public, BlueprintCallable)

void UVPauseMenuViewModel::NotifySaveLoadMenuIsClosing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "NotifySaveLoadMenuIsClosing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.RegisterSendClickedButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyPauseButtonsIDs                  InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPauseMenuViewModel::RegisterSendClickedButton(ELegacyPauseButtonsIDs InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "RegisterSendClickedButton");

	Params::VPauseMenuViewModel_RegisterSendClickedButton Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.RegisterSendClickedQuickSaveButton
// (Final, Native, Public, BlueprintCallable)

void UVPauseMenuViewModel::RegisterSendClickedQuickSaveButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "RegisterSendClickedQuickSaveButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.RegisterSendClickedQuitGameButton
// (Final, Native, Public, BlueprintCallable)

void UVPauseMenuViewModel::RegisterSendClickedQuitGameButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "RegisterSendClickedQuitGameButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.RegisterSendClickedReturnToMainMenuButton
// (Final, Native, Public, BlueprintCallable)

void UVPauseMenuViewModel::RegisterSendClickedReturnToMainMenuButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "RegisterSendClickedReturnToMainMenuButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.SetIsDisplayed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPauseMenuViewModel::SetIsDisplayed(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "SetIsDisplayed");

	Params::VPauseMenuViewModel_SetIsDisplayed Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.SetIsMenuClosing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPauseMenuViewModel::SetIsMenuClosing(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "SetIsMenuClosing");

	Params::VPauseMenuViewModel_SetIsMenuClosing Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.SetIsOpeningSaveLoadMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPauseMenuViewModel::SetIsOpeningSaveLoadMenu(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "SetIsOpeningSaveLoadMenu");

	Params::VPauseMenuViewModel_SetIsOpeningSaveLoadMenu Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPauseMenuViewModel.GetBuildInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVPauseMenuViewModel::GetBuildInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "GetBuildInfo");

	Params::VPauseMenuViewModel_GetBuildInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPauseMenuViewModel.GetIsDisplayed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPauseMenuViewModel::GetIsDisplayed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "GetIsDisplayed");

	Params::VPauseMenuViewModel_GetIsDisplayed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPauseMenuViewModel.GetIsMenuClosing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPauseMenuViewModel::GetIsMenuClosing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "GetIsMenuClosing");

	Params::VPauseMenuViewModel_GetIsMenuClosing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPauseMenuViewModel.GetIsOpeningSaveLoadMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPauseMenuViewModel::GetIsOpeningSaveLoadMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPauseMenuViewModel", "GetIsOpeningSaveLoadMenu");

	Params::VPauseMenuViewModel_GetIsOpeningSaveLoadMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AsyncAction_CreateWidgetAsync.CreateWidgetAsync
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             UserWidgetSoftClass                                    (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuspendInputUntilComplete                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_CreateWidgetAsync*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_CreateWidgetAsync* UAsyncAction_CreateWidgetAsync::CreateWidgetAsync(class UObject* WorldContextObject, TSoftClassPtr<class UClass> UserWidgetSoftClass, class APlayerController* OwningPlayer, bool bSuspendInputUntilComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_CreateWidgetAsync", "CreateWidgetAsync");

	Params::AsyncAction_CreateWidgetAsync_CreateWidgetAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.UserWidgetSoftClass = UserWidgetSoftClass;
	Parms.OwningPlayer = OwningPlayer;
	Parms.bSuspendInputUntilComplete = bSuspendInputUntilComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.AddToPersuadedCharacters
// (Final, Native, Public, BlueprintCallable)

void UVPersuasionMenuViewModel::AddToPersuadedCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "AddToPersuadedCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterClickOnBribeButton
// (Final, Native, Public, BlueprintCallable)

void UVPersuasionMenuViewModel::RegisterClickOnBribeButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterClickOnBribeButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterClickOnDoneButton
// (Final, Native, Public, BlueprintCallable)

void UVPersuasionMenuViewModel::RegisterClickOnDoneButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterClickOnDoneButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterClickOnRotateButton
// (Final, Native, Public, BlueprintCallable)

void UVPersuasionMenuViewModel::RegisterClickOnRotateButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterClickOnRotateButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterClickOnStartButton
// (Final, Native, Public, BlueprintCallable)

void UVPersuasionMenuViewModel::RegisterClickOnStartButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterClickOnStartButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterSendClickOnQuandrant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewQuadrantClickedID                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::RegisterSendClickOnQuandrant(int32 NewQuadrantClickedID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterSendClickOnQuandrant");

	Params::VPersuasionMenuViewModel_RegisterSendClickOnQuandrant Parms{};

	Parms.NewQuadrantClickedID = NewQuadrantClickedID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterSendQuadrantHovered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EReaction                               ReactionValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::RegisterSendQuadrantHovered(EReaction ReactionValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterSendQuadrantHovered");

	Params::VPersuasionMenuViewModel_RegisterSendQuadrantHovered Parms{};

	Parms.ReactionValue = ReactionValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.RegisterSendWheelUnHovered
// (Final, Native, Public, BlueprintCallable)

void UVPersuasionMenuViewModel::RegisterSendWheelUnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "RegisterSendWheelUnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetBribeData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FBribeData&                NewBirbeData                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetBribeData(const struct FBribeData& NewBirbeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetBribeData");

	Params::VPersuasionMenuViewModel_SetBribeData Parms{};

	Parms.NewBirbeData = std::move(NewBirbeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetCanBribe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewCanBribeValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetCanBribe(bool bNewCanBribeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetCanBribe");

	Params::VPersuasionMenuViewModel_SetCanBribe Parms{};

	Parms.bNewCanBribeValue = bNewCanBribeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetCanPersuade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanPersuadeNewValue                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetCanPersuade(bool bCanPersuadeNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetCanPersuade");

	Params::VPersuasionMenuViewModel_SetCanPersuade Parms{};

	Parms.bCanPersuadeNewValue = bCanPersuadeNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetCanRotateWheel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewCanRotateWheelValue                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetCanRotateWheel(bool bNewCanRotateWheelValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetCanRotateWheel");

	Params::VPersuasionMenuViewModel_SetCanRotateWheel Parms{};

	Parms.bNewCanRotateWheelValue = bNewCanRotateWheelValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetDisposition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FNpcDisposition&           NewDisposition                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetDisposition(const struct FNpcDisposition& NewDisposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetDisposition");

	Params::VPersuasionMenuViewModel_SetDisposition Parms{};

	Parms.NewDisposition = std::move(NewDisposition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetGamePlayState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPersuasionMiniGamePlayState            NewGamePlayState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetGamePlayState(EPersuasionMiniGamePlayState NewGamePlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetGamePlayState");

	Params::VPersuasionMenuViewModel_SetGamePlayState Parms{};

	Parms.NewGamePlayState = NewGamePlayState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetHasGameStarted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetHasGameStarted(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetHasGameStarted");

	Params::VPersuasionMenuViewModel_SetHasGameStarted Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetNPCName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewNpcName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetNPCName(const class FText& NewNpcName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetNPCName");

	Params::VPersuasionMenuViewModel_SetNPCName Parms{};

	Parms.NewNpcName = std::move(NewNpcName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetPlayerGold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNewPlayerGold                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetPlayerGold(int32 InNewPlayerGold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetPlayerGold");

	Params::VPersuasionMenuViewModel_SetPlayerGold Parms{};

	Parms.InNewPlayerGold = InNewPlayerGold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.SetWheelInitializingData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FWheelInitializingData&    NewWheelInitializingData                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVPersuasionMenuViewModel::SetWheelInitializingData(const struct FWheelInitializingData& NewWheelInitializingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "SetWheelInitializingData");

	Params::VPersuasionMenuViewModel_SetWheelInitializingData Parms{};

	Parms.NewWheelInitializingData = std::move(NewWheelInitializingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPersuasionMenuViewModel.CanBribe
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPersuasionMenuViewModel::CanBribe() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "CanBribe");

	Params::VPersuasionMenuViewModel_CanBribe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.CanPersuade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPersuasionMenuViewModel::CanPersuade() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "CanPersuade");

	Params::VPersuasionMenuViewModel_CanPersuade Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.CanRotateWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPersuasionMenuViewModel::CanRotateWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "CanRotateWheel");

	Params::VPersuasionMenuViewModel_CanRotateWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GameHasStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPersuasionMenuViewModel::GameHasStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GameHasStarted");

	Params::VPersuasionMenuViewModel_GameHasStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GetBribeData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBribeData                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBribeData UVPersuasionMenuViewModel::GetBribeData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GetBribeData");

	Params::VPersuasionMenuViewModel_GetBribeData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GetDisposition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FNpcDisposition            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FNpcDisposition UVPersuasionMenuViewModel::GetDisposition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GetDisposition");

	Params::VPersuasionMenuViewModel_GetDisposition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GetGamePlayState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPersuasionMiniGamePlayState            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPersuasionMiniGamePlayState UVPersuasionMenuViewModel::GetGamePlayState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GetGamePlayState");

	Params::VPersuasionMenuViewModel_GetGamePlayState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GetNPCName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVPersuasionMenuViewModel::GetNPCName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GetNPCName");

	Params::VPersuasionMenuViewModel_GetNPCName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GetPlayerGold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVPersuasionMenuViewModel::GetPlayerGold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GetPlayerGold");

	Params::VPersuasionMenuViewModel_GetPlayerGold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.GetWheelInitializingData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FWheelInitializingData     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FWheelInitializingData UVPersuasionMenuViewModel::GetWheelInitializingData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "GetWheelInitializingData");

	Params::VPersuasionMenuViewModel_GetWheelInitializingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPersuasionMenuViewModel.WasSpeakerAlreadyPersuaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPersuasionMenuViewModel::WasSpeakerAlreadyPersuaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPersuasionMenuViewModel", "WasSpeakerAlreadyPersuaded");

	Params::VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_Pursue.GetFollowProcedure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAIProcedureExecution_FOLLOW*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAIProcedureExecution_FOLLOW* UVAIProcedureExecution_Pursue::GetFollowProcedure() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_Pursue", "GetFollowProcedure");

	Params::VAIProcedureExecution_Pursue_GetFollowProcedure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSwimLocomotionHorseRiderAnimInstance.SetSwimLayerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVHorseRiderLocomotionSwim&InSwimLayerData                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UVSwimLocomotionHorseRiderAnimInstance::SetSwimLayerData(const struct FVHorseRiderLocomotionSwim& InSwimLayerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSwimLocomotionHorseRiderAnimInstance", "SetSwimLayerData");

	Params::VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData Parms{};

	Parms.InSwimLayerData = std::move(InSwimLayerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.AsyncAction_PushWidgetToLayer.PushDefaultMenuToLayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             ParentMenuClass                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              LayerName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuspendInputUntilComplete                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_PushWidgetToLayer*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_PushWidgetToLayer* UAsyncAction_PushWidgetToLayer::PushDefaultMenuToLayer(TSoftClassPtr<class UClass> ParentMenuClass, const struct FGameplayTag& LayerName, bool bSuspendInputUntilComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_PushWidgetToLayer", "PushDefaultMenuToLayer");

	Params::AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer Parms{};

	Parms.ParentMenuClass = ParentMenuClass;
	Parms.LayerName = std::move(LayerName);
	Parms.bSuspendInputUntilComplete = bSuspendInputUntilComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AsyncAction_PushWidgetToLayer.PushWidgetToLayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             WidgetClass                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              LayerName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuspendInputUntilComplete                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_PushWidgetToLayer*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_PushWidgetToLayer* UAsyncAction_PushWidgetToLayer::PushWidgetToLayer(TSoftClassPtr<class UClass> WidgetClass, const struct FGameplayTag& LayerName, bool bSuspendInputUntilComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_PushWidgetToLayer", "PushWidgetToLayer");

	Params::AsyncAction_PushWidgetToLayer_PushWidgetToLayer Parms{};

	Parms.WidgetClass = WidgetClass;
	Parms.LayerName = std::move(LayerName);
	Parms.bSuspendInputUntilComplete = bSuspendInputUntilComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMenuBookLine.SetAlignement
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELegacyBookStylizedTextAlignment        Alignement                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyMenuBookLine::SetAlignement(ELegacyBookStylizedTextAlignment Alignement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMenuBookLine", "SetAlignement");

	Params::VLegacyMenuBookLine_SetAlignement Parms{};

	Parms.Alignement = Alignement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyMenuBookLine.SetFontFamily
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    FontValue                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyMenuBookLine::SetFontFamily(const class FString& FontValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMenuBookLine", "SetFontFamily");

	Params::VLegacyMenuBookLine_SetFontFamily Parms{};

	Parms.FontValue = std::move(FontValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyMenuBookLine.SetLineText
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLegacyBookStylizedText&   TextStyle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bForceLayoutPrepass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVLegacyMenuBookLine::SetLineText(const class FText& Text, const struct FLegacyBookStylizedText& TextStyle, bool bForceLayoutPrepass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMenuBookLine", "SetLineText");

	Params::VLegacyMenuBookLine_SetLineText Parms{};

	Parms.Text = std::move(Text);
	Parms.TextStyle = std::move(TextStyle);
	Parms.bForceLayoutPrepass = bForceLayoutPrepass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMenuBookLine.SetRichText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyMenuBookLine::SetRichText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMenuBookLine", "SetRichText");

	Params::VLegacyMenuBookLine_SetRichText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyMenuBookLine.GetRichText
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVLegacyMenuBookLine::GetRichText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMenuBookLine", "GetRichText");

	Params::VLegacyMenuBookLine_GetRichText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VAltarMenu.ForceSynchronizeProperties
// (Final, Native, Private, BlueprintCallable)

void UVAltarMenu::ForceSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "ForceSynchronizeProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMenu.OnInputMethodChanged
// (Final, Native, Public)

void UVAltarMenu::OnInputMethodChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "OnInputMethodChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMenu.OnSynchronizeProperties
// (Event, Public, BlueprintEvent)

void UVAltarMenu::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarMenu.SetViewModelReference
// (Event, Public, BlueprintEvent)
// Parameters:
// class UVViewModelBase*                  ViewModelRef                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarMenu::SetViewModelReference(class UVViewModelBase* ViewModelRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "SetViewModelReference");

	Params::VAltarMenu_SetViewModelReference Parms{};

	Parms.ViewModelRef = ViewModelRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarMenu.SetWidgetToFocusOnControllerDesactivate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TScriptInterface<class IVEnhancedInputNavigable>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarMenu::SetWidgetToFocusOnControllerDesactivate(const TScriptInterface<class IVEnhancedInputNavigable>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "SetWidgetToFocusOnControllerDesactivate");

	Params::VAltarMenu_SetWidgetToFocusOnControllerDesactivate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMenu.BP_OnInputMethodChanged
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const ECommonInputType&                 InputType                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarMenu::BP_OnInputMethodChanged(const ECommonInputType& InputType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "BP_OnInputMethodChanged");

	Params::VAltarMenu_BP_OnInputMethodChanged Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarMenu.GetWidgetToFocusOnControllerDesactivate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IVEnhancedInputNavigable>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IVEnhancedInputNavigable> UVAltarMenu::GetWidgetToFocusOnControllerDesactivate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMenu", "GetWidgetToFocusOnControllerDesactivate");

	Params::VAltarMenu_GetWidgetToFocusOnControllerDesactivate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerSubMenuBase.FadeInOutMenu
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromLeft                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyPlayerSubMenuBase::FadeInOutMenu(bool bIsVisible, bool bFromLeft, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerSubMenuBase", "FadeInOutMenu");

	Params::VLegacyPlayerSubMenuBase_FadeInOutMenu Parms{};

	Parms.bIsVisible = bIsVisible;
	Parms.bFromLeft = bFromLeft;
	Parms.bInstant = bInstant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyPlayerSubMenuBase.RouteBackEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyPlayerSubMenuBase::RouteBackEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerSubMenuBase", "RouteBackEvent");

	Params::VLegacyPlayerSubMenuBase_RouteBackEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyInventoryMenu.OnDropItemWithController
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyInventoryMenu::OnDropItemWithController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyInventoryMenu", "OnDropItemWithController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyInventoryMenu.SwitchPreviewWithController
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyInventoryMenu::SwitchPreviewWithController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyInventoryMenu", "SwitchPreviewWithController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyInventoryMenu.GetMagicPopup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyMagicPopupMenu*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMagicPopupMenu* UVLegacyInventoryMenu::GetMagicPopup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyInventoryMenu", "GetMagicPopup");

	Params::VLegacyInventoryMenu_GetMagicPopup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyInventoryMenu.GetQuickKeys
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyQuickKeysMenu*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyQuickKeysMenu* UVLegacyInventoryMenu::GetQuickKeys() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyInventoryMenu", "GetQuickKeys");

	Params::VLegacyInventoryMenu_GetQuickKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacySpellPurchaseMenuItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacySpellPurchaseMenuItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacySpellPurchaseMenuItem::SetProperties(const struct FLegacySpellPurchaseMenuItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellPurchaseMenuItem", "SetProperties");

	Params::VLegacySpellPurchaseMenuItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySpellPurchaseMenuItem.GetListId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacySpellPurchaseMenuItem::GetListId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellPurchaseMenuItem", "GetListId");

	Params::VLegacySpellPurchaseMenuItem_GetListId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacySpellPurchaseMenuItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacySpellPurchaseMenuItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacySpellPurchaseMenuItemProperties UVLegacySpellPurchaseMenuItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellPurchaseMenuItem", "GetProperties");

	Params::VLegacySpellPurchaseMenuItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLoadingScreen.BeginRemoveLoadingScreen
// (Event, Public, BlueprintEvent)

void UVLoadingScreen::BeginRemoveLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreen", "BeginRemoveLoadingScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLoadingScreen.OnRemoveLoadingScreenEnded
// (Final, Native, Public, BlueprintCallable, Const)

void UVLoadingScreen::OnRemoveLoadingScreenEnded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreen", "OnRemoveLoadingScreenEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSimpleInAirCharacterAnimInstance.IsInAir
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSimpleInAirCharacterAnimInstance::IsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSimpleInAirCharacterAnimInstance", "IsInAir");

	Params::VSimpleInAirCharacterAnimInstance_IsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSimpleInAirCharacterAnimInstance.IsLanding
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSimpleInAirCharacterAnimInstance::IsLanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSimpleInAirCharacterAnimInstance", "IsLanding");

	Params::VSimpleInAirCharacterAnimInstance_IsLanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMagicMenuHeader.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMagicMenuHeaderProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyMagicMenuHeader::SetProperties(const struct FLegacyMagicMenuHeaderProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenuHeader", "SetProperties");

	Params::VLegacyMagicMenuHeader_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyMagicMenuHeader.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMagicMenuHeaderPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyMagicMenuHeaderProperties UVLegacyMagicMenuHeader::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenuHeader", "GetProperties");

	Params::VLegacyMagicMenuHeader_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VVFXBlueprint.OnChangeFirstPerson
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsFirstPerson                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVVFXBlueprint::OnChangeFirstPerson(bool bIsFirstPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VVFXBlueprint", "OnChangeFirstPerson");

	Params::VVFXBlueprint_OnChangeFirstPerson Parms{};

	Parms.bIsFirstPerson = bIsFirstPerson;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VVFXBlueprint.OnChangeLevel
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVVFXBlueprint::OnChangeLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VVFXBlueprint", "OnChangeLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VVFXBlueprint.OnPause
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVVFXBlueprint::OnPause(bool bIsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VVFXBlueprint", "OnPause");

	Params::VVFXBlueprint_OnPause Parms{};

	Parms.bIsPaused = bIsPaused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VVFXBlueprint.PauseThisVFX
// (Final, Native, Public)
// Parameters:
// bool                                    bIsPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVVFXBlueprint::PauseThisVFX(bool bIsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VVFXBlueprint", "PauseThisVFX");

	Params::VVFXBlueprint_PauseThisVFX Parms{};

	Parms.bIsPaused = bIsPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicSpellVFXBlueprint.OnStartPlay
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBlueprintParameters&      Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsTargetAnActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           CasterActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVCastType                              CastType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Magnitude                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Area                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector_NetQuantizeNormal& ImpactNormal                                           (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector_NetQuantizeNormal& Normal                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVSpellLevel                            Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTheEndOfTheEffect                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMainEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSecondEffect                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           CollidedActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              CollidedComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVMagicSpellVFXBlueprint::OnStartPlay(const struct FBlueprintParameters& Parameters, bool bIsTargetAnActor, class AActor* CasterActor, bool bDoesBeginInFirstPerson, EVCastType CastType, int32 Magnitude, int32 Area, int32 Duration, const struct FVector_NetQuantizeNormal& ImpactNormal, const struct FVector_NetQuantizeNormal& Normal, EVSpellLevel Level, bool bIsTheEndOfTheEffect, bool bIsMainEffect, bool bIsSecondEffect, class AActor* CollidedActor, class UPrimitiveComponent* CollidedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicSpellVFXBlueprint", "OnStartPlay");

	Params::VMagicSpellVFXBlueprint_OnStartPlay Parms{};

	Parms.Parameters = std::move(Parameters);
	Parms.bIsTargetAnActor = bIsTargetAnActor;
	Parms.CasterActor = CasterActor;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.CastType = CastType;
	Parms.Magnitude = Magnitude;
	Parms.Area = Area;
	Parms.Duration = Duration;
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.Normal = std::move(Normal);
	Parms.Level = Level;
	Parms.bIsTheEndOfTheEffect = bIsTheEndOfTheEffect;
	Parms.bIsMainEffect = bIsMainEffect;
	Parms.bIsSecondEffect = bIsSecondEffect;
	Parms.CollidedActor = CollidedActor;
	Parms.CollidedComponent = CollidedComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VMagicSpellVFXBlueprint.OnStopPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVMagicSpellVFXBlueprint::OnStopPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicSpellVFXBlueprint", "OnStopPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VMagicSpellVFXBlueprint.OnTargetDead
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVMagicSpellVFXBlueprint::OnTargetDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicSpellVFXBlueprint", "OnTargetDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyMainMenu.GetCurrentWorld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UVLegacyMainMenu::GetCurrentWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMainMenu", "GetCurrentWorld");

	Params::VLegacyMainMenu_GetCurrentWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMainMenu.SetDebugMode
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bInNewDebug                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyMainMenu::SetDebugMode(bool bInNewDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMainMenu", "SetDebugMode");

	Params::VLegacyMainMenu_SetDebugMode Parms{};

	Parms.bInNewDebug = bInNewDebug;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernSigilStoneMenuItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernSigilStoneMenuItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSigilStoneMenuItem::SetProperties(const struct FModernSigilStoneMenuItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSigilStoneMenuItem", "SetProperties");

	Params::VModernSigilStoneMenuItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSigilStoneMenuItem.GetItemIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVModernSigilStoneMenuItem::GetItemIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSigilStoneMenuItem", "GetItemIndex");

	Params::VModernSigilStoneMenuItem_GetItemIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSigilStoneMenuItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernSigilStoneMenuItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernSigilStoneMenuItemProperties UVModernSigilStoneMenuItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSigilStoneMenuItem", "GetProperties");

	Params::VModernSigilStoneMenuItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyQuickKeysMenu.PressedButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyQuickKeysMenu::PressedButton(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyQuickKeysMenu", "PressedButton");

	Params::VLegacyQuickKeysMenu_PressedButton Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.StateMachinePlayAnimatedAction.PlayAnimatedAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AVPairedPawn*                     PairedPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              ActionTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVPawnAnimatedAction**            Action                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DesiredDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnimationIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStateMachinePlayAnimatedAction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStateMachinePlayAnimatedAction* UStateMachinePlayAnimatedAction::PlayAnimatedAction(class AVPairedPawn* PairedPawn, const struct FGameplayTag& ActionTag, class UVPawnAnimatedAction** Action, float DesiredDuration, int32 AnimationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StateMachinePlayAnimatedAction", "PlayAnimatedAction");

	Params::StateMachinePlayAnimatedAction_PlayAnimatedAction Parms{};

	Parms.PairedPawn = PairedPawn;
	Parms.ActionTag = std::move(ActionTag);
	Parms.DesiredDuration = DesiredDuration;
	Parms.AnimationIndex = AnimationIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Action != nullptr)
		*Action = Parms.Action;

	return Parms.ReturnValue;
}


// Function Altar.StateMachinePlayAnimatedAction.PlayDefaultAnimatedAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AVPairedPawn*                     PairedPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVPawnAnimatedAction**            Action                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStateMachinePlayAnimatedAction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStateMachinePlayAnimatedAction* UStateMachinePlayAnimatedAction::PlayDefaultAnimatedAction(class AVPairedPawn* PairedPawn, class UVPawnAnimatedAction** Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StateMachinePlayAnimatedAction", "PlayDefaultAnimatedAction");

	Params::StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction Parms{};

	Parms.PairedPawn = PairedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Action != nullptr)
		*Action = Parms.Action;

	return Parms.ReturnValue;
}


// Function Altar.StateMachinePlayAnimatedAction.OnAnimatedActionEnded
// (Final, Native, Private)
// Parameters:
// bool                                    bIsCanceled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStateMachinePlayAnimatedAction::OnAnimatedActionEnded(bool bIsCanceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateMachinePlayAnimatedAction", "OnAnimatedActionEnded");

	Params::StateMachinePlayAnimatedAction_OnAnimatedActionEnded Parms{};

	Parms.bIsCanceled = bIsCanceled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VImpactSystemVFXBlueprint.OnStartPlay
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector_NetQuantizeNormal& ImpactNormal                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceType                         HitSourceType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceMaterial                     HitSourceMaterial                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceWeaponType                   HitWeaponType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UStaticMeshComponent*       WeaponMesh                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsUsingWeapon                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVImpactSystemVFXBlueprint::OnStartPlay(const struct FVector_NetQuantizeNormal& ImpactNormal, EVHitSourceType HitSourceType, EVHitSourceMaterial HitSourceMaterial, bool bDoesBeginInFirstPerson, EVHitSourceWeaponType HitWeaponType, const class UStaticMeshComponent* WeaponMesh, bool bIsUsingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VImpactSystemVFXBlueprint", "OnStartPlay");

	Params::VImpactSystemVFXBlueprint_OnStartPlay Parms{};

	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.HitSourceType = HitSourceType;
	Parms.HitSourceMaterial = HitSourceMaterial;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.HitWeaponType = HitWeaponType;
	Parms.WeaponMesh = WeaponMesh;
	Parms.bIsUsingWeapon = bIsUsingWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VInventoryMenu.SetBlockBackAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBlockBackAction                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenu::SetBlockBackAction(bool bNewBlockBackAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenu", "SetBlockBackAction");

	Params::VInventoryMenu_SetBlockBackAction Parms{};

	Parms.bNewBlockBackAction = bNewBlockBackAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalInventoryMenuItemEffects.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FOriginalInventoryMenuItemEffects&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalInventoryMenuItemEffects::SetProperties(const struct FOriginalInventoryMenuItemEffects& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuItemEffects", "SetProperties");

	Params::VOriginalInventoryMenuItemEffects_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalInventoryMenuItemEffects.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FOriginalInventoryMenuItemEffectsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FOriginalInventoryMenuItemEffects UVOriginalInventoryMenuItemEffects::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuItemEffects", "GetProperties");

	Params::VOriginalInventoryMenuItemEffects_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLeftRightAttackAnimInstance.OnAttackLeftEnter
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLeftRightAttackAnimInstance::OnAttackLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLeftRightAttackAnimInstance", "OnAttackLeftEnter");

	Params::VLeftRightAttackAnimInstance_OnAttackLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLeftRightAttackAnimInstance.OnAttackRightEnter
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLeftRightAttackAnimInstance::OnAttackRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLeftRightAttackAnimInstance", "OnAttackRightEnter");

	Params::VLeftRightAttackAnimInstance_OnAttackRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXboxFloatingHint.SetButtonIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyXboxFloatingHintButton     Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyXboxFloatingHint::SetButtonIcon(const ELegacyXboxFloatingHintButton Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXboxFloatingHint", "SetButtonIcon");

	Params::VLegacyXboxFloatingHint_SetButtonIcon Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXboxFloatingHint.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyXboxFloatingHint::SetText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXboxFloatingHint", "SetText");

	Params::VLegacyXboxFloatingHint_SetText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXboxFloatingHint.UpdateVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const ECommonInputType                  InputType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyXboxFloatingHint::UpdateVisibility(const ECommonInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXboxFloatingHint", "UpdateVisibility");

	Params::VLegacyXboxFloatingHint_UpdateVisibility Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXboxFloatingHint.GetButtonIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyXboxFloatingHintButton           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyXboxFloatingHintButton UVLegacyXboxFloatingHint::GetButtonIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXboxFloatingHint", "GetButtonIcon");

	Params::VLegacyXboxFloatingHint_GetButtonIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyXboxFloatingHint.GetCropForIcon
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyXboxFloatingHint::GetCropForIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXboxFloatingHint", "GetCropForIcon");

	Params::VLegacyXboxFloatingHint_GetCropForIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyXboxFloatingHint.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyXboxFloatingHint::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXboxFloatingHint", "GetText");

	Params::VLegacyXboxFloatingHint_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelSelectDispatcher.StartPairedGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AVLevelSelectDoor*                Door                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* AVLevelSelectDispatcher::StartPairedGame(class AVLevelSelectDoor* Door)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLevelSelectDispatcher", "StartPairedGame");

	Params::VLevelSelectDispatcher_StartPairedGame Parms{};

	Parms.Door = Door;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelSelectDispatcher.StartPairedGameManually
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StartupCommand                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseDebugGamemode                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* AVLevelSelectDispatcher::StartPairedGameManually(class UObject* WorldContext, const class FString& LevelName, const class FString& StartupCommand, bool bUseDebugGamemode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLevelSelectDispatcher", "StartPairedGameManually");

	Params::VLevelSelectDispatcher_StartPairedGameManually Parms{};

	Parms.WorldContext = WorldContext;
	Parms.LevelName = std::move(LevelName);
	Parms.StartupCommand = std::move(StartupCommand);
	Parms.bUseDebugGamemode = bUseDebugGamemode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.LambdaWrapper.Execute
// (Final, Native, Public)

void ULambdaWrapper::Execute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LambdaWrapper", "Execute");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ComboBoxCategoryDelegate
// (Final, Native, Private)

void UDebugMenuWidget::ComboBoxCategoryDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ComboBoxCategoryDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.DisplayDebugMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerControllerDebug                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::DisplayDebugMenu(class APlayerController* PlayerControllerDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "DisplayDebugMenu");

	Params::DebugMenuWidget_DisplayDebugMenu Parms{};

	Parms.PlayerControllerDebug = PlayerControllerDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.DisplayShowroomUI
// (Final, Native, Private)

void UDebugMenuWidget::DisplayShowroomUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "DisplayShowroomUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecuteAICommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecuteAICommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecuteAICommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecuteCommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecuteCommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecuteCommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecutePefCommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecutePefCommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecutePefCommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecuteQACommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecuteQACommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecuteQACommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecuteSpawnActorCommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecuteSpawnActorCommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecuteSpawnActorCommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecuteSpawnObjectCommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecuteSpawnObjectCommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecuteSpawnObjectCommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ExecuteUICommandLineFromComboBoxSelection
// (Final, Native, Private)

void UDebugMenuWidget::ExecuteUICommandLineFromComboBoxSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ExecuteUICommandLineFromComboBoxSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.HideDebugMenu
// (Final, Native, Public, BlueprintCallable)

void UDebugMenuWidget::HideDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "HideDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemLocationOffsetXChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemLocationOffsetXChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemLocationOffsetXChanged");

	Params::DebugMenuWidget_OnItemLocationOffsetXChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemLocationOffsetYChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemLocationOffsetYChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemLocationOffsetYChanged");

	Params::DebugMenuWidget_OnItemLocationOffsetYChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemLocationOffsetZChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemLocationOffsetZChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemLocationOffsetZChanged");

	Params::DebugMenuWidget_OnItemLocationOffsetZChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemRotationOffsetXChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemRotationOffsetXChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemRotationOffsetXChanged");

	Params::DebugMenuWidget_OnItemRotationOffsetXChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemRotationOffsetYChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemRotationOffsetYChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemRotationOffsetYChanged");

	Params::DebugMenuWidget_OnItemRotationOffsetYChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemRotationOffsetZChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemRotationOffsetZChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemRotationOffsetZChanged");

	Params::DebugMenuWidget_OnItemRotationOffsetZChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemScaleOffsetXChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemScaleOffsetXChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemScaleOffsetXChanged");

	Params::DebugMenuWidget_OnItemScaleOffsetXChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemScaleOffsetYChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemScaleOffsetYChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemScaleOffsetYChanged");

	Params::DebugMenuWidget_OnItemScaleOffsetYChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OnItemScaleOffsetZChanged
// (Final, Native, Private)
// Parameters:
// float                                   InNewValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::OnItemScaleOffsetZChanged(float InNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OnItemScaleOffsetZChanged");

	Params::DebugMenuWidget_OnItemScaleOffsetZChanged Parms{};

	Parms.InNewValue = InNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.OpenLevel
// (Final, Native, Private)

void UDebugMenuWidget::OpenLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "OpenLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.PrintDamageLogToScreen
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    DamageLogString                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AttackerDistFromPlayer                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugMenuWidget::PrintDamageLogToScreen(const class FString& DamageLogString, const float AttackerDistFromPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "PrintDamageLogToScreen");

	Params::DebugMenuWidget_PrintDamageLogToScreen Parms{};

	Parms.DamageLogString = std::move(DamageLogString);
	Parms.AttackerDistFromPlayer = AttackerDistFromPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.DebugMenuWidget.ReloadUI
// (Final, Native, Private)

void UDebugMenuWidget::ReloadUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ReloadUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.RunDebugMenuCommand
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString&                          Command                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDebugMenuWidget::RunDebugMenuCommand(class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "RunDebugMenuCommand");

	Params::DebugMenuWidget_RunDebugMenuCommand Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Command = std::move(Parms.Command);

	return Parms.ReturnValue;
}


// Function Altar.DebugMenuWidget.SelectCreature
// (Final, Native, Private)

void UDebugMenuWidget::SelectCreature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SelectCreature");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetAmulet
// (Final, Native, Private)

void UDebugMenuWidget::SetAmulet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetAmulet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetCharacterRace
// (Final, Native, Private)

void UDebugMenuWidget::SetCharacterRace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetCharacterRace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetCharacterSex
// (Final, Native, Private)

void UDebugMenuWidget::SetCharacterSex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetCharacterSex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetFeet
// (Final, Native, Private)

void UDebugMenuWidget::SetFeet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetFeet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetHands
// (Final, Native, Private)

void UDebugMenuWidget::SetHands()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetHands");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetHelmet
// (Final, Native, Private)

void UDebugMenuWidget::SetHelmet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetHelmet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetLowerBody
// (Final, Native, Private)

void UDebugMenuWidget::SetLowerBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetLowerBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetShowroomBackdropRotation
// (Final, Native, Private)

void UDebugMenuWidget::SetShowroomBackdropRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetShowroomBackdropRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetShowroomSkylightIntensity
// (Final, Native, Private)

void UDebugMenuWidget::SetShowroomSkylightIntensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetShowroomSkylightIntensity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetTimeOfDay
// (Final, Native, Private)

void UDebugMenuWidget::SetTimeOfDay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetTimeOfDay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SetUpperBody
// (Final, Native, Private)

void UDebugMenuWidget::SetUpperBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SetUpperBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SpawnCreature
// (Final, Native, Private)

void UDebugMenuWidget::SpawnCreature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SpawnCreature");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SwitchShowroomBackground
// (Final, Native, Private)

void UDebugMenuWidget::SwitchShowroomBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SwitchShowroomBackground");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.SwitchShowroomSpawnType
// (Final, Native, Private)

void UDebugMenuWidget::SwitchShowroomSpawnType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "SwitchShowroomSpawnType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ToggleDebugMenu
// (Final, Native, Public, BlueprintCallable)

void UDebugMenuWidget::ToggleDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ToggleDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ToggleInventoryDebugMode
// (Final, Native, Private)

void UDebugMenuWidget::ToggleInventoryDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ToggleInventoryDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ToggleLevelList
// (Final, Native, Private)

void UDebugMenuWidget::ToggleLevelList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ToggleLevelList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ToggleLocalMapUIDisplay
// (Final, Native, Private)

void UDebugMenuWidget::ToggleLocalMapUIDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ToggleLocalMapUIDisplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ToggleShowroomLightsVisibility
// (Final, Native, Private)

void UDebugMenuWidget::ToggleShowroomLightsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ToggleShowroomLightsVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DebugMenuWidget.ToggleShowroomPropsVisibility
// (Final, Native, Private)

void UDebugMenuWidget::ToggleShowroomPropsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugMenuWidget", "ToggleShowroomPropsVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DialogueSceneSubsystem.RemoveLightRigOnActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVPairedCharacter*                TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueSceneSubsystem::RemoveLightRigOnActor(class AVPairedCharacter* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueSceneSubsystem", "RemoveLightRigOnActor");

	Params::DialogueSceneSubsystem_RemoveLightRigOnActor Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.DialogueSceneSubsystem.SpawnLightRigOnActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVPairedCharacter*                TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AVLightRig*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVLightRig* UDialogueSceneSubsystem::SpawnLightRigOnActor(class AVPairedCharacter* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueSceneSubsystem", "SpawnLightRigOnActor");

	Params::DialogueSceneSubsystem_SpawnLightRigOnActor Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDressingSwitcher.OnTargetDisabled
// (Final, Native, Public)
// Parameters:
// bool                                    bShouldBeDisabled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVDressingSwitcher::OnTargetDisabled(bool bShouldBeDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDressingSwitcher", "OnTargetDisabled");

	Params::VDressingSwitcher_OnTargetDisabled Parms{};

	Parms.bShouldBeDisabled = bShouldBeDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDressingSwitcher.RefreshVisibilityFromTarget
// (Final, Native, Protected, BlueprintCallable)

void AVDressingSwitcher::RefreshVisibilityFromTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDressingSwitcher", "RefreshVisibilityFromTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.ApplyNewValue
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   WidgetValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesTriggerAutoRevert                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::ApplyNewValue(float WidgetValue, bool bDoesTriggerAutoRevert, bool bIsInit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "ApplyNewValue");

	Params::VModernSettingWidget_ApplyNewValue Parms{};

	Parms.WidgetValue = WidgetValue;
	Parms.bDoesTriggerAutoRevert = bDoesTriggerAutoRevert;
	Parms.bIsInit = bIsInit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.GetIsPainted
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVModernSettingWidget::GetIsPainted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "GetIsPainted");

	Params::VModernSettingWidget_GetIsPainted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingWidget.GetSettingRow
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FModernSettingTableRow     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernSettingTableRow UVModernSettingWidget::GetSettingRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "GetSettingRow");

	Params::VModernSettingWidget_GetSettingRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingWidget.OnConsoleVariableChanged
// (Event, Public, BlueprintEvent)

void UVModernSettingWidget::OnConsoleVariableChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnConsoleVariableChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernSettingWidget.OnLockStateUpdated
// (Event, Public, BlueprintEvent)

void UVModernSettingWidget::OnLockStateUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnLockStateUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernSettingWidget.OnReceiveBroadcastFromSettingSubsystem
// (Final, Native, Protected)
// Parameters:
// const class FString&                    NewCommand                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::OnReceiveBroadcastFromSettingSubsystem(const class FString& NewCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnReceiveBroadcastFromSettingSubsystem");

	Params::VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem Parms{};

	Parms.NewCommand = std::move(NewCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.OnRefreshWidgetRequested
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::OnRefreshWidgetRequested(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnRefreshWidgetRequested");

	Params::VModernSettingWidget_OnRefreshWidgetRequested Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernSettingWidget.OnSettingAccept
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVModernSettingWidget::OnSettingAccept()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnSettingAccept");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernSettingWidget.OnSettingChanged
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FModernSettingTableRow&    NewSettingRow                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSettingWidget::OnSettingChanged(const struct FModernSettingTableRow& NewSettingRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnSettingChanged");

	Params::VModernSettingWidget_OnSettingChanged Parms{};

	Parms.NewSettingRow = std::move(NewSettingRow);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernSettingWidget.OnSettingNavigateLeft
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVModernSettingWidget::OnSettingNavigateLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnSettingNavigateLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernSettingWidget.OnSettingNavigateRight
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVModernSettingWidget::OnSettingNavigateRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnSettingNavigateRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernSettingWidget.OnUserInputDeviceConnectionChange
// (Final, Native, Private)
// Parameters:
// EInputDeviceConnectionState             NewConnectionState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPlatformUserId&           PlatformUserId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FInputDeviceId&            InputDeviceId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::OnUserInputDeviceConnectionChange(EInputDeviceConnectionState NewConnectionState, const struct FPlatformUserId& PlatformUserId, const struct FInputDeviceId& InputDeviceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnUserInputDeviceConnectionChange");

	Params::VModernSettingWidget_OnUserInputDeviceConnectionChange Parms{};

	Parms.NewConnectionState = NewConnectionState;
	Parms.PlatformUserId = std::move(PlatformUserId);
	Parms.InputDeviceId = std::move(InputDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.OnVibrationRequested
// (Event, Public, BlueprintEvent)

void UVModernSettingWidget::OnVibrationRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "OnVibrationRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernSettingWidget.RequestChangeParentScrollState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::RequestChangeParentScrollState(bool bNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "RequestChangeParentScrollState");

	Params::VModernSettingWidget_RequestChangeParentScrollState Parms{};

	Parms.bNewState = bNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.RevertSettingToDefault
// (Final, Native, Public, BlueprintCallable)

void UVModernSettingWidget::RevertSettingToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "RevertSettingToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.RevertSettingToLastChange
// (Final, Native, Public, BlueprintCallable)

void UVModernSettingWidget::RevertSettingToLastChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "RevertSettingToLastChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.RevertSettingToSavedState
// (Final, Native, Public, BlueprintCallable)

void UVModernSettingWidget::RevertSettingToSavedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "RevertSettingToSavedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.SaveSetting
// (Final, Native, Public, BlueprintCallable)

void UVModernSettingWidget::SaveSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "SaveSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.SetCurrentWidgetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::SetCurrentWidgetValue(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "SetCurrentWidgetValue");

	Params::VModernSettingWidget_SetCurrentWidgetValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.SetSettingRow
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernSettingTableRow&    NewSettingRow                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSettingWidget::SetSettingRow(const struct FModernSettingTableRow& NewSettingRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "SetSettingRow");

	Params::VModernSettingWidget_SetSettingRow Parms{};

	Parms.NewSettingRow = std::move(NewSettingRow);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.UpdateLockState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewLockState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSettingWidget::UpdateLockState(bool bNewLockState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "UpdateLockState");

	Params::VModernSettingWidget_UpdateLockState Parms{};

	Parms.bNewLockState = bNewLockState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.UpdateStepCommand
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32                             StepIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModernSettingCommand&     NewCommand                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSettingWidget::UpdateStepCommand(const int32 StepIndex, const struct FModernSettingCommand& NewCommand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "UpdateStepCommand");

	Params::VModernSettingWidget_UpdateStepCommand Parms{};

	Parms.StepIndex = StepIndex;
	Parms.NewCommand = std::move(NewCommand);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingWidget.GetCurrentWidgetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModernSettingWidget::GetCurrentWidgetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "GetCurrentWidgetValue");

	Params::VModernSettingWidget_GetCurrentWidgetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingWidget.IsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSettingWidget::IsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingWidget", "IsLocked");

	Params::VModernSettingWidget_IsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.HelpMenuListEntryData.GetIsCategory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHelpMenuListEntryData::GetIsCategory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelpMenuListEntryData", "GetIsCategory");

	Params::HelpMenuListEntryData_GetIsCategory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.HelpMenuListEntryData.InitializeEntry
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModernHelpMenuEntry&      DataEntry                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHelpMenuListEntryData::InitializeEntry(const class FName& ID, const struct FModernHelpMenuEntry& DataEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelpMenuListEntryData", "InitializeEntry");

	Params::HelpMenuListEntryData_InitializeEntry Parms{};

	Parms.ID = ID;
	Parms.DataEntry = std::move(DataEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.HelpMenuListEntryData.InitializeHeader
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      HeaderString                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*                       CategoryIcon                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsExpanded                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHelpMenuListEntryData::InitializeHeader(const class FText& HeaderString, class UTexture2D* CategoryIcon, bool bInIsExpanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HelpMenuListEntryData", "InitializeHeader");

	Params::HelpMenuListEntryData_InitializeHeader Parms{};

	Parms.HeaderString = std::move(HeaderString);
	Parms.CategoryIcon = CategoryIcon;
	Parms.bInIsExpanded = bInIsExpanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableEditableText.StartEditText
// (Final, Native, Public, BlueprintCallable)

void UVAltarNavigableEditableText::StartEditText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableEditableText", "StartEditText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableEditableText.StopEditText
// (Final, Native, Public, BlueprintCallable)

void UVAltarNavigableEditableText::StopEditText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableEditableText", "StopEditText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarImageCalibrationWidget.SetAndSaveBrightnessSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BrightnessValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarImageCalibrationWidget::SetAndSaveBrightnessSetting(float BrightnessValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarImageCalibrationWidget", "SetAndSaveBrightnessSetting");

	Params::VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting Parms{};

	Parms.BrightnessValue = BrightnessValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarImageCalibrationWidget.GetBrightnessSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAltarImageCalibrationWidget::GetBrightnessSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarImageCalibrationWidget", "GetBrightnessSetting");

	Params::VAltarImageCalibrationWidget_GetBrightnessSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarImageCalibrationWidget.GetIsCalibratedSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarImageCalibrationWidget::GetIsCalibratedSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarImageCalibrationWidget", "GetIsCalibratedSetting");

	Params::VAltarImageCalibrationWidget_GetIsCalibratedSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_CharacCreationToggleItem.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_CharacCreationToggleItem::SetIsSelected(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationToggleItem", "SetIsSelected");

	Params::VModern_CharacCreationToggleItem_SetIsSelected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_CharacCreationToggleItem.SetOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVRaceSexMenuCustomisationOptions&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModern_CharacCreationToggleItem::SetOption(const struct FVRaceSexMenuCustomisationOptions& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationToggleItem", "SetOption");

	Params::VModern_CharacCreationToggleItem_SetOption Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_CharacCreationToggleItem.SetOptionIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_CharacCreationToggleItem::SetOptionIndex(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationToggleItem", "SetOptionIndex");

	Params::VModern_CharacCreationToggleItem_SetOptionIndex Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_CharacCreationToggleItem.GetOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVRaceSexMenuCustomisationOptionsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FVRaceSexMenuCustomisationOptions UVModern_CharacCreationToggleItem::GetOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationToggleItem", "GetOption");

	Params::VModern_CharacCreationToggleItem_GetOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_CharacCreationToggleItem.GetOptionIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVModern_CharacCreationToggleItem::GetOptionIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationToggleItem", "GetOptionIndex");

	Params::VModern_CharacCreationToggleItem_GetOptionIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_CharacCreationToggleItem.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVModern_CharacCreationToggleItem::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationToggleItem", "IsSelected");

	Params::VModern_CharacCreationToggleItem_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenuQuestItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuQuestProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyMapMenuQuestItem::SetProperties(const struct FLegacyMapMenuQuestProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenuQuestItem", "SetProperties");

	Params::VLegacyMapMenuQuestItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyMapMenuQuestItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMapMenuQuestPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyMapMenuQuestProperties UVLegacyMapMenuQuestItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenuQuestItem", "GetProperties");

	Params::VLegacyMapMenuQuestItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenuQuestItem.GetQuestId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVLegacyMapMenuQuestItem::GetQuestId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenuQuestItem", "GetQuestId");

	Params::VLegacyMapMenuQuestItem_GetQuestId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPrepareAttackAnimInstance.OnPrepareAttackEnter
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVPrepareAttackAnimInstance::OnPrepareAttackEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPrepareAttackAnimInstance", "OnPrepareAttackEnter");

	Params::VPrepareAttackAnimInstance_OnPrepareAttackEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillItemObject.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewSelectionState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSkillItemObject::SetIsSelected(bool bNewSelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillItemObject", "SetIsSelected");

	Params::VSkillItemObject_SetIsSelected Parms{};

	Parms.bNewSelectionState = bNewSelectionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillItemObject.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSkillsMenuItemProperties& NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSkillItemObject::SetProperties(const struct FSkillsMenuItemProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillItemObject", "SetProperties");

	Params::VSkillItemObject_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillItemObject.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSkillsMenuItemProperties  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSkillsMenuItemProperties UVSkillItemObject::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillItemObject", "GetProperties");

	Params::VSkillItemObject_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSkillItemObject.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSkillItemObject::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillItemObject", "IsSelected");

	Params::VSkillItemObject_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.LightRigTriggerVolume.OnBeginOverlap
// (Final, Native, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALightRigTriggerVolume::OnBeginOverlap(class AActor* Actor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightRigTriggerVolume", "OnBeginOverlap");

	Params::LightRigTriggerVolume_OnBeginOverlap Parms{};

	Parms.Actor = Actor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.LightRigTriggerVolume.OnEndOverlap
// (Final, Native, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALightRigTriggerVolume::OnEndOverlap(class AActor* Actor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightRigTriggerVolume", "OnEndOverlap");

	Params::LightRigTriggerVolume_OnEndOverlap Parms{};

	Parms.Actor = Actor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.LocalMapManager.GetLocalMapCoordinates
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   WorldPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULocalMapManager::GetLocalMapCoordinates(const struct FVector& WorldPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocalMapManager", "GetLocalMapCoordinates");

	Params::LocalMapManager_GetLocalMapCoordinates Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.LocalMapManager.LocalMapToUnrealWorld
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 LocalMapPosition                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 MapSize                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULocalMapManager::LocalMapToUnrealWorld(const struct FVector2D& LocalMapPosition, const struct FVector2D& MapSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocalMapManager", "LocalMapToUnrealWorld");

	Params::LocalMapManager_LocalMapToUnrealWorld Parms{};

	Parms.LocalMapPosition = std::move(LocalMapPosition);
	Parms.MapSize = std::move(MapSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMergedSkeletalMeshComponent.GetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UVMergedSkeletalMeshComponent::GetSkeletalMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMergedSkeletalMeshComponent", "GetSkeletalMeshComponent");

	Params::VMergedSkeletalMeshComponent_GetSkeletalMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMergedSkeletalMeshComponent.SetMergedMesh
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           MasterPoseComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class USkeletalMesh*>&     SkeletalMeshes                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMergedSkeletalMeshComponent::SetMergedMesh(class USkeletalMeshComponent* MasterPoseComponent, const TArray<class USkeletalMesh*>& SkeletalMeshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMergedSkeletalMeshComponent", "SetMergedMesh");

	Params::VMergedSkeletalMeshComponent_SetMergedMesh Parms{};

	Parms.MasterPoseComponent = MasterPoseComponent;
	Parms.SkeletalMeshes = std::move(SkeletalMeshes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon_Staff.OnChargeUp
// (Native, Event, Public, BlueprintEvent)

void AVWeapon_Staff::OnChargeUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon_Staff", "OnChargeUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon_Staff.OnFire
// (Native, Event, Public, BlueprintEvent)

void AVWeapon_Staff::OnFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon_Staff", "OnFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.MeshMergeFunctionLibrary.MergeMeshes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSkeletalMeshMergeParams&  Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UMeshMergeFunctionLibrary::MergeMeshes(const struct FSkeletalMeshMergeParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MeshMergeFunctionLibrary", "MergeMeshes");

	Params::MeshMergeFunctionLibrary_MergeMeshes Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyListViewBase.OnScrollOffsetOfEndChangedInternal
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ScrollOffsetOfEnd                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyListViewBase::OnScrollOffsetOfEndChangedInternal(float ScrollOffsetOfEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewBase", "OnScrollOffsetOfEndChangedInternal");

	Params::VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal Parms{};

	Parms.ScrollOffsetOfEnd = ScrollOffsetOfEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyListViewBase.RequestScrollOffsetOfEndSync
// (Final, Native, Public, BlueprintCallable)

void UVLegacyListViewBase::RequestScrollOffsetOfEndSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewBase", "RequestScrollOffsetOfEndSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyListViewBase.GetEntryFromItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UObject*                    Item                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UVLegacyListViewBase::GetEntryFromItem(const class UObject* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewBase", "GetEntryFromItem");

	Params::VLegacyListViewBase_GetEntryFromItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyListViewBase.GetItemFromEntryWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UUserWidget*                EntryWidget                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* UVLegacyListViewBase::GetItemFromEntryWidget(const class UUserWidget* EntryWidget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewBase", "GetItemFromEntryWidget");

	Params::VLegacyListViewBase_GetItemFromEntryWidget Parms{};

	Parms.EntryWidget = EntryWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyListViewBase.GetItemIndexOfTopEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyListViewBase::GetItemIndexOfTopEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewBase", "GetItemIndexOfTopEntry");

	Params::VLegacyListViewBase_GetItemIndexOfTopEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyListViewBase.GetScrollOffsetOfEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyListViewBase::GetScrollOffsetOfEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewBase", "GetScrollOffsetOfEnd");

	Params::VLegacyListViewBase_GetScrollOffsetOfEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationListview.NavigateToItemIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SelectedChildIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class INavigationUIElement>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class INavigationUIElement> UNavigationListview::NavigateToItemIndex(int32 SelectedChildIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationListview", "NavigateToItemIndex");

	Params::NavigationListview_NavigateToItemIndex Parms{};

	Parms.SelectedChildIndex = SelectedChildIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationListview.OnEntryClicked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationListview::OnEntryClicked(class UObject* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationListview", "OnEntryClicked");

	Params::NavigationListview_OnEntryClicked Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.NavigationListview.GetChildIndexFromWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          NavigatableWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNavigationListview::GetChildIndexFromWidget(class UWidget* NavigatableWidget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationListview", "GetChildIndexFromWidget");

	Params::NavigationListview_GetChildIndexFromWidget Parms{};

	Parms.NavigatableWidget = NavigatableWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationListviewEntry.OnSynchronizeProperties
// (Event, Protected, BlueprintEvent)

void UNavigationListviewEntry::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationListviewEntry", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.NavigationListviewEntry.SetItemObject
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationListviewEntry::SetItemObject(class UObject* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationListviewEntry", "SetItemObject");

	Params::NavigationListviewEntry_SetItemObject Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.NavigationListviewEntry.IsListItemSelectable
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavigationListviewEntry::IsListItemSelectable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationListviewEntry", "IsListItemSelectable");

	Params::NavigationListviewEntry_IsListItemSelectable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUIElement.GetNavigationWidgetForAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENavigationInputAction                  Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class INavigationUIElement>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class INavigationUIElement> INavigationUIElement::GetNavigationWidgetForAction(ENavigationInputAction Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavigationUIElement", "GetNavigationWidgetForAction");

	Params::NavigationUIElement_GetNavigationWidgetForAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUIElement.OnCancelPressed
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void INavigationUIElement::OnCancelPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavigationUIElement", "OnCancelPressed");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function Altar.NavigationUIElement.OnFocus
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void INavigationUIElement::OnFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavigationUIElement", "OnFocus");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function Altar.NavigationUIElement.OnSubmitPressed
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void INavigationUIElement::OnSubmitPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavigationUIElement", "OnSubmitPressed");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function Altar.NavigationUIElement.OnUnfocus
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void INavigationUIElement::OnUnfocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavigationUIElement", "OnUnfocus");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function Altar.NavigationUIElement.IsNavigatable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool INavigationUIElement::IsNavigatable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavigationUIElement", "IsNavigatable");

	Params::NavigationUIElement_IsNavigatable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.NavigateTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class INavigationUIElement>DestinationElement                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationUISubsystem::NavigateTo(TScriptInterface<class INavigationUIElement> DestinationElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "NavigateTo");

	Params::NavigationUISubsystem_NavigateTo Parms{};

	Parms.DestinationElement = DestinationElement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.NavigationUISubsystem.StartNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class INavigationUIElement>DefaultNavigationElement                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ImmediatelyFocus                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVAltarMenu*                      Menu                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationUISubsystem::StartNavigation(TScriptInterface<class INavigationUIElement> DefaultNavigationElement, bool ImmediatelyFocus, class UVAltarMenu* Menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "StartNavigation");

	Params::NavigationUISubsystem_StartNavigation Parms{};

	Parms.DefaultNavigationElement = DefaultNavigationElement;
	Parms.ImmediatelyFocus = ImmediatelyFocus;
	Parms.Menu = Menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.NavigationUISubsystem.StopNavigation
// (Final, Native, Public, BlueprintCallable)

void UNavigationUISubsystem::StopNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "StopNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.NavigationUISubsystem.GetCurrentInputType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECommonInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECommonInputType UNavigationUISubsystem::GetCurrentInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetCurrentInputType");

	Params::NavigationUISubsystem_GetCurrentInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.GetCurrentNavigationWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UNavigationUISubsystem::GetCurrentNavigationWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetCurrentNavigationWidget");

	Params::NavigationUISubsystem_GetCurrentNavigationWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.GetLastNavigationAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENavigationInputAction                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENavigationInputAction UNavigationUISubsystem::GetLastNavigationAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetLastNavigationAction");

	Params::NavigationUISubsystem_GetLastNavigationAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.GetLefthumbstickAxisValue_Y
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNavigationUISubsystem::GetLefthumbstickAxisValue_Y() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetLefthumbstickAxisValue_Y");

	Params::NavigationUISubsystem_GetLefthumbstickAxisValue_Y Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.GetLeftThumbstickAxisValue_X
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNavigationUISubsystem::GetLeftThumbstickAxisValue_X() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetLeftThumbstickAxisValue_X");

	Params::NavigationUISubsystem_GetLeftThumbstickAxisValue_X Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.GetRightThumbstickAxisValue_X
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNavigationUISubsystem::GetRightThumbstickAxisValue_X() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetRightThumbstickAxisValue_X");

	Params::NavigationUISubsystem_GetRightThumbstickAxisValue_X Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.GetRightThumbstickAxisValue_Y
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNavigationUISubsystem::GetRightThumbstickAxisValue_Y() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "GetRightThumbstickAxisValue_Y");

	Params::NavigationUISubsystem_GetRightThumbstickAxisValue_Y Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.IsGamepadActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavigationUISubsystem::IsGamepadActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "IsGamepadActive");

	Params::NavigationUISubsystem_IsGamepadActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavigationUISubsystem.IsShiftKeyDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavigationUISubsystem::IsShiftKeyDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationUISubsystem", "IsShiftKeyDown");

	Params::NavigationUISubsystem_IsShiftKeyDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.NavMeshLandmarkMetaClustersSubsystem.OnLandmarkActorEndPlay
// (Final, Native, Private)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EEndPlayReason                    EndPlayReason                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavMeshLandmarkMetaClustersSubsystem::OnLandmarkActorEndPlay(const class AActor* Actor, const EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavMeshLandmarkMetaClustersSubsystem", "OnLandmarkActorEndPlay");

	Params::NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.NavMeshLandmarkMetaClustersSubsystem.OnNavDataRegistered
// (Final, Native, Private)
// Parameters:
// const class ANavigationData*            NavData                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavMeshLandmarkMetaClustersSubsystem::OnNavDataRegistered(const class ANavigationData* NavData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavMeshLandmarkMetaClustersSubsystem", "OnNavDataRegistered");

	Params::NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered Parms{};

	Parms.NavData = NavData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyStatsMenu.MoveToNextPage
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              Right                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyStatsMenu::MoveToNextPage(const bool Right)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenu", "MoveToNextPage");

	Params::VLegacyStatsMenu_MoveToNextPage Parms{};

	Parms.Right = Right;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyStatsMenu.GetPage1
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyStatsMenuPage1*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyStatsMenuPage1* UVLegacyStatsMenu::GetPage1() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenu", "GetPage1");

	Params::VLegacyStatsMenu_GetPage1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenu.GetPage2
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyStatsMenuPage2*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyStatsMenuPage2* UVLegacyStatsMenu::GetPage2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenu", "GetPage2");

	Params::VLegacyStatsMenu_GetPage2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenu.GetPage3
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyStatsMenuPage3*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyStatsMenuPage3* UVLegacyStatsMenu::GetPage3() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenu", "GetPage3");

	Params::VLegacyStatsMenu_GetPage3 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenu.GetPage4
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyStatsMenuPage4*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyStatsMenuPage4* UVLegacyStatsMenu::GetPage4() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenu", "GetPage4");

	Params::VLegacyStatsMenu_GetPage4 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenu.GetPage5
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyStatsMenuPage5*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyStatsMenuPage5* UVLegacyStatsMenu::GetPage5() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenu", "GetPage5");

	Params::VLegacyStatsMenu_GetPage5 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.RegisterSendClickOnItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::RegisterSendClickOnItemHandler(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "RegisterSendClickOnItemHandler");

	Params::VInventoryMenuViewModel_RegisterSendClickOnItemHandler Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.RegisterSendDropAllItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::RegisterSendDropAllItemHandler(int32 ItemIndex, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "RegisterSendDropAllItemHandler");

	Params::VInventoryMenuViewModel_RegisterSendDropAllItemHandler Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.RegisterSendDropAndHoldItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::RegisterSendDropAndHoldItemHandler(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "RegisterSendDropAndHoldItemHandler");

	Params::VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.RegisterSendDropItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::RegisterSendDropItemHandler(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "RegisterSendDropItemHandler");

	Params::VInventoryMenuViewModel_RegisterSendDropItemHandler Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.RegisterSendItemHoverHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::RegisterSendItemHoverHandler(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "RegisterSendItemHoverHandler");

	Params::VInventoryMenuViewModel_RegisterSendItemHoverHandler Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.ReplaceCurrentPageItemsInventory
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>&NewPageInventory                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::ReplaceCurrentPageItemsInventory(const TArray<struct FOriginalInventoryMenuItemProperties>& NewPageInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "ReplaceCurrentPageItemsInventory");

	Params::VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory Parms{};

	Parms.NewPageInventory = std::move(NewPageInventory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetBlockBackAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBlockBackAction                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetBlockBackAction(bool bNewBlockBackAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetBlockBackAction");

	Params::VInventoryMenuViewModel_SetBlockBackAction Parms{};

	Parms.bNewBlockBackAction = bNewBlockBackAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetCurrentPageInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyInventoryMenuPage                NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetCurrentPageInventory(ELegacyInventoryMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetCurrentPageInventory");

	Params::VInventoryMenuViewModel_SetCurrentPageInventory Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetExtraData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyInventoryMenuExtraData&NewExtraData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetExtraData(const struct FLegacyInventoryMenuExtraData& NewExtraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetExtraData");

	Params::VInventoryMenuViewModel_SetExtraData Parms{};

	Parms.NewExtraData = std::move(NewExtraData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetInventory
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>&InventoryItems                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetInventory(const TArray<struct FOriginalInventoryMenuItemProperties>& InventoryItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetInventory");

	Params::VInventoryMenuViewModel_SetInventory Parms{};

	Parms.InventoryItems = std::move(InventoryItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetIsListViewHovered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsListViewHovered                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetIsListViewHovered(bool bNewIsListViewHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetIsListViewHovered");

	Params::VInventoryMenuViewModel_SetIsListViewHovered Parms{};

	Parms.bNewIsListViewHovered = bNewIsListViewHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetIsSortReversedInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversedInventory                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetIsSortReversedInventory(bool bNewIsSortReversedInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetIsSortReversedInventory");

	Params::VInventoryMenuViewModel_SetIsSortReversedInventory Parms{};

	Parms.bNewIsSortReversedInventory = bNewIsSortReversedInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.SetSortTypeInventory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortTypeInventory                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryMenuViewModel::SetSortTypeInventory(const EOriginalInventoryMenuSortType& NewSortTypeInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "SetSortTypeInventory");

	Params::VInventoryMenuViewModel_SetSortTypeInventory Parms{};

	Parms.NewSortTypeInventory = NewSortTypeInventory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryMenuViewModel.GetBlockBackAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInventoryMenuViewModel::GetBlockBackAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetBlockBackAction");

	Params::VInventoryMenuViewModel_GetBlockBackAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetCurrentPageInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyInventoryMenuPage                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyInventoryMenuPage UVInventoryMenuViewModel::GetCurrentPageInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetCurrentPageInventory");

	Params::VInventoryMenuViewModel_GetCurrentPageInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetCurrentPageItemsInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalInventoryMenuItemProperties> UVInventoryMenuViewModel::GetCurrentPageItemsInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetCurrentPageItemsInventory");

	Params::VInventoryMenuViewModel_GetCurrentPageItemsInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetExtraData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyInventoryMenuExtraDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyInventoryMenuExtraData UVInventoryMenuViewModel::GetExtraData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetExtraData");

	Params::VInventoryMenuViewModel_GetExtraData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalInventoryMenuItemProperties> UVInventoryMenuViewModel::GetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetInventory");

	Params::VInventoryMenuViewModel_GetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetIsListViewHovered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInventoryMenuViewModel::GetIsListViewHovered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetIsListViewHovered");

	Params::VInventoryMenuViewModel_GetIsListViewHovered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetIsSortReversedInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInventoryMenuViewModel::GetIsSortReversedInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetIsSortReversedInventory");

	Params::VInventoryMenuViewModel_GetIsSortReversedInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.GetSortTypeInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVInventoryMenuViewModel::GetSortTypeInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "GetSortTypeInventory");

	Params::VInventoryMenuViewModel_GetSortTypeInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryMenuViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInventoryMenuViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryMenuViewModel", "ThisIsForPluginCompliance");

	Params::VInventoryMenuViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDetectionLightingSettings.GetNumberOfLineTracesForTraceType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EVDetectionLightingObstructionTracesTypeTraceType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVDetectionLightingSettings::GetNumberOfLineTracesForTraceType(const EVDetectionLightingObstructionTracesType TraceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VDetectionLightingSettings", "GetNumberOfLineTracesForTraceType");

	Params::VDetectionLightingSettings_GetNumberOfLineTracesForTraceType Parms{};

	Parms.TraceType = TraceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDetectionLightingSettings.GetNumberOfLineTracesForCurrentTraceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVDetectionLightingSettings::GetNumberOfLineTracesForCurrentTraceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDetectionLightingSettings", "GetNumberOfLineTracesForCurrentTraceType");

	Params::VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBaseStaffAttackAnimInstance.OnAttackEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVBaseStaffAttackAnimInstance::OnAttackEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBaseStaffAttackAnimInstance", "OnAttackEnter");

	Params::VBaseStaffAttackAnimInstance_OnAttackEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStaggerCharacterAnimInstance.UpdateData
// (Native, Protected, BlueprintCallable)

void UVStaggerCharacterAnimInstance::UpdateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStaggerCharacterAnimInstance", "UpdateData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBlinkCharacterAnimInstance.GetBlinkProgress
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVBlinkCharacterAnimInstance::GetBlinkProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlinkCharacterAnimInstance", "GetBlinkProgress");

	Params::VBlinkCharacterAnimInstance_GetBlinkProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlinkCharacterAnimInstance.IsBlinking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBlinkCharacterAnimInstance::IsBlinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlinkCharacterAnimInstance", "IsBlinking");

	Params::VBlinkCharacterAnimInstance_IsBlinking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlinkCharacterAnimInstance.IsDead
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBlinkCharacterAnimInstance::IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlinkCharacterAnimInstance", "IsDead");

	Params::VBlinkCharacterAnimInstance_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlinkCharacterAnimInstance.IsSleeping
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBlinkCharacterAnimInstance::IsSleeping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlinkCharacterAnimInstance", "IsSleeping");

	Params::VBlinkCharacterAnimInstance_IsSleeping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlinkCreatureCharacterAnimInstance.GetBlinkWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVBlinkCreatureCharacterAnimInstance::GetBlinkWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlinkCreatureCharacterAnimInstance", "GetBlinkWeight");

	Params::VBlinkCreatureCharacterAnimInstance_GetBlinkWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTrailVFXBlueprint.OnStartPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsPowerAttack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsUsingWeapon                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       BoneNameUsedToAttack                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USceneComponent*            WeaponRootComp                                         (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVTrailVFXBlueprint::OnStartPlay(bool bIsPowerAttack, bool bIsUsingWeapon, const class FName BoneNameUsedToAttack, const class USceneComponent* WeaponRootComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrailVFXBlueprint", "OnStartPlay");

	Params::VTrailVFXBlueprint_OnStartPlay Parms{};

	Parms.bIsPowerAttack = bIsPowerAttack;
	Parms.bIsUsingWeapon = bIsUsingWeapon;
	Parms.BoneNameUsedToAttack = BoneNameUsedToAttack;
	Parms.WeaponRootComp = WeaponRootComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VTrailVFXBlueprint.OnStopPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVTrailVFXBlueprint::OnStopPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrailVFXBlueprint", "OnStopPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarUIDebugSubsystem.GetDebugInventoryItemLocationOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVAltarUIDebugSubsystem::GetDebugInventoryItemLocationOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "GetDebugInventoryItemLocationOffset");

	Params::VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIDebugSubsystem.GetDebugInventoryItemRotationOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UVAltarUIDebugSubsystem::GetDebugInventoryItemRotationOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "GetDebugInventoryItemRotationOffset");

	Params::VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIDebugSubsystem.GetDebugInventoryItemScaleOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVAltarUIDebugSubsystem::GetDebugInventoryItemScaleOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "GetDebugInventoryItemScaleOffset");

	Params::VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIDebugSubsystem.GetInventoryDebugModeState
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarUIDebugSubsystem::GetInventoryDebugModeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "GetInventoryDebugModeState");

	Params::VAltarUIDebugSubsystem_GetInventoryDebugModeState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIDebugSubsystem.SetDebugInventoryItemLocationOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InNewLocationOffset                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIDebugSubsystem::SetDebugInventoryItemLocationOffset(const struct FVector& InNewLocationOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "SetDebugInventoryItemLocationOffset");

	Params::VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset Parms{};

	Parms.InNewLocationOffset = std::move(InNewLocationOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIDebugSubsystem.SetDebugInventoryItemRotationOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  InNewRotationOffset                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UVAltarUIDebugSubsystem::SetDebugInventoryItemRotationOffset(const struct FRotator& InNewRotationOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "SetDebugInventoryItemRotationOffset");

	Params::VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset Parms{};

	Parms.InNewRotationOffset = std::move(InNewRotationOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIDebugSubsystem.SetDebugInventoryItemScaleOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InNewScaleOffset                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIDebugSubsystem::SetDebugInventoryItemScaleOffset(const struct FVector& InNewScaleOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "SetDebugInventoryItemScaleOffset");

	Params::VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset Parms{};

	Parms.InNewScaleOffset = std::move(InNewScaleOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIDebugSubsystem.SetInventoryDebugModeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIDebugSubsystem::SetInventoryDebugModeEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUIDebugSubsystem", "SetInventoryDebugModeEnabled");

	Params::VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAnimNotifyState_SyncAnim.SyncAnimation
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartAnimTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAnimNotifyState_SyncAnim::SyncAnimation(class AActor* OwnerActor, float StartAnimTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimNotifyState_SyncAnim", "SyncAnimation");

	Params::VAnimNotifyState_SyncAnim_SyncAnimation Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.StartAnimTime = StartAnimTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTextEditMenuViewModel.RegisterSendClickedCancelButton
// (Final, Native, Public, BlueprintCallable)

void UVTextEditMenuViewModel::RegisterSendClickedCancelButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTextEditMenuViewModel", "RegisterSendClickedCancelButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTextEditMenuViewModel.RegisterSendClickedOkButton
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      UpdatedText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVTextEditMenuViewModel::RegisterSendClickedOkButton(const class FText& UpdatedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTextEditMenuViewModel", "RegisterSendClickedOkButton");

	Params::VTextEditMenuViewModel_RegisterSendClickedOkButton Parms{};

	Parms.UpdatedText = std::move(UpdatedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTextEditMenuViewModel.SetProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyTextEditMenuProperties&Properties_0                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVTextEditMenuViewModel::SetProperties(const struct FLegacyTextEditMenuProperties& Properties_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTextEditMenuViewModel", "SetProperties");

	Params::VTextEditMenuViewModel_SetProperties Parms{};

	Parms.Properties_0 = std::move(Properties_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTextEditMenuViewModel.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyTextEditMenuProperties    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacyTextEditMenuProperties UVTextEditMenuViewModel::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTextEditMenuViewModel", "GetProperties");

	Params::VTextEditMenuViewModel_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VClairvoyanceVFXBlueprint.OnStartPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 SplineComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVClairvoyanceVFXBlueprint::OnStartPlay(class USplineComponent* SplineComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClairvoyanceVFXBlueprint", "OnStartPlay");

	Params::VClairvoyanceVFXBlueprint_OnStartPlay Parms{};

	Parms.SplineComp = SplineComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VClairvoyanceVFXBlueprint.OnStopPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVClairvoyanceVFXBlueprint::OnStopPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClairvoyanceVFXBlueprint", "OnStopPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VClassOverviewViewModel.AddClassSkill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSkillInformation&         SkillToAdd                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::AddClassSkill(const struct FSkillInformation& SkillToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "AddClassSkill");

	Params::VClassOverviewViewModel_AddClassSkill Parms{};

	Parms.SkillToAdd = std::move(SkillToAdd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.ClearClassAttributes
// (Final, Native, Public, BlueprintCallable)

void UVClassOverviewViewModel::ClearClassAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "ClearClassAttributes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.ClearClassSkills
// (Final, Native, Public, BlueprintCallable)

void UVClassOverviewViewModel::ClearClassSkills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "ClearClassSkills");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.RemoveClassSkill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSkillInformation&         SkillToRemove                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::RemoveClassSkill(const struct FSkillInformation& SkillToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "RemoveClassSkill");

	Params::VClassOverviewViewModel_RemoveClassSkill Parms{};

	Parms.SkillToRemove = std::move(SkillToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetClassName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetClassName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetClassName");

	Params::VClassOverviewViewModel_SetClassName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetClassPicture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewPicture                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetClassPicture(class UTexture2D* NewPicture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetClassPicture");

	Params::VClassOverviewViewModel_SetClassPicture Parms{};

	Parms.NewPicture = NewPicture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetClassProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPlayerClassItemProperties&NewClassProperties                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetClassProperties(const struct FPlayerClassItemProperties& NewClassProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetClassProperties");

	Params::VClassOverviewViewModel_SetClassProperties Parms{};

	Parms.NewClassProperties = std::move(NewClassProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetClassSpecialisation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewSpecialisation                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetClassSpecialisation(const class FText& NewSpecialisation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetClassSpecialisation");

	Params::VClassOverviewViewModel_SetClassSpecialisation Parms{};

	Parms.NewSpecialisation = std::move(NewSpecialisation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetPrimaryAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewAttribute                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetPrimaryAttribute(const class FText& NewAttribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetPrimaryAttribute");

	Params::VClassOverviewViewModel_SetPrimaryAttribute Parms{};

	Parms.NewAttribute = std::move(NewAttribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetSecondaryAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewAttribute                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetSecondaryAttribute(const class FText& NewAttribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetSecondaryAttribute");

	Params::VClassOverviewViewModel_SetSecondaryAttribute Parms{};

	Parms.NewAttribute = std::move(NewAttribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.SetSpecializationEnum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESkillAndClassSpecialization            NewSpecializationEnum                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVClassOverviewViewModel::SetSpecializationEnum(ESkillAndClassSpecialization NewSpecializationEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "SetSpecializationEnum");

	Params::VClassOverviewViewModel_SetSpecializationEnum Parms{};

	Parms.NewSpecializationEnum = NewSpecializationEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassOverviewViewModel.GetClassProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerClassItemProperties ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FPlayerClassItemProperties UVClassOverviewViewModel::GetClassProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassOverviewViewModel", "GetClassProperties");

	Params::VClassOverviewViewModel_GetClassProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHitBoxComponent.ActivateTriggers
// (Final, Native, Public)

void UVHitBoxComponent::ActivateTriggers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "ActivateTriggers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.AddTriggerTarget
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UnusedSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                EmptyHitResult                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVHitBoxComponent::AddTriggerTarget(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox, bool UnusedSweep, const struct FHitResult& EmptyHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "AddTriggerTarget");

	Params::VHitBoxComponent_AddTriggerTarget Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;
	Parms.UnusedSweep = UnusedSweep;
	Parms.EmptyHitResult = std::move(EmptyHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.OnOverlapTriggered
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UnusedSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                OverlapHitResult                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVHitBoxComponent::OnOverlapTriggered(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox, bool UnusedSweep, const struct FHitResult& OverlapHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "OnOverlapTriggered");

	Params::VHitBoxComponent_OnOverlapTriggered Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;
	Parms.UnusedSweep = UnusedSweep;
	Parms.OverlapHitResult = std::move(OverlapHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.PauseHit
// (Final, Native, Public)

void UVHitBoxComponent::PauseHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "PauseHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.RemoveTriggerTarget
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHitBoxComponent::RemoveTriggerTarget(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "RemoveTriggerTarget");

	Params::VHitBoxComponent_RemoveTriggerTarget Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.StartHit
// (Final, Native, Public)
// Parameters:
// EVHitSourceType                         HitSourceTypeParam                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Attacker                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             BlueprintClass                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseOverlaps                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHitBoxComponent::StartHit(EVHitSourceType HitSourceTypeParam, class AActor* Attacker, TSoftClassPtr<class UClass> BlueprintClass, float Duration, bool bUseOverlaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "StartHit");

	Params::VHitBoxComponent_StartHit Parms{};

	Parms.HitSourceTypeParam = HitSourceTypeParam;
	Parms.Attacker = Attacker;
	Parms.BlueprintClass = BlueprintClass;
	Parms.Duration = Duration;
	Parms.bUseOverlaps = bUseOverlaps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.StopHit
// (Final, Native, Public)

void UVHitBoxComponent::StopHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "StopHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.TriggerImpactSystem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UPhysicalMaterial*          PhysicalMaterial                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactNormal                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHitBoxComponent::TriggerImpactSystem(const class UPhysicalMaterial* PhysicalMaterial, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "TriggerImpactSystem");

	Params::VHitBoxComponent_TriggerImpactSystem Parms{};

	Parms.PhysicalMaterial = PhysicalMaterial;
	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.ImpactNormal = std::move(ImpactNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHitBoxComponent.TriggerImpactSystemFromHitResult
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FHitResult&                MaterialHitResult                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FHitResult&                LocationHitResult                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVProjectilePenetrationSettings* OutProjectilePenetrationSettings                       (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHitBoxComponent::TriggerImpactSystemFromHitResult(const struct FHitResult& MaterialHitResult, const struct FHitResult& LocationHitResult, struct FVProjectilePenetrationSettings* OutProjectilePenetrationSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "TriggerImpactSystemFromHitResult");

	Params::VHitBoxComponent_TriggerImpactSystemFromHitResult Parms{};

	Parms.MaterialHitResult = std::move(MaterialHitResult);
	Parms.LocationHitResult = std::move(LocationHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProjectilePenetrationSettings != nullptr)
		*OutProjectilePenetrationSettings = std::move(Parms.OutProjectilePenetrationSettings);

	return Parms.ReturnValue;
}


// Function Altar.VHitBoxComponent.TriggerImpactSystemFromRow
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FImpactSystemRowBase&      ChosenRow                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactNormal                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHitBoxComponent::TriggerImpactSystemFromRow(const struct FImpactSystemRowBase& ChosenRow, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "TriggerImpactSystemFromRow");

	Params::VHitBoxComponent_TriggerImpactSystemFromRow Parms{};

	Parms.ChosenRow = std::move(ChosenRow);
	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.ImpactNormal = std::move(ImpactNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHitBoxComponent.TriggerTrapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UnusedSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                EmptyHitResult                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVHitBoxComponent::TriggerTrapBegin(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox, bool UnusedSweep, const struct FHitResult& EmptyHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "TriggerTrapBegin");

	Params::VHitBoxComponent_TriggerTrapBegin Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;
	Parms.UnusedSweep = UnusedSweep;
	Parms.EmptyHitResult = std::move(EmptyHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.TriggerTrapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHitBoxComponent::TriggerTrapEnd(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "TriggerTrapEnd");

	Params::VHitBoxComponent_TriggerTrapEnd Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitBoxComponent.UnpauseHit
// (Final, Native, Public)

void UVHitBoxComponent::UnpauseHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitBoxComponent", "UnpauseHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetActionProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyActionProperties&   NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetActionProperties(const struct FLegacyActionProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetActionProperties");

	Params::VHUDInfoViewModel_SetActionProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetIconsProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TMap<ELegacyHudInfoIcon, struct FLegacyIconProperties>&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetIconsProperties(const TMap<ELegacyHudInfoIcon, struct FLegacyIconProperties>& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetIconsProperties");

	Params::VHUDInfoViewModel_SetIconsProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetIsEmptyContainer
// (Final, Native, Public)
// Parameters:
// const bool                              bIsEmpty                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetIsEmptyContainer(const bool bIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetIsEmptyContainer");

	Params::VHUDInfoViewModel_SetIsEmptyContainer Parms{};

	Parms.bIsEmpty = bIsEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetIsTelekinesisActive
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetIsTelekinesisActive(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetIsTelekinesisActive");

	Params::VHUDInfoViewModel_SetIsTelekinesisActive Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetLastIconModifiedProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyIconProperties&     NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetLastIconModifiedProperties(const struct FLegacyIconProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetLastIconModifiedProperties");

	Params::VHUDInfoViewModel_SetLastIconModifiedProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetTargetedDoorDestinationName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetTargetedDoorDestinationName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetTargetedDoorDestinationName");

	Params::VHUDInfoViewModel_SetTargetedDoorDestinationName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.SetTargetedItemName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDInfoViewModel::SetTargetedItemName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "SetTargetedItemName");

	Params::VHUDInfoViewModel_SetTargetedItemName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDInfoViewModel.GetActionProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyActionProperties    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyActionProperties UVHUDInfoViewModel::GetActionProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetActionProperties");

	Params::VHUDInfoViewModel_GetActionProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.GetIconsProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<ELegacyHudInfoIcon, struct FLegacyIconProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<ELegacyHudInfoIcon, struct FLegacyIconProperties> UVHUDInfoViewModel::GetIconsProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetIconsProperties");

	Params::VHUDInfoViewModel_GetIconsProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.GetIsEmptyContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVHUDInfoViewModel::GetIsEmptyContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetIsEmptyContainer");

	Params::VHUDInfoViewModel_GetIsEmptyContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.GetIsTelekinesisActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDInfoViewModel::GetIsTelekinesisActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetIsTelekinesisActive");

	Params::VHUDInfoViewModel_GetIsTelekinesisActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.GetLastIconModifiedProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyIconProperties      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyIconProperties UVHUDInfoViewModel::GetLastIconModifiedProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetLastIconModifiedProperties");

	Params::VHUDInfoViewModel_GetLastIconModifiedProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.GetTargetedDoorDestinationName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVHUDInfoViewModel::GetTargetedDoorDestinationName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetTargetedDoorDestinationName");

	Params::VHUDInfoViewModel_GetTargetedDoorDestinationName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.GetTargetedItemName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVHUDInfoViewModel::GetTargetedItemName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "GetTargetedItemName");

	Params::VHUDInfoViewModel_GetTargetedItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDInfoViewModel.HasContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDInfoViewModel::HasContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDInfoViewModel", "HasContent");

	Params::VHUDInfoViewModel_HasContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDSubtitleViewModel.AddNotification
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyNotificationProperties&Properties                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDSubtitleViewModel::AddNotification(const struct FLegacyNotificationProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "AddNotification");

	Params::VHUDSubtitleViewModel_AddNotification Parms{};

	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.ConsumeNotification
// (Final, Native, Public, BlueprintCallable)

void UVHUDSubtitleViewModel::ConsumeNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "ConsumeNotification");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.ResumeNotificationQueue
// (Final, Native, Public, BlueprintCallable)

void UVHUDSubtitleViewModel::ResumeNotificationQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "ResumeNotificationQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.SetNotification
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyNotificationProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDSubtitleViewModel::SetNotification(const struct FLegacyNotificationProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "SetNotification");

	Params::VHUDSubtitleViewModel_SetNotification Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDSubtitleViewModel::SetNotificationVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "SetNotificationVisibility");

	Params::VHUDSubtitleViewModel_SetNotificationVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.SetSubtitle
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDSubtitleViewModel::SetSubtitle(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "SetSubtitle");

	Params::VHUDSubtitleViewModel_SetSubtitle Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.SetSubtitleVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDSubtitleViewModel::SetSubtitleVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "SetSubtitleVisibility");

	Params::VHUDSubtitleViewModel_SetSubtitleVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.UpdateNotificationQueue
// (Final, Native, Public, BlueprintCallable)

void UVHUDSubtitleViewModel::UpdateNotificationQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "UpdateNotificationQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDSubtitleViewModel.GetNotification
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyNotificationPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyNotificationProperties UVHUDSubtitleViewModel::GetNotification() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "GetNotification");

	Params::VHUDSubtitleViewModel_GetNotification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDSubtitleViewModel.GetNotificationVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDSubtitleViewModel::GetNotificationVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "GetNotificationVisibility");

	Params::VHUDSubtitleViewModel_GetNotificationVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDSubtitleViewModel.GetSubtitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVHUDSubtitleViewModel::GetSubtitle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "GetSubtitle");

	Params::VHUDSubtitleViewModel_GetSubtitle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDSubtitleViewModel.GetSubtitleVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDSubtitleViewModel::GetSubtitleVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDSubtitleViewModel", "GetSubtitleVisibility");

	Params::VHUDSubtitleViewModel_GetSubtitleVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarNavigableSlider.DecreaseValue
// (Final, Native, Protected, BlueprintCallable)

void UVAltarNavigableSlider::DecreaseValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "DecreaseValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.EndControllerValueDecrease
// (Native, Protected, BlueprintCallable)

void UVAltarNavigableSlider::EndControllerValueDecrease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "EndControllerValueDecrease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.EndControllerValueIncrease
// (Native, Protected, BlueprintCallable)

void UVAltarNavigableSlider::EndControllerValueIncrease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "EndControllerValueIncrease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.HandleOnValueChanged
// (Native, Protected)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableSlider::HandleOnValueChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "HandleOnValueChanged");

	Params::VAltarNavigableSlider_HandleOnValueChanged Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.IncreaseValue
// (Final, Native, Protected, BlueprintCallable)

void UVAltarNavigableSlider::IncreaseValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "IncreaseValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.InitializeSlider
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   MinValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartupValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableSlider::InitializeSlider(float MinValue, float MaxValue, float StepSize, float StartupValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "InitializeSlider");

	Params::VAltarNavigableSlider_InitializeSlider Parms{};

	Parms.MinValue = MinValue;
	Parms.MaxValue = MaxValue;
	Parms.StepSize = StepSize;
	Parms.StartupValue = StartupValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.OnDecreaseButtonPressed
// (Final, Native, Protected)

void UVAltarNavigableSlider::OnDecreaseButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "OnDecreaseButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.OnDecreaseButtonReleased
// (Final, Native, Protected)

void UVAltarNavigableSlider::OnDecreaseButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "OnDecreaseButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.OnIncreaseButtonPressed
// (Final, Native, Protected)

void UVAltarNavigableSlider::OnIncreaseButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "OnIncreaseButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.OnIncreaseButtonReleased
// (Final, Native, Protected)

void UVAltarNavigableSlider::OnIncreaseButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "OnIncreaseButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.SetValue
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableSlider::SetValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "SetValue");

	Params::VAltarNavigableSlider_SetValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.StartControllerValueDecrease
// (Native, Protected, BlueprintCallable)

void UVAltarNavigableSlider::StartControllerValueDecrease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "StartControllerValueDecrease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableSlider.StartControllerValueIncrease
// (Native, Protected, BlueprintCallable)

void UVAltarNavigableSlider::StartControllerValueIncrease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableSlider", "StartControllerValueIncrease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDotedAltarNavigableSlider.ClearAllDots
// (Final, Native, Protected)

void UVDotedAltarNavigableSlider::ClearAllDots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDotedAltarNavigableSlider", "ClearAllDots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDotedAltarNavigableSlider.GenerateDot
// (Final, Native, Protected)

void UVDotedAltarNavigableSlider::GenerateDot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDotedAltarNavigableSlider", "GenerateDot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDotedAltarNavigableSlider.OnDotCreated
// (Event, Public, BlueprintEvent)
// Parameters:
// class UUserWidget*                      NewDot                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDotedAltarNavigableSlider::OnDotCreated(class UUserWidget* NewDot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDotedAltarNavigableSlider", "OnDotCreated");

	Params::VDotedAltarNavigableSlider_OnDotCreated Parms{};

	Parms.NewDot = NewDot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VShowroomSubsystem.CalculateSpawnLocation
// (Final, Native, Private, HasDefaults)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVShowroomSubsystem::CalculateSpawnLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "CalculateSpawnLocation");

	Params::VShowroomSubsystem_CalculateSpawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VShowroomSubsystem.CreateShowroomCharacter
// (Final, Native, Public, BlueprintCallable)

void UVShowroomSubsystem::CreateShowroomCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "CreateShowroomCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.HideDefaultBackgroundScene
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHidden                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::HideDefaultBackgroundScene(bool bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "HideDefaultBackgroundScene");

	Params::VShowroomSubsystem_HideDefaultBackgroundScene Parms{};

	Parms.bHidden = bHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.RemoveCharacterBodyPart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::RemoveCharacterBodyPart(EBipedModularBodySlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "RemoveCharacterBodyPart");

	Params::VShowroomSubsystem_RemoveCharacterBodyPart Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetActorAnimation
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AActor*                           SpawnedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimationPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetActorAnimation(class AActor* SpawnedActor, const class FString& AnimationPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetActorAnimation");

	Params::VShowroomSubsystem_SetActorAnimation Parms{};

	Parms.SpawnedActor = SpawnedActor;
	Parms.AnimationPath = std::move(AnimationPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetBackgroundHDRI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    HDRITexturePath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetBackgroundHDRI(const class FString& HDRITexturePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetBackgroundHDRI");

	Params::VShowroomSubsystem_SetBackgroundHDRI Parms{};

	Parms.HDRITexturePath = std::move(HDRITexturePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetCharacterBodyPart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FormPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetCharacterBodyPart(EBipedModularBodySlot Slot, const class FString& FormPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetCharacterBodyPart");

	Params::VShowroomSubsystem_SetCharacterBodyPart Parms{};

	Parms.Slot = Slot;
	Parms.FormPath = std::move(FormPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetCharacterRace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RaceFormPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetCharacterRace(const class FString& RaceFormPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetCharacterRace");

	Params::VShowroomSubsystem_SetCharacterRace Parms{};

	Parms.RaceFormPath = std::move(RaceFormPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetCharacterSex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsMale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetCharacterSex(bool bIsMale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetCharacterSex");

	Params::VShowroomSubsystem_SetCharacterSex Parms{};

	Parms.bIsMale = bIsMale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetHDRIRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetHDRIRotation(float Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetHDRIRotation");

	Params::VShowroomSubsystem_SetHDRIRotation Parms{};

	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetLightsHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHidden                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetLightsHidden(bool bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetLightsHidden");

	Params::VShowroomSubsystem_SetLightsHidden Parms{};

	Parms.bHidden = bHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetPropsHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHidden                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetPropsHidden(bool bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetPropsHidden");

	Params::VShowroomSubsystem_SetPropsHidden Parms{};

	Parms.bHidden = bHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SetSkylightIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SetSkylightIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SetSkylightIntensity");

	Params::VShowroomSubsystem_SetSkylightIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SpawnActorsByAssetsPath
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            InPaths                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   CenterPoint                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoxExtent                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bRemainNotSpawned                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutPaths                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UVShowroomSubsystem::SpawnActorsByAssetsPath(const TArray<class FString>& InPaths, const struct FVector& CenterPoint, const struct FVector& BoxExtent, int32 Offset, bool* bRemainNotSpawned, TArray<class FString>* OutPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SpawnActorsByAssetsPath");

	Params::VShowroomSubsystem_SpawnActorsByAssetsPath Parms{};

	Parms.InPaths = std::move(InPaths);
	Parms.CenterPoint = std::move(CenterPoint);
	Parms.BoxExtent = std::move(BoxExtent);
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bRemainNotSpawned != nullptr)
		*bRemainNotSpawned = Parms.bRemainNotSpawned;

	if (OutPaths != nullptr)
		*OutPaths = std::move(Parms.OutPaths);

	return Parms.ReturnValue;
}


// Function Altar.VShowroomSubsystem.SpawnAnimatedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BlueprintPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimationPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVShowroomSubsystem::SpawnAnimatedActor(const class FString& BlueprintPath, const class FString& AnimationPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SpawnAnimatedActor");

	Params::VShowroomSubsystem_SpawnAnimatedActor Parms{};

	Parms.BlueprintPath = std::move(BlueprintPath);
	Parms.AnimationPath = std::move(AnimationPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShowroomSubsystem.SpawnBlueprintActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BlueprintPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVShowroomSubsystem::SpawnBlueprintActor(const class FString& BlueprintPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "SpawnBlueprintActor");

	Params::VShowroomSubsystem_SpawnBlueprintActor Parms{};

	Parms.BlueprintPath = std::move(BlueprintPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VShowroomSubsystem.GetShowroomCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVPairedCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPairedCharacter* UVShowroomSubsystem::GetShowroomCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "GetShowroomCharacter");

	Params::VShowroomSubsystem_GetShowroomCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VShowroomSubsystem.GetTargetPoint
// (Final, Native, Private, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVShowroomSubsystem::GetTargetPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShowroomSubsystem", "GetTargetPoint");

	Params::VShowroomSubsystem_GetTargetPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellCastMultiAnimInstance.OnCastSelfLeftEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastMultiAnimInstance::OnCastSelfLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastMultiAnimInstance", "OnCastSelfLeftEnter");

	Params::VSpellCastMultiAnimInstance_OnCastSelfLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastMultiAnimInstance.OnCastSelfRightEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastMultiAnimInstance::OnCastSelfRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastMultiAnimInstance", "OnCastSelfRightEnter");

	Params::VSpellCastMultiAnimInstance_OnCastSelfRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastMultiAnimInstance.OnCastTargeRightEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastMultiAnimInstance::OnCastTargeRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastMultiAnimInstance", "OnCastTargeRightEnter");

	Params::VSpellCastMultiAnimInstance_OnCastTargeRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastMultiAnimInstance.OnCastTargetLeftEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastMultiAnimInstance::OnCastTargetLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastMultiAnimInstance", "OnCastTargetLeftEnter");

	Params::VSpellCastMultiAnimInstance_OnCastTargetLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastMultiAnimInstance.OnCastTouchLeftEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastMultiAnimInstance::OnCastTouchLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastMultiAnimInstance", "OnCastTouchLeftEnter");

	Params::VSpellCastMultiAnimInstance_OnCastTouchLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastMultiAnimInstance.OnCastTouchRightEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastMultiAnimInstance::OnCastTouchRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastMultiAnimInstance", "OnCastTouchRightEnter");

	Params::VSpellCastMultiAnimInstance_OnCastTouchRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernEnchantmentItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVModernEnchantmentItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernEnchantmentItem::SetProperties(const struct FVModernEnchantmentItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernEnchantmentItem", "SetProperties");

	Params::VModernEnchantmentItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernEnchantmentItem.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVModernEnchantmentItem::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernEnchantmentItem", "GetIndex");

	Params::VModernEnchantmentItem_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernEnchantmentItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVModernEnchantmentItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FVModernEnchantmentItemProperties UVModernEnchantmentItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernEnchantmentItem", "GetProperties");

	Params::VModernEnchantmentItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAppearancePairingComponent.ApplySenescenceLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class USkeletalMeshComponent*     SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UVSenescenceLevel*          Level                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVSenescenceModifiers                   Modifiers                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaterialIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAppearancePairingComponent::ApplySenescenceLevel(const class USkeletalMeshComponent* SkeletalMesh, const class UVSenescenceLevel* Level, EVSenescenceModifiers Modifiers, int32 MaterialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCharacterAppearancePairingComponent", "ApplySenescenceLevel");

	Params::VCharacterAppearancePairingComponent_ApplySenescenceLevel Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.Level = Level;
	Parms.Modifiers = Modifiers;
	Parms.MaterialIndex = MaterialIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.AddNewDisease
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UTESMagicItemForm*          NewDiseaseForm                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAppearancePairingComponent::AddNewDisease(const class UTESMagicItemForm* NewDiseaseForm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "AddNewDisease");

	Params::VCharacterAppearancePairingComponent_AddNewDisease Parms{};

	Parms.NewDiseaseForm = NewDiseaseForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.CureAllDiseases
// (Final, Native, Public, BlueprintCallable)

void UVCharacterAppearancePairingComponent::CureAllDiseases()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "CureAllDiseases");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.ReapplyPhenotypeData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVCharacterPhenotypeDataFilter          Filter                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAppearancePairingComponent::ReapplyPhenotypeData(EVCharacterPhenotypeDataFilter Filter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "ReapplyPhenotypeData");

	Params::VCharacterAppearancePairingComponent_ReapplyPhenotypeData Parms{};

	Parms.Filter = Filter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.RefreshCharacterAppearance
// (Final, Native, Public, BlueprintCallable)

void UVCharacterAppearancePairingComponent::RefreshCharacterAppearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "RefreshCharacterAppearance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.RemoveDisease
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UTESMagicItemForm*          NewDiseaseForm                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAppearancePairingComponent::RemoveDisease(const class UTESMagicItemForm* NewDiseaseForm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "RemoveDisease");

	Params::VCharacterAppearancePairingComponent_RemoveDisease Parms{};

	Parms.NewDiseaseForm = NewDiseaseForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.SetVampireLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewVampireLevel                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAppearancePairingComponent::SetVampireLevel(int32 NewVampireLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "SetVampireLevel");

	Params::VCharacterAppearancePairingComponent_SetVampireLevel Parms{};

	Parms.NewVampireLevel = NewVampireLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAppearancePairingComponent.GetSenescenceModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVSenescenceModifiers                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVSenescenceModifiers UVCharacterAppearancePairingComponent::GetSenescenceModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "GetSenescenceModifier");

	Params::VCharacterAppearancePairingComponent_GetSenescenceModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAppearancePairingComponent.GetVampireLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVCharacterAppearancePairingComponent::GetVampireLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "GetVampireLevel");

	Params::VCharacterAppearancePairingComponent_GetVampireLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAppearancePairingComponent.IsAVampire
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCharacterAppearancePairingComponent::IsAVampire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "IsAVampire");

	Params::VCharacterAppearancePairingComponent_IsAVampire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAppearancePairingComponent.IsDiseaseActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UTESMagicItemForm*          NewDiseaseForm                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCharacterAppearancePairingComponent::IsDiseaseActive(const class UTESMagicItemForm* NewDiseaseForm) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "IsDiseaseActive");

	Params::VCharacterAppearancePairingComponent_IsDiseaseActive Parms{};

	Parms.NewDiseaseForm = NewDiseaseForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAppearancePairingComponent.IsSick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCharacterAppearancePairingComponent::IsSick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAppearancePairingComponent", "IsSick");

	Params::VCharacterAppearancePairingComponent_IsSick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterHairPieceBase.ConstructComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           FaceMeshComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCharacterPhenotypeData*         Phenotype                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCharacterHairPieceBaseConstructResultReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FCharacterHairPieceBaseConstructResult UVCharacterHairPieceBase::ConstructComponent(class USkeletalMeshComponent* FaceMeshComponent, class UVCharacterPhenotypeData* Phenotype) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterHairPieceBase", "ConstructComponent");

	Params::VCharacterHairPieceBase_ConstructComponent Parms{};

	Parms.FaceMeshComponent = FaceMeshComponent;
	Parms.Phenotype = Phenotype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterHairPieceBase.GetFacialHairType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVFacialHairType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVFacialHairType UVCharacterHairPieceBase::GetFacialHairType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterHairPieceBase", "GetFacialHairType");

	Params::VCharacterHairPieceBase_GetFacialHairType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.RegisterSendClickedExit
// (Final, Native, Public, BlueprintCallable)

void UVRepairMenuViewModel::RegisterSendClickedExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "RegisterSendClickedExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.RegisterSendClickedFilter
// (Final, Native, Public, BlueprintCallable)

void UVRepairMenuViewModel::RegisterSendClickedFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "RegisterSendClickedFilter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.RegisterSendClickedOnRepair
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::RegisterSendClickedOnRepair(int32 Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "RegisterSendClickedOnRepair");

	Params::VRepairMenuViewModel_RegisterSendClickedOnRepair Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.RegisterSendClickedRemove
// (Final, Native, Public, BlueprintCallable)

void UVRepairMenuViewModel::RegisterSendClickedRemove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "RegisterSendClickedRemove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.RegisterSendClickedRepairAll
// (Final, Native, Public, BlueprintCallable)

void UVRepairMenuViewModel::RegisterSendClickedRepairAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "RegisterSendClickedRepairAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.RegisterSendHoverItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::RegisterSendHoverItem(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "RegisterSendHoverItem");

	Params::VRepairMenuViewModel_RegisterSendHoverItem Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetAmountHammer
// (Final, Native, Public)
// Parameters:
// const struct FLegacyRepairAmount&       NewValue                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetAmountHammer(const struct FLegacyRepairAmount& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetAmountHammer");

	Params::VRepairMenuViewModel_SetAmountHammer Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetAmountMerchantGold
// (Final, Native, Public)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetAmountMerchantGold(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetAmountMerchantGold");

	Params::VRepairMenuViewModel_SetAmountMerchantGold Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetAmountPlayerGold
// (Final, Native, Public)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetAmountPlayerGold(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetAmountPlayerGold");

	Params::VRepairMenuViewModel_SetAmountPlayerGold Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetFilterButtonName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetFilterButtonName(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetFilterButtonName");

	Params::VRepairMenuViewModel_SetFilterButtonName Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetFilterButtonVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetFilterButtonVisible(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetFilterButtonVisible");

	Params::VRepairMenuViewModel_SetFilterButtonVisible Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetHammerBreakChance
// (Final, Native, Public)
// Parameters:
// float                                   BreakChanceValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetHammerBreakChance(float BreakChanceValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetHammerBreakChance");

	Params::VRepairMenuViewModel_SetHammerBreakChance Parms{};

	Parms.BreakChanceValue = BreakChanceValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetIsAtLeastExpert
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsAtLeastExpert                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetIsAtLeastExpert(bool bNewIsAtLeastExpert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetIsAtLeastExpert");

	Params::VRepairMenuViewModel_SetIsAtLeastExpert Parms{};

	Parms.bNewIsAtLeastExpert = bNewIsAtLeastExpert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetIsOpenedFromQuickWheel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsOpenedFromQuickWheel                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetIsOpenedFromQuickWheel(bool bNewIsOpenedFromQuickWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetIsOpenedFromQuickWheel");

	Params::VRepairMenuViewModel_SetIsOpenedFromQuickWheel Parms{};

	Parms.bNewIsOpenedFromQuickWheel = bNewIsOpenedFromQuickWheel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetIsSortReversed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetIsSortReversed(bool bNewIsSortReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetIsSortReversed");

	Params::VRepairMenuViewModel_SetIsSortReversed Parms{};

	Parms.bNewIsSortReversed = bNewIsSortReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetMerchantData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernRepairMenuCharacterData&NewMerchantData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetMerchantData(const struct FModernRepairMenuCharacterData& NewMerchantData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetMerchantData");

	Params::VRepairMenuViewModel_SetMerchantData Parms{};

	Parms.NewMerchantData = std::move(NewMerchantData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetPlayerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernRepairMenuCharacterData&NewPlayerData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetPlayerData(const struct FModernRepairMenuCharacterData& NewPlayerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetPlayerData");

	Params::VRepairMenuViewModel_SetPlayerData Parms{};

	Parms.NewPlayerData = std::move(NewPlayerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetRemoveButtonVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetRemoveButtonVisible(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetRemoveButtonVisible");

	Params::VRepairMenuViewModel_SetRemoveButtonVisible Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetRepairAllAmount
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyRepairAmount&       NewValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetRepairAllAmount(const struct FLegacyRepairAmount& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetRepairAllAmount");

	Params::VRepairMenuViewModel_SetRepairAllAmount Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetRepairAllButtonEnable
// (Final, Native, Public)
// Parameters:
// bool                                    bIsEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetRepairAllButtonEnable(bool bIsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetRepairAllButtonEnable");

	Params::VRepairMenuViewModel_SetRepairAllButtonEnable Parms{};

	Parms.bIsEnable = bIsEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetRepairAllButtonVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetRepairAllButtonVisible(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetRepairAllButtonVisible");

	Params::VRepairMenuViewModel_SetRepairAllButtonVisible Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetRepairList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyRepairItemProperties>&NewProperties                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetRepairList(const TArray<struct FLegacyRepairItemProperties>& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetRepairList");

	Params::VRepairMenuViewModel_SetRepairList Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetSortType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetSortType(const EOriginalInventoryMenuSortType& NewSortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetSortType");

	Params::VRepairMenuViewModel_SetSortType Parms{};

	Parms.NewSortType = NewSortType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.SetTypeMenu
// (Final, Native, Public)
// Parameters:
// ELegacyRepairMenuType                   NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRepairMenuViewModel::SetTypeMenu(ELegacyRepairMenuType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "SetTypeMenu");

	Params::VRepairMenuViewModel_SetTypeMenu Parms{};

	Parms.NewType = NewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRepairMenuViewModel.GetAmountHammer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyRepairAmount              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLegacyRepairAmount UVRepairMenuViewModel::GetAmountHammer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetAmountHammer");

	Params::VRepairMenuViewModel_GetAmountHammer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetFilterButtonName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVRepairMenuViewModel::GetFilterButtonName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetFilterButtonName");

	Params::VRepairMenuViewModel_GetFilterButtonName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetFilterButtonVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::GetFilterButtonVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetFilterButtonVisible");

	Params::VRepairMenuViewModel_GetFilterButtonVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetHammerBreakChance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVRepairMenuViewModel::GetHammerBreakChance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetHammerBreakChance");

	Params::VRepairMenuViewModel_GetHammerBreakChance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetMerchantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernRepairMenuCharacterDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernRepairMenuCharacterData UVRepairMenuViewModel::GetMerchantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetMerchantData");

	Params::VRepairMenuViewModel_GetMerchantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetPlayerData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernRepairMenuCharacterDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernRepairMenuCharacterData UVRepairMenuViewModel::GetPlayerData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetPlayerData");

	Params::VRepairMenuViewModel_GetPlayerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetRemoveButtonVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::GetRemoveButtonVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetRemoveButtonVisible");

	Params::VRepairMenuViewModel_GetRemoveButtonVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetRepairAllAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyRepairAmount        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyRepairAmount UVRepairMenuViewModel::GetRepairAllAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetRepairAllAmount");

	Params::VRepairMenuViewModel_GetRepairAllAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetRepairAllButtonEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::GetRepairAllButtonEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetRepairAllButtonEnable");

	Params::VRepairMenuViewModel_GetRepairAllButtonEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetRepairAllButtonVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::GetRepairAllButtonVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetRepairAllButtonVisible");

	Params::VRepairMenuViewModel_GetRepairAllButtonVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetRepairList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyRepairItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyRepairItemProperties> UVRepairMenuViewModel::GetRepairList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetRepairList");

	Params::VRepairMenuViewModel_GetRepairList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVRepairMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetSortType");

	Params::VRepairMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.GetTypeMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyRepairMenuType                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyRepairMenuType UVRepairMenuViewModel::GetTypeMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "GetTypeMenu");

	Params::VRepairMenuViewModel_GetTypeMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.IsAtLeastExpert
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::IsAtLeastExpert() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "IsAtLeastExpert");

	Params::VRepairMenuViewModel_IsAtLeastExpert Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.IsOpenedFromQuickWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::IsOpenedFromQuickWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "IsOpenedFromQuickWheel");

	Params::VRepairMenuViewModel_IsOpenedFromQuickWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRepairMenuViewModel.IsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRepairMenuViewModel::IsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRepairMenuViewModel", "IsSortReversed");

	Params::VRepairMenuViewModel_IsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.RegisterSendClickedButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyGameplayMenuIDs                  InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::RegisterSendClickedButton(ELegacyGameplayMenuIDs InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "RegisterSendClickedButton");

	Params::VGameplayMenuViewModel_RegisterSendClickedButton Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetCrosshair
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetCrosshair(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetCrosshair");

	Params::VGameplayMenuViewModel_SetCrosshair Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetDialogSubtitles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetDialogSubtitles(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetDialogSubtitles");

	Params::VGameplayMenuViewModel_SetDialogSubtitles Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetDifficulty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetDifficulty(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetDifficulty");

	Params::VGameplayMenuViewModel_SetDifficulty Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetGeneralSubtitles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetGeneralSubtitles(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetGeneralSubtitles");

	Params::VGameplayMenuViewModel_SetGeneralSubtitles Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetSaveOnRest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetSaveOnRest(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetSaveOnRest");

	Params::VGameplayMenuViewModel_SetSaveOnRest Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetSaveOnTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetSaveOnTravel(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetSaveOnTravel");

	Params::VGameplayMenuViewModel_SetSaveOnTravel Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.SetSaveOnWait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayMenuViewModel::SetSaveOnWait(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "SetSaveOnWait");

	Params::VGameplayMenuViewModel_SetSaveOnWait Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayMenuViewModel.GetCrosshair
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGameplayMenuViewModel::GetCrosshair() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetCrosshair");

	Params::VGameplayMenuViewModel_GetCrosshair Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.GetDialogSubtitles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGameplayMenuViewModel::GetDialogSubtitles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetDialogSubtitles");

	Params::VGameplayMenuViewModel_GetDialogSubtitles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.GetDifficulty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVGameplayMenuViewModel::GetDifficulty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetDifficulty");

	Params::VGameplayMenuViewModel_GetDifficulty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.GetGeneralSubtitles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGameplayMenuViewModel::GetGeneralSubtitles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetGeneralSubtitles");

	Params::VGameplayMenuViewModel_GetGeneralSubtitles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.GetSaveOnRest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGameplayMenuViewModel::GetSaveOnRest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetSaveOnRest");

	Params::VGameplayMenuViewModel_GetSaveOnRest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.GetSaveOnTravel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGameplayMenuViewModel::GetSaveOnTravel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetSaveOnTravel");

	Params::VGameplayMenuViewModel_GetSaveOnTravel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayMenuViewModel.GetSaveOnWait
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGameplayMenuViewModel::GetSaveOnWait() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayMenuViewModel", "GetSaveOnWait");

	Params::VGameplayMenuViewModel_GetSaveOnWait Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatusEffectVFXBlueprint.OnChangePerfomances
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsTheOnlyVFX                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMainEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVStatusEffectVFXBlueprint::OnChangePerfomances(bool bIsTheOnlyVFX, bool bIsMainEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnChangePerfomances");

	Params::VStatusEffectVFXBlueprint_OnChangePerfomances Parms{};

	Parms.bIsTheOnlyVFX = bIsTheOnlyVFX;
	Parms.bIsMainEffect = bIsMainEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VStatusEffectVFXBlueprint.OnEnchantTrailStart
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVStatusEffectVFXBlueprint::OnEnchantTrailStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnEnchantTrailStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VStatusEffectVFXBlueprint.OnEnchantTrailStop
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVStatusEffectVFXBlueprint::OnEnchantTrailStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnEnchantTrailStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VStatusEffectVFXBlueprint.OnStartPlayBody
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLinearColor>&      VFXColors                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AVStatusEffectVFXBlueprint::OnStartPlayBody(bool bDoesBeginInFirstPerson, float Value, const TArray<struct FLinearColor>& VFXColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnStartPlayBody");

	Params::VStatusEffectVFXBlueprint_OnStartPlayBody Parms{};

	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.Value = Value;
	Parms.VFXColors = std::move(VFXColors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VStatusEffectVFXBlueprint.OnStartPlaySkeletal
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLinearColor>&      VFXColors                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginAsTheOnlyVFX                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnchant                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMainEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInInventory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVStatusEffectVFXBlueprint::OnStartPlaySkeletal(class USkeletalMeshComponent* SkeletalMeshComponent, bool bDoesBeginInFirstPerson, float Value, const TArray<struct FLinearColor>& VFXColors, bool bDoesBeginAsTheOnlyVFX, bool bIsEnchant, bool bIsMainEffect, bool bIsInInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnStartPlaySkeletal");

	Params::VStatusEffectVFXBlueprint_OnStartPlaySkeletal Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.Value = Value;
	Parms.VFXColors = std::move(VFXColors);
	Parms.bDoesBeginAsTheOnlyVFX = bDoesBeginAsTheOnlyVFX;
	Parms.bIsEnchant = bIsEnchant;
	Parms.bIsMainEffect = bIsMainEffect;
	Parms.bIsInInventory = bIsInInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VStatusEffectVFXBlueprint.OnStartPlayStatic
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             StaticMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLinearColor>&      VFXColors                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginAsTheOnlyVFX                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnchant                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMainEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInInventory                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVStatusEffectVFXBlueprint::OnStartPlayStatic(class UStaticMeshComponent* StaticMeshComponent, bool bDoesBeginInFirstPerson, float Value, const TArray<struct FLinearColor>& VFXColors, bool bDoesBeginAsTheOnlyVFX, bool bIsEnchant, bool bIsMainEffect, bool bIsInInventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnStartPlayStatic");

	Params::VStatusEffectVFXBlueprint_OnStartPlayStatic Parms{};

	Parms.StaticMeshComponent = StaticMeshComponent;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.Value = Value;
	Parms.VFXColors = std::move(VFXColors);
	Parms.bDoesBeginAsTheOnlyVFX = bDoesBeginAsTheOnlyVFX;
	Parms.bIsEnchant = bIsEnchant;
	Parms.bIsMainEffect = bIsMainEffect;
	Parms.bIsInInventory = bIsInInventory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VStatusEffectVFXBlueprint.OnStopPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVStatusEffectVFXBlueprint::OnStopPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnStopPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VStatusEffectVFXBlueprint.OnStopPlayBody
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVStatusEffectVFXBlueprint::OnStopPlayBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatusEffectVFXBlueprint", "OnStopPlayBody");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.OblivionActorFactory.InitializeActor
// (Final, Native, Static, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTESForm*                         InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsDefaultObject                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberToSpawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOblivionActorFactory::InitializeActor(class AActor* Actor, class UTESForm* InObject, const bool bIsDefaultObject, int32 NumberToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OblivionActorFactory", "InitializeActor");

	Params::OblivionActorFactory_InitializeActor Parms{};

	Parms.Actor = Actor;
	Parms.InObject = InObject;
	Parms.bIsDefaultObject = bIsDefaultObject;
	Parms.NumberToSpawn = NumberToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.OblivionActorFactory.SpawnActorFromFormAtLocationInBlueprint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTESForm*                         InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Translation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RefScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UOblivionActorFactory::SpawnActorFromFormAtLocationInBlueprint(class UObject* WorldContextObject, class UTESForm* InObject, const struct FVector& Translation, float RefScale, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OblivionActorFactory", "SpawnActorFromFormAtLocationInBlueprint");

	Params::OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InObject = InObject;
	Parms.Translation = std::move(Translation);
	Parms.RefScale = RefScale;
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetGoldCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewGoldCost                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetGoldCost(int32 NewGoldCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetGoldCost");

	Params::VSpellMakingEnchantingViewModel_SetGoldCost Parms{};

	Parms.NewGoldCost = NewGoldCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetGoldCostIsExceedingPlayerGold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetGoldCostIsExceedingPlayerGold(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetGoldCostIsExceedingPlayerGold");

	Params::VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetGoldCostVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetGoldCostVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetGoldCostVisibility");

	Params::VSpellMakingEnchantingViewModel_SetGoldCostVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetIsConstantEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetIsConstantEffect(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetIsConstantEffect");

	Params::VSpellMakingEnchantingViewModel_SetIsConstantEffect Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetIsExceedingMaxMagickaCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetIsExceedingMaxMagickaCost(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetIsExceedingMaxMagickaCost");

	Params::VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetMagickaCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMagickaCost                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetMagickaCost(int32 NewMagickaCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetMagickaCost");

	Params::VSpellMakingEnchantingViewModel_SetMagickaCost Parms{};

	Parms.NewMagickaCost = NewMagickaCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetMagickaCostVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetMagickaCostVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetMagickaCostVisibility");

	Params::VSpellMakingEnchantingViewModel_SetMagickaCostVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetMaxMagickaCost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMaxMagickaCost                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetMaxMagickaCost(int32 NewMaxMagickaCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetMaxMagickaCost");

	Params::VSpellMakingEnchantingViewModel_SetMaxMagickaCost Parms{};

	Parms.NewMaxMagickaCost = NewMaxMagickaCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetMaxUsage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMaxUsage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetMaxUsage(int32 NewMaxUsage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetMaxUsage");

	Params::VSpellMakingEnchantingViewModel_SetMaxUsage Parms{};

	Parms.NewMaxUsage = NewMaxUsage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetMaxUsageVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetMaxUsageVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetMaxUsageVisibility");

	Params::VSpellMakingEnchantingViewModel_SetMaxUsageVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetPlayerGold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPlayerGold                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetPlayerGold(int32 NewPlayerGold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetPlayerGold");

	Params::VSpellMakingEnchantingViewModel_SetPlayerGold Parms{};

	Parms.NewPlayerGold = NewPlayerGold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.SetPlayerGoldVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingEnchantingViewModel::SetPlayerGoldVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "SetPlayerGoldVisibility");

	Params::VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingEnchantingViewModel.GetGoldCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSpellMakingEnchantingViewModel::GetGoldCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GetGoldCost");

	Params::VSpellMakingEnchantingViewModel_GetGoldCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.GetMagickaCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSpellMakingEnchantingViewModel::GetMagickaCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GetMagickaCost");

	Params::VSpellMakingEnchantingViewModel_GetMagickaCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.GetMaxMagickaCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSpellMakingEnchantingViewModel::GetMaxMagickaCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GetMaxMagickaCost");

	Params::VSpellMakingEnchantingViewModel_GetMaxMagickaCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.GetMaxUsage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSpellMakingEnchantingViewModel::GetMaxUsage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GetMaxUsage");

	Params::VSpellMakingEnchantingViewModel_GetMaxUsage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.GetPlayerGold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSpellMakingEnchantingViewModel::GetPlayerGold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GetPlayerGold");

	Params::VSpellMakingEnchantingViewModel_GetPlayerGold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.GoldCostIsExceedingPlayerGold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::GoldCostIsExceedingPlayerGold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GoldCostIsExceedingPlayerGold");

	Params::VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.GoldCostIsVisibile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::GoldCostIsVisibile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "GoldCostIsVisibile");

	Params::VSpellMakingEnchantingViewModel_GoldCostIsVisibile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.IsConstantEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::IsConstantEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "IsConstantEffect");

	Params::VSpellMakingEnchantingViewModel_IsConstantEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.IsExceedingMaxMagickaCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::IsExceedingMaxMagickaCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "IsExceedingMaxMagickaCost");

	Params::VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.MagickaCostIsVisibile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::MagickaCostIsVisibile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "MagickaCostIsVisibile");

	Params::VSpellMakingEnchantingViewModel_MagickaCostIsVisibile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.MaxUsageIsVisibile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::MaxUsageIsVisibile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "MaxUsageIsVisibile");

	Params::VSpellMakingEnchantingViewModel_MaxUsageIsVisibile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingEnchantingViewModel.PlayerGoldIsVisibile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingEnchantingViewModel::PlayerGoldIsVisibile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingEnchantingViewModel", "PlayerGoldIsVisibile");

	Params::VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionBar.GetAcceptedActionWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAltarBoundActionButton*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAltarBoundActionButton* UVAltarBoundActionBar::GetAcceptedActionWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionBar", "GetAcceptedActionWidget");

	Params::VAltarBoundActionBar_GetAcceptedActionWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionBar.GetActionWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UVAltarBoundActionButton*   ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVAltarBoundActionButton* UVAltarBoundActionBar::GetActionWidget(class UInputAction* InputAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionBar", "GetActionWidget");

	Params::VAltarBoundActionBar_GetActionWidget Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.StainedGlassCapturer.FindOrthoWidthForBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Extents                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AStainedGlassCapturer::FindOrthoWidthForBox(const struct FVector& Extents, const struct FRotator& Rotator, float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StainedGlassCapturer", "FindOrthoWidthForBox");

	Params::StainedGlassCapturer_FindOrthoWidthForBox Parms{};

	Parms.Extents = std::move(Extents);
	Parms.Rotator = std::move(Rotator);
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.StainedGlassCapturer.BakeGlassTexture
// (Final, Native, Public, BlueprintCallable)

void AStainedGlassCapturer::BakeGlassTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StainedGlassCapturer", "BakeGlassTexture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.StainedGlassCapturer.CollectSceneActors
// (Final, Native, Public, BlueprintCallable)

void AStainedGlassCapturer::CollectSceneActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StainedGlassCapturer", "CollectSceneActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.StainedGlassCapturer.PrepareMaterialParameterCollection
// (Final, Native, Public, BlueprintCallable)

void AStainedGlassCapturer::PrepareMaterialParameterCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StainedGlassCapturer", "PrepareMaterialParameterCollection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAchievementBlueprintLibrary.ResetAchievements
// (Final, Native, Static, Public, BlueprintCallable)

void UVAltarAchievementBlueprintLibrary::ResetAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarAchievementBlueprintLibrary", "ResetAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAchievementBlueprintLibrary.TriggerAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EVAltarAchievement                      Achievement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarAchievementBlueprintLibrary::TriggerAchievement(EVAltarAchievement Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarAchievementBlueprintLibrary", "TriggerAchievement");

	Params::VAltarAchievementBlueprintLibrary_TriggerAchievement Parms{};

	Parms.Achievement = Achievement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAchievementBlueprintLibrary.UndoAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EVAltarAchievement                      Achievement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarAchievementBlueprintLibrary::UndoAchievement(EVAltarAchievement Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarAchievementBlueprintLibrary", "UndoAchievement");

	Params::VAltarAchievementBlueprintLibrary_UndoAchievement Parms{};

	Parms.Achievement = Achievement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButtonImagePaddingCorrection.OnCorrectionDataUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FButtonCorrectionData&     Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarButtonImagePaddingCorrection::OnCorrectionDataUpdated(const struct FButtonCorrectionData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButtonImagePaddingCorrection", "OnCorrectionDataUpdated");

	Params::VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarButtonImagePaddingCorrection.SetCorrectionData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FButtonCorrectionData&     Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarButtonImagePaddingCorrection::SetCorrectionData(const struct FButtonCorrectionData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButtonImagePaddingCorrection", "SetCorrectionData");

	Params::VAltarButtonImagePaddingCorrection_SetCorrectionData Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButtonImagePaddingCorrection.UpdateButtonImageCorrectionData
// (Final, Native, Protected, BlueprintCallable)

void UVAltarButtonImagePaddingCorrection::UpdateButtonImageCorrectionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButtonImagePaddingCorrection", "UpdateButtonImageCorrectionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButtonImagePaddingCorrection.GetCorrectionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FButtonCorrectionData      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FButtonCorrectionData UVAltarButtonImagePaddingCorrection::GetCorrectionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButtonImagePaddingCorrection", "GetCorrectionData");

	Params::VAltarButtonImagePaddingCorrection_GetCorrectionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBlueprintFunctionLibrary.GetGPUBrand
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGPUType                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGPUType UVAltarBlueprintFunctionLibrary::GetGPUBrand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarBlueprintFunctionLibrary", "GetGPUBrand");

	Params::VAltarBlueprintFunctionLibrary_GetGPUBrand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBlueprintFunctionLibrary.GetUsedVRAMMB
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32&                                  Total                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32&                                  Used                                                   (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarBlueprintFunctionLibrary::GetUsedVRAMMB(int32& Total, int32& Used)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarBlueprintFunctionLibrary", "GetUsedVRAMMB");

	Params::VAltarBlueprintFunctionLibrary_GetUsedVRAMMB Parms{};

	Parms.Total = Total;
	Parms.Used = Used;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Total = Parms.Total;
	Used = Parms.Used;
}


// Function Altar.VAltarBlueprintFunctionLibrary.IsGameRunningOnSSD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBlueprintFunctionLibrary::IsGameRunningOnSSD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarBlueprintFunctionLibrary", "IsGameRunningOnSSD");

	Params::VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBlueprintFunctionLibrary.IsHardwareAcceleratedGPUSchedulingEnabled_BP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EExecBranch*                            OutExecPin                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarBlueprintFunctionLibrary::IsHardwareAcceleratedGPUSchedulingEnabled_BP(EExecBranch* OutExecPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarBlueprintFunctionLibrary", "IsHardwareAcceleratedGPUSchedulingEnabled_BP");

	Params::VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutExecPin != nullptr)
		*OutExecPin = Parms.OutExecPin;
}


// Function Altar.VAltarBlueprintFunctionLibrary.SetUpscalingOptions
// (Final, Native, Static, Public, BlueprintCallable)

void UVAltarBlueprintFunctionLibrary::SetUpscalingOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarBlueprintFunctionLibrary", "SetUpscalingOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TESAmmo.GetProjectileStaticMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UStaticMesh>       ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UStaticMesh> UTESAmmo::GetProjectileStaticMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESAmmo", "GetProjectileStaticMesh");

	Params::TESAmmo_GetProjectileStaticMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESAmmo.GetQuiverStaticMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UStaticMesh>       ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UStaticMesh> UTESAmmo::GetQuiverStaticMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESAmmo", "GetQuiverStaticMesh");

	Params::TESAmmo_GetQuiverStaticMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_Wander.OnSpecialIdleAnimationStarted
// (Final, Native, Private)
// Parameters:
// class UAnimSequenceBase*                AnimAsset                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAIProcedureExecution_Wander::OnSpecialIdleAnimationStarted(class UAnimSequenceBase* AnimAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_Wander", "OnSpecialIdleAnimationStarted");

	Params::VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted Parms{};

	Parms.AnimAsset = AnimAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_Wander.OnSpecialIdleAnimationStopped
// (Final, Native, Private)

void UVAIProcedureExecution_Wander::OnSpecialIdleAnimationStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_Wander", "OnSpecialIdleAnimationStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TESCell.GetDataX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESCell::GetDataX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESCell", "GetDataX");

	Params::TESCell_GetDataX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESCell.GetDataY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESCell::GetDataY() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESCell", "GetDataY");

	Params::TESCell_GetDataY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESCell.GetLandscape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTESLandscape*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESLandscape* UTESCell::GetLandscape() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESCell", "GetLandscape");

	Params::TESCell_GetLandscape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESCell.HasWater
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESCell::HasWater() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESCell", "HasWater");

	Params::TESCell_HasWater Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESCell.IsInterior
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESCell::IsInterior() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESCell", "IsInterior");

	Params::TESCell_IsInterior Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESCell.IsPersistent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESCell::IsPersistent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESCell", "IsPersistent");

	Params::TESCell_IsPersistent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESEffectSetting.GetAssociatedItemID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UTESEffectSetting::GetAssociatedItemID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESEffectSetting", "GetAssociatedItemID");

	Params::TESEffectSetting_GetAssociatedItemID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESEffectSetting.GetEffectShaderID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UTESEffectSetting::GetEffectShaderID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESEffectSetting", "GetEffectShaderID");

	Params::TESEffectSetting_GetEffectShaderID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESEffectSetting.GetEnchantEffectID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UTESEffectSetting::GetEnchantEffectID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESEffectSetting", "GetEnchantEffectID");

	Params::TESEffectSetting_GetEnchantEffectID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedAddedEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWantToDelete                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::RegisterSendClickedAddedEffect(int32 Index_0, bool bWantToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "RegisterSendClickedAddedEffect");

	Params::VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect Parms{};

	Parms.Index_0 = Index_0;
	Parms.bWantToDelete = bWantToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedCreate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      NewSpellName                                           (Parm, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::RegisterSendClickedCreate(const class FText& NewSpellName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "RegisterSendClickedCreate");

	Params::VSpellMakingMenuViewModel_RegisterSendClickedCreate Parms{};

	Parms.NewSpellName = std::move(NewSpellName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedExit
// (Final, Native, Public, BlueprintCallable)

void UVSpellMakingMenuViewModel::RegisterSendClickedExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "RegisterSendClickedExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedKnownEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWantToDelete                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::RegisterSendClickedKnownEffect(int32 Index_0, bool bWantToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "RegisterSendClickedKnownEffect");

	Params::VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect Parms{};

	Parms.Index_0 = Index_0;
	Parms.bWantToDelete = bWantToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.SetIsSortReversed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::SetIsSortReversed(bool bNewIsSortReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "SetIsSortReversed");

	Params::VSpellMakingMenuViewModel_SetIsSortReversed Parms{};

	Parms.bNewIsSortReversed = bNewIsSortReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.SetKnownEffectsItems
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyEffectsItemProperties>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::SetKnownEffectsItems(const TArray<struct FLegacyEffectsItemProperties>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "SetKnownEffectsItems");

	Params::VSpellMakingMenuViewModel_SetKnownEffectsItems Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.SetRequiredEffectsText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::SetRequiredEffectsText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "SetRequiredEffectsText");

	Params::VSpellMakingMenuViewModel_SetRequiredEffectsText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.SetRequiredEffectVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::SetRequiredEffectVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "SetRequiredEffectVisibility");

	Params::VSpellMakingMenuViewModel_SetRequiredEffectVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.SetSortType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::SetSortType(const EOriginalInventoryMenuSortType& NewSortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "SetSortType");

	Params::VSpellMakingMenuViewModel_SetSortType Parms{};

	Parms.NewSortType = NewSortType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.SetSpellMakingCost
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacySpellMakingCost&    Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellMakingMenuViewModel::SetSpellMakingCost(const struct FLegacySpellMakingCost& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "SetSpellMakingCost");

	Params::VSpellMakingMenuViewModel_SetSpellMakingCost Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellMakingMenuViewModel.GetKnownEffectsItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyEffectsItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyEffectsItemProperties> UVSpellMakingMenuViewModel::GetKnownEffectsItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "GetKnownEffectsItems");

	Params::VSpellMakingMenuViewModel_GetKnownEffectsItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingMenuViewModel.GetRequiredEffectsText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVSpellMakingMenuViewModel::GetRequiredEffectsText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "GetRequiredEffectsText");

	Params::VSpellMakingMenuViewModel_GetRequiredEffectsText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVSpellMakingMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "GetSortType");

	Params::VSpellMakingMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingMenuViewModel.GetSpellMakingCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacySpellMakingCost     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacySpellMakingCost UVSpellMakingMenuViewModel::GetSpellMakingCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "GetSpellMakingCost");

	Params::VSpellMakingMenuViewModel_GetSpellMakingCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingMenuViewModel.IsRequiredEffectVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingMenuViewModel::IsRequiredEffectVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "IsRequiredEffectVisible");

	Params::VSpellMakingMenuViewModel_IsRequiredEffectVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellMakingMenuViewModel.IsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellMakingMenuViewModel::IsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellMakingMenuViewModel", "IsSortReversed");

	Params::VSpellMakingMenuViewModel_IsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarAkComponent.ForceUpdateGameObjectPosition
// (Final, Native, Public, BlueprintCallable)

void UVAltarAkComponent::ForceUpdateGameObjectPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarAkComponent", "ForceUpdateGameObjectPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAkComponent.BPF_HasActiveEvents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarAkComponent::BPF_HasActiveEvents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarAkComponent", "BPF_HasActiveEvents");

	Params::VAltarAkComponent_BPF_HasActiveEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEntitlementBlueprintLibrary.HasDeluxeEntitlement
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarEntitlementBlueprintLibrary::HasDeluxeEntitlement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarEntitlementBlueprintLibrary", "HasDeluxeEntitlement");

	Params::VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarButton.ChangeInputMethod
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ECommonInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarButton::ChangeInputMethod(ECommonInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "ChangeInputMethod");

	Params::VAltarButton_ChangeInputMethod Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButton.ForceSynchronizeProperties
// (Final, Native, Protected, BlueprintCallable)

void UVAltarButton::ForceSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "ForceSynchronizeProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButton.OnButtonTextUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarButton::OnButtonTextUpdated(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "OnButtonTextUpdated");

	Params::VAltarButton_OnButtonTextUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarButton.OnControllerActiveUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarButton::OnControllerActiveUpdated(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "OnControllerActiveUpdated");

	Params::VAltarButton_OnControllerActiveUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarButton.OnSynchronizeProperties
// (Event, Public, BlueprintEvent)

void UVAltarButton::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarButton.SetButtonText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarButton::SetButtonText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "SetButtonText");

	Params::VAltarButton_SetButtonText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButton.SetControllerActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarButton::SetControllerActive(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "SetControllerActive");

	Params::VAltarButton_SetControllerActive Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarButton.GetButtonText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVAltarButton::GetButtonText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "GetButtonText");

	Params::VAltarButton_GetButtonText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarButton.GetControllerActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarButton::GetControllerActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "GetControllerActive");

	Params::VAltarButton_GetControllerActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarButton.GetControllerButtonIconCropX
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAltarButton::GetControllerButtonIconCropX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarButton", "GetControllerButtonIconCropX");

	Params::VAltarButton_GetControllerButtonIconCropX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacySaveLoadMenuItem.SetSlotName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewSlotName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacySaveLoadMenuItem::SetSlotName(const class FString& NewSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySaveLoadMenuItem", "SetSlotName");

	Params::VLegacySaveLoadMenuItem_SetSlotName Parms{};

	Parms.NewSlotName = std::move(NewSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySaveLoadMenuItem.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacySaveLoadMenuItem::SetText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySaveLoadMenuItem", "SetText");

	Params::VLegacySaveLoadMenuItem_SetText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySaveLoadMenuItem.GetSlotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVLegacySaveLoadMenuItem::GetSlotName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySaveLoadMenuItem", "GetSlotName");

	Params::VLegacySaveLoadMenuItem_GetSlotName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacySaveLoadMenuItem.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacySaveLoadMenuItem::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySaveLoadMenuItem", "GetText");

	Params::VLegacySaveLoadMenuItem_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarNavigableScrollBox.OnScrollbarValueChanged
// (Final, Native, Protected)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableScrollBox::OnScrollbarValueChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableScrollBox", "OnScrollbarValueChanged");

	Params::VAltarNavigableScrollBox_OnScrollbarValueChanged Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableScrollBox.OnScrollBoxValuesChanged
// (Final, Native, Protected)
// Parameters:
// float                                   MinScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentScrollbarValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ThumbFractionSize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableScrollBox::OnScrollBoxValuesChanged(float MinScrollbarValue, float MaxScrollbarValue, float CurrentScrollbarValue, float ThumbFractionSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableScrollBox", "OnScrollBoxValuesChanged");

	Params::VAltarNavigableScrollBox_OnScrollBoxValuesChanged Parms{};

	Parms.MinScrollbarValue = MinScrollbarValue;
	Parms.MaxScrollbarValue = MaxScrollbarValue;
	Parms.CurrentScrollbarValue = CurrentScrollbarValue;
	Parms.ThumbFractionSize = ThumbFractionSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableScrollBox.OnUserScrolled
// (Final, Native, Protected)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableScrollBox::OnUserScrolled(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableScrollBox", "OnUserScrolled");

	Params::VAltarNavigableScrollBox_OnUserScrolled Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableScrollBox.UpdateLockState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewLockState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableScrollBox::UpdateLockState(bool bNewLockState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableScrollBox", "UpdateLockState");

	Params::VAltarNavigableScrollBox_UpdateLockState Parms{};

	Parms.bNewLockState = bNewLockState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMediaPlayer.Clear
// (Final, Native, Public, BlueprintCallable)

void UVAltarMediaPlayer::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMediaPlayer.Close
// (Final, Native, Public, BlueprintCallable)

void UVAltarMediaPlayer::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMediaPlayer.Internal_OnVideoCompleted
// (Final, Native, Private)

void UVAltarMediaPlayer::Internal_OnVideoCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Internal_OnVideoCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMediaPlayer.Internal_OnVideoOpenned
// (Final, Native, Private)
// Parameters:
// const class FString&                    OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarMediaPlayer::Internal_OnVideoOpenned(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Internal_OnVideoOpenned");

	Params::VAltarMediaPlayer_Internal_OnVideoOpenned Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarMediaPlayer.IsOpenned
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::IsOpenned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "IsOpenned");

	Params::VAltarMediaPlayer_IsOpenned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::IsPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "IsPlaying");

	Params::VAltarMediaPlayer_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.Open
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Open");

	Params::VAltarMediaPlayer_Open Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Pause");

	Params::VAltarMediaPlayer_Pause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Play");

	Params::VAltarMediaPlayer_Play Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.PlayFromStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::PlayFromStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "PlayFromStart");

	Params::VAltarMediaPlayer_PlayFromStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.PlayFromTimeStamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::PlayFromTimeStamp(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "PlayFromTimeStamp");

	Params::VAltarMediaPlayer_PlayFromTimeStamp Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.Prepare
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::Prepare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Prepare");

	Params::VAltarMediaPlayer_Prepare Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMediaPlayer.Seek
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarMediaPlayer::Seek(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMediaPlayer", "Seek");

	Params::VAltarMediaPlayer_Seek Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEquipUnequipCharacterAnimInstance.IsSneaking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEquipUnequipCharacterAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipCharacterAnimInstance", "IsSneaking");

	Params::VEquipUnequipCharacterAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEquipUnequipCharacterAnimInstance.IsStanding
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEquipUnequipCharacterAnimInstance::IsStanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipCharacterAnimInstance", "IsStanding");

	Params::VEquipUnequipCharacterAnimInstance_IsStanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEquipUnequipSSSwimSingle.OnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipSSSwimSingle::OnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipSSSwimSingle", "OnEquipEnter");

	Params::VEquipUnequipSSSwimSingle_OnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipSSSwimSingle.OnUnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipSSSwimSingle::OnUnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipSSSwimSingle", "OnUnEquipEnter");

	Params::VEquipUnequipSSSwimSingle_OnUnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TESLandscape.CreateHeightmapData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFlipYAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepSouthWestVertices                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ZScaleMinHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ZScaleMaxHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WorldSpaceOffsetY                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTESLandscape::CreateHeightmapData(bool bFlipYAxis, bool bKeepSouthWestVertices, float ZScaleMinHeight, float ZScaleMaxHeight, float WorldSpaceOffsetY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESLandscape", "CreateHeightmapData");

	Params::TESLandscape_CreateHeightmapData Parms{};

	Parms.bFlipYAxis = bFlipYAxis;
	Parms.bKeepSouthWestVertices = bKeepSouthWestVertices;
	Parms.ZScaleMinHeight = ZScaleMinHeight;
	Parms.ZScaleMaxHeight = ZScaleMaxHeight;
	Parms.WorldSpaceOffsetY = WorldSpaceOffsetY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESLandscape.GetHeightmapTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFlipYAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UTESLandscape::GetHeightmapTexture(bool bFlipYAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESLandscape", "GetHeightmapTexture");

	Params::TESLandscape_GetHeightmapTexture Parms{};

	Parms.bFlipYAxis = bFlipYAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESLandscape.GetLandBaseTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTESLandTexture*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESLandTexture* UTESLandscape::GetLandBaseTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESLandscape", "GetLandBaseTexture");

	Params::TESLandscape_GetLandBaseTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarOnlineStoreBlueprintLibrary.GetDeluxeStoreId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVAltarOnlineStoreBlueprintLibrary::GetDeluxeStoreId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarOnlineStoreBlueprintLibrary", "GetDeluxeStoreId");

	Params::VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarOnlineStoreBlueprintLibrary.OpenContentChangePopup
// (Final, Native, Static, Public, BlueprintCallable)

void UVAltarOnlineStoreBlueprintLibrary::OpenContentChangePopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarOnlineStoreBlueprintLibrary", "OpenContentChangePopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarOnlineStoreBlueprintLibrary.OpenStoreDeluxe
// (Final, Native, Static, Public, BlueprintCallable)

void UVAltarOnlineStoreBlueprintLibrary::OpenStoreDeluxe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarOnlineStoreBlueprintLibrary", "OpenStoreDeluxe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarOnlineStoreBlueprintLibrary.OpenStoreForId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ProductId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarOnlineStoreBlueprintLibrary::OpenStoreForId(const class FString& ProductId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarOnlineStoreBlueprintLibrary", "OpenStoreForId");

	Params::VAltarOnlineStoreBlueprintLibrary_OpenStoreForId Parms{};

	Parms.ProductId = std::move(ProductId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFadeWidget.OnFadeAnimationBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UVFadeWidget::OnFadeAnimationBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFadeWidget", "OnFadeAnimationBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableInputKeySelector.AddNewlyReboundKeyToInputSystem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      NewlyReboundKey                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableInputKeySelector::AddNewlyReboundKeyToInputSystem(const struct FKey& NewlyReboundKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "AddNewlyReboundKeyToInputSystem");

	Params::VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem Parms{};

	Parms.NewlyReboundKey = std::move(NewlyReboundKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableInputKeySelector.GetHintKeyText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVAltarNavigableInputKeySelector::GetHintKeyText(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "GetHintKeyText");

	Params::VAltarNavigableInputKeySelector_GetHintKeyText Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshIconImageBrush
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               NewBrush                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarNavigableInputKeySelector::RequestRefreshIconImageBrush(const struct FSlateBrush& NewBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "RequestRefreshIconImageBrush");

	Params::VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush Parms{};

	Parms.NewBrush = std::move(NewBrush);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshIconImageVisibility
// (Event, Public, BlueprintEvent)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableInputKeySelector::RequestRefreshIconImageVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "RequestRefreshIconImageVisibility");

	Params::VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshLabelText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarNavigableInputKeySelector::RequestRefreshLabelText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "RequestRefreshLabelText");

	Params::VAltarNavigableInputKeySelector_RequestRefreshLabelText Parms{};

	Parms.NewText = std::move(NewText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshLabelVisibility
// (Event, Public, BlueprintEvent)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableInputKeySelector::RequestRefreshLabelVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "RequestRefreshLabelVisibility");

	Params::VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarNavigableInputKeySelector.ResfreshInputDisplay
// (Event, Public, BlueprintEvent)

void UVAltarNavigableInputKeySelector::ResfreshInputDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableInputKeySelector", "ResfreshInputDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarPlayerCameraManager.ChangeCameraTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              NewCameraTags                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::ChangeCameraTags(const struct FGameplayTag& NewCameraTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "ChangeCameraTags");

	Params::VAltarPlayerCameraManager_ChangeCameraTags Parms{};

	Parms.NewCameraTags = std::move(NewCameraTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.EnterDialogueCamera
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerCameraManager::EnterDialogueCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "EnterDialogueCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.ForceSetDialogueFOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DesiredFOV                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInPersuasion                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::ForceSetDialogueFOV(float DesiredFOV, bool bIsInPersuasion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "ForceSetDialogueFOV");

	Params::VAltarPlayerCameraManager_ForceSetDialogueFOV Parms{};

	Parms.DesiredFOV = DesiredFOV;
	Parms.bIsInPersuasion = bIsInPersuasion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.OnCameraTagsChanged
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayTagContainer&     CurrentTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     PreviousTags                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::OnCameraTagsChanged(const struct FGameplayTagContainer& CurrentTags, const struct FGameplayTagContainer& PreviousTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "OnCameraTagsChanged");

	Params::VAltarPlayerCameraManager_OnCameraTagsChanged Parms{};

	Parms.CurrentTags = std::move(CurrentTags);
	Parms.PreviousTags = std::move(PreviousTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.OverrideTransitionDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewOverrideDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::OverrideTransitionDuration(float NewOverrideDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "OverrideTransitionDuration");

	Params::VAltarPlayerCameraManager_OverrideTransitionDuration Parms{};

	Parms.NewOverrideDuration = NewOverrideDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.OverrideTransitionEaseCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      NewOverrideCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::OverrideTransitionEaseCurve(class UCurveFloat* NewOverrideCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "OverrideTransitionEaseCurve");

	Params::VAltarPlayerCameraManager_OverrideTransitionEaseCurve Parms{};

	Parms.NewOverrideCurve = NewOverrideCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.ResetFromInputVanityCameraTimer
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerCameraManager::ResetFromInputVanityCameraTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "ResetFromInputVanityCameraTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.RestartFromPauseVanityCameraTimer
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerCameraManager::RestartFromPauseVanityCameraTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "RestartFromPauseVanityCameraTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.SetCurrentCameraSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVCameraSettings&          CameraSettingsRow                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::SetCurrentCameraSetting(const struct FVCameraSettings& CameraSettingsRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "SetCurrentCameraSetting");

	Params::VAltarPlayerCameraManager_SetCurrentCameraSetting Parms{};

	Parms.CameraSettingsRow = std::move(CameraSettingsRow);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.SetDesiredOverridePitchAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   desiredAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::SetDesiredOverridePitchAngle(float desiredAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "SetDesiredOverridePitchAngle");

	Params::VAltarPlayerCameraManager_SetDesiredOverridePitchAngle Parms{};

	Parms.desiredAngle = desiredAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.SetVanityCameraTimer
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerCameraManager::SetVanityCameraTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "SetVanityCameraTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.StopVanityCameraTimer
// (Final, Native, Public, BlueprintCallable)

void AVAltarPlayerCameraManager::StopVanityCameraTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "StopVanityCameraTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.TakeControlOfCameraPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldTakeControl                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::TakeControlOfCameraPitch(bool bShouldTakeControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "TakeControlOfCameraPitch");

	Params::VAltarPlayerCameraManager_TakeControlOfCameraPitch Parms{};

	Parms.bShouldTakeControl = bShouldTakeControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.UpdateCamera
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::UpdateCamera(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "UpdateCamera");

	Params::VAltarPlayerCameraManager_UpdateCamera Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.UpdateDialogueCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsInPersuasion                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarPlayerCameraManager::UpdateDialogueCamera(float DeltaTime, bool bIsInPersuasion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "UpdateDialogueCamera");

	Params::VAltarPlayerCameraManager_UpdateDialogueCamera Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bIsInPersuasion = bIsInPersuasion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarPlayerCameraManager.CanEnterInVanityCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVAltarPlayerCameraManager::CanEnterInVanityCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "CanEnterInVanityCamera");

	Params::VAltarPlayerCameraManager_CanEnterInVanityCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerCameraManager.GetCurrentCameraTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AVAltarPlayerCameraManager::GetCurrentCameraTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "GetCurrentCameraTag");

	Params::VAltarPlayerCameraManager_GetCurrentCameraTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerCameraManager.GetLastCameraTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag AVAltarPlayerCameraManager::GetLastCameraTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "GetLastCameraTag");

	Params::VAltarPlayerCameraManager_GetLastCameraTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarPlayerCameraManager.HasTagsToEnterVanityCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVAltarPlayerCameraManager::HasTagsToEnterVanityCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarPlayerCameraManager", "HasTagsToEnterVanityCamera");

	Params::VAltarPlayerCameraManager_HasTagsToEnterVanityCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUIStateSubsystem.AddOrRemoveHUDVisibilityFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHUDVisibility                          Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAdd                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVUIStateSubsystem::AddOrRemoveHUDVisibilityFlag(EHUDVisibility Flag, bool bAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VUIStateSubsystem", "AddOrRemoveHUDVisibilityFlag");

	Params::VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag Parms{};

	Parms.Flag = Flag;
	Parms.bAdd = bAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUIStateSubsystem.GetGlobalVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVUIStateSubsystem::GetGlobalVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VUIStateSubsystem", "GetGlobalVisibility");

	Params::VUIStateSubsystem_GetGlobalVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUIStateSubsystem.GetHUDVisibilityMask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EHUDVisibility                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EHUDVisibility UVUIStateSubsystem::GetHUDVisibilityMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VUIStateSubsystem", "GetHUDVisibilityMask");

	Params::VUIStateSubsystem_GetHUDVisibilityMask Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUIStateSubsystem.HUDVisibilityContains
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHUDVisibility                          Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVUIStateSubsystem::HUDVisibilityContains(EHUDVisibility Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VUIStateSubsystem", "HUDVisibilityContains");

	Params::VUIStateSubsystem_HUDVisibilityContains Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUIStateSubsystem.SetGlobalVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVUIStateSubsystem::SetGlobalVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VUIStateSubsystem", "SetGlobalVisibility");

	Params::VUIStateSubsystem_SetGlobalVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.ApplyDeviceProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UInputDeviceProperty> DeviceProp                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarHapticFeedbacksBlueprintLibrary::ApplyDeviceProperty(TSubclassOf<class UInputDeviceProperty> DeviceProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarHapticFeedbacksBlueprintLibrary", "ApplyDeviceProperty");

	Params::VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty Parms{};

	Parms.DeviceProp = DeviceProp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.ClearAllHaptics
// (Final, Native, Static, Public)

void UVAltarHapticFeedbacksBlueprintLibrary::ClearAllHaptics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarHapticFeedbacksBlueprintLibrary", "ClearAllHaptics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.IsDevicePropertyActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UInputDeviceProperty> DeviceProp                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarHapticFeedbacksBlueprintLibrary::IsDevicePropertyActive(TSubclassOf<class UInputDeviceProperty> DeviceProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarHapticFeedbacksBlueprintLibrary", "IsDevicePropertyActive");

	Params::VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive Parms{};

	Parms.DeviceProp = DeviceProp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.OnFreezeHandleHaptics
// (Final, Native, Static, Public)
// Parameters:
// bool                                    bIsFreezing                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarHapticFeedbacksBlueprintLibrary::OnFreezeHandleHaptics(bool bIsFreezing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarHapticFeedbacksBlueprintLibrary", "OnFreezeHandleHaptics");

	Params::VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics Parms{};

	Parms.bIsFreezing = bIsFreezing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.RemoveDeviceProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UInputDeviceProperty> DeviceProp                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarHapticFeedbacksBlueprintLibrary::RemoveDeviceProperty(TSubclassOf<class UInputDeviceProperty> DeviceProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarHapticFeedbacksBlueprintLibrary", "RemoveDeviceProperty");

	Params::VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty Parms{};

	Parms.DeviceProp = DeviceProp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_TRAVEL.GetAcceptanceRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAIProcedureExecution_TRAVEL::GetAcceptanceRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_TRAVEL", "GetAcceptanceRadius");

	Params::VAIProcedureExecution_TRAVEL_GetAcceptanceRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyIngredientItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyIngredientItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyIngredientItem::SetProperties(const struct FLegacyIngredientItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyIngredientItem", "SetProperties");

	Params::VLegacyIngredientItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyIngredientItem.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyIngredientItem::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyIngredientItem", "GetIndex");

	Params::VLegacyIngredientItem_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyIngredientItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyIngredientItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyIngredientItemProperties UVLegacyIngredientItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyIngredientItem", "GetProperties");

	Params::VLegacyIngredientItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.ActionStateStartBehavior.StartBehaviorFromTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              BehaviorTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActorBehaviorBase**             StartedBehavior                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVAltarActionState*               OuterState                                             (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActionStateStartBehavior*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActionStateStartBehavior* UActionStateStartBehavior::StartBehaviorFromTag(const struct FGameplayTag& BehaviorTag, class UVActorBehaviorBase** StartedBehavior, class UVAltarActionState* OuterState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActionStateStartBehavior", "StartBehaviorFromTag");

	Params::ActionStateStartBehavior_StartBehaviorFromTag Parms{};

	Parms.BehaviorTag = std::move(BehaviorTag);
	Parms.OuterState = OuterState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StartedBehavior != nullptr)
		*StartedBehavior = Parms.StartedBehavior;

	return Parms.ReturnValue;
}


// Function Altar.ActionStateStartBehavior.StartBehaviorFromTemplate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVActorBehaviorBase*              BehaviorTemplate                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActorBehaviorBase**             StartedBehavior                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVAltarActionState*               OuterState                                             (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActionStateStartBehavior*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActionStateStartBehavior* UActionStateStartBehavior::StartBehaviorFromTemplate(class UVActorBehaviorBase* BehaviorTemplate, class UVActorBehaviorBase** StartedBehavior, class UVAltarActionState* OuterState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActionStateStartBehavior", "StartBehaviorFromTemplate");

	Params::ActionStateStartBehavior_StartBehaviorFromTemplate Parms{};

	Parms.BehaviorTemplate = BehaviorTemplate;
	Parms.OuterState = OuterState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StartedBehavior != nullptr)
		*StartedBehavior = Parms.StartedBehavior;

	return Parms.ReturnValue;
}


// Function Altar.ActionStateStartBehavior.OnBehaviorEnded
// (Final, Native, Private)
// Parameters:
// bool                                    bIsCanceled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionStateStartBehavior::OnBehaviorEnded(bool bIsCanceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionStateStartBehavior", "OnBehaviorEnded");

	Params::ActionStateStartBehavior_OnBehaviorEnded Parms{};

	Parms.bIsCanceled = bIsCanceled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.Clear
// (Final, Native, Public, BlueprintCallable)

void UVAltarBinkMediaPlayer::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.Close
// (Final, Native, Public, BlueprintCallable)

void UVAltarBinkMediaPlayer::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.EndCurrentSubtitle
// (Final, Native, Private)

void UVAltarBinkMediaPlayer::EndCurrentSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "EndCurrentSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.Internal_OnVideoCompleted
// (Final, Native, Private)

void UVAltarBinkMediaPlayer::Internal_OnVideoCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Internal_OnVideoCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.Internal_OnVideoOpenned
// (Final, Native, Private)
// Parameters:
// const class FString&                    OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarBinkMediaPlayer::Internal_OnVideoOpenned(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Internal_OnVideoOpenned");

	Params::VAltarBinkMediaPlayer_Internal_OnVideoOpenned Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.LaunchFadeOut
// (Final, Native, Private)

void UVAltarBinkMediaPlayer::LaunchFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "LaunchFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.ManageSubtitle
// (Final, Native, Private)

void UVAltarBinkMediaPlayer::ManageSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "ManageSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.OnStartNextSubtitle
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      SubtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarBinkMediaPlayer::OnStartNextSubtitle(const class FText& SubtitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "OnStartNextSubtitle");

	Params::VAltarBinkMediaPlayer_OnStartNextSubtitle Parms{};

	Parms.SubtitleText = std::move(SubtitleText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarBinkMediaPlayer.OnStopCurrentSubtitle
// (Event, Protected, BlueprintEvent)

void UVAltarBinkMediaPlayer::OnStopCurrentSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "OnStopCurrentSubtitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarBinkMediaPlayer.Open
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Open");

	Params::VAltarBinkMediaPlayer_Open Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.OpenUrl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewUrl                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::OpenUrl(const class FString& NewUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "OpenUrl");

	Params::VAltarBinkMediaPlayer_OpenUrl Parms{};

	Parms.NewUrl = std::move(NewUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Pause");

	Params::VAltarBinkMediaPlayer_Pause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.Play
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Play");

	Params::VAltarBinkMediaPlayer_Play Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.PlayFromStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::PlayFromStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "PlayFromStart");

	Params::VAltarBinkMediaPlayer_PlayFromStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.PlayFromTimeStamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::PlayFromTimeStamp(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "PlayFromTimeStamp");

	Params::VAltarBinkMediaPlayer_PlayFromTimeStamp Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.Prepare
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::Prepare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Prepare");

	Params::VAltarBinkMediaPlayer_Prepare Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.Seek
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::Seek(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "Seek");

	Params::VAltarBinkMediaPlayer_Seek Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.StartNextSubtitle
// (Final, Native, Private)

void UVAltarBinkMediaPlayer::StartNextSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "StartNextSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBinkMediaPlayer.StartSubtitleFadeOut
// (Event, Protected, BlueprintEvent)

void UVAltarBinkMediaPlayer::StartSubtitleFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "StartSubtitleFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarBinkMediaPlayer.GetCurrentPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVAltarBinkMediaPlayer::GetCurrentPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "GetCurrentPath");

	Params::VAltarBinkMediaPlayer_GetCurrentPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.HaveReachedFadeOutTimer
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::HaveReachedFadeOutTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "HaveReachedFadeOutTimer");

	Params::VAltarBinkMediaPlayer_HaveReachedFadeOutTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.HaveReachedNextEndTimer
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::HaveReachedNextEndTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "HaveReachedNextEndTimer");

	Params::VAltarBinkMediaPlayer_HaveReachedNextEndTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.HaveReachedNextStartTimer
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::HaveReachedNextStartTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "HaveReachedNextStartTimer");

	Params::VAltarBinkMediaPlayer_HaveReachedNextStartTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.IsOpened
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::IsOpened() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "IsOpened");

	Params::VAltarBinkMediaPlayer_IsOpened Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBinkMediaPlayer.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarBinkMediaPlayer::IsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBinkMediaPlayer", "IsPlaying");

	Params::VAltarBinkMediaPlayer_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLRPrepareAttackAnimInstance.OnPrepareAttackEnter
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLRPrepareAttackAnimInstance::OnPrepareAttackEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLRPrepareAttackAnimInstance", "OnPrepareAttackEnter");

	Params::VLRPrepareAttackAnimInstance_OnPrepareAttackEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TESRace.GetRaceBodyBySex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterSex                           Sex                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRaceBody                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FRaceBody UTESRace::GetRaceBodyBySex(ECharacterSex Sex, int32 BodyIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESRace", "GetRaceBodyBySex");

	Params::TESRace_GetRaceBodyBySex Parms{};

	Parms.Sex = Sex;
	Parms.BodyIndex = BodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIHelper.CopyToClipboard
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class FString&                    InTextToCopy                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIHelper::CopyToClipboard(const class FString& InTextToCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "CopyToClipboard");

	Params::VAltarUIHelper_CopyToClipboard Parms{};

	Parms.InTextToCopy = std::move(InTextToCopy);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIHelper.DeprojectActorViewScreenPointToWorld
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UCameraComponent*                 InCameraComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ScreenPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         WorldPosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         WorldDirection                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarUIHelper::DeprojectActorViewScreenPointToWorld(class UCameraComponent* InCameraComponent, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "DeprojectActorViewScreenPointToWorld");

	Params::VAltarUIHelper_DeprojectActorViewScreenPointToWorld Parms{};

	Parms.InCameraComponent = InCameraComponent;
	Parms.ScreenPosition = std::move(ScreenPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WorldPosition != nullptr)
		*WorldPosition = std::move(Parms.WorldPosition);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIHelper.DisplayCreditsWidget
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CreditMenuName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIHelper::DisplayCreditsWidget(bool bNewVisibility, class FName CreditMenuName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "DisplayCreditsWidget");

	Params::VAltarUIHelper_DisplayCreditsWidget Parms{};

	Parms.bNewVisibility = bNewVisibility;
	Parms.CreditMenuName = CreditMenuName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIHelper.FindComponentByName
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     InActor                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UActorComponent>ComponentClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      InName                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* UVAltarUIHelper::FindComponentByName(const class AActor* InActor, const TSubclassOf<class UActorComponent> ComponentClass, const class FName& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "FindComponentByName");

	Params::VAltarUIHelper_FindComponentByName Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIHelper.GetActorBoundsRestricted
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     InActor                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UClass*>&            ExcludedClasses                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ExcludedActorComponentNames                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyCollidingComponents                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutOrigin                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutBoxExtent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeFromChildActors                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIHelper::GetActorBoundsRestricted(const class AActor* InActor, const TArray<class UClass*>& ExcludedClasses, const TArray<class FName>& ExcludedActorComponentNames, bool bOnlyCollidingComponents, struct FVector* OutOrigin, struct FVector* OutBoxExtent, bool bIncludeFromChildActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "GetActorBoundsRestricted");

	Params::VAltarUIHelper_GetActorBoundsRestricted Parms{};

	Parms.InActor = InActor;
	Parms.ExcludedClasses = std::move(ExcludedClasses);
	Parms.ExcludedActorComponentNames = std::move(ExcludedActorComponentNames);
	Parms.bOnlyCollidingComponents = bOnlyCollidingComponents;
	Parms.bIncludeFromChildActors = bIncludeFromChildActors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOrigin != nullptr)
		*OutOrigin = std::move(Parms.OutOrigin);

	if (OutBoxExtent != nullptr)
		*OutBoxExtent = std::move(Parms.OutBoxExtent);
}


// Function Altar.VAltarUIHelper.GetGreatestCommonDivisor
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarUIHelper::GetGreatestCommonDivisor(int32 A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "GetGreatestCommonDivisor");

	Params::VAltarUIHelper_GetGreatestCommonDivisor Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIHelper.IsBox2DInsideBox2D
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBox2D&                    InBox                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FBox2D&                    InEnclosingBox                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarUIHelper::IsBox2DInsideBox2D(const struct FBox2D& InBox, const struct FBox2D& InEnclosingBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "IsBox2DInsideBox2D");

	Params::VAltarUIHelper_IsBox2DInsideBox2D Parms{};

	Parms.InBox = std::move(InBox);
	Parms.InEnclosingBox = std::move(InEnclosingBox);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIHelper.IsPointInsideBox2D
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBox2D&                    InBox                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InPointToCheck                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarUIHelper::IsPointInsideBox2D(const struct FBox2D& InBox, const struct FVector2D& InPointToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "IsPointInsideBox2D");

	Params::VAltarUIHelper_IsPointInsideBox2D Parms{};

	Parms.InBox = std::move(InBox);
	Parms.InPointToCheck = std::move(InPointToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUIHelper.MarkActorComponentRenderStateDirty
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UActorComponent*                  InActorComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUIHelper::MarkActorComponentRenderStateDirty(class UActorComponent* InActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "MarkActorComponentRenderStateDirty");

	Params::VAltarUIHelper_MarkActorComponentRenderStateDirty Parms{};

	Parms.InActorComponent = InActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIHelper.SetSceneComponentHiddenInGameRestricted
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSceneComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewHidden                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UClass*>&            ExcludedClasses                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarUIHelper::SetSceneComponentHiddenInGameRestricted(class USceneComponent* InSceneComponent, bool bNewHidden, bool bPropagateToChildren, const TArray<class UClass*>& ExcludedClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "SetSceneComponentHiddenInGameRestricted");

	Params::VAltarUIHelper_SetSceneComponentHiddenInGameRestricted Parms{};

	Parms.InSceneComponent = InSceneComponent;
	Parms.bNewHidden = bNewHidden;
	Parms.bPropagateToChildren = bPropagateToChildren;
	Parms.ExcludedClasses = std::move(ExcludedClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUIHelper.SetVisibilityRestricted
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSceneComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UClass*>&            ExcludedClasses                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarUIHelper::SetVisibilityRestricted(class USceneComponent* InSceneComponent, bool bNewVisibility, bool bPropagateToChildren, const TArray<class UClass*>& ExcludedClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarUIHelper", "SetVisibilityRestricted");

	Params::VAltarUIHelper_SetVisibilityRestricted Parms{};

	Parms.InSceneComponent = InSceneComponent;
	Parms.bNewVisibility = bNewVisibility;
	Parms.bPropagateToChildren = bPropagateToChildren;
	Parms.ExcludedClasses = std::move(ExcludedClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.CallTextureEffectBroadcastStartOnQuiver
// (Final, Native, Public)
// Parameters:
// class AVQuiver*                         Quiver                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVWeaponsPairingComponent::CallTextureEffectBroadcastStartOnQuiver(class AVQuiver* Quiver, bool bEquipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "CallTextureEffectBroadcastStartOnQuiver");

	Params::VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver Parms{};

	Parms.Quiver = Quiver;
	Parms.bEquipping = bEquipping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.CallTextureEffectBroadcastStartOnShield
// (Final, Native, Public)
// Parameters:
// class AVShield*                         Shield                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVWeaponsPairingComponent::CallTextureEffectBroadcastStartOnShield(class AVShield* Shield, bool bEquipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "CallTextureEffectBroadcastStartOnShield");

	Params::VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield Parms{};

	Parms.Shield = Shield;
	Parms.bEquipping = bEquipping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.CallTextureEffectBroadcastStartOnWeapon
// (Final, Native, Public)
// Parameters:
// class AVWeapon*                         Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVWeaponsPairingComponent::CallTextureEffectBroadcastStartOnWeapon(class AVWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "CallTextureEffectBroadcastStartOnWeapon");

	Params::VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.ReleaseArrow
// (Final, Native, Public, BlueprintCallable)

void UVWeaponsPairingComponent::ReleaseArrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "ReleaseArrow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.SetArrowMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             NewArrowMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVWeaponsPairingComponent::SetArrowMeshComponent(class UStaticMeshComponent* NewArrowMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "SetArrowMeshComponent");

	Params::VWeaponsPairingComponent_SetArrowMeshComponent Parms{};

	Parms.NewArrowMeshComponent = NewArrowMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.SetWeaponDrawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsDrawn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVWeaponsPairingComponent::SetWeaponDrawn(bool bIsDrawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "SetWeaponDrawn");

	Params::VWeaponsPairingComponent_SetWeaponDrawn Parms{};

	Parms.bIsDrawn = bIsDrawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeaponsPairingComponent.GetAttachedArrowLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVWeaponsPairingComponent::GetAttachedArrowLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetAttachedArrowLocation");

	Params::VWeaponsPairingComponent_GetAttachedArrowLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedQuiverActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVQuiver*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVQuiver* UVWeaponsPairingComponent::GetEquippedQuiverActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedQuiverActor");

	Params::VWeaponsPairingComponent_GetEquippedQuiverActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedQuiverForm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTESAmmo*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESAmmo* UVWeaponsPairingComponent::GetEquippedQuiverForm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedQuiverForm");

	Params::VWeaponsPairingComponent_GetEquippedQuiverForm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedShieldActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVShield*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVShield* UVWeaponsPairingComponent::GetEquippedShieldActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedShieldActor");

	Params::VWeaponsPairingComponent_GetEquippedShieldActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedShieldForm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTESObjectARMO*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESObjectARMO* UVWeaponsPairingComponent::GetEquippedShieldForm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedShieldForm");

	Params::VWeaponsPairingComponent_GetEquippedShieldForm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedTorchActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVWeaponsPairingComponent::GetEquippedTorchActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedTorchActor");

	Params::VWeaponsPairingComponent_GetEquippedTorchActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedWeaponActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVWeapon*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVWeapon* UVWeaponsPairingComponent::GetEquippedWeaponActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedWeaponActor");

	Params::VWeaponsPairingComponent_GetEquippedWeaponActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedWeaponForm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTESObjectWEAP*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESObjectWEAP* UVWeaponsPairingComponent::GetEquippedWeaponForm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedWeaponForm");

	Params::VWeaponsPairingComponent_GetEquippedWeaponForm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetEquippedWeaponGameplayTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVWeaponsPairingComponent::GetEquippedWeaponGameplayTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetEquippedWeaponGameplayTag");

	Params::VWeaponsPairingComponent_GetEquippedWeaponGameplayTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.GetMainWeaponReach
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVWeaponsPairingComponent::GetMainWeaponReach() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "GetMainWeaponReach");

	Params::VWeaponsPairingComponent_GetMainWeaponReach Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.HasShieldEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVWeaponsPairingComponent::HasShieldEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "HasShieldEquipped");

	Params::VWeaponsPairingComponent_HasShieldEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.IsQuiverAttached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVWeaponsPairingComponent::IsQuiverAttached() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "IsQuiverAttached");

	Params::VWeaponsPairingComponent_IsQuiverAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.IsTorchHeld
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVWeaponsPairingComponent::IsTorchHeld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "IsTorchHeld");

	Params::VWeaponsPairingComponent_IsTorchHeld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeaponsPairingComponent.IsWeaponDrawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVWeaponsPairingComponent::IsWeaponDrawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeaponsPairingComponent", "IsWeaponDrawn");

	Params::VWeaponsPairingComponent_IsWeaponDrawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TestAnimCharacterBase.AttemptStartAttack
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EAttackActionType                       AttackType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATestAnimCharacterBase::AttemptStartAttack(EAttackActionType AttackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "AttemptStartAttack");

	Params::TestAnimCharacterBase_AttemptStartAttack Parms{};

	Parms.AttackType = AttackType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.EnterCombatMode
// (Final, Native, Protected, BlueprintCallable)

void ATestAnimCharacterBase::EnterCombatMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "EnterCombatMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.LeaveCombatMode
// (Final, Native, Protected, BlueprintCallable)

void ATestAnimCharacterBase::LeaveCombatMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "LeaveCombatMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.MeleeAttackRaycast
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitResult ATestAnimCharacterBase::MeleeAttackRaycast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "MeleeAttackRaycast");

	Params::TestAnimCharacterBase_MeleeAttackRaycast Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TestAnimCharacterBase.MoveTowardsFromControlRotation
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Run                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATestAnimCharacterBase::MoveTowardsFromControlRotation(const struct FVector2D& Direction, bool Run)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "MoveTowardsFromControlRotation");

	Params::TestAnimCharacterBase_MoveTowardsFromControlRotation Parms{};

	Parms.Direction = std::move(Direction);
	Parms.Run = Run;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.OnAnimDamageSectionEnd
// (Final, Native, Protected)

void ATestAnimCharacterBase::OnAnimDamageSectionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "OnAnimDamageSectionEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.OnAnimDamageSectionStart
// (Final, Native, Protected)

void ATestAnimCharacterBase::OnAnimDamageSectionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "OnAnimDamageSectionStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.OnAnimJumpStarted
// (Final, Native, Protected)

void ATestAnimCharacterBase::OnAnimJumpStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "OnAnimJumpStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.OnHitImpact
// (Native, Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   ImpactPoint                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATestAnimCharacterBase::OnHitImpact(const struct FVector& ImpactPoint, class UPrimitiveComponent* HitComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "OnHitImpact");

	Params::TestAnimCharacterBase_OnHitImpact Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.HitComponent = HitComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.ScanHit
// (Final, Native, Protected, BlueprintCallable)

void ATestAnimCharacterBase::ScanHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "ScanHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimCharacterBase.SetAimPosition
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   AimPosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATestAnimCharacterBase::SetAimPosition(const struct FVector& AimPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimCharacterBase", "SetAimPosition");

	Params::TestAnimCharacterBase_SetAimPosition Parms{};

	Parms.AimPosition = std::move(AimPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAnimNotifyState_FacialPose.UpdateFacialPose
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     OwnerActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EFacialPoseType                   AnimNotifyFacialPose                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AnimNotifyBlendWeight                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShouldOverrideFacialPose                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsAnimNotifyBegin                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAnimNotifyState_FacialPose::UpdateFacialPose(const class AActor* OwnerActor, const EFacialPoseType AnimNotifyFacialPose, const float AnimNotifyBlendWeight, const bool bShouldOverrideFacialPose, const bool bIsAnimNotifyBegin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimNotifyState_FacialPose", "UpdateFacialPose");

	Params::VAnimNotifyState_FacialPose_UpdateFacialPose Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.AnimNotifyFacialPose = AnimNotifyFacialPose;
	Parms.AnimNotifyBlendWeight = AnimNotifyBlendWeight;
	Parms.bShouldOverrideFacialPose = bShouldOverrideFacialPose;
	Parms.bIsAnimNotifyBegin = bIsAnimNotifyBegin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.AllowNextAttack
// (Final, Native, Public, BlueprintCallable)

void UTestAnimInstanceBase::AllowNextAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "AllowNextAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.AttemptAttackAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackActionType                       AttackActionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimCharacterAttackStartInfo&AttackStartInfo                                        (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTestAnimInstanceBase::AttemptAttackAnimation(EAttackActionType AttackActionType, const struct FAnimCharacterAttackStartInfo& AttackStartInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "AttemptAttackAnimation");

	Params::TestAnimInstanceBase_AttemptAttackAnimation Parms{};

	Parms.AttackActionType = AttackActionType;
	Parms.AttackStartInfo = std::move(AttackStartInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TestAnimInstanceBase.ChooseNextAttackMoveset
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EAttackActionType                       AttackActionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimCharacterAttackStartInfo&AttackStartInfo                                        (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FAttackMovesetItem>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAttackMovesetItem> UTestAnimInstanceBase::ChooseNextAttackMoveset(EAttackActionType AttackActionType, const struct FAnimCharacterAttackStartInfo& AttackStartInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "ChooseNextAttackMoveset");

	Params::TestAnimInstanceBase_ChooseNextAttackMoveset Parms{};

	Parms.AttackActionType = AttackActionType;
	Parms.AttackStartInfo = std::move(AttackStartInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TestAnimInstanceBase.DisallowNextAttack
// (Final, Native, Public, BlueprintCallable)

void UTestAnimInstanceBase::DisallowNextAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "DisallowNextAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.PlayJumpAnimation
// (Final, Native, Public, BlueprintCallable)

void UTestAnimInstanceBase::PlayJumpAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "PlayJumpAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.ProcessDamageReaction
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMeleeAttackDamageEvent&   DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTestAnimInstanceBase::ProcessDamageReaction(float Damage, const struct FMeleeAttackDamageEvent& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "ProcessDamageReaction");

	Params::TestAnimInstanceBase_ProcessDamageReaction Parms{};

	Parms.Damage = Damage;
	Parms.DamageEvent = std::move(DamageEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.ResetAttackChain
// (Final, Native, Public, BlueprintCallable)

void UTestAnimInstanceBase::ResetAttackChain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "ResetAttackChain");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.SetTargetForwardSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TargetSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestAnimInstanceBase::SetTargetForwardSpeed(float TargetSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "SetTargetForwardSpeed");

	Params::TestAnimInstanceBase_SetTargetForwardSpeed Parms{};

	Parms.TargetSpeed = TargetSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.SetTargetRightSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TargetSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestAnimInstanceBase::SetTargetRightSpeed(float TargetSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "SetTargetRightSpeed");

	Params::TestAnimInstanceBase_SetTargetRightSpeed Parms{};

	Parms.TargetSpeed = TargetSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.SignalFallEnded
// (Native, Event, Public, BlueprintEvent)

void UTestAnimInstanceBase::SignalFallEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "SignalFallEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.SignalFallStarted
// (Native, Event, Public, BlueprintEvent)

void UTestAnimInstanceBase::SignalFallStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "SignalFallStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TestAnimInstanceBase.StartPhysicsBlendFromBone
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   StartImpulse                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestAnimInstanceBase::StartPhysicsBlendFromBone(class FName BoneName, float Duration, const struct FVector& StartImpulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInstanceBase", "StartPhysicsBlendFromBone");

	Params::TestAnimInstanceBase_StartPhysicsBlendFromBone Parms{};

	Parms.BoneName = BoneName;
	Parms.Duration = Duration;
	Parms.StartImpulse = std::move(StartImpulse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastOnRequestTimedRevertPopup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVModernSettingWidget*            ChangedSettings                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsGlobalSubsystem::RequestBroadcastOnRequestTimedRevertPopup(class UVModernSettingWidget* ChangedSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsGlobalSubsystem", "RequestBroadcastOnRequestTimedRevertPopup");

	Params::VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup Parms{};

	Parms.ChangedSettings = ChangedSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastOnSettingsChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVModernSettingWidget*            ChangedSettings                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsGlobalSubsystem::RequestBroadcastOnSettingsChanged(class UVModernSettingWidget* ChangedSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsGlobalSubsystem", "RequestBroadcastOnSettingsChanged");

	Params::VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged Parms{};

	Parms.ChangedSettings = ChangedSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastOnUpdateSettingsLockState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewLockState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsGlobalSubsystem::RequestBroadcastOnUpdateSettingsLockState(bool NewLockState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsGlobalSubsystem", "RequestBroadcastOnUpdateSettingsLockState");

	Params::VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState Parms{};

	Parms.NewLockState = NewLockState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CommandToBroadcast                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsGlobalSubsystem::RequestBroadcastSettings(const class FString& CommandToBroadcast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsGlobalSubsystem", "RequestBroadcastSettings");

	Params::VSettingsGlobalSubsystem_RequestBroadcastSettings Parms{};

	Parms.CommandToBroadcast = std::move(CommandToBroadcast);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsGlobalSubsystem.RequestSaveLoadPopup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      PopupText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ModIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsGlobalSubsystem::RequestSaveLoadPopup(const class FText& PopupText, int32 ModIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsGlobalSubsystem", "RequestSaveLoadPopup");

	Params::VSettingsGlobalSubsystem_RequestSaveLoadPopup Parms{};

	Parms.PopupText = std::move(PopupText);
	Parms.ModIndex = ModIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.TESWorldSpace.GetCellAtGridXY
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTESCell*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESCell* UTESWorldSpace::GetCellAtGridXY(int32 X, int32 Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellAtGridXY");

	Params::TESWorldSpace_GetCellAtGridXY Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESWorldSpace.GetCellsGridMaxX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESWorldSpace::GetCellsGridMaxX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellsGridMaxX");

	Params::TESWorldSpace_GetCellsGridMaxX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESWorldSpace.GetCellsGridMaxY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESWorldSpace::GetCellsGridMaxY() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellsGridMaxY");

	Params::TESWorldSpace_GetCellsGridMaxY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESWorldSpace.GetCellsGridMinX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESWorldSpace::GetCellsGridMinX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellsGridMinX");

	Params::TESWorldSpace_GetCellsGridMinX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESWorldSpace.GetCellsGridMinY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESWorldSpace::GetCellsGridMinY() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellsGridMinY");

	Params::TESWorldSpace_GetCellsGridMinY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESWorldSpace.GetCellsGridSizeX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESWorldSpace::GetCellsGridSizeX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellsGridSizeX");

	Params::TESWorldSpace_GetCellsGridSizeX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.TESWorldSpace.GetCellsGridSizeY
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTESWorldSpace::GetCellsGridSizeY() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TESWorldSpace", "GetCellsGridSizeY");

	Params::TESWorldSpace_GetCellsGridSizeY Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhenotypeCustomizationSession.EndSession
// (Final, Native, Public, BlueprintCallable)

void UVPhenotypeCustomizationSession::EndSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "EndSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.RefreshCharacter
// (Final, Native, Public, BlueprintCallable)

void UVPhenotypeCustomizationSession::RefreshCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "RefreshCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.ResetCharacterToPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UVCharacterPhenotypePreset* Preset                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::ResetCharacterToPreset(const class UVCharacterPhenotypePreset* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "ResetCharacterToPreset");

	Params::VPhenotypeCustomizationSession_ResetCharacterToPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetEyeMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomisationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetEyeMaterial(class UMaterialInterface* Material, int32 CustomisationIndex, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetEyeMaterial");

	Params::VPhenotypeCustomizationSession_SetEyeMaterial Parms{};

	Parms.Material = Material;
	Parms.CustomisationIndex = CustomisationIndex;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetFaceBaseMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    FaceBaseMesh                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetFaceBaseMesh(class USkeletalMesh* FaceBaseMesh, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetFaceBaseMesh");

	Params::VPhenotypeCustomizationSession_SetFaceBaseMesh Parms{};

	Parms.FaceBaseMesh = FaceBaseMesh;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetFaceMorphAxisValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetFaceMorphAxisValue(class FName Name_0, float Value, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetFaceMorphAxisValue");

	Params::VPhenotypeCustomizationSession_SetFaceMorphAxisValue Parms{};

	Parms.Name_0 = Name_0;
	Parms.Value = Value;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetFaceSkinMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             MaterialSlotName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetFaceSkinMaterial(class FName MaterialSlotName, class UMaterialInterface* Material, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetFaceSkinMaterial");

	Params::VPhenotypeCustomizationSession_SetFaceSkinMaterial Parms{};

	Parms.MaterialSlotName = MaterialSlotName;
	Parms.Material = Material;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetHairPiece
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVFacialHairType                        HairType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVCharacterHairPieceBase*         HairPiece                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomisationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetHairPiece(EVFacialHairType HairType, class UVCharacterHairPieceBase* HairPiece, int32 CustomisationIndex, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetHairPiece");

	Params::VPhenotypeCustomizationSession_SetHairPiece Parms{};

	Parms.HairType = HairType;
	Parms.HairPiece = HairPiece;
	Parms.CustomisationIndex = CustomisationIndex;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetRace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTESRace*                         NewRace                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetRace(class UTESRace* NewRace, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetRace");

	Params::VPhenotypeCustomizationSession_SetRace Parms{};

	Parms.NewRace = NewRace;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetSenescenceValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetSenescenceValue(int32 NewValue, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetSenescenceValue");

	Params::VPhenotypeCustomizationSession_SetSenescenceValue Parms{};

	Parms.NewValue = NewValue;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetSex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterSex                           Sex                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetSex(ECharacterSex Sex, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetSex");

	Params::VPhenotypeCustomizationSession_SetSex Parms{};

	Parms.Sex = Sex;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetSkinColorParameter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetSkinColorParameter(class FName ParameterName, const struct FColor& Value, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetSkinColorParameter");

	Params::VPhenotypeCustomizationSession_SetSkinColorParameter Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Value = std::move(Value);
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.SetSkinParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldRefreshCharacter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::SetSkinParameter(class FName ParameterName, float Value, bool bShouldRefreshCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "SetSkinParameter");

	Params::VPhenotypeCustomizationSession_SetSkinParameter Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Value = Value;
	Parms.bShouldRefreshCharacter = bShouldRefreshCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.StartFromCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVPairedCharacter*                Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DestroyCharacterOnSessionEnd                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::StartFromCharacter(class AVPairedCharacter* Character, bool DestroyCharacterOnSessionEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "StartFromCharacter");

	Params::VPhenotypeCustomizationSession_StartFromCharacter Parms{};

	Parms.Character = Character;
	Parms.DestroyCharacterOnSessionEnd = DestroyCharacterOnSessionEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhenotypeCustomizationSession.StartFromScratch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhenotypeCustomizationSession::StartFromScratch(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhenotypeCustomizationSession", "StartFromScratch");

	Params::VPhenotypeCustomizationSession_StartFromScratch Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCinematicSubsystem.OnLevelSequenceEnd
// (Final, Native, Private)

void UVCinematicSubsystem::OnLevelSequenceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCinematicSubsystem", "OnLevelSequenceEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCinematicSubsystem.StartInGameCinematic
// (Final, Native, Public, BlueprintCallable)

void UVCinematicSubsystem::StartInGameCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCinematicSubsystem", "StartInGameCinematic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCinematicSubsystem.IsPlayingCinematic
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCinematicSubsystem::IsPlayingCinematic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCinematicSubsystem", "IsPlayingCinematic");

	Params::VCinematicSubsystem_IsPlayingCinematic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VClassItemObject.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewSelectionState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVClassItemObject::SetIsSelected(bool bNewSelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassItemObject", "SetIsSelected");

	Params::VClassItemObject_SetIsSelected Parms{};

	Parms.bNewSelectionState = bNewSelectionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassItemObject.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPlayerClassItemProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVClassItemObject::SetProperties(const struct FPlayerClassItemProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassItemObject", "SetProperties");

	Params::VClassItemObject_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassItemObject.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerClassItemProperties ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FPlayerClassItemProperties UVClassItemObject::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassItemObject", "GetProperties");

	Params::VClassItemObject_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VClassItemObject.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVClassItemObject::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassItemObject", "IsSelected");

	Params::VClassItemObject_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActivableStatic.AttachNativeSceneComponentsToRoot
// (Final, Native, Public, BlueprintCallable)

void AVActivableStatic::AttachNativeSceneComponentsToRoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActivableStatic", "AttachNativeSceneComponentsToRoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorBehaviorBase.EndBehavior
// (Final, Native, Protected, BlueprintCallable)

void UVActorBehaviorBase::EndBehavior()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "EndBehavior");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorBehaviorBase.Interrupt
// (Final, Native, Public, BlueprintCallable)

void UVActorBehaviorBase::Interrupt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "Interrupt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorBehaviorBase.OnEnd
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVActorBehaviorBase::OnEnd(bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "OnEnd");

	Params::VActorBehaviorBase_OnEnd Parms{};

	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorBehaviorBase.OnInit
// (Native, Event, Protected, BlueprintEvent)

void UVActorBehaviorBase::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "OnInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorBehaviorBase.OnUpdate
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVActorBehaviorBase::OnUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "OnUpdate");

	Params::VActorBehaviorBase_OnUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorBehaviorBase.GetControlledPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVPairedPawn*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVPairedPawn* UVActorBehaviorBase::GetControlledPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "GetControlledPawn");

	Params::VActorBehaviorBase_GetControlledPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorBehaviorBase.GetElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVActorBehaviorBase::GetElapsedTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "GetElapsedTime");

	Params::VActorBehaviorBase_GetElapsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorBehaviorBase.GetOuterState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAltarActionState*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAltarActionState* UVActorBehaviorBase::GetOuterState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "GetOuterState");

	Params::VActorBehaviorBase_GetOuterState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorBehaviorBase.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorBehaviorState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVActorBehaviorState UVActorBehaviorBase::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "GetState");

	Params::VActorBehaviorBase_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorBehaviorBase.HasEnded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVActorBehaviorBase::HasEnded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorBase", "HasEnded");

	Params::VActorBehaviorBase_HasEnded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSkillsMenuViewModel.RegisterSendClickedBack
// (Final, Native, Public, BlueprintCallable)

void UVSkillsMenuViewModel::RegisterSendClickedBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "RegisterSendClickedBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.RegisterSendClickedDone
// (Final, Native, Public, BlueprintCallable)

void UVSkillsMenuViewModel::RegisterSendClickedDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "RegisterSendClickedDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.RegisterSendClickedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::RegisterSendClickedItem(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "RegisterSendClickedItem");

	Params::VSkillsMenuViewModel_RegisterSendClickedItem Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.RegisterSendCustomClassName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewClassName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::RegisterSendCustomClassName(const class FText& NewClassName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "RegisterSendCustomClassName");

	Params::VSkillsMenuViewModel_RegisterSendCustomClassName Parms{};

	Parms.NewClassName = std::move(NewClassName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.RegisterSendMultipleClicksBack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumberOfClicksToEmulate                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::RegisterSendMultipleClicksBack(int32 NumberOfClicksToEmulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "RegisterSendMultipleClicksBack");

	Params::VSkillsMenuViewModel_RegisterSendMultipleClicksBack Parms{};

	Parms.NumberOfClicksToEmulate = NumberOfClicksToEmulate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.RegisterSendMultipleClicksDone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumberOfClicksToEmulate                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::RegisterSendMultipleClicksDone(int32 NumberOfClicksToEmulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "RegisterSendMultipleClicksDone");

	Params::VSkillsMenuViewModel_RegisterSendMultipleClicksDone Parms{};

	Parms.NumberOfClicksToEmulate = NumberOfClicksToEmulate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.SetItems
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FSkillsMenuItemProperties>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::SetItems(const TArray<struct FSkillsMenuItemProperties>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "SetItems");

	Params::VSkillsMenuViewModel_SetItems Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.SetProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FSkillsMenuProperties&     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::SetProperties(const struct FSkillsMenuProperties& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "SetProperties");

	Params::VSkillsMenuViewModel_SetProperties Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.UpdateItemSelection
// (Final, Native, Public)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewSelectionState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSkillsMenuViewModel::UpdateItemSelection(int32 ItemIndex, bool bNewSelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "UpdateItemSelection");

	Params::VSkillsMenuViewModel_UpdateItemSelection Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.bNewSelectionState = bNewSelectionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.UpdateListAfterItemSelectionChanged
// (Final, Native, Public)

void UVSkillsMenuViewModel::UpdateListAfterItemSelectionChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "UpdateListAfterItemSelectionChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillsMenuViewModel.GetItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FSkillsMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FSkillsMenuItemProperties> UVSkillsMenuViewModel::GetItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "GetItems");

	Params::VSkillsMenuViewModel_GetItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSkillsMenuViewModel.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSkillsMenuProperties      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSkillsMenuProperties UVSkillsMenuViewModel::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillsMenuViewModel", "GetProperties");

	Params::VSkillsMenuViewModel_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorBehaviorMap.GetBehaviorForTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActorBehaviorBase*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVActorBehaviorBase* UVActorBehaviorMap::GetBehaviorForTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorBehaviorMap", "GetBehaviorForTag");

	Params::VActorBehaviorMap_GetBehaviorForTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.BindOnActorValueChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EVActorValues                           ActorValueToListen                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>&Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVActorValuesPairingComponent::BindOnActorValueChanged(EVActorValues ActorValueToListen, const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "BindOnActorValueChanged");

	Params::VActorValuesPairingComponent_BindOnActorValueChanged Parms{};

	Parms.ActorValueToListen = ActorValueToListen;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorValuesPairingComponent.BindOnAnyActorValueChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSet<EVActorValues>&              ActorValuesToListen                                    (Parm, NativeAccessSpecifierPublic)
// const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>&Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVActorValuesPairingComponent::BindOnAnyActorValueChanged(const TSet<EVActorValues>& ActorValuesToListen, const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "BindOnAnyActorValueChanged");

	Params::VActorValuesPairingComponent_BindOnAnyActorValueChanged Parms{};

	Parms.ActorValuesToListen = std::move(ActorValuesToListen);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorValuesPairingComponent.NotifyAllNewValues
// (Final, Native, Public, BlueprintCallable)

void UVActorValuesPairingComponent::NotifyAllNewValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "NotifyAllNewValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorValuesPairingComponent.UnBindOnActorValueChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EVActorValues                           ActorValueToListen                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>&Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVActorValuesPairingComponent::UnBindOnActorValueChanged(EVActorValues ActorValueToListen, const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "UnBindOnActorValueChanged");

	Params::VActorValuesPairingComponent_UnBindOnActorValueChanged Parms{};

	Parms.ActorValueToListen = ActorValueToListen;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorValuesPairingComponent.UnBindOnAnyActorValueChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>&Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVActorValuesPairingComponent::UnBindOnAnyActorValueChanged(const TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "UnBindOnAnyActorValueChanged");

	Params::VActorValuesPairingComponent_UnBindOnAnyActorValueChanged Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VActorValuesPairingComponent.GetBaseSkillLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVSkill                                 Skill                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVSkillLevel                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVSkillLevel UVActorValuesPairingComponent::GetBaseSkillLevel(EVSkill Skill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetBaseSkillLevel");

	Params::VActorValuesPairingComponent_GetBaseSkillLevel Parms{};

	Parms.Skill = Skill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetEquippedEncumbrance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVActorValuesPairingComponent::GetEquippedEncumbrance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetEquippedEncumbrance");

	Params::VActorValuesPairingComponent_GetEquippedEncumbrance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetFloatBaseActorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorValues                           ValueWanted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVActorValuesPairingComponent::GetFloatBaseActorValue(EVActorValues ValueWanted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetFloatBaseActorValue");

	Params::VActorValuesPairingComponent_GetFloatBaseActorValue Parms{};

	Parms.ValueWanted = ValueWanted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetFloatModifiedActorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorValues                           ValueWanted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVActorValuesPairingComponent::GetFloatModifiedActorValue(EVActorValues ValueWanted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetFloatModifiedActorValue");

	Params::VActorValuesPairingComponent_GetFloatModifiedActorValue Parms{};

	Parms.ValueWanted = ValueWanted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetIntBaseActorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorValues                           ValueWanted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVActorValuesPairingComponent::GetIntBaseActorValue(EVActorValues ValueWanted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetIntBaseActorValue");

	Params::VActorValuesPairingComponent_GetIntBaseActorValue Parms{};

	Parms.ValueWanted = ValueWanted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetIntModifiedActorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorValues                           ValueWanted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVActorValuesPairingComponent::GetIntModifiedActorValue(EVActorValues ValueWanted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetIntModifiedActorValue");

	Params::VActorValuesPairingComponent_GetIntModifiedActorValue Parms{};

	Parms.ValueWanted = ValueWanted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetModifiedSkillLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVSkill                                 Skill                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVSkillLevel                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVSkillLevel UVActorValuesPairingComponent::GetModifiedSkillLevel(EVSkill Skill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetModifiedSkillLevel");

	Params::VActorValuesPairingComponent_GetModifiedSkillLevel Parms{};

	Parms.Skill = Skill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetUIntBaseActorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorValues                           ValueWanted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UVActorValuesPairingComponent::GetUIntBaseActorValue(EVActorValues ValueWanted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetUIntBaseActorValue");

	Params::VActorValuesPairingComponent_GetUIntBaseActorValue Parms{};

	Parms.ValueWanted = ValueWanted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VActorValuesPairingComponent.GetUIntModifiedActorValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVActorValues                           ValueWanted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UVActorValuesPairingComponent::GetUIntModifiedActorValue(EVActorValues ValueWanted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VActorValuesPairingComponent", "GetUIntModifiedActorValue");

	Params::VActorValuesPairingComponent_GetUIntModifiedActorValue Parms{};

	Parms.ValueWanted = ValueWanted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.RegisterSendClickOnCreateButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewEnchantedItemName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::RegisterSendClickOnCreateButton(const class FString& NewEnchantedItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "RegisterSendClickOnCreateButton");

	Params::VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton Parms{};

	Parms.NewEnchantedItemName = std::move(NewEnchantedItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.RegisterSendClickOnExitButton
// (Final, Native, Public, BlueprintCallable)

void UVSigilStoneMenuViewModel::RegisterSendClickOnExitButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "RegisterSendClickOnExitButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.RegisterSendClickOnItemButton
// (Final, Native, Public, BlueprintCallable)

void UVSigilStoneMenuViewModel::RegisterSendClickOnItemButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "RegisterSendClickOnItemButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.RegisterSendHoverAnItemToEnchant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::RegisterSendHoverAnItemToEnchant(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "RegisterSendHoverAnItemToEnchant");

	Params::VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetGearEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernEffectItemData&     NewAvailableEffect                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetGearEffect(const struct FModernEffectItemData& NewAvailableEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetGearEffect");

	Params::VSigilStoneMenuViewModel_SetGearEffect Parms{};

	Parms.NewAvailableEffect = std::move(NewAvailableEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetIsSortReversed
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetIsSortReversed(bool bNewIsSortReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetIsSortReversed");

	Params::VSigilStoneMenuViewModel_SetIsSortReversed Parms{};

	Parms.bNewIsSortReversed = bNewIsSortReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetItemsList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FModernSigilStoneMenuItemProperties>&NewList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetItemsList(const TArray<struct FModernSigilStoneMenuItemProperties>& NewList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetItemsList");

	Params::VSigilStoneMenuViewModel_SetItemsList Parms{};

	Parms.NewList = std::move(NewList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetItemToEnchantInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FItemToEnchantInfo&        NewItemToEnchantInfo                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetItemToEnchantInfo(const struct FItemToEnchantInfo& NewItemToEnchantInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetItemToEnchantInfo");

	Params::VSigilStoneMenuViewModel_SetItemToEnchantInfo Parms{};

	Parms.NewItemToEnchantInfo = std::move(NewItemToEnchantInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetSigilStoneInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSoulGemInfo&              NewSigilStoneInfo                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetSigilStoneInfo(const struct FSoulGemInfo& NewSigilStoneInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetSigilStoneInfo");

	Params::VSigilStoneMenuViewModel_SetSigilStoneInfo Parms{};

	Parms.NewSigilStoneInfo = std::move(NewSigilStoneInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetSortType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetSortType(const EOriginalInventoryMenuSortType& NewSortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetSortType");

	Params::VSigilStoneMenuViewModel_SetSortType Parms{};

	Parms.NewSortType = NewSortType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.SetWeaponEffect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernEffectItemData&     NewAvailableEffect                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSigilStoneMenuViewModel::SetWeaponEffect(const struct FModernEffectItemData& NewAvailableEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "SetWeaponEffect");

	Params::VSigilStoneMenuViewModel_SetWeaponEffect Parms{};

	Parms.NewAvailableEffect = std::move(NewAvailableEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSigilStoneMenuViewModel.GetGearEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernEffectItemData      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernEffectItemData UVSigilStoneMenuViewModel::GetGearEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "GetGearEffect");

	Params::VSigilStoneMenuViewModel_GetGearEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.GetItemsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FModernSigilStoneMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModernSigilStoneMenuItemProperties> UVSigilStoneMenuViewModel::GetItemsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "GetItemsList");

	Params::VSigilStoneMenuViewModel_GetItemsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.GetItemToEnchantInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FItemToEnchantInfo         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FItemToEnchantInfo UVSigilStoneMenuViewModel::GetItemToEnchantInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "GetItemToEnchantInfo");

	Params::VSigilStoneMenuViewModel_GetItemToEnchantInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.GetSigilStoneInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSoulGemInfo               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSoulGemInfo UVSigilStoneMenuViewModel::GetSigilStoneInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "GetSigilStoneInfo");

	Params::VSigilStoneMenuViewModel_GetSigilStoneInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVSigilStoneMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "GetSortType");

	Params::VSigilStoneMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.GetWeaponEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernEffectItemData      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernEffectItemData UVSigilStoneMenuViewModel::GetWeaponEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "GetWeaponEffect");

	Params::VSigilStoneMenuViewModel_GetWeaponEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSigilStoneMenuViewModel.IsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSigilStoneMenuViewModel::IsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSigilStoneMenuViewModel", "IsSortReversed");

	Params::VSigilStoneMenuViewModel_IsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyEffectItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyAddedEffectItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyEffectItem::SetProperties(const struct FLegacyAddedEffectItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEffectItem", "SetProperties");

	Params::VLegacyEffectItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyEffectItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyAddedEffectItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyAddedEffectItemProperties UVLegacyEffectItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEffectItem", "GetProperties");

	Params::VLegacyEffectItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernEffectItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernEffectItemData&     Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernEffectItem::SetProperties(const struct FModernEffectItemData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernEffectItem", "SetProperties");

	Params::VModernEffectItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernEffectItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernEffectItemData      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernEffectItemData UVModernEffectItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernEffectItem", "GetProperties");

	Params::VModernEffectItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAddedEffectsListViewModel.SetAddedEffectsList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyAddedEffectItemProperties>&NewAddedEffectsList                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAddedEffectsListViewModel::SetAddedEffectsList(const TArray<struct FLegacyAddedEffectItemProperties>& NewAddedEffectsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAddedEffectsListViewModel", "SetAddedEffectsList");

	Params::VAddedEffectsListViewModel_SetAddedEffectsList Parms{};

	Parms.NewAddedEffectsList = std::move(NewAddedEffectsList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAddedEffectsListViewModel.SetModernAddedItemEffectsList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FModernEffectItemData>&NewModernAddedItemEffectsList                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAddedEffectsListViewModel::SetModernAddedItemEffectsList(const TArray<struct FModernEffectItemData>& NewModernAddedItemEffectsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAddedEffectsListViewModel", "SetModernAddedItemEffectsList");

	Params::VAddedEffectsListViewModel_SetModernAddedItemEffectsList Parms{};

	Parms.NewModernAddedItemEffectsList = std::move(NewModernAddedItemEffectsList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAddedEffectsListViewModel.GetAddedEffectsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyAddedEffectItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyAddedEffectItemProperties> UVAddedEffectsListViewModel::GetAddedEffectsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAddedEffectsListViewModel", "GetAddedEffectsList");

	Params::VAddedEffectsListViewModel_GetAddedEffectsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAddedEffectsListViewModel.GetModernAddedItemEffectsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FModernEffectItemData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModernEffectItemData> UVAddedEffectsListViewModel::GetModernAddedItemEffectsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAddedEffectsListViewModel", "GetModernAddedItemEffectsList");

	Params::VAddedEffectsListViewModel_GetModernAddedItemEffectsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarCursor.SetCursorVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarCursor::SetCursorVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarCursor", "SetCursorVisibility");

	Params::VAltarCursor_SetCursorVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCursor.OnUpdateCursorSize
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarCursor::OnUpdateCursorSize(float Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCursor", "OnUpdateCursorSize");

	Params::VAltarCursor_OnUpdateCursorSize Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarCursor.OnUpdateCursorVisibility
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarCursor::OnUpdateCursorVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCursor", "OnUpdateCursorVisibility");

	Params::VAltarCursor_OnUpdateCursorVisibility Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAIHack_TeleportUrielSeptimSanctum.DeactivateTeleport
// (Final, Native, Private)

void AVAIHack_TeleportUrielSeptimSanctum::DeactivateTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIHack_TeleportUrielSeptimSanctum", "DeactivateTeleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAvailableEffectsListViewModel.SetAvailableEffects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FAvailableEffectData>&NewAvailableEffects                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAvailableEffectsListViewModel::SetAvailableEffects(const TArray<struct FAvailableEffectData>& NewAvailableEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAvailableEffectsListViewModel", "SetAvailableEffects");

	Params::VAvailableEffectsListViewModel_SetAvailableEffects Parms{};

	Parms.NewAvailableEffects = std::move(NewAvailableEffects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAvailableEffectsListViewModel.GetAvailableEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FAvailableEffectData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FAvailableEffectData> UVAvailableEffectsListViewModel::GetAvailableEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAvailableEffectsListViewModel", "GetAvailableEffects");

	Params::VAvailableEffectsListViewModel_GetAvailableEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_Acquire.GetInternalActivateProcedure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAIProcedureExecution_ACTIVATE*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAIProcedureExecution_ACTIVATE* UVAIProcedureExecution_Acquire::GetInternalActivateProcedure() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_Acquire", "GetInternalActivateProcedure");

	Params::VAIProcedureExecution_Acquire_GetInternalActivateProcedure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarTextBlock.DeinitializeTextBlock
// (Final, Native, Public, BlueprintCallable)

void UVAltarTextBlock::DeinitializeTextBlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextBlock", "DeinitializeTextBlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextBlock.InitializeTextBlock
// (Final, Native, Public, BlueprintCallable)

void UVAltarTextBlock::InitializeTextBlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextBlock", "InitializeTextBlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextBlock.RefreshFontSizeDelta
// (Final, Native, Public, BlueprintCallable)

void UVAltarTextBlock::RefreshFontSizeDelta()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextBlock", "RefreshFontSizeDelta");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextBlock.SetDefaultFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFontSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTextBlock::SetDefaultFontSize(float NewFontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextBlock", "SetDefaultFontSize");

	Params::VAltarTextBlock_SetDefaultFontSize Parms{};

	Parms.NewFontSize = NewFontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextBlock.SetFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FontSizeDelta                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTextBlock::SetFontSize(int32 FontSizeDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextBlock", "SetFontSize");

	Params::VAltarTextBlock_SetFontSize Parms{};

	Parms.FontSizeDelta = FontSizeDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_Sleep.GetInternalProcedure
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVAIProcedureExecution_TRAVEL*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAIProcedureExecution_TRAVEL* UVAIProcedureExecution_Sleep::GetInternalProcedure() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_Sleep", "GetInternalProcedure");

	Params::VAIProcedureExecution_Sleep_GetInternalProcedure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_USE_ITEM.OnSpecialIdleEnded
// (Final, Native, Private)

void UVAIProcedureExecution_USE_ITEM::OnSpecialIdleEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_USE_ITEM", "OnSpecialIdleEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_USE_ITEM.SetUsedObjectFormId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   iUsedObjectFormId                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAIProcedureExecution_USE_ITEM::SetUsedObjectFormId(int32 iUsedObjectFormId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_USE_ITEM", "SetUsedObjectFormId");

	Params::VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId Parms{};

	Parms.iUsedObjectFormId = iUsedObjectFormId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAIProcedureExecution_USE_ITEM.GetTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVAIProcedureExecution_USE_ITEM::GetTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_USE_ITEM", "GetTarget");

	Params::VAIProcedureExecution_USE_ITEM_GetTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_USE_ITEM.GetUsageCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAIProcedureExecution_USE_ITEM::GetUsageCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_USE_ITEM", "GetUsageCount");

	Params::VAIProcedureExecution_USE_ITEM_GetUsageCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAIProcedureExecution_USE_ITEM.GetUsageRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAIProcedureExecution_USE_ITEM::GetUsageRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAIProcedureExecution_USE_ITEM", "GetUsageRadius");

	Params::VAIProcedureExecution_USE_ITEM_GetUsageRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernAlchemyEffect.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernAlchemyEffect::SetIsSelected(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernAlchemyEffect", "SetIsSelected");

	Params::VModernAlchemyEffect_SetIsSelected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernAlchemyEffect.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernItemEffectProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernAlchemyEffect::SetProperties(const struct FModernItemEffectProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernAlchemyEffect", "SetProperties");

	Params::VModernAlchemyEffect_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernAlchemyEffect.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernItemEffectPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernItemEffectProperties UVModernAlchemyEffect::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernAlchemyEffect", "GetProperties");

	Params::VModernAlchemyEffect_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernAlchemyEffect.IsEffectSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVModernAlchemyEffect::IsEffectSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernAlchemyEffect", "IsEffectSelected");

	Params::VModernAlchemyEffect_IsEffectSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.OnClearAllFiltersClicked
// (Final, Native, Public, BlueprintCallable)

void UVAlchemyMenuViewModel::OnClearAllFiltersClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "OnClearAllFiltersClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.OnEffectFilterClicked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    EffectName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::OnEffectFilterClicked(const class FString& EffectName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "OnEffectFilterClicked");

	Params::VAlchemyMenuViewModel_OnEffectFilterClicked Parms{};

	Parms.EffectName = std::move(EffectName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.OnMustContainSelectedFiltersClicked
// (Final, Native, Public, BlueprintCallable)

void UVAlchemyMenuViewModel::OnMustContainSelectedFiltersClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "OnMustContainSelectedFiltersClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedCreate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      NewPotionName                                          (Parm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::RegisterSendClickedCreate(const class FText& NewPotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "RegisterSendClickedCreate");

	Params::VAlchemyMenuViewModel_RegisterSendClickedCreate Parms{};

	Parms.NewPotionName = std::move(NewPotionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedExit
// (Final, Native, Public, BlueprintCallable)

void UVAlchemyMenuViewModel::RegisterSendClickedExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "RegisterSendClickedExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedIngredient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::RegisterSendClickedIngredient(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "RegisterSendClickedIngredient");

	Params::VAlchemyMenuViewModel_RegisterSendClickedIngredient Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::RegisterSendClickedItem(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "RegisterSendClickedItem");

	Params::VAlchemyMenuViewModel_RegisterSendClickedItem Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetApparatusProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FModernApparatusProperties>&NewProperties                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetApparatusProperties(const TArray<struct FModernApparatusProperties>& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetApparatusProperties");

	Params::VAlchemyMenuViewModel_SetApparatusProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetCreateButtonEnable
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetCreateButtonEnable(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetCreateButtonEnable");

	Params::VAlchemyMenuViewModel_SetCreateButtonEnable Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetCurrentItemEffects
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FModernItemEffectProperties>&NewEffectsProperties                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetCurrentItemEffects(const TArray<struct FModernItemEffectProperties>& NewEffectsProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetCurrentItemEffects");

	Params::VAlchemyMenuViewModel_SetCurrentItemEffects Parms{};

	Parms.NewEffectsProperties = std::move(NewEffectsProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetEffectFiltersSelectedNames
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class FString>&            NewEffectFiltersSelected                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetEffectFiltersSelectedNames(const TArray<class FString>& NewEffectFiltersSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetEffectFiltersSelectedNames");

	Params::VAlchemyMenuViewModel_SetEffectFiltersSelectedNames Parms{};

	Parms.NewEffectFiltersSelected = std::move(NewEffectFiltersSelected);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetIngredientItems
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyIngredientItemProperties>&NewItems                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetIngredientItems(const TArray<struct FLegacyIngredientItemProperties>& NewItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetIngredientItems");

	Params::VAlchemyMenuViewModel_SetIngredientItems Parms{};

	Parms.NewItems = std::move(NewItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetItemsList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyIngredientItemProperties>&NewIngredients                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetItemsList(const TArray<struct FLegacyIngredientItemProperties>& NewIngredients)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetItemsList");

	Params::VAlchemyMenuViewModel_SetItemsList Parms{};

	Parms.NewIngredients = std::move(NewIngredients);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetPotionDefaultNameAndKey
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewLocalizedPotionName                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      AssiosiatedKey                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetPotionDefaultNameAndKey(const class FText& NewLocalizedPotionName, const class FText& AssiosiatedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetPotionDefaultNameAndKey");

	Params::VAlchemyMenuViewModel_SetPotionDefaultNameAndKey Parms{};

	Parms.NewLocalizedPotionName = std::move(NewLocalizedPotionName);
	Parms.AssiosiatedKey = std::move(AssiosiatedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetPotionName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewPotionName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetPotionName(const class FText& NewPotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetPotionName");

	Params::VAlchemyMenuViewModel_SetPotionName Parms{};

	Parms.NewPotionName = std::move(NewPotionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetPotionPrice
// (Final, Native, Public)
// Parameters:
// int32                                   NewPrice                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetPotionPrice(int32 NewPrice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetPotionPrice");

	Params::VAlchemyMenuViewModel_SetPotionPrice Parms{};

	Parms.NewPrice = NewPrice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SetPotionWeight
// (Final, Native, Public)
// Parameters:
// float                                   NewWeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAlchemyMenuViewModel::SetPotionWeight(float NewWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SetPotionWeight");

	Params::VAlchemyMenuViewModel_SetPotionWeight Parms{};

	Parms.NewWeight = NewWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.SortEffectsListByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FModernItemEffectProperties>&Effects                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FModernItemEffectProperties>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FModernItemEffectProperties> UVAlchemyMenuViewModel::SortEffectsListByName(const TArray<struct FModernItemEffectProperties>& Effects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "SortEffectsListByName");

	Params::VAlchemyMenuViewModel_SortEffectsListByName Parms{};

	Parms.Effects = std::move(Effects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.UpdateDisplayedItems
// (Final, Native, Public)

void UVAlchemyMenuViewModel::UpdateDisplayedItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "UpdateDisplayedItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAlchemyMenuViewModel.GetApparatusProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FModernApparatusProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModernApparatusProperties> UVAlchemyMenuViewModel::GetApparatusProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetApparatusProperties");

	Params::VAlchemyMenuViewModel_GetApparatusProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetCreateButtonEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAlchemyMenuViewModel::GetCreateButtonEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetCreateButtonEnable");

	Params::VAlchemyMenuViewModel_GetCreateButtonEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetCurrentItemEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FModernItemEffectProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModernItemEffectProperties> UVAlchemyMenuViewModel::GetCurrentItemEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetCurrentItemEffects");

	Params::VAlchemyMenuViewModel_GetCurrentItemEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetEffectFiltersSelectedNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UVAlchemyMenuViewModel::GetEffectFiltersSelectedNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetEffectFiltersSelectedNames");

	Params::VAlchemyMenuViewModel_GetEffectFiltersSelectedNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetIngredientItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyIngredientItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyIngredientItemProperties> UVAlchemyMenuViewModel::GetIngredientItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetIngredientItems");

	Params::VAlchemyMenuViewModel_GetIngredientItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetItemsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyIngredientItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyIngredientItemProperties> UVAlchemyMenuViewModel::GetItemsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetItemsList");

	Params::VAlchemyMenuViewModel_GetItemsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetLocalizedPotionDefaultName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVAlchemyMenuViewModel::GetLocalizedPotionDefaultName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetLocalizedPotionDefaultName");

	Params::VAlchemyMenuViewModel_GetLocalizedPotionDefaultName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetPotionDefaultNameKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVAlchemyMenuViewModel::GetPotionDefaultNameKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetPotionDefaultNameKey");

	Params::VAlchemyMenuViewModel_GetPotionDefaultNameKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetPotionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVAlchemyMenuViewModel::GetPotionName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetPotionName");

	Params::VAlchemyMenuViewModel_GetPotionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetPotionPrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVAlchemyMenuViewModel::GetPotionPrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetPotionPrice");

	Params::VAlchemyMenuViewModel_GetPotionPrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.GetPotionWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UVAlchemyMenuViewModel::GetPotionWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "GetPotionWeight");

	Params::VAlchemyMenuViewModel_GetPotionWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.HasEffectOnFilter
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// const struct FLegacyIngredientItemProperties&Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAlchemyMenuViewModel::HasEffectOnFilter(const struct FLegacyIngredientItemProperties& Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "HasEffectOnFilter");

	Params::VAlchemyMenuViewModel_HasEffectOnFilter Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAlchemyMenuViewModel.MustContainAllSelectedFilters
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAlchemyMenuViewModel::MustContainAllSelectedFilters() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAlchemyMenuViewModel", "MustContainAllSelectedFilters");

	Params::VAlchemyMenuViewModel_MustContainAllSelectedFilters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarActionState.CreateBehaviorFromTag
// (Final, Native, Protected)
// Parameters:
// const struct FGameplayTag&              BehaviorTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActorBehaviorBase*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVActorBehaviorBase* UVAltarActionState::CreateBehaviorFromTag(const struct FGameplayTag& BehaviorTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarActionState", "CreateBehaviorFromTag");

	Params::VAltarActionState_CreateBehaviorFromTag Parms{};

	Parms.BehaviorTag = std::move(BehaviorTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarActionState.CreateBehaviorFromTemplate
// (Final, Native, Protected)
// Parameters:
// class UVActorBehaviorBase*              BehaviorTemplate                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVActorBehaviorBase*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVActorBehaviorBase* UVAltarActionState::CreateBehaviorFromTemplate(class UVActorBehaviorBase* BehaviorTemplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarActionState", "CreateBehaviorFromTemplate");

	Params::VAltarActionState_CreateBehaviorFromTemplate Parms{};

	Parms.BehaviorTemplate = BehaviorTemplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionButton.GetHintKeyText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVAltarBoundActionButton::GetHintKeyText(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "GetHintKeyText");

	Params::VAltarBoundActionButton_GetHintKeyText Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionButton.GetInputActionKeyText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputAction*                     InInputAction                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             InInputMappingContext                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVAltarBoundActionButton::GetInputActionKeyText(class UInputAction* InInputAction, class UInputMappingContext* InInputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "GetInputActionKeyText");

	Params::VAltarBoundActionButton_GetInputActionKeyText Parms{};

	Parms.InInputAction = InInputAction;
	Parms.InInputMappingContext = InInputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionButton.HoldTriggerCancel
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVAltarBoundActionButton::HoldTriggerCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "HoldTriggerCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarBoundActionButton.HoldTriggerStart
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVAltarBoundActionButton::HoldTriggerStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "HoldTriggerStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VAltarBoundActionButton.SetDescriptionText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarBoundActionButton::SetDescriptionText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "SetDescriptionText");

	Params::VAltarBoundActionButton_SetDescriptionText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBoundActionButton.SetInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputAction*                     NewBinding                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      OverrideActionText                                     (Parm, NativeAccessSpecifierPublic)
// class UInputMappingContext*             NewMappingContext                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarBoundActionButton::SetInputAction(class UInputAction* NewBinding, const class FText& OverrideActionText, class UInputMappingContext* NewMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "SetInputAction");

	Params::VAltarBoundActionButton_SetInputAction Parms{};

	Parms.NewBinding = NewBinding;
	Parms.OverrideActionText = std::move(OverrideActionText);
	Parms.NewMappingContext = NewMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarBoundActionButton.GetBoundInputAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UInputAction*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInputAction* UVAltarBoundActionButton::GetBoundInputAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "GetBoundInputAction");

	Params::VAltarBoundActionButton_GetBoundInputAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionButton.GetHoldTreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAltarBoundActionButton::GetHoldTreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "GetHoldTreshold");

	Params::VAltarBoundActionButton_GetHoldTreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarBoundActionButton.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCommonTextBlock*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCommonTextBlock* UVAltarBoundActionButton::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarBoundActionButton", "GetText");

	Params::VAltarBoundActionButton_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarCommonVideoPlayer.BP_Close
// (Final, Native, Public, BlueprintCallable)

void UVAltarCommonVideoPlayer::BP_Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_Open
// (Final, Native, Public, BlueprintCallable)

void UVAltarCommonVideoPlayer::BP_Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_Pause
// (Final, Native, Public, BlueprintCallable)

void UVAltarCommonVideoPlayer::BP_Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_Play
// (Final, Native, Public, BlueprintCallable)

void UVAltarCommonVideoPlayer::BP_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_PlayFromStart
// (Final, Native, Public, BlueprintCallable)

void UVAltarCommonVideoPlayer::BP_PlayFromStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_PlayFromStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_Seek
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarCommonVideoPlayer::BP_Seek(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_Seek");

	Params::VAltarCommonVideoPlayer_BP_Seek Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_SetLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldLoopPlayback                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarCommonVideoPlayer::BP_SetLooping(bool bShouldLoopPlayback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_SetLooping");

	Params::VAltarCommonVideoPlayer_BP_SetLooping Parms{};

	Parms.bShouldLoopPlayback = bShouldLoopPlayback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarCommonVideoPlayer.BP_IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarCommonVideoPlayer::BP_IsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "BP_IsPlaying");

	Params::VAltarCommonVideoPlayer_BP_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarCommonVideoPlayer.IsMediaOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarCommonVideoPlayer::IsMediaOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarCommonVideoPlayer", "IsMediaOpen");

	Params::VAltarCommonVideoPlayer_IsMediaOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.ClearData
// (Final, Native, Public, BlueprintCallable)

void UVAltarEditableTextViewModel::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetMaxTextSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetMaxTextSize(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetMaxTextSize");

	Params::VAltarEditableTextViewModel_SetMaxTextSize Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetShouldCheckForInvalidCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetShouldCheckForInvalidCharacter(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetShouldCheckForInvalidCharacter");

	Params::VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetShouldCheckForWhiteSpaceOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetShouldCheckForWhiteSpaceOnly(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetShouldCheckForWhiteSpaceOnly");

	Params::VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetShouldCheckIfTextIsEmpty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetShouldCheckIfTextIsEmpty(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetShouldCheckIfTextIsEmpty");

	Params::VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetShouldCheckIfTextIsTooLong
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetShouldCheckIfTextIsTooLong(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetShouldCheckIfTextIsTooLong");

	Params::VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetUserInputText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewUserInputText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetUserInputText(const class FText& NewUserInputText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetUserInputText");

	Params::VAltarEditableTextViewModel_SetUserInputText Parms{};

	Parms.NewUserInputText = std::move(NewUserInputText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetUserInputTextPair
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUserInputTextPair&        NewUserInputTextPair                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetUserInputTextPair(const struct FUserInputTextPair& NewUserInputTextPair)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetUserInputTextPair");

	Params::VAltarEditableTextViewModel_SetUserInputTextPair Parms{};

	Parms.NewUserInputTextPair = std::move(NewUserInputTextPair);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetUserInputTextValidityCode
// (Final, Native, Protected)
// Parameters:
// EUserInputTextValidityCode              NewValidityCode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetUserInputTextValidityCode(EUserInputTextValidityCode NewValidityCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetUserInputTextValidityCode");

	Params::VAltarEditableTextViewModel_SetUserInputTextValidityCode Parms{};

	Parms.NewValidityCode = NewValidityCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.SetValidCharacters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            NewValidCharacters                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarEditableTextViewModel::SetValidCharacters(const TArray<class FString>& NewValidCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "SetValidCharacters");

	Params::VAltarEditableTextViewModel_SetValidCharacters Parms{};

	Parms.NewValidCharacters = std::move(NewValidCharacters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarEditableTextViewModel.GetMaxTextSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarEditableTextViewModel::GetMaxTextSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "GetMaxTextSize");

	Params::VAltarEditableTextViewModel_GetMaxTextSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.GetUserInputText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVAltarEditableTextViewModel::GetUserInputText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "GetUserInputText");

	Params::VAltarEditableTextViewModel_GetUserInputText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.GetUserInputTextPair
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUserInputTextPair         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FUserInputTextPair UVAltarEditableTextViewModel::GetUserInputTextPair() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "GetUserInputTextPair");

	Params::VAltarEditableTextViewModel_GetUserInputTextPair Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.GetUserInputTextValidityCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUserInputTextValidityCode              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUserInputTextValidityCode UVAltarEditableTextViewModel::GetUserInputTextValidityCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "GetUserInputTextValidityCode");

	Params::VAltarEditableTextViewModel_GetUserInputTextValidityCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.GetValidCharacters
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UVAltarEditableTextViewModel::GetValidCharacters() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "GetValidCharacters");

	Params::VAltarEditableTextViewModel_GetValidCharacters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.ShouldCheckForInvalidCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarEditableTextViewModel::ShouldCheckForInvalidCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "ShouldCheckForInvalidCharacter");

	Params::VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.ShouldCheckForWhiteSpaceOnly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarEditableTextViewModel::ShouldCheckForWhiteSpaceOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "ShouldCheckForWhiteSpaceOnly");

	Params::VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.ShouldCheckIfTextIsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarEditableTextViewModel::ShouldCheckIfTextIsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "ShouldCheckIfTextIsEmpty");

	Params::VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarEditableTextViewModel.ShouldCheckIfTextIsTooLong
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarEditableTextViewModel::ShouldCheckIfTextIsTooLong() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarEditableTextViewModel", "ShouldCheckIfTextIsTooLong");

	Params::VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarGameDateTimeSystem.Get
// (Final, Native, Static, Public)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVAltarGameDateTimeSystem*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVAltarGameDateTimeSystem* UVAltarGameDateTimeSystem::Get(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarGameDateTimeSystem", "Get");

	Params::VAltarGameDateTimeSystem_Get Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarGameDateTimeSystem.GetOblivionDateInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FOblivionDateTimeInfo            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FOblivionDateTimeInfo UVAltarGameDateTimeSystem::GetOblivionDateInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarGameDateTimeSystem", "GetOblivionDateInfo");

	Params::VAltarGameDateTimeSystem_GetOblivionDateInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarGameDateTimeSystem.GetOblivionDay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarGameDateTimeSystem::GetOblivionDay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarGameDateTimeSystem", "GetOblivionDay");

	Params::VAltarGameDateTimeSystem_GetOblivionDay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarGameDateTimeSystem.GetOblivionGameDayPassed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarGameDateTimeSystem::GetOblivionGameDayPassed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarGameDateTimeSystem", "GetOblivionGameDayPassed");

	Params::VAltarGameDateTimeSystem_GetOblivionGameDayPassed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarGameDateTimeSystem.GetOblivionMonth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarGameDateTimeSystem::GetOblivionMonth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarGameDateTimeSystem", "GetOblivionMonth");

	Params::VAltarGameDateTimeSystem_GetOblivionMonth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarGameDateTimeSystem.GetOblivionYear
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarGameDateTimeSystem::GetOblivionYear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarGameDateTimeSystem", "GetOblivionYear");

	Params::VAltarGameDateTimeSystem_GetOblivionYear Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarHud.GetPrimaryGameLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVPrimaryGameLayout*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVPrimaryGameLayout* AVAltarHud::GetPrimaryGameLayout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarHud", "GetPrimaryGameLayout");

	Params::VAltarHud_GetPrimaryGameLayout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarMoonActor.SetMoonState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RotateRevolution                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotateAxisAltitude                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMoonPhase                              InPhase                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhaseProgress                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarMoonActor::SetMoonState(float RotateRevolution, float RotateAxisAltitude, EMoonPhase InPhase, float PhaseProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarMoonActor", "SetMoonState");

	Params::VAltarMoonActor_SetMoonState Parms{};

	Parms.RotateRevolution = RotateRevolution;
	Parms.RotateAxisAltitude = RotateAxisAltitude;
	Parms.InPhase = InPhase;
	Parms.PhaseProgress = PhaseProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarNavigableListView.OnListViewScrolled
// (Final, Native, Protected)
// Parameters:
// float                                   ItemOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistanceRemaining                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableListView::OnListViewScrolled(float ItemOffset, float DistanceRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableListView", "OnListViewScrolled");

	Params::VAltarNavigableListView_OnListViewScrolled Parms{};

	Parms.ItemOffset = ItemOffset;
	Parms.DistanceRemaining = DistanceRemaining;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableListView.OnListViewValuesChanged
// (Final, Native, Protected)
// Parameters:
// float                                   MinScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentScrollbarValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ThumbFractionSize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableListView::OnListViewValuesChanged(float MinScrollbarValue, float MaxScrollbarValue, float CurrentScrollbarValue, float ThumbFractionSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableListView", "OnListViewValuesChanged");

	Params::VAltarNavigableListView_OnListViewValuesChanged Parms{};

	Parms.MinScrollbarValue = MinScrollbarValue;
	Parms.MaxScrollbarValue = MaxScrollbarValue;
	Parms.CurrentScrollbarValue = CurrentScrollbarValue;
	Parms.ThumbFractionSize = ThumbFractionSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigableListView.OnScrollbarValueChanged
// (Final, Native, Protected)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigableListView::OnScrollbarValueChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigableListView", "OnScrollbarValueChanged");

	Params::VAltarNavigableListView_OnScrollbarValueChanged Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarNavigationSystem.OnNavigationDataEndPlay
// (Final, Native, Private)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EEndPlayReason                    EndPlayReason                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarNavigationSystem::OnNavigationDataEndPlay(const class AActor* Actor, const EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarNavigationSystem", "OnNavigationDataEndPlay");

	Params::VAltarNavigationSystem_OnNavigationDataEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRenderingToolsSubsystem.SSScateringSetForegroundWorldUnitGlobalScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRenderingToolsSubsystem::SSScateringSetForegroundWorldUnitGlobalScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "SSScateringSetForegroundWorldUnitGlobalScale");

	Params::VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRenderingToolsSubsystem.SSScateringSetWorldUnitGlobalScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRenderingToolsSubsystem::SSScateringSetWorldUnitGlobalScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "SSScateringSetWorldUnitGlobalScale");

	Params::VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixApplyOnActorComponent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  TargetComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEstimatePlayerOwnership                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSweep                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTeleport                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      SweepHitResult                                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UVAltarRenderingToolsSubsystem::FirstPersonClippingFixApplyOnActorComponent(const class UObject* WorldContextObject, class USceneComponent* TargetComponent, const struct FVector& RelativeLocation, bool bAutoEstimatePlayerOwnership, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "FirstPersonClippingFixApplyOnActorComponent");

	Params::VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TargetComponent = TargetComponent;
	Parms.RelativeLocation = std::move(RelativeLocation);
	Parms.bAutoEstimatePlayerOwnership = bAutoEstimatePlayerOwnership;
	Parms.bSweep = bSweep;
	Parms.bTeleport = bTeleport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SweepHitResult != nullptr)
		*SweepHitResult = std::move(Parms.SweepHitResult);

	return Parms.ReturnValue;
}


// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEstimatePlayerOwnership                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double*                                 Weight                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         NewWorldPosition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVAltarRenderingToolsSubsystem::FirstPersonClippingFixGetOffset(const class UObject* WorldContextObject, const struct FVector& WorldPosition, bool bAutoEstimatePlayerOwnership, double* Weight, struct FVector* NewWorldPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "FirstPersonClippingFixGetOffset");

	Params::VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.bAutoEstimatePlayerOwnership = bAutoEstimatePlayerOwnership;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Weight != nullptr)
		*Weight = Parms.Weight;

	if (NewWorldPosition != nullptr)
		*NewWorldPosition = std::move(Parms.NewWorldPosition);

	return Parms.ReturnValue;
}


// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetOffsetFromCamera
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEstimatePlayerOwnership                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMinimalViewInfo&          InViewInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// double*                                 Weight                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         NewWorldPosition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVAltarRenderingToolsSubsystem::FirstPersonClippingFixGetOffsetFromCamera(const class UObject* WorldContextObject, const struct FVector& WorldPosition, bool bAutoEstimatePlayerOwnership, const struct FMinimalViewInfo& InViewInfo, double* Weight, struct FVector* NewWorldPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "FirstPersonClippingFixGetOffsetFromCamera");

	Params::VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.bAutoEstimatePlayerOwnership = bAutoEstimatePlayerOwnership;
	Parms.InViewInfo = std::move(InViewInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Weight != nullptr)
		*Weight = Parms.Weight;

	if (NewWorldPosition != nullptr)
		*NewWorldPosition = std::move(Parms.NewWorldPosition);

	return Parms.ReturnValue;
}


// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetWeight
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEstimatePlayerOwnership                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UVAltarRenderingToolsSubsystem::FirstPersonClippingFixGetWeight(const class UObject* WorldContextObject, const struct FVector& WorldPosition, bool bAutoEstimatePlayerOwnership) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "FirstPersonClippingFixGetWeight");

	Params::VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.bAutoEstimatePlayerOwnership = bAutoEstimatePlayerOwnership;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetWeightFromCamera
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoEstimatePlayerOwnership                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMinimalViewInfo&          InViewInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UVAltarRenderingToolsSubsystem::FirstPersonClippingFixGetWeightFromCamera(const class UObject* WorldContextObject, const struct FVector& WorldPosition, bool bAutoEstimatePlayerOwnership, const struct FMinimalViewInfo& InViewInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "FirstPersonClippingFixGetWeightFromCamera");

	Params::VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.bAutoEstimatePlayerOwnership = bAutoEstimatePlayerOwnership;
	Parms.InViewInfo = std::move(InViewInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarRenderingToolsSubsystem.HomogeneousToCartesianCoordinates
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector4&                  HomogeneousCoordinates                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVAltarRenderingToolsSubsystem::HomogeneousToCartesianCoordinates(const struct FVector4& HomogeneousCoordinates) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "HomogeneousToCartesianCoordinates");

	Params::VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates Parms{};

	Parms.HomogeneousCoordinates = std::move(HomogeneousCoordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarRenderingToolsSubsystem.ScaleInDepth
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMatrix&                   CameraViewProjection                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FMatrix&                   CameraInverseViewProjection                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVAltarRenderingToolsSubsystem::ScaleInDepth(const struct FVector& WorldPosition, double Scale, const struct FMatrix& CameraViewProjection, const struct FMatrix& CameraInverseViewProjection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRenderingToolsSubsystem", "ScaleInDepth");

	Params::VAltarRenderingToolsSubsystem_ScaleInDepth Parms{};

	Parms.WorldPosition = std::move(WorldPosition);
	Parms.Scale = Scale;
	Parms.CameraViewProjection = std::move(CameraViewProjection);
	Parms.CameraInverseViewProjection = std::move(CameraInverseViewProjection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarRichPresenceBlueprintLibrary.UpdateRichPresence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PresenceData                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRichPresenceBlueprintLibrary::UpdateRichPresence(const class FString& PresenceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAltarRichPresenceBlueprintLibrary", "UpdateRichPresence");

	Params::VAltarRichPresenceBlueprintLibrary_UpdateRichPresence Parms{};

	Parms.PresenceData = std::move(PresenceData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRichTextBlock.DeinitializeRichTextBlock
// (Final, Native, Public, BlueprintCallable)

void UVAltarRichTextBlock::DeinitializeRichTextBlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRichTextBlock", "DeinitializeRichTextBlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRichTextBlock.InitializeRichTextBlock
// (Final, Native, Public, BlueprintCallable)

void UVAltarRichTextBlock::InitializeRichTextBlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRichTextBlock", "InitializeRichTextBlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRichTextBlock.SetDefaultFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFontSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRichTextBlock::SetDefaultFontSize(int32 NewFontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRichTextBlock", "SetDefaultFontSize");

	Params::VAltarRichTextBlock_SetDefaultFontSize Parms{};

	Parms.NewFontSize = NewFontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRichTextBlock.SetFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FontSizeDelta                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRichTextBlock::SetFontSize(int32 FontSizeDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRichTextBlock", "SetFontSize");

	Params::VAltarRichTextBlock_SetFontSize Parms{};

	Parms.FontSizeDelta = FontSizeDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRichTextBlock.SetLineHeightPercentage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLineHeightPercentage                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRichTextBlock::SetLineHeightPercentage(float NewLineHeightPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRichTextBlock", "SetLineHeightPercentage");

	Params::VAltarRichTextBlock_SetLineHeightPercentage Parms{};

	Parms.NewLineHeightPercentage = NewLineHeightPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarRichTextBlock.SetWrappedAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewWrappedAt                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarRichTextBlock::SetWrappedAt(float NewWrappedAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarRichTextBlock", "SetWrappedAt");

	Params::VAltarRichTextBlock_SetWrappedAt Parms{};

	Parms.NewWrappedAt = NewWrappedAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarSaveSystem.OnAsyncSaveComplete_Delegate
// (Final, Native, Private)
// Parameters:
// const class UVAltarSaveGame*            SaveGame                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarSaveSystem::OnAsyncSaveComplete_Delegate(const class UVAltarSaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarSaveSystem", "OnAsyncSaveComplete_Delegate");

	Params::VAltarSaveSystem_OnAsyncSaveComplete_Delegate Parms{};

	Parms.SaveGame = SaveGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarSaveSystem.RequestScreenshotAfterLevelChange
// (Final, Native, Private)

void UVAltarSaveSystem::RequestScreenshotAfterLevelChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarSaveSystem", "RequestScreenshotAfterLevelChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarSaveSystem.SetProvisionScreenshot
// (Final, Native, Public, HasOutParams)
// Parameters:
// int32                                   SizeX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarSaveSystem::SetProvisionScreenshot(int32 SizeX, int32 SizeY, const TArray<struct FColor>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarSaveSystem", "SetProvisionScreenshot");

	Params::VAltarSaveSystem_SetProvisionScreenshot Parms{};

	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarStarsActor.SetStarsState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisZ                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarStarsActor::SetStarsState(float AxisX, float AxisY, float AxisZ, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarStarsActor", "SetStarsState");

	Params::VAltarStarsActor_SetStarsState Parms{};

	Parms.AxisX = AxisX;
	Parms.AxisY = AxisY;
	Parms.AxisZ = AxisZ;
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarSunActor.SetSunState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisZ                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SunriseBegin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SunsetEnd                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAltarSunActor::SetSunState(float AxisX, float AxisY, float AxisZ, float SunriseBegin, float SunsetEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarSunActor", "SetSunState");

	Params::VAltarSunActor_SetSunState Parms{};

	Parms.AxisX = AxisX;
	Parms.AxisY = AxisY;
	Parms.AxisZ = AxisZ;
	Parms.SunriseBegin = SunriseBegin;
	Parms.SunsetEnd = SunsetEnd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAltarTelemetrySubsystem.ObserveCurrentFrameData
// (Final, Native, Public)

void UVAltarTelemetrySubsystem::ObserveCurrentFrameData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "ObserveCurrentFrameData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTelemetrySubsystem.OnAppActivationStateChanged
// (Final, Native, Public)
// Parameters:
// const bool                              bIsFocused                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTelemetrySubsystem::OnAppActivationStateChanged(const bool bIsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "OnAppActivationStateChanged");

	Params::VAltarTelemetrySubsystem_OnAppActivationStateChanged Parms{};

	Parms.bIsFocused = bIsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTelemetrySubsystem.OnBISessionIDChanged
// (Final, Native, Public)
// Parameters:
// const class FString&                    NewBISessionID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTelemetrySubsystem::OnBISessionIDChanged(const class FString& NewBISessionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "OnBISessionIDChanged");

	Params::VAltarTelemetrySubsystem_OnBISessionIDChanged Parms{};

	Parms.NewBISessionID = std::move(NewBISessionID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTelemetrySubsystem.OnFadeToBlackBegin
// (Final, Native, Public)

void UVAltarTelemetrySubsystem::OnFadeToBlackBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "OnFadeToBlackBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTelemetrySubsystem.OnFadeToGameEnd
// (Final, Native, Public)

void UVAltarTelemetrySubsystem::OnFadeToGameEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "OnFadeToGameEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTelemetrySubsystem.OnSaveComplete
// (Final, Native, Public)
// Parameters:
// const class UVAltarSaveGame*            SaveGame                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTelemetrySubsystem::OnSaveComplete(const class UVAltarSaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "OnSaveComplete");

	Params::VAltarTelemetrySubsystem_OnSaveComplete Parms{};

	Parms.SaveGame = SaveGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTelemetrySubsystem.OnSaveStarted
// (Final, Native, Public)
// Parameters:
// const class UVAltarSaveGame*            SaveGame                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTelemetrySubsystem::OnSaveStarted(const class UVAltarSaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTelemetrySubsystem", "OnSaveStarted");

	Params::VAltarTelemetrySubsystem_OnSaveStarted Parms{};

	Parms.SaveGame = SaveGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextSubsystem.RegisterAltarRichTextBlock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVAltarRichTextBlock*             NewAltarRichTextBlock                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTextSubsystem::RegisterAltarRichTextBlock(class UVAltarRichTextBlock* NewAltarRichTextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextSubsystem", "RegisterAltarRichTextBlock");

	Params::VAltarTextSubsystem_RegisterAltarRichTextBlock Parms{};

	Parms.NewAltarRichTextBlock = NewAltarRichTextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextSubsystem.RegisterAltarTextBlock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVAltarTextBlock*                 NewAltarTextBlock                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTextSubsystem::RegisterAltarTextBlock(class UVAltarTextBlock* NewAltarTextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextSubsystem", "RegisterAltarTextBlock");

	Params::VAltarTextSubsystem_RegisterAltarTextBlock Parms{};

	Parms.NewAltarTextBlock = NewAltarTextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextSubsystem.UnregisterAltarRichTextBlock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVAltarRichTextBlock*             AltarRichTextBlock                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTextSubsystem::UnregisterAltarRichTextBlock(class UVAltarRichTextBlock* AltarRichTextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextSubsystem", "UnregisterAltarRichTextBlock");

	Params::VAltarTextSubsystem_UnregisterAltarRichTextBlock Parms{};

	Parms.AltarRichTextBlock = AltarRichTextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarTextSubsystem.UnregisterAltarTextBlock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVAltarTextBlock*                 AltarTextBlock                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarTextSubsystem::UnregisterAltarTextBlock(class UVAltarTextBlock* AltarTextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarTextSubsystem", "UnregisterAltarTextBlock");

	Params::VAltarTextSubsystem_UnregisterAltarTextBlock Parms{};

	Parms.AltarTextBlock = AltarTextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.ForceGameplayInputMode
// (Final, Native, Public, BlueprintCallable)

void UVAltarUISubsystem::ForceGameplayInputMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "ForceGameplayInputMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.ForceUIInputMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShowMouseCursor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::ForceUIInputMode(bool bShowMouseCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "ForceUIInputMode");

	Params::VAltarUISubsystem_ForceUIInputMode Parms{};

	Parms.bShowMouseCursor = bShowMouseCursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.RegisterExponentialHeightFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AExponentialHeightFog*            InNewExponentialHeightFog                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::RegisterExponentialHeightFog(class AExponentialHeightFog* InNewExponentialHeightFog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "RegisterExponentialHeightFog");

	Params::VAltarUISubsystem_RegisterExponentialHeightFog Parms{};

	Parms.InNewExponentialHeightFog = InNewExponentialHeightFog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.RegisterGlobalLightingActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVGlobalLighting*                 InNewGlobalLightingActor                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::RegisterGlobalLightingActor(class AVGlobalLighting* InNewGlobalLightingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "RegisterGlobalLightingActor");

	Params::VAltarUISubsystem_RegisterGlobalLightingActor Parms{};

	Parms.InNewGlobalLightingActor = InNewGlobalLightingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.SetCurrentLoadingScreenContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELoadingScreenType                InNewLoadingScreenContext                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::SetCurrentLoadingScreenContext(const ELoadingScreenType InNewLoadingScreenContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "SetCurrentLoadingScreenContext");

	Params::VAltarUISubsystem_SetCurrentLoadingScreenContext Parms{};

	Parms.InNewLoadingScreenContext = InNewLoadingScreenContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.SetInventoryHoveredObjectActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InNewActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::SetInventoryHoveredObjectActor(class AActor* InNewActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "SetInventoryHoveredObjectActor");

	Params::VAltarUISubsystem_SetInventoryHoveredObjectActor Parms{};

	Parms.InNewActor = InNewActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.SetInventoryHoveredObjectForm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTESForm*                         InNewForm                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::SetInventoryHoveredObjectForm(class UTESForm* InNewForm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "SetInventoryHoveredObjectForm");

	Params::VAltarUISubsystem_SetInventoryHoveredObjectForm Parms{};

	Parms.InNewForm = InNewForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.SetPlayerLevelFromLastLoadedSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             InNewPlayerLevel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::SetPlayerLevelFromLastLoadedSave(const int32 InNewPlayerLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "SetPlayerLevelFromLastLoadedSave");

	Params::VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave Parms{};

	Parms.InNewPlayerLevel = InNewPlayerLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.SetPlayerLevelFromLevelUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             InNewPlayerLevel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::SetPlayerLevelFromLevelUp(const int32 InNewPlayerLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "SetPlayerLevelFromLevelUp");

	Params::VAltarUISubsystem_SetPlayerLevelFromLevelUp Parms{};

	Parms.InNewPlayerLevel = InNewPlayerLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.SetPlayerNameTextFromLastLoadedSave
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InNewPlayerName                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::SetPlayerNameTextFromLastLoadedSave(const class FText& InNewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "SetPlayerNameTextFromLastLoadedSave");

	Params::VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave Parms{};

	Parms.InNewPlayerName = std::move(InNewPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.ToggleHUDVisibility
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::ToggleHUDVisibility(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "ToggleHUDVisibility");

	Params::VAltarUISubsystem_ToggleHUDVisibility Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.ToggleInputHintVisibility
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::ToggleInputHintVisibility(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "ToggleInputHintVisibility");

	Params::VAltarUISubsystem_ToggleInputHintVisibility Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.TryGetBrushFromKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InKey                                                  (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush*                     OutBrush                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::TryGetBrushFromKey(const struct FKey& InKey, struct FSlateBrush* OutBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "TryGetBrushFromKey");

	Params::VAltarUISubsystem_TryGetBrushFromKey Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBrush != nullptr)
		*OutBrush = std::move(Parms.OutBrush);
}


// Function Altar.VAltarUISubsystem.UnregisterExponentialHeightFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AExponentialHeightFog*            InExponentialHeightFog                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::UnregisterExponentialHeightFog(class AExponentialHeightFog* InExponentialHeightFog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "UnregisterExponentialHeightFog");

	Params::VAltarUISubsystem_UnregisterExponentialHeightFog Parms{};

	Parms.InExponentialHeightFog = InExponentialHeightFog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.UnregisterGlobalLightingActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AVGlobalLighting*                 InGlobalLightingActor                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarUISubsystem::UnregisterGlobalLightingActor(class AVGlobalLighting* InGlobalLightingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "UnregisterGlobalLightingActor");

	Params::VAltarUISubsystem_UnregisterGlobalLightingActor Parms{};

	Parms.InGlobalLightingActor = InGlobalLightingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarUISubsystem.GetAllExponentialHeightFogs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AExponentialHeightFog*>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AExponentialHeightFog*> UVAltarUISubsystem::GetAllExponentialHeightFogs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetAllExponentialHeightFogs");

	Params::VAltarUISubsystem_GetAllExponentialHeightFogs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetCoutryGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVCountryGroup                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVCountryGroup UVAltarUISubsystem::GetCoutryGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetCoutryGroup");

	Params::VAltarUISubsystem_GetCoutryGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetCurrentLoadingScreenContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELoadingScreenType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELoadingScreenType UVAltarUISubsystem::GetCurrentLoadingScreenContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetCurrentLoadingScreenContext");

	Params::VAltarUISubsystem_GetCurrentLoadingScreenContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetCurrentUpdatedPlayerLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarUISubsystem::GetCurrentUpdatedPlayerLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetCurrentUpdatedPlayerLevel");

	Params::VAltarUISubsystem_GetCurrentUpdatedPlayerLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetGlobalLightingActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AVGlobalLighting*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AVGlobalLighting*> UVAltarUISubsystem::GetGlobalLightingActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetGlobalLightingActors");

	Params::VAltarUISubsystem_GetGlobalLightingActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetInventoryHoveredObjectActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UVAltarUISubsystem::GetInventoryHoveredObjectActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetInventoryHoveredObjectActor");

	Params::VAltarUISubsystem_GetInventoryHoveredObjectActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetInventoryHoveredObjectForm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTESForm*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTESForm* UVAltarUISubsystem::GetInventoryHoveredObjectForm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetInventoryHoveredObjectForm");

	Params::VAltarUISubsystem_GetInventoryHoveredObjectForm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetMenuDefaultClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             MenuClass                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UVAltarUISubsystem::GetMenuDefaultClass(TSoftClassPtr<class UClass> MenuClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetMenuDefaultClass");

	Params::VAltarUISubsystem_GetMenuDefaultClass Parms{};

	Parms.MenuClass = MenuClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetMenuDefaultLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             MenuClass                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVAltarUISubsystem::GetMenuDefaultLayer(TSoftClassPtr<class UClass> MenuClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetMenuDefaultLayer");

	Params::VAltarUISubsystem_GetMenuDefaultLayer Parms{};

	Parms.MenuClass = MenuClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetPlatformTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EModernCategoryPlatormFlag              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModernCategoryPlatormFlag UVAltarUISubsystem::GetPlatformTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetPlatformTag");

	Params::VAltarUISubsystem_GetPlatformTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetPlayerLevelFromLastLoadedSave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVAltarUISubsystem::GetPlayerLevelFromLastLoadedSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetPlayerLevelFromLastLoadedSave");

	Params::VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetPlayerNameTextFromLastLoadedSave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVAltarUISubsystem::GetPlayerNameTextFromLastLoadedSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetPlayerNameTextFromLastLoadedSave");

	Params::VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.GetPrimaryGameLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVPrimaryGameLayout*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVPrimaryGameLayout* UVAltarUISubsystem::GetPrimaryGameLayout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "GetPrimaryGameLayout");

	Params::VAltarUISubsystem_GetPrimaryGameLayout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.IsHUDVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVAltarUISubsystem::IsHUDVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "IsHUDVisible");

	Params::VAltarUISubsystem_IsHUDVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.IsInputHintsVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVAltarUISubsystem::IsInputHintsVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "IsInputHintsVisible");

	Params::VAltarUISubsystem_IsInputHintsVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarUISubsystem.IsMenuVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarUISubsystem::IsMenuVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarUISubsystem", "IsMenuVisible");

	Params::VAltarUISubsystem_IsMenuVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAnimationObjectPairingComponent.PlayAnimActivable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAnimationObjectPairingComponent::PlayAnimActivable(class USkeletalMeshComponent* SkeletalMeshComponent, const class FString& AnimationName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimationObjectPairingComponent", "PlayAnimActivable");

	Params::VAnimationObjectPairingComponent_PlayAnimActivable Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.AnimationName = std::move(AnimationName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAnimationObjectPairingComponent.SetAnimActivable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimationName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosRatio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAnimationObjectPairingComponent::SetAnimActivable(class USkeletalMeshComponent* SkeletalMeshComponent, const class FString& AnimationName, float PosRatio, bool bPlayAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimationObjectPairingComponent", "SetAnimActivable");

	Params::VAnimationObjectPairingComponent_SetAnimActivable Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.AnimationName = std::move(AnimationName);
	Parms.PosRatio = PosRatio;
	Parms.bPlayAnimation = bPlayAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAnimNotify_ActionCameraTracking.ShouldIgnoreTrackingOnTargetedPawn
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AVPairedPawn*                     ControlledPawn                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AVPairedPawn*                     TargetedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAnimNotify_ActionCameraTracking::ShouldIgnoreTrackingOnTargetedPawn(class AVPairedPawn* ControlledPawn, class AVPairedPawn* TargetedPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimNotify_ActionCameraTracking", "ShouldIgnoreTrackingOnTargetedPawn");

	Params::VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.TargetedPawn = TargetedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAnimNotify_ActionMeleeHitWindow.ComputeHitbox
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UVAnimNotify_ActionMeleeHitWindow::ComputeHitbox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimNotify_ActionMeleeHitWindow", "ComputeHitbox");

	Params::VAnimNotify_ActionMeleeHitWindow_ComputeHitbox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAnimNotify_ActionNotify.TriggerEventOnAnimatedAction
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class AVPairedPawn*                     PairedPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVPawnAnimatedAction*             AnimatedAction                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAnimNotify_ActionNotify::TriggerEventOnAnimatedAction(class AVPairedPawn* PairedPawn, class UVPawnAnimatedAction* AnimatedAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAnimNotify_ActionNotify", "TriggerEventOnAnimatedAction");

	Params::VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction Parms{};

	Parms.PairedPawn = PairedPawn;
	Parms.AnimatedAction = AnimatedAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VAssetNameDebugWidget.TraceToFirstAsset
// (Final, Native, Public, BlueprintCallable)

void UVAssetNameDebugWidget::TraceToFirstAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAssetNameDebugWidget", "TraceToFirstAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioHandlersSubsystem.GetMusicPlayerActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AVMusicPlayer*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVMusicPlayer* UVAudioHandlersSubsystem::GetMusicPlayerActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAudioHandlersSubsystem", "GetMusicPlayerActor");

	Params::VAudioHandlersSubsystem_GetMusicPlayerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAudioHandlersSubsystem.GetWeatherAudioPlayerActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AVWeatherAudioPlayer*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVWeatherAudioPlayer* UVAudioHandlersSubsystem::GetWeatherAudioPlayerActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAudioHandlersSubsystem", "GetWeatherAudioPlayerActor");

	Params::VAudioHandlersSubsystem_GetWeatherAudioPlayerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAudioStatics.BPF_PostAudioEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPost                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::BPF_PostAudioEvent(class UAkAudioEvent* EventToPost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "BPF_PostAudioEvent");

	Params::VAudioStatics_BPF_PostAudioEvent Parms{};

	Parms.EventToPost = EventToPost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.BPF_PostAudioEventAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPost                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::BPF_PostAudioEventAtLocation(class UAkAudioEvent* EventToPost, const struct FVector& Location, class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "BPF_PostAudioEventAtLocation");

	Params::VAudioStatics_BPF_PostAudioEventAtLocation Parms{};

	Parms.EventToPost = EventToPost;
	Parms.Location = std::move(Location);
	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.BPF_PostAudioEventOnActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPost                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::BPF_PostAudioEventOnActor(class UAkAudioEvent* EventToPost, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "BPF_PostAudioEventOnActor");

	Params::VAudioStatics_BPF_PostAudioEventOnActor Parms{};

	Parms.EventToPost = EventToPost;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.BPF_PostAudioEventWithComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPost                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkComponent*                     Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::BPF_PostAudioEventWithComponent(class UAkAudioEvent* EventToPost, class UAkComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "BPF_PostAudioEventWithComponent");

	Params::VAudioStatics_BPF_PostAudioEventWithComponent Parms{};

	Parms.EventToPost = EventToPost;
	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.PrepareAudioEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPrepare                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWhitelist                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAudioStatics::PrepareAudioEvent(class UAkAudioEvent* EventToPrepare, bool bWhitelist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "PrepareAudioEvent");

	Params::VAudioStatics_PrepareAudioEvent Parms{};

	Parms.EventToPrepare = EventToPrepare;
	Parms.bWhitelist = bWhitelist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAudioStatics.SetGlobalRTPCValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             RTPCName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RTPCValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InterpolationTimeInMs                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::SetGlobalRTPCValue(class FName RTPCName, float RTPCValue, int32 InterpolationTimeInMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "SetGlobalRTPCValue");

	Params::VAudioStatics_SetGlobalRTPCValue Parms{};

	Parms.RTPCName = RTPCName;
	Parms.RTPCValue = RTPCValue;
	Parms.InterpolationTimeInMs = InterpolationTimeInMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.SetRTPCValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RTPCName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RTPCValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InterpolationTimeInMs                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::SetRTPCValue(class AActor* Actor, class FName RTPCName, float RTPCValue, int32 InterpolationTimeInMs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "SetRTPCValue");

	Params::VAudioStatics_SetRTPCValue Parms{};

	Parms.Actor = Actor;
	Parms.RTPCName = RTPCName;
	Parms.RTPCValue = RTPCValue;
	Parms.InterpolationTimeInMs = InterpolationTimeInMs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.SetState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             StateGroup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StateValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::SetState(class FName StateGroup, class FName StateValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "SetState");

	Params::VAudioStatics_SetState Parms{};

	Parms.StateGroup = StateGroup;
	Parms.StateValue = StateValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.SetSwitch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SwitchGroup                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SwitchValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::SetSwitch(class AActor* Actor, class FName SwitchGroup, class FName SwitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "SetSwitch");

	Params::VAudioStatics_SetSwitch Parms{};

	Parms.Actor = Actor;
	Parms.SwitchGroup = SwitchGroup;
	Parms.SwitchValue = SwitchValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioStatics.UnloadAudioEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToUnload                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAsync                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAudioStatics::UnloadAudioEvent(class UAkAudioEvent* EventToUnload, bool bAsync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VAudioStatics", "UnloadAudioEvent");

	Params::VAudioStatics_UnloadAudioEvent Parms{};

	Parms.EventToUnload = EventToUnload;
	Parms.bAsync = bAsync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioTriggerBox.EnterBox
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAudioTriggerBox::EnterBox(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAudioTriggerBox", "EnterBox");

	Params::VAudioTriggerBox_EnterBox Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAudioTriggerBox.ExitBox
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAudioTriggerBox::ExitBox(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAudioTriggerBox", "ExitBox");

	Params::VAudioTriggerBox_ExitBox Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAvailableEffectItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAvailableEffectData&      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVAvailableEffectItem::SetProperties(const struct FAvailableEffectData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAvailableEffectItem", "SetProperties");

	Params::VAvailableEffectItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAvailableEffectItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FAvailableEffectData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FAvailableEffectData UVAvailableEffectItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAvailableEffectItem", "GetProperties");

	Params::VAvailableEffectItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBackgroundWidgetBase.OnScreenShotcapturedDelegate
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   InSizeX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSizeY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            InImageData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVBackgroundWidgetBase::OnScreenShotcapturedDelegate(int32 InSizeX, int32 InSizeY, const TArray<struct FColor>& InImageData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBackgroundWidgetBase", "OnScreenShotcapturedDelegate");

	Params::VBackgroundWidgetBase_OnScreenShotcapturedDelegate Parms{};

	Parms.InSizeX = InSizeX;
	Parms.InSizeY = InSizeY;
	Parms.InImageData = std::move(InImageData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBackgroundWidgetBase.ReleaseCamera
// (Final, Native, Public, BlueprintCallable)

void UVBackgroundWidgetBase::ReleaseCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBackgroundWidgetBase", "ReleaseCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBackgroundWidgetBase.RequestCapture
// (Final, Native, Public, BlueprintCallable)

void UVBackgroundWidgetBase::RequestCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBackgroundWidgetBase", "RequestCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBackgroundWidgetBase.SetBackgroundImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Image                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVBackgroundWidgetBase::SetBackgroundImage(class UTexture2D* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBackgroundWidgetBase", "SetBackgroundImage");

	Params::VBackgroundWidgetBase_SetBackgroundImage Parms{};

	Parms.Image = Image;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBackgroundWidgetBase.GetBackgroundImageBrush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UVBackgroundWidgetBase::GetBackgroundImageBrush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBackgroundWidgetBase", "GetBackgroundImageBrush");

	Params::VBackgroundWidgetBase_GetBackgroundImageBrush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlockCharacterAnimInstance.OnBlockHitEnd
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVBlockCharacterAnimInstance::OnBlockHitEnd(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlockCharacterAnimInstance", "OnBlockHitEnd");

	Params::VBlockCharacterAnimInstance_OnBlockHitEnd Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBlockCharacterAnimInstance.OnBlockHitEnter
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVBlockCharacterAnimInstance::OnBlockHitEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlockCharacterAnimInstance", "OnBlockHitEnter");

	Params::VBlockCharacterAnimInstance_OnBlockHitEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBlockCharacterAnimInstance.GetShouldEnterBlockState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBlockCharacterAnimInstance::GetShouldEnterBlockState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlockCharacterAnimInstance", "GetShouldEnterBlockState");

	Params::VBlockCharacterAnimInstance_GetShouldEnterBlockState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlockCharacterAnimInstance.IsBlockingHit
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBlockCharacterAnimInstance::IsBlockingHit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlockCharacterAnimInstance", "IsBlockingHit");

	Params::VBlockCharacterAnimInstance_IsBlockingHit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBlockShieldCharacterAnimInstance.OnBlockShieldHitEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVBlockShieldCharacterAnimInstance::OnBlockShieldHitEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlockShieldCharacterAnimInstance", "OnBlockShieldHitEnter");

	Params::VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBlockShieldCharacterAnimInstance.HasShield
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBlockShieldCharacterAnimInstance::HasShield() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBlockShieldCharacterAnimInstance", "HasShield");

	Params::VBlockShieldCharacterAnimInstance_HasShield Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBloodSystemVFXBlueprint.OnStartPlay
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damages                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVBloodColor                            BloodColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsUsingWeapon                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     Attacker                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetMaxHP                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceType                         HitSourceType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UStaticMeshComponent*       WeaponComp                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector_NetQuantizeNormal& ImpactNormal                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceWeaponType                   HitWeaponType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVBloodSystemVFXBlueprint::OnStartPlay(float Damages, EVBloodColor BloodColor, bool bIsUsingWeapon, class AActor* Target, const class AActor* Attacker, float TargetMaxHP, bool bDoesBeginInFirstPerson, EVHitSourceType HitSourceType, const class UStaticMeshComponent* WeaponComp, const struct FVector_NetQuantizeNormal& ImpactNormal, EVHitSourceWeaponType HitWeaponType, const struct FVector& HitDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBloodSystemVFXBlueprint", "OnStartPlay");

	Params::VBloodSystemVFXBlueprint_OnStartPlay Parms{};

	Parms.Damages = Damages;
	Parms.BloodColor = BloodColor;
	Parms.bIsUsingWeapon = bIsUsingWeapon;
	Parms.Target = Target;
	Parms.Attacker = Attacker;
	Parms.TargetMaxHP = TargetMaxHP;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.HitSourceType = HitSourceType;
	Parms.WeaponComp = WeaponComp;
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.HitWeaponType = HitWeaponType;
	Parms.HitDirection = std::move(HitDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VBookMenuViewModel.RegisterSendCloseButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UVBookMenuViewModel::RegisterSendCloseButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBookMenuViewModel", "RegisterSendCloseButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBookMenuViewModel.RegisterSendTakeButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UVBookMenuViewModel::RegisterSendTakeButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBookMenuViewModel", "RegisterSendTakeButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBookMenuViewModel.SetProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyBookProperties&     NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVBookMenuViewModel::SetProperties(const struct FLegacyBookProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBookMenuViewModel", "SetProperties");

	Params::VBookMenuViewModel_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBookMenuViewModel.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyBookProperties      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyBookProperties UVBookMenuViewModel::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBookMenuViewModel", "GetProperties");

	Params::VBookMenuViewModel_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBowAttackStandSneakAnimInstance.OnReleaseEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVBowAttackStandSneakAnimInstance::OnReleaseEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBowAttackStandSneakAnimInstance", "OnReleaseEnter");

	Params::VBowAttackStandSneakAnimInstance_OnReleaseEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBowAttackStandSneakAnimInstance.OnStartEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVBowAttackStandSneakAnimInstance::OnStartEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBowAttackStandSneakAnimInstance", "OnStartEnter");

	Params::VBowAttackStandSneakAnimInstance_OnStartEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VBowAttackStandSneakAnimInstance.IsSneaking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBowAttackStandSneakAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBowAttackStandSneakAnimInstance", "IsSneaking");

	Params::VBowAttackStandSneakAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VBowAttackStandSneakAnimInstance.IsStanding
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVBowAttackStandSneakAnimInstance::IsStanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VBowAttackStandSneakAnimInstance", "IsStanding");

	Params::VBowAttackStandSneakAnimInstance_IsStanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAnimInstance.GetBlendTimeFromSequence
// (Final, Native, Static, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*                  AnimSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVCharacterAnimInstance::GetBlendTimeFromSequence(class UAnimationAsset* AnimSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCharacterAnimInstance", "GetBlendTimeFromSequence");

	Params::VCharacterAnimInstance_GetBlendTimeFromSequence Parms{};

	Parms.AnimSequence = AnimSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterAnimInstance.OnAnimationSkip
// (Event, Protected, BlueprintEvent)
// Parameters:
// EOblivionAnimSection                    Section                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnAnimationSkip(EOblivionAnimSection Section)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnAnimationSkip");

	Params::VCharacterAnimInstance_OnAnimationSkip Parms{};

	Parms.Section = Section;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnAnimationStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FOblivionSourcedCharacterAnimationState&OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FOblivionSourcedCharacterAnimationState&NewState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnAnimationStateChanged(const struct FOblivionSourcedCharacterAnimationState& OldState, const struct FOblivionSourcedCharacterAnimationState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnAnimationStateChanged");

	Params::VCharacterAnimInstance_OnAnimationStateChanged Parms{};

	Parms.OldState = std::move(OldState);
	Parms.NewState = std::move(NewState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnAttackStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECharacterAttackMove                    AttackMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnAttackStarted(ECharacterAttackMove AttackMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnAttackStarted");

	Params::VCharacterAnimInstance_OnAttackStarted Parms{};

	Parms.AttackMove = AttackMove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnBlockAttack
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnBlockAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnBlockAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnBlockHit
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnBlockHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnBlockHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnCastSpellRanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   Arm                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnCastSpellRanged(uint8 Arm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnCastSpellRanged");

	Params::VCharacterAnimInstance_OnCastSpellRanged Parms{};

	Parms.Arm = Arm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnCastSpellSelf
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   Arm                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnCastSpellSelf(uint8 Arm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnCastSpellSelf");

	Params::VCharacterAnimInstance_OnCastSpellSelf Parms{};

	Parms.Arm = Arm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnCastSpellTouch
// (Event, Protected, BlueprintEvent)
// Parameters:
// uint8                                   Arm                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnCastSpellTouch(uint8 Arm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnCastSpellTouch");

	Params::VCharacterAnimInstance_OnCastSpellTouch Parms{};

	Parms.Arm = Arm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnDodgeBackward
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnDodgeBackward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnDodgeBackward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnDodgeForward
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnDodgeForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnDodgeForward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnDodgeLeft
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnDodgeLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnDodgeLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnDodgeRight
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnDodgeRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnDodgeRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnDynamicIdleAnimationChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAnimSequence*                    Animation                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnDynamicIdleAnimationChange(class UAnimSequence* Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnDynamicIdleAnimationChange");

	Params::VCharacterAnimInstance_OnDynamicIdleAnimationChange Parms{};

	Parms.Animation = Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnEquipStarted
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnEquipStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnEquipStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnRecoil
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnRecoil()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnRecoil");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnSpecialIdleAnimation_WantToMove
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ShouldBeMoving                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnSpecialIdleAnimation_WantToMove(bool ShouldBeMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnSpecialIdleAnimation_WantToMove");

	Params::VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove Parms{};

	Parms.ShouldBeMoving = ShouldBeMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterAnimInstance.OnSpecialIdleAnimationStart
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::OnSpecialIdleAnimationStart(class UAnimSequenceBase* Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnSpecialIdleAnimationStart");

	Params::VCharacterAnimInstance_OnSpecialIdleAnimationStart Parms{};

	Parms.Animation = Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VCharacterAnimInstance.OnStaggered
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnStaggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnStaggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.OnUnequipStarted
// (Event, Protected, BlueprintEvent)

void UVCharacterAnimInstance::OnUnequipStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "OnUnequipStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VCharacterAnimInstance.UpdateInternalStateMachine
// (Final, Native, Private)
// Parameters:
// const struct FOblivionSourcedCharacterAnimationState&OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FOblivionSourcedCharacterAnimationState&NewState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVCharacterAnimInstance::UpdateInternalStateMachine(const struct FOblivionSourcedCharacterAnimationState& OldState, const struct FOblivionSourcedCharacterAnimationState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterAnimInstance", "UpdateInternalStateMachine");

	Params::VCharacterAnimInstance_UpdateInternalStateMachine Parms{};

	Parms.OldState = std::move(OldState);
	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterBodyPairingComponent.GetClassFromSlot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AVModularBodyPartBase>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AVModularBodyPartBase> UVCharacterBodyPairingComponent::GetClassFromSlot(EBipedModularBodySlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VCharacterBodyPairingComponent", "GetClassFromSlot");

	Params::VCharacterBodyPairingComponent_GetClassFromSlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterBodyPairingComponent.EquipFormOnSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTESForm*                   form                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterBodyPairingComponent::EquipFormOnSlot(EBipedModularBodySlot Slot, const class UTESForm* form)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "EquipFormOnSlot");

	Params::VCharacterBodyPairingComponent_EquipFormOnSlot Parms{};

	Parms.Slot = Slot;
	Parms.form = form;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterBodyPairingComponent.RefreshBodyParts
// (Final, Native, Public, BlueprintCallable)

void UVCharacterBodyPairingComponent::RefreshBodyParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "RefreshBodyParts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterBodyPairingComponent.RegisterSupportedSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterBodyPairingComponent::RegisterSupportedSlot(EBipedModularBodySlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "RegisterSupportedSlot");

	Params::VCharacterBodyPairingComponent_RegisterSupportedSlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterBodyPairingComponent.SetNakedOnSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterBodyPairingComponent::SetNakedOnSlot(EBipedModularBodySlot Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "SetNakedOnSlot");

	Params::VCharacterBodyPairingComponent_SetNakedOnSlot Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterBodyPairingComponent.SetSlotCovered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCovered                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterBodyPairingComponent::SetSlotCovered(EBipedModularBodySlot Slot, bool bIsCovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "SetSlotCovered");

	Params::VCharacterBodyPairingComponent_SetSlotCovered Parms{};

	Parms.Slot = Slot;
	Parms.bIsCovered = bIsCovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterBodyPairingComponent.GetBodyPartForm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTESForm*                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTESForm* UVCharacterBodyPairingComponent::GetBodyPartForm(EBipedModularBodySlot Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "GetBodyPartForm");

	Params::VCharacterBodyPairingComponent_GetBodyPartForm Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterBodyPairingComponent.GetBodyPartProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBipedModularBodySlot                   BodySlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVCharacterBodyPartProperties    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FVCharacterBodyPartProperties UVCharacterBodyPairingComponent::GetBodyPartProperties(EBipedModularBodySlot BodySlot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "GetBodyPartProperties");

	Params::VCharacterBodyPairingComponent_GetBodyPartProperties Parms{};

	Parms.BodySlot = BodySlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterBodyPairingComponent.GetSupportedSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<EBipedModularBodySlot>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EBipedModularBodySlot> UVCharacterBodyPairingComponent::GetSupportedSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "GetSupportedSlots");

	Params::VCharacterBodyPairingComponent_GetSupportedSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterBodyPairingComponent.IsSlotCovered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCharacterBodyPairingComponent::IsSlotCovered(EBipedModularBodySlot Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "IsSlotCovered");

	Params::VCharacterBodyPairingComponent_IsSlotCovered Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterBodyPairingComponent.IsSlotSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCharacterBodyPairingComponent::IsSlotSupported(EBipedModularBodySlot Slot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterBodyPairingComponent", "IsSlotSupported");

	Params::VCharacterBodyPairingComponent_IsSlotSupported Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSettingsMenuViewModel.RegisterSendClickedButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacySettingsMenuIDs                  InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsMenuViewModel::RegisterSendClickedButton(ELegacySettingsMenuIDs InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "RegisterSendClickedButton");

	Params::VSettingsMenuViewModel_RegisterSendClickedButton Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsMenuViewModel.RegisterSendGameDifficulty
// (Final, Native, Public, BlueprintCallable)

void UVSettingsMenuViewModel::RegisterSendGameDifficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "RegisterSendGameDifficulty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsMenuViewModel.RegisterSendGameplaySaveSettings
// (Final, Native, Public, BlueprintCallable)

void UVSettingsMenuViewModel::RegisterSendGameplaySaveSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "RegisterSendGameplaySaveSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsMenuViewModel.SetPageIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPageIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSettingsMenuViewModel::SetPageIndex(int32 NewPageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "SetPageIndex");

	Params::VSettingsMenuViewModel_SetPageIndex Parms{};

	Parms.NewPageIndex = NewPageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsMenuViewModel.GetBuildInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSettingsMenuViewModel::GetBuildInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "GetBuildInfo");

	Params::VSettingsMenuViewModel_GetBuildInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSettingsMenuViewModel.GetPageIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSettingsMenuViewModel::GetPageIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "GetPageIndex");

	Params::VSettingsMenuViewModel_GetPageIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSettingsMenuViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSettingsMenuViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSettingsMenuViewModel", "ThisIsForPluginCompliance");

	Params::VSettingsMenuViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VCharacterFadeInOutComponent.SetDitherOnCharacterVisibleComponents
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AVPairedCharacter*                PairedCharacter                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoDither                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DitherScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterFadeInOutComponent::SetDitherOnCharacterVisibleComponents(class AVPairedCharacter* PairedCharacter, bool bDoDither, float DitherScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterFadeInOutComponent", "SetDitherOnCharacterVisibleComponents");

	Params::VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents Parms{};

	Parms.PairedCharacter = PairedCharacter;
	Parms.bDoDither = bDoDither;
	Parms.DitherScale = DitherScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterFadeInOutComponent.SetDitherOnCreatureVisibleComponents
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AVPairedCreature*                 PairedCreature                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoDither                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DitherScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterFadeInOutComponent::SetDitherOnCreatureVisibleComponents(class AVPairedCreature* PairedCreature, bool bDoDither, float DitherScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterFadeInOutComponent", "SetDitherOnCreatureVisibleComponents");

	Params::VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents Parms{};

	Parms.PairedCreature = PairedCreature;
	Parms.bDoDither = bDoDither;
	Parms.DitherScale = DitherScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterStatePairingComponent.UpdateAnimationState
// (Final, Native, Private)
// Parameters:
// const class AVWeapon*                   WeaponActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVCharacterStatePairingComponent::UpdateAnimationState(const class AVWeapon* WeaponActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterStatePairingComponent", "UpdateAnimationState");

	Params::VCharacterStatePairingComponent_UpdateAnimationState Parms{};

	Parms.WeaponActor = WeaponActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterStatePairingComponent.UpdateInternalStateMachine
// (Final, Native, Private)
// Parameters:
// const struct FOblivionSourcedCharacterAnimationState&OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FOblivionSourcedCharacterAnimationState&NewState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVCharacterStatePairingComponent::UpdateInternalStateMachine(const struct FOblivionSourcedCharacterAnimationState& OldState, const struct FOblivionSourcedCharacterAnimationState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterStatePairingComponent", "UpdateInternalStateMachine");

	Params::VCharacterStatePairingComponent_UpdateInternalStateMachine Parms{};

	Parms.OldState = std::move(OldState);
	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VCharacterStatePairingComponent.IsGhost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVCharacterStatePairingComponent::IsGhost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VCharacterStatePairingComponent", "IsGhost");

	Params::VCharacterStatePairingComponent_IsGhost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSkillInfoObject.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSkillInformation&         NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSkillInfoObject::SetProperties(const struct FSkillInformation& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillInfoObject", "SetProperties");

	Params::VSkillInfoObject_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSkillInfoObject.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSkillInformation          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSkillInformation UVSkillInfoObject::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSkillInfoObject", "GetProperties");

	Params::VSkillInfoObject_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VClassMenuViewModel.RegisterSendClickedCreateButtonHandler
// (Final, Native, Public, BlueprintCallable)

void UVClassMenuViewModel::RegisterSendClickedCreateButtonHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "RegisterSendClickedCreateButtonHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassMenuViewModel.RegisterSendClickedDoneButtonHandler
// (Final, Native, Public, BlueprintCallable)

void UVClassMenuViewModel::RegisterSendClickedDoneButtonHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "RegisterSendClickedDoneButtonHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassMenuViewModel.RegisterSendClickedItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVClassMenuViewModel::RegisterSendClickedItemHandler(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "RegisterSendClickedItemHandler");

	Params::VClassMenuViewModel_RegisterSendClickedItemHandler Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassMenuViewModel.RegisterSendOnHoveredItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVClassMenuViewModel::RegisterSendOnHoveredItemHandler(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "RegisterSendOnHoveredItemHandler");

	Params::VClassMenuViewModel_RegisterSendOnHoveredItemHandler Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassMenuViewModel.SetFirstSelectedClassIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewFirstSelectedClassIndex                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVClassMenuViewModel::SetFirstSelectedClassIndex(int32 NewFirstSelectedClassIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "SetFirstSelectedClassIndex");

	Params::VClassMenuViewModel_SetFirstSelectedClassIndex Parms{};

	Parms.NewFirstSelectedClassIndex = NewFirstSelectedClassIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VClassMenuViewModel.GetClassList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FPlayerClassItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FPlayerClassItemProperties> UVClassMenuViewModel::GetClassList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "GetClassList");

	Params::VClassMenuViewModel_GetClassList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VClassMenuViewModel.GetFirstSelectedClassIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVClassMenuViewModel::GetFirstSelectedClassIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VClassMenuViewModel", "GetFirstSelectedClassIndex");

	Params::VClassMenuViewModel_GetFirstSelectedClassIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.SetIsAchievementDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InNewBool                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetIsAchievementDisabled(const bool InNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetIsAchievementDisabled");

	Params::VModernSaveLoadMenuItem_SetIsAchievementDisabled Parms{};

	Parms.InNewBool = InNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetIsExpanded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InNewBool                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetIsExpanded(const bool InNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetIsExpanded");

	Params::VModernSaveLoadMenuItem_SetIsExpanded Parms{};

	Parms.InNewBool = InNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetIsInSaveMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InNewBool                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetIsInSaveMenu(const bool InNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetIsInSaveMenu");

	Params::VModernSaveLoadMenuItem_SetIsInSaveMenu Parms{};

	Parms.InNewBool = InNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetIsSectionHeader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InNewBool                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetIsSectionHeader(const bool InNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetIsSectionHeader");

	Params::VModernSaveLoadMenuItem_SetIsSectionHeader Parms{};

	Parms.InNewBool = InNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetPlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewPlayerName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetPlayerName(const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetPlayerName");

	Params::VModernSaveLoadMenuItem_SetPlayerName Parms{};

	Parms.NewPlayerName = std::move(NewPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetSlotName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewSlotName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetSlotName(const class FString& NewSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetSlotName");

	Params::VModernSaveLoadMenuItem_SetSlotName Parms{};

	Parms.NewSlotName = std::move(NewSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetText");

	Params::VModernSaveLoadMenuItem_SetText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.SetTimeText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSaveLoadMenuItem::SetTimeText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "SetTimeText");

	Params::VModernSaveLoadMenuItem_SetTimeText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSaveLoadMenuItem.GetIsAchievementDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSaveLoadMenuItem::GetIsAchievementDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetIsAchievementDisabled");

	Params::VModernSaveLoadMenuItem_GetIsAchievementDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetIsExpanded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSaveLoadMenuItem::GetIsExpanded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetIsExpanded");

	Params::VModernSaveLoadMenuItem_GetIsExpanded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetIsInSaveMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSaveLoadMenuItem::GetIsInSaveMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetIsInSaveMenu");

	Params::VModernSaveLoadMenuItem_GetIsInSaveMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetIsOnExpandedBound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSaveLoadMenuItem::GetIsOnExpandedBound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetIsOnExpandedBound");

	Params::VModernSaveLoadMenuItem_GetIsOnExpandedBound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetIsSectionHeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSaveLoadMenuItem::GetIsSectionHeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetIsSectionHeader");

	Params::VModernSaveLoadMenuItem_GetIsSectionHeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVModernSaveLoadMenuItem::GetPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetPlayerName");

	Params::VModernSaveLoadMenuItem_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetSlotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVModernSaveLoadMenuItem::GetSlotName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetSlotName");

	Params::VModernSaveLoadMenuItem_GetSlotName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVModernSaveLoadMenuItem::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetText");

	Params::VModernSaveLoadMenuItem_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSaveLoadMenuItem.GetTimeText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVModernSaveLoadMenuItem::GetTimeText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSaveLoadMenuItem", "GetTimeText");

	Params::VModernSaveLoadMenuItem_GetTimeText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.RegisterSendButtonExitHandler
// (Final, Native, Public, BlueprintCallable)

void UVContainerMenuViewModel::RegisterSendButtonExitHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "RegisterSendButtonExitHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.RegisterSendButtonHaggleHandler
// (Final, Native, Public, BlueprintCallable)

void UVContainerMenuViewModel::RegisterSendButtonHaggleHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "RegisterSendButtonHaggleHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.RegisterSendButtonSwitchToContainerHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ForceSwitch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::RegisterSendButtonSwitchToContainerHandler(bool ForceSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "RegisterSendButtonSwitchToContainerHandler");

	Params::VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler Parms{};

	Parms.ForceSwitch = ForceSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.RegisterSendButtonSwitchToInventoryHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ForceSwitch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::RegisterSendButtonSwitchToInventoryHandler(bool ForceSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "RegisterSendButtonSwitchToInventoryHandler");

	Params::VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler Parms{};

	Parms.ForceSwitch = ForceSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.RegisterSendButtonTakeAllHandler
// (Final, Native, Public, BlueprintCallable)

void UVContainerMenuViewModel::RegisterSendButtonTakeAllHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "RegisterSendButtonTakeAllHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.ReplaceCurrentPageItemsContainer
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>&NewPageContainer                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::ReplaceCurrentPageItemsContainer(const TArray<struct FOriginalInventoryMenuItemProperties>& NewPageContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "ReplaceCurrentPageItemsContainer");

	Params::VContainerMenuViewModel_ReplaceCurrentPageItemsContainer Parms{};

	Parms.NewPageContainer = std::move(NewPageContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetButtonData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyContainerMenuButtonData&NewButtonData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetButtonData(const struct FLegacyContainerMenuButtonData& NewButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetButtonData");

	Params::VContainerMenuViewModel_SetButtonData Parms{};

	Parms.NewButtonData = std::move(NewButtonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetContainerItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>&NewContainerItems                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetContainerItems(const TArray<struct FOriginalInventoryMenuItemProperties>& NewContainerItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetContainerItems");

	Params::VContainerMenuViewModel_SetContainerItems Parms{};

	Parms.NewContainerItems = std::move(NewContainerItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetCurrentPageContainer
// (Native, Public, BlueprintCallable)
// Parameters:
// ELegacyInventoryMenuPage                NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetCurrentPageContainer(ELegacyInventoryMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetCurrentPageContainer");

	Params::VContainerMenuViewModel_SetCurrentPageContainer Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetCurrentTab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyContainerMenuTab                 NewMenuTab                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetCurrentTab(ELegacyContainerMenuTab NewMenuTab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetCurrentTab");

	Params::VContainerMenuViewModel_SetCurrentTab Parms{};

	Parms.NewMenuTab = NewMenuTab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetIsSimpleContainer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSimpleContainer                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetIsSimpleContainer(bool bNewIsSimpleContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetIsSimpleContainer");

	Params::VContainerMenuViewModel_SetIsSimpleContainer Parms{};

	Parms.bNewIsSimpleContainer = bNewIsSimpleContainer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetIsSortReversedContainer
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversedContainer                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetIsSortReversedContainer(bool bNewIsSortReversedContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetIsSortReversedContainer");

	Params::VContainerMenuViewModel_SetIsSortReversedContainer Parms{};

	Parms.bNewIsSortReversedContainer = bNewIsSortReversedContainer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetMenuType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyContainerMenuType                NewMenuType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetMenuType(ELegacyContainerMenuType NewMenuType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetMenuType");

	Params::VContainerMenuViewModel_SetMenuType Parms{};

	Parms.NewMenuType = NewMenuType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetNpcData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyContainerMenuNpcData&NewNPCData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetNpcData(const struct FLegacyContainerMenuNpcData& NewNPCData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetNpcData");

	Params::VContainerMenuViewModel_SetNpcData Parms{};

	Parms.NewNPCData = std::move(NewNPCData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.SetSortTypeContainer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortTypeContainer                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVContainerMenuViewModel::SetSortTypeContainer(const EOriginalInventoryMenuSortType& NewSortTypeContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "SetSortTypeContainer");

	Params::VContainerMenuViewModel_SetSortTypeContainer Parms{};

	Parms.NewSortTypeContainer = NewSortTypeContainer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VContainerMenuViewModel.GetButtonData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyContainerMenuButtonDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyContainerMenuButtonData UVContainerMenuViewModel::GetButtonData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetButtonData");

	Params::VContainerMenuViewModel_GetButtonData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetContainerItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalInventoryMenuItemProperties> UVContainerMenuViewModel::GetContainerItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetContainerItems");

	Params::VContainerMenuViewModel_GetContainerItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetCurrentPageContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyInventoryMenuPage                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyInventoryMenuPage UVContainerMenuViewModel::GetCurrentPageContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetCurrentPageContainer");

	Params::VContainerMenuViewModel_GetCurrentPageContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetCurrentPageItemsContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalInventoryMenuItemProperties> UVContainerMenuViewModel::GetCurrentPageItemsContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetCurrentPageItemsContainer");

	Params::VContainerMenuViewModel_GetCurrentPageItemsContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetCurrentTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyContainerMenuTab                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyContainerMenuTab UVContainerMenuViewModel::GetCurrentTab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetCurrentTab");

	Params::VContainerMenuViewModel_GetCurrentTab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetIsSimpleContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVContainerMenuViewModel::GetIsSimpleContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetIsSimpleContainer");

	Params::VContainerMenuViewModel_GetIsSimpleContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetIsSortReversedContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVContainerMenuViewModel::GetIsSortReversedContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetIsSortReversedContainer");

	Params::VContainerMenuViewModel_GetIsSortReversedContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetMenuType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyContainerMenuType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyContainerMenuType UVContainerMenuViewModel::GetMenuType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetMenuType");

	Params::VContainerMenuViewModel_GetMenuType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetNpcData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyContainerMenuNpcDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyContainerMenuNpcData UVContainerMenuViewModel::GetNpcData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetNpcData");

	Params::VContainerMenuViewModel_GetNpcData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.GetSortTypeContainer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVContainerMenuViewModel::GetSortTypeContainer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "GetSortTypeContainer");

	Params::VContainerMenuViewModel_GetSortTypeContainer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VContainerMenuViewModel.IsContainerTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVContainerMenuViewModel::IsContainerTab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VContainerMenuViewModel", "IsContainerTab");

	Params::VContainerMenuViewModel_IsContainerTab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VConversationIdleAnimInstance.IsInDialogue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVConversationIdleAnimInstance::IsInDialogue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VConversationIdleAnimInstance", "IsInDialogue");

	Params::VConversationIdleAnimInstance_IsInDialogue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDeathVFXBlueprint.OnStartPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AVPairedPawn*                     Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVDeathVFXBlueprint::OnStartPlay(class AVPairedPawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDeathVFXBlueprint", "OnStartPlay");

	Params::VDeathVFXBlueprint_OnStartPlay Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginalVideoSettingWidget.OnRefresh
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVOriginalVideoSettingWidget::OnRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "OnRefresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOriginalVideoSettingWidget.SetExtremalValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFloatInterval&            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginalVideoSettingWidget::SetExtremalValue(const struct FFloatInterval& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "SetExtremalValue");

	Params::VOriginalVideoSettingWidget_SetExtremalValue Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalVideoSettingWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalVideoSettingWidget::SetLabel(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "SetLabel");

	Params::VOriginalVideoSettingWidget_SetLabel Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalVideoSettingWidget.SetOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FOriginalVideoOption>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalVideoSettingWidget::SetOptions(const TArray<struct FOriginalVideoOption>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "SetOptions");

	Params::VOriginalVideoSettingWidget_SetOptions Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalVideoSettingWidget.GetExtremalValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FFloatInterval             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FFloatInterval UVOriginalVideoSettingWidget::GetExtremalValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "GetExtremalValue");

	Params::VOriginalVideoSettingWidget_GetExtremalValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalVideoSettingWidget.GetLabel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVOriginalVideoSettingWidget::GetLabel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "GetLabel");

	Params::VOriginalVideoSettingWidget_GetLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalVideoSettingWidget.GetOptions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalVideoOption>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalVideoOption> UVOriginalVideoSettingWidget::GetOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalVideoSettingWidget", "GetOptions");

	Params::VOriginalVideoSettingWidget_GetOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDebugGraphicsSettingWidget.BindRefreshDelegate
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVDebugGraphicsSettingWidget::BindRefreshDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "BindRefreshDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VDebugGraphicsSettingWidget.RefreshMenuOptions
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVDebugGraphicsSettingWidget::RefreshMenuOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "RefreshMenuOptions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VDebugGraphicsSettingWidget.AddConsoleCommandToSave
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDebugGraphicsSettingWidget::AddConsoleCommandToSave(const class FString& Command) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "AddConsoleCommandToSave");

	Params::VDebugGraphicsSettingWidget_AddConsoleCommandToSave Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDebugGraphicsSettingWidget.HardwareRayTracingLightingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVDebugGraphicsSettingWidget::HardwareRayTracingLightingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "HardwareRayTracingLightingMode");

	Params::VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDebugGraphicsSettingWidget.IsHardrwareRayTracingOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVDebugGraphicsSettingWidget::IsHardrwareRayTracingOn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "IsHardrwareRayTracingOn");

	Params::VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDebugGraphicsSettingWidget.IsHardwareRayTracingSupportedByBuild
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVDebugGraphicsSettingWidget::IsHardwareRayTracingSupportedByBuild() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "IsHardwareRayTracingSupportedByBuild");

	Params::VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDebugGraphicsSettingWidget.IsHardwareRayTracingSupportedByHardware
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVDebugGraphicsSettingWidget::IsHardwareRayTracingSupportedByHardware() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "IsHardwareRayTracingSupportedByHardware");

	Params::VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDebugGraphicsSettingWidget.SoftwareRaytracingQuality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVDebugGraphicsSettingWidget::SoftwareRaytracingQuality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDebugGraphicsSettingWidget", "SoftwareRaytracingQuality");

	Params::VDebugGraphicsSettingWidget_SoftwareRaytracingQuality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenuFaction.SetFaction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuFactionProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyStatsMenuFaction::SetFaction(const struct FLegacyStatsMenuFactionProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuFaction", "SetFaction");

	Params::VLegacyStatsMenuFaction_SetFaction Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyStatsMenuFaction.GetFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuFactionPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuFactionProperties UVLegacyStatsMenuFaction::GetFaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuFaction", "GetFaction");

	Params::VLegacyStatsMenuFaction_GetFaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDetectionLightingSubsystem.GetDetectionLightTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     LightActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVDetectionLightTag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVDetectionLightTag UVDetectionLightingSubsystem::GetDetectionLightTag(const class AActor* LightActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VDetectionLightingSubsystem", "GetDetectionLightTag");

	Params::VDetectionLightingSubsystem_GetDetectionLightTag Parms{};

	Parms.LightActor = LightActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDetectionLightingSubsystem.GetTagName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EVDetectionLightTag&              LightTag                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UVDetectionLightingSubsystem::GetTagName(const EVDetectionLightTag& LightTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VDetectionLightingSubsystem", "GetTagName");

	Params::VDetectionLightingSubsystem_GetTagName Parms{};

	Parms.LightTag = LightTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDetectionLightingSubsystem.OnLightComponentBeginPlay
// (Final, Native, Private)
// Parameters:
// const class ULightComponentBase*        LightComponent                                         (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDetectionLightingSubsystem::OnLightComponentBeginPlay(const class ULightComponentBase* LightComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDetectionLightingSubsystem", "OnLightComponentBeginPlay");

	Params::VDetectionLightingSubsystem_OnLightComponentBeginPlay Parms{};

	Parms.LightComponent = LightComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDetectionLightingSubsystem.OnPostWorldCreation
// (Final, Native, Private)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDetectionLightingSubsystem::OnPostWorldCreation(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDetectionLightingSubsystem", "OnPostWorldCreation");

	Params::VDetectionLightingSubsystem_OnPostWorldCreation Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.GetSubtitleVisibilityCVarSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDialogueMenuViewModel::GetSubtitleVisibilityCVarSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "GetSubtitleVisibilityCVarSettings");

	Params::VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedBarterIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedBarterIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedBarterIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedCloseIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedCloseIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedCloseIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedPersuasionIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedPersuasionIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedPersuasionIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedRechargingIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedRechargingIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedRechargingIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedRepairingIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedRepairingIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedRepairingIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedResponse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ResponseIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDialogueMenuViewModel::RegisterSendClickedResponse(int32 ResponseIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedResponse");

	Params::VDialogueMenuViewModel_RegisterSendClickedResponse Parms{};

	Parms.ResponseIndex = ResponseIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedSkip
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedSkip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedSpellBarterIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedSpellBarterIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedSpellBarterIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.RegisterSendClickedTrainingIcon
// (Final, Native, Public, BlueprintCallable)

void UVDialogueMenuViewModel::RegisterSendClickedTrainingIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "RegisterSendClickedTrainingIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDialogueMenuViewModel.GetButtonsVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyDialogMenuButtonVisibilityReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacyDialogMenuButtonVisibility UVDialogueMenuViewModel::GetButtonsVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "GetButtonsVisibility");

	Params::VDialogueMenuViewModel_GetButtonsVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDialogueMenuViewModel.GetResponses
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FResponsesData>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FResponsesData> UVDialogueMenuViewModel::GetResponses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "GetResponses");

	Params::VDialogueMenuViewModel_GetResponses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDialogueMenuViewModel.GetSpeakerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVDialogueMenuViewModel::GetSpeakerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "GetSpeakerName");

	Params::VDialogueMenuViewModel_GetSpeakerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDialogueMenuViewModel.GetSubtitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVDialogueMenuViewModel::GetSubtitle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "GetSubtitle");

	Params::VDialogueMenuViewModel_GetSubtitle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDialogueMenuViewModel.IsSubtitleVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVDialogueMenuViewModel::IsSubtitleVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDialogueMenuViewModel", "IsSubtitleVisible");

	Params::VDialogueMenuViewModel_IsSubtitleVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VDoorNavLinkProxy.OnSmartNavLinkReached
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// const class AActor*                     MovingActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DestinationPoint                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVDoorNavLinkProxy::OnSmartNavLinkReached(const class AActor* MovingActor, const struct FVector& DestinationPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDoorNavLinkProxy", "OnSmartNavLinkReached");

	Params::VDoorNavLinkProxy_OnSmartNavLinkReached Parms{};

	Parms.MovingActor = MovingActor;
	Parms.DestinationPoint = std::move(DestinationPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDynamicNavAreaRebuilderComponent.DirtyNavArea
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      DebugReason                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDynamicNavAreaRebuilderComponent::DirtyNavArea(const class FName& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDynamicNavAreaRebuilderComponent", "DirtyNavArea");

	Params::VDynamicNavAreaRebuilderComponent_DirtyNavArea Parms{};

	Parms.DebugReason = DebugReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VDynamicNavAreaRebuilderComponent.ForceDirtyNavArea
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      DebugReason                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVDynamicNavAreaRebuilderComponent::ForceDirtyNavArea(const class FName& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VDynamicNavAreaRebuilderComponent", "ForceDirtyNavArea");

	Params::VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea Parms{};

	Parms.DebugReason = DebugReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedAttribute
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedAttribute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedAttribute");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedCancel
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedDelete
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedDelete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedDelete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedLockLevel
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedLockLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedLockLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedOk
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedOk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedOk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedRange
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedScrollbar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELegacyEffectEntryType                  NewScrollbarType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::RegisterSendClickedScrollbar(float NewValue, ELegacyEffectEntryType NewScrollbarType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedScrollbar");

	Params::VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar Parms{};

	Parms.NewValue = NewValue;
	Parms.NewScrollbarType = NewScrollbarType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedSkill
// (Final, Native, Public, BlueprintCallable)

void UVEffectSettingsMenuViewModel::RegisterSendClickedSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "RegisterSendClickedSkill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetAreaScrollbarProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyScrollbarValueProperties&NewScrollbarProperties                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetAreaScrollbarProperties(const struct FLegacyScrollbarValueProperties& NewScrollbarProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetAreaScrollbarProperties");

	Params::VEffectSettingsMenuViewModel_SetAreaScrollbarProperties Parms{};

	Parms.NewScrollbarProperties = std::move(NewScrollbarProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetAreaSelectedValue
// (Final, Native, Public)
// Parameters:
// float                                   NewSelectedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetAreaSelectedValue(float NewSelectedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetAreaSelectedValue");

	Params::VEffectSettingsMenuViewModel_SetAreaSelectedValue Parms{};

	Parms.NewSelectedValue = NewSelectedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetDurationScrollbarProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyScrollbarValueProperties&NewScrollbarProperties                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetDurationScrollbarProperties(const struct FLegacyScrollbarValueProperties& NewScrollbarProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetDurationScrollbarProperties");

	Params::VEffectSettingsMenuViewModel_SetDurationScrollbarProperties Parms{};

	Parms.NewScrollbarProperties = std::move(NewScrollbarProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetDurationSelectedValue
// (Final, Native, Public)
// Parameters:
// float                                   NewSelectedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetDurationSelectedValue(float NewSelectedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetDurationSelectedValue");

	Params::VEffectSettingsMenuViewModel_SetDurationSelectedValue Parms{};

	Parms.NewSelectedValue = NewSelectedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetEffectCost
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyEffectCost&         NewCost                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetEffectCost(const struct FLegacyEffectCost& NewCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetEffectCost");

	Params::VEffectSettingsMenuViewModel_SetEffectCost Parms{};

	Parms.NewCost = std::move(NewCost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetEffectProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyEffectProperties&   NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetEffectProperties(const struct FLegacyEffectProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetEffectProperties");

	Params::VEffectSettingsMenuViewModel_SetEffectProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetFirstButtonText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetFirstButtonText(const class FText& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetFirstButtonText");

	Params::VEffectSettingsMenuViewModel_SetFirstButtonText Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetFirstButtonType
// (Final, Native, Public)
// Parameters:
// ELegacyEffectEntryType                  NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetFirstButtonType(ELegacyEffectEntryType NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetFirstButtonType");

	Params::VEffectSettingsMenuViewModel_SetFirstButtonType Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsAreaVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsAreaVisible(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsAreaVisible");

	Params::VEffectSettingsMenuViewModel_SetIsAreaVisible Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsDeleteVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsDeleteVisible(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsDeleteVisible");

	Params::VEffectSettingsMenuViewModel_SetIsDeleteVisible Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsDurationVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsDurationVisible(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsDurationVisible");

	Params::VEffectSettingsMenuViewModel_SetIsDurationVisible Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsEnchantmentMenu
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsEnchantmentMenu(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsEnchantmentMenu");

	Params::VEffectSettingsMenuViewModel_SetIsEnchantmentMenu Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsLockLevelVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsLockLevelVisible(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsLockLevelVisible");

	Params::VEffectSettingsMenuViewModel_SetIsLockLevelVisible Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsMagnitudeVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsMagnitudeVisible(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsMagnitudeVisible");

	Params::VEffectSettingsMenuViewModel_SetIsMagnitudeVisible Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetIsRangeVisible
// (Final, Native, Public)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetIsRangeVisible(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetIsRangeVisible");

	Params::VEffectSettingsMenuViewModel_SetIsRangeVisible Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetLocklevel
// (Final, Native, Public, HasOutParams)
// Parameters:
// const EMordernLockLevel&                NewLockValue                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetLocklevel(const EMordernLockLevel& NewLockValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetLocklevel");

	Params::VEffectSettingsMenuViewModel_SetLocklevel Parms{};

	Parms.NewLockValue = NewLockValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetMagnitudeScrollbarProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyScrollbarValueProperties&NewScrollbarProperties                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetMagnitudeScrollbarProperties(const struct FLegacyScrollbarValueProperties& NewScrollbarProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetMagnitudeScrollbarProperties");

	Params::VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties Parms{};

	Parms.NewScrollbarProperties = std::move(NewScrollbarProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetMagnitudeSelectedValue
// (Final, Native, Public)
// Parameters:
// float                                   NewSelectedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetMagnitudeSelectedValue(float NewSelectedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetMagnitudeSelectedValue");

	Params::VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue Parms{};

	Parms.NewSelectedValue = NewSelectedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.SetRangeText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVEffectSettingsMenuViewModel::SetRangeText(const class FText& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "SetRangeText");

	Params::VEffectSettingsMenuViewModel_SetRangeText Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEffectSettingsMenuViewModel.GetAreaScrollbarProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyScrollbarValuePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyScrollbarValueProperties UVEffectSettingsMenuViewModel::GetAreaScrollbarProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetAreaScrollbarProperties");

	Params::VEffectSettingsMenuViewModel_GetAreaScrollbarProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetAreaSelectedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVEffectSettingsMenuViewModel::GetAreaSelectedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetAreaSelectedValue");

	Params::VEffectSettingsMenuViewModel_GetAreaSelectedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetDurationScrollbarProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyScrollbarValuePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyScrollbarValueProperties UVEffectSettingsMenuViewModel::GetDurationScrollbarProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetDurationScrollbarProperties");

	Params::VEffectSettingsMenuViewModel_GetDurationScrollbarProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetDurationSelectedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVEffectSettingsMenuViewModel::GetDurationSelectedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetDurationSelectedValue");

	Params::VEffectSettingsMenuViewModel_GetDurationSelectedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetEffectCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyEffectCost          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyEffectCost UVEffectSettingsMenuViewModel::GetEffectCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetEffectCost");

	Params::VEffectSettingsMenuViewModel_GetEffectCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetEffectProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyEffectProperties    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyEffectProperties UVEffectSettingsMenuViewModel::GetEffectProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetEffectProperties");

	Params::VEffectSettingsMenuViewModel_GetEffectProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetFirstButtonText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVEffectSettingsMenuViewModel::GetFirstButtonText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetFirstButtonText");

	Params::VEffectSettingsMenuViewModel_GetFirstButtonText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetFirstButtonType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyEffectEntryType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyEffectEntryType UVEffectSettingsMenuViewModel::GetFirstButtonType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetFirstButtonType");

	Params::VEffectSettingsMenuViewModel_GetFirstButtonType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsAreaVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsAreaVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsAreaVisible");

	Params::VEffectSettingsMenuViewModel_GetIsAreaVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsDeleteVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsDeleteVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsDeleteVisible");

	Params::VEffectSettingsMenuViewModel_GetIsDeleteVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsDurationVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsDurationVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsDurationVisible");

	Params::VEffectSettingsMenuViewModel_GetIsDurationVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsEnchantmentMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsEnchantmentMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsEnchantmentMenu");

	Params::VEffectSettingsMenuViewModel_GetIsEnchantmentMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsLockLevelVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsLockLevelVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsLockLevelVisible");

	Params::VEffectSettingsMenuViewModel_GetIsLockLevelVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsMagnitudeVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsMagnitudeVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsMagnitudeVisible");

	Params::VEffectSettingsMenuViewModel_GetIsMagnitudeVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetIsRangeVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEffectSettingsMenuViewModel::GetIsRangeVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetIsRangeVisible");

	Params::VEffectSettingsMenuViewModel_GetIsRangeVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetLocklevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EMordernLockLevel                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EMordernLockLevel UVEffectSettingsMenuViewModel::GetLocklevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetLocklevel");

	Params::VEffectSettingsMenuViewModel_GetLocklevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetMagnitudeScrollbarProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyScrollbarValuePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyScrollbarValueProperties UVEffectSettingsMenuViewModel::GetMagnitudeScrollbarProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetMagnitudeScrollbarProperties");

	Params::VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetMagnitudeSelectedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVEffectSettingsMenuViewModel::GetMagnitudeSelectedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetMagnitudeSelectedValue");

	Params::VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEffectSettingsMenuViewModel.GetRangeText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVEffectSettingsMenuViewModel::GetRangeText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEffectSettingsMenuViewModel", "GetRangeText");

	Params::VEffectSettingsMenuViewModel_GetRangeText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnAddedEffectItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWantToDelete                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::RegisterSendClickOnAddedEffectItem(int32 ItemIndex, bool bWantToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnAddedEffectItem");

	Params::VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.bWantToDelete = bWantToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnAvailableEffectItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWantToDelete                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::RegisterSendClickOnAvailableEffectItem(int32 ItemIndex, bool bWantToDelete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnAvailableEffectItem");

	Params::VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.bWantToDelete = bWantToDelete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnCreateButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewEnchantedItemName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::RegisterSendClickOnCreateButton(const class FString& NewEnchantedItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnCreateButton");

	Params::VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton Parms{};

	Parms.NewEnchantedItemName = std::move(NewEnchantedItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnExitButton
// (Final, Native, Public, BlueprintCallable)

void UVEnchantmentMenuViewModel::RegisterSendClickOnExitButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnExitButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::RegisterSendClickOnItem(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnItem");

	Params::VEnchantmentMenuViewModel_RegisterSendClickOnItem Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnItemButton
// (Final, Native, Public, BlueprintCallable)

void UVEnchantmentMenuViewModel::RegisterSendClickOnItemButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnItemButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnSoulGemButton
// (Final, Native, Public, BlueprintCallable)

void UVEnchantmentMenuViewModel::RegisterSendClickOnSoulGemButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "RegisterSendClickOnSoulGemButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EModernEnchantmentMenuPage              NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetCurrentPage(EModernEnchantmentMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetCurrentPage");

	Params::VEnchantmentMenuViewModel_SetCurrentPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetCurrentPageItemsList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVModernEnchantmentItemProperties>&NewItemsList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetCurrentPageItemsList(const TArray<struct FVModernEnchantmentItemProperties>& NewItemsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetCurrentPageItemsList");

	Params::VEnchantmentMenuViewModel_SetCurrentPageItemsList Parms{};

	Parms.NewItemsList = std::move(NewItemsList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetEffectsList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVModernEnchantmentItemProperties>&NewEffectsList                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetEffectsList(const TArray<struct FVModernEnchantmentItemProperties>& NewEffectsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetEffectsList");

	Params::VEnchantmentMenuViewModel_SetEffectsList Parms{};

	Parms.NewEffectsList = std::move(NewEffectsList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetInventoryForPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EModernEnchantmentMenuPage        Page                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetInventoryForPage(const EModernEnchantmentMenuPage Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetInventoryForPage");

	Params::VEnchantmentMenuViewModel_SetInventoryForPage Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetIsSortReversed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetIsSortReversed(bool bNewIsSortReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetIsSortReversed");

	Params::VEnchantmentMenuViewModel_SetIsSortReversed Parms{};

	Parms.bNewIsSortReversed = bNewIsSortReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetItemsList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVModernEnchantmentItemProperties>&NewItemsList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetItemsList(const TArray<struct FVModernEnchantmentItemProperties>& NewItemsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetItemsList");

	Params::VEnchantmentMenuViewModel_SetItemsList Parms{};

	Parms.NewItemsList = std::move(NewItemsList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetItemToEnchantInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FItemToEnchantInfo&        NewItemToEnchantInfo                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetItemToEnchantInfo(const struct FItemToEnchantInfo& NewItemToEnchantInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetItemToEnchantInfo");

	Params::VEnchantmentMenuViewModel_SetItemToEnchantInfo Parms{};

	Parms.NewItemToEnchantInfo = std::move(NewItemToEnchantInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetPlayerGold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPlayerGold                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetPlayerGold(int32 NewPlayerGold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetPlayerGold");

	Params::VEnchantmentMenuViewModel_SetPlayerGold Parms{};

	Parms.NewPlayerGold = NewPlayerGold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetSortType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetSortType(const EOriginalInventoryMenuSortType& NewSortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetSortType");

	Params::VEnchantmentMenuViewModel_SetSortType Parms{};

	Parms.NewSortType = NewSortType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.SetSoulGemInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSoulGemInfo&              NewSoulGemInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVEnchantmentMenuViewModel::SetSoulGemInfo(const struct FSoulGemInfo& NewSoulGemInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "SetSoulGemInfo");

	Params::VEnchantmentMenuViewModel_SetSoulGemInfo Parms{};

	Parms.NewSoulGemInfo = std::move(NewSoulGemInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEnchantmentMenuViewModel.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EModernEnchantmentMenuPage        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EModernEnchantmentMenuPage UVEnchantmentMenuViewModel::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetCurrentPage");

	Params::VEnchantmentMenuViewModel_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetCurrentPageItemsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVModernEnchantmentItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVModernEnchantmentItemProperties> UVEnchantmentMenuViewModel::GetCurrentPageItemsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetCurrentPageItemsList");

	Params::VEnchantmentMenuViewModel_GetCurrentPageItemsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetEffectsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVModernEnchantmentItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVModernEnchantmentItemProperties> UVEnchantmentMenuViewModel::GetEffectsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetEffectsList");

	Params::VEnchantmentMenuViewModel_GetEffectsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetItemsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVModernEnchantmentItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVModernEnchantmentItemProperties> UVEnchantmentMenuViewModel::GetItemsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetItemsList");

	Params::VEnchantmentMenuViewModel_GetItemsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetItemToEnchantInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FItemToEnchantInfo         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FItemToEnchantInfo UVEnchantmentMenuViewModel::GetItemToEnchantInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetItemToEnchantInfo");

	Params::VEnchantmentMenuViewModel_GetItemToEnchantInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetPlayerGold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVEnchantmentMenuViewModel::GetPlayerGold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetPlayerGold");

	Params::VEnchantmentMenuViewModel_GetPlayerGold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVEnchantmentMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetSortType");

	Params::VEnchantmentMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.GetSoulGemInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSoulGemInfo               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSoulGemInfo UVEnchantmentMenuViewModel::GetSoulGemInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "GetSoulGemInfo");

	Params::VEnchantmentMenuViewModel_GetSoulGemInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.IsItemTypeOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EModernEnchantmentMenuItemType    ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EModernEnchantmentMenuPage        Page                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnchantmentMenuViewModel::IsItemTypeOnPage(const EModernEnchantmentMenuItemType ItemType, const EModernEnchantmentMenuPage Page) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "IsItemTypeOnPage");

	Params::VEnchantmentMenuViewModel_IsItemTypeOnPage Parms{};

	Parms.ItemType = ItemType;
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnchantmentMenuViewModel.IsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnchantmentMenuViewModel::IsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnchantmentMenuViewModel", "IsSortReversed");

	Params::VEnchantmentMenuViewModel_IsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.GetLandingAdditiveAlpha
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVEnhancedInAirCharacterAnimInstance::GetLandingAdditiveAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "GetLandingAdditiveAlpha");

	Params::VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.IsInAir
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedInAirCharacterAnimInstance::IsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "IsInAir");

	Params::VEnhancedInAirCharacterAnimInstance_IsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.IsJumping
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedInAirCharacterAnimInstance::IsJumping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "IsJumping");

	Params::VEnhancedInAirCharacterAnimInstance_IsJumping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.IsLanding
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedInAirCharacterAnimInstance::IsLanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "IsLanding");

	Params::VEnhancedInAirCharacterAnimInstance_IsLanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.IsLeftFootJump
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedInAirCharacterAnimInstance::IsLeftFootJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "IsLeftFootJump");

	Params::VEnhancedInAirCharacterAnimInstance_IsLeftFootJump Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.IsSneaking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedInAirCharacterAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "IsSneaking");

	Params::VEnhancedInAirCharacterAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedInAirCharacterAnimInstance.IsTryingToMove
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedInAirCharacterAnimInstance::IsTryingToMove() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedInAirCharacterAnimInstance", "IsTryingToMove");

	Params::VEnhancedInAirCharacterAnimInstance_IsTryingToMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedLocomotionCharacterAnimInstance.IsSprinting
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedLocomotionCharacterAnimInstance::IsSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedLocomotionCharacterAnimInstance", "IsSprinting");

	Params::VEnhancedLocomotionCharacterAnimInstance_IsSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEnhancedLocomotionCharacterAnimInstance.IsWeaponDrawn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVEnhancedLocomotionCharacterAnimInstance::IsWeaponDrawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEnhancedLocomotionCharacterAnimInstance", "IsWeaponDrawn");

	Params::VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VEquipUnequipMultiAnimInstance.OnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipMultiAnimInstance::OnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipMultiAnimInstance", "OnEquipEnter");

	Params::VEquipUnequipMultiAnimInstance_OnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipMultiAnimInstance.OnUnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipMultiAnimInstance::OnUnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipMultiAnimInstance", "OnUnEquipEnter");

	Params::VEquipUnequipMultiAnimInstance_OnUnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipSingleAnimInstance.OnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipSingleAnimInstance::OnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipSingleAnimInstance", "OnEquipEnter");

	Params::VEquipUnequipSingleAnimInstance_OnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipSingleAnimInstance.OnUnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipSingleAnimInstance::OnUnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipSingleAnimInstance", "OnUnEquipEnter");

	Params::VEquipUnequipSingleAnimInstance_OnUnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipSSwimSingle.OnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipSSwimSingle::OnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipSSwimSingle", "OnEquipEnter");

	Params::VEquipUnequipSSwimSingle_OnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipSSwimSingle.OnUnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipSSwimSingle::OnUnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipSSwimSingle", "OnUnEquipEnter");

	Params::VEquipUnequipSSwimSingle_OnUnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipStandSneakSingle.OnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipStandSneakSingle::OnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipStandSneakSingle", "OnEquipEnter");

	Params::VEquipUnequipStandSneakSingle_OnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VEquipUnequipStandSneakSingle.OnUnEquipEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVEquipUnequipStandSneakSingle::OnUnEquipEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VEquipUnequipStandSneakSingle", "OnUnEquipEnter");

	Params::VEquipUnequipStandSneakSingle_OnUnEquipEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFacialCharacterAnimInstance.IsUsingAttackPose
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFacialCharacterAnimInstance::IsUsingAttackPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFacialCharacterAnimInstance", "IsUsingAttackPose");

	Params::VFacialCharacterAnimInstance_IsUsingAttackPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFacialCharacterAnimInstance.IsUsingHitPose
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFacialCharacterAnimInstance::IsUsingHitPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFacialCharacterAnimInstance", "IsUsingHitPose");

	Params::VFacialCharacterAnimInstance_IsUsingHitPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFastTransitionCachedExtensionLevel.OnLevelLoaded
// (Final, Native, Public)

void UVFastTransitionCachedExtensionLevel::OnLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFastTransitionCachedExtensionLevel", "OnLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFastTransition.OnGoingToMainMenu
// (Final, Native, Private)

void UVFastTransition::OnGoingToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFastTransition", "OnGoingToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFeetIKCharacterAnimInstance.UpdateSpeedRatio
// (Final, Native, Protected, BlueprintCallable)

void UVFeetIKCharacterAnimInstance::UpdateSpeedRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFeetIKCharacterAnimInstance", "UpdateSpeedRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFeetIKCharacterAnimInstance.IsInAir
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFeetIKCharacterAnimInstance::IsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFeetIKCharacterAnimInstance", "IsInAir");

	Params::VFeetIKCharacterAnimInstance_IsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFeetIKCharacterAnimInstance.IsSneaking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFeetIKCharacterAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFeetIKCharacterAnimInstance", "IsSneaking");

	Params::VFeetIKCharacterAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFooterViewModel.OnHoldCancel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFooterViewModel::OnHoldCancel(class UInputAction* InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFooterViewModel", "OnHoldCancel");

	Params::VFooterViewModel_OnHoldCancel Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFooterViewModel.SetInputActionDescription
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFooterInputActionDescription&NewExtraData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVFooterViewModel::SetInputActionDescription(const struct FFooterInputActionDescription& NewExtraData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFooterViewModel", "SetInputActionDescription");

	Params::VFooterViewModel_SetInputActionDescription Parms{};

	Parms.NewExtraData = std::move(NewExtraData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFooterViewModel.SetInputActionVisibility
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFooterInputActionVisibility&NewInputActionVisibility                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVFooterViewModel::SetInputActionVisibility(const struct FFooterInputActionVisibility& NewInputActionVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFooterViewModel", "SetInputActionVisibility");

	Params::VFooterViewModel_SetInputActionVisibility Parms{};

	Parms.NewInputActionVisibility = std::move(NewInputActionVisibility);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFooterViewModel.TriggerOnHoldInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputAction*                     InputAction                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFooterViewModel::TriggerOnHoldInput(class UInputAction* InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFooterViewModel", "TriggerOnHoldInput");

	Params::VFooterViewModel_TriggerOnHoldInput Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFooterViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFooterViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFooterViewModel", "ThisIsForPluginCompliance");

	Params::VFooterViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFootStepVFXBlueprint.OnStartPlay
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EVLocomotionType                        LocomotionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVFootStepVFXBlueprint::OnStartPlay(EVLocomotionType LocomotionType, bool bDoesBeginInFirstPerson, const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFootStepVFXBlueprint", "OnStartPlay");

	Params::VFootStepVFXBlueprint_OnStartPlay Parms{};

	Parms.LocomotionType = LocomotionType;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VFreezeInMenuSubsystem.Freeze
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      FreezeName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldFreezeOblivion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFreezeInMenuSubsystem::Freeze(const class FName& FreezeName, bool bShouldFreezeOblivion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "Freeze");

	Params::VFreezeInMenuSubsystem_Freeze Parms{};

	Parms.FreezeName = FreezeName;
	Parms.bShouldFreezeOblivion = bShouldFreezeOblivion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFreezeInMenuSubsystem.RequestMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVFreezeSubsystemMode                   NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFreezeInMenuSubsystem::RequestMode(EVFreezeSubsystemMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "RequestMode");

	Params::VFreezeInMenuSubsystem_RequestMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFreezeInMenuSubsystem.SetMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVFreezeSubsystemMode                   NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFreezeInMenuSubsystem::SetMode(EVFreezeSubsystemMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "SetMode");

	Params::VFreezeInMenuSubsystem_SetMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFreezeInMenuSubsystem.SpareActorFromFreeze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToAffect                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFreezeInMenuSubsystem::SpareActorFromFreeze(class AActor* ActorToAffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "SpareActorFromFreeze");

	Params::VFreezeInMenuSubsystem_SpareActorFromFreeze Parms{};

	Parms.ActorToAffect = ActorToAffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFreezeInMenuSubsystem.UnFreeze
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      FreezeName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldUnfreezeOblivion                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVFreezeInMenuSubsystem::UnFreeze(const class FName& FreezeName, bool bShouldUnfreezeOblivion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "UnFreeze");

	Params::VFreezeInMenuSubsystem_UnFreeze Parms{};

	Parms.FreezeName = FreezeName;
	Parms.bShouldUnfreezeOblivion = bShouldUnfreezeOblivion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VFreezeInMenuSubsystem.GetCurrentFreezeName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVFreezeInMenuSubsystem::GetCurrentFreezeName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "GetCurrentFreezeName");

	Params::VFreezeInMenuSubsystem_GetCurrentFreezeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFreezeInMenuSubsystem.GetMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVFreezeSubsystemMode                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVFreezeSubsystemMode UVFreezeInMenuSubsystem::GetMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "GetMode");

	Params::VFreezeInMenuSubsystem_GetMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFreezeInMenuSubsystem.IsActorFrozen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFreezeInMenuSubsystem::IsActorFrozen(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "IsActorFrozen");

	Params::VFreezeInMenuSubsystem_IsActorFrozen Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VFreezeInMenuSubsystem.IsFreezing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVFreezeInMenuSubsystem::IsFreezing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VFreezeInMenuSubsystem", "IsFreezing");

	Params::VFreezeInMenuSubsystem_IsFreezing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGameplayTagOverlapComponent.OnActorBeginOverlap
// (Final, Native, Private)
// Parameters:
// const class AActor*                     OverlappedActor                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     OtherActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayTagOverlapComponent::OnActorBeginOverlap(const class AActor* OverlappedActor, const class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayTagOverlapComponent", "OnActorBeginOverlap");

	Params::VGameplayTagOverlapComponent_OnActorBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGameplayTagOverlapComponent.OnActorEndOverlap
// (Final, Native, Private)
// Parameters:
// const class AActor*                     OverlappedActor                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     OtherActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGameplayTagOverlapComponent::OnActorEndOverlap(const class AActor* OverlappedActor, const class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGameplayTagOverlapComponent", "OnActorEndOverlap");

	Params::VGameplayTagOverlapComponent_OnActorEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGamertagViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGamertagViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGamertagViewModel", "ThisIsForPluginCompliance");

	Params::VGamertagViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGenericMenuViewModel.RegisterSendClickedButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGenericMenuViewModel::RegisterSendClickedButton(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGenericMenuViewModel", "RegisterSendClickedButton");

	Params::VGenericMenuViewModel_RegisterSendClickedButton Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGenericMenuViewModel.SetProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyQuestAddedProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVGenericMenuViewModel::SetProperties(const struct FLegacyQuestAddedProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGenericMenuViewModel", "SetProperties");

	Params::VGenericMenuViewModel_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGenericMenuViewModel.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyQuestAddedProperties      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacyQuestAddedProperties UVGenericMenuViewModel::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGenericMenuViewModel", "GetProperties");

	Params::VGenericMenuViewModel_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGenericMenuViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGenericMenuViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGenericMenuViewModel", "ThisIsForPluginCompliance");

	Params::VGenericMenuViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGrabArmComponent.GetTargetRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UVGrabArmComponent::GetTargetRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGrabArmComponent", "GetTargetRotation");

	Params::VGrabArmComponent_GetTargetRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGrabArmComponent.GetUnfixedGrabAnchorPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVGrabArmComponent::GetUnfixedGrabAnchorPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGrabArmComponent", "GetUnfixedGrabAnchorPosition");

	Params::VGrabArmComponent_GetUnfixedGrabAnchorPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGrabArmComponent.IsCollisionFixApplied
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGrabArmComponent::IsCollisionFixApplied() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGrabArmComponent", "IsCollisionFixApplied");

	Params::VGrabArmComponent_IsCollisionFixApplied Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionHorseAnimInstance.IsInTrot
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionHorseAnimInstance::IsInTrot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionHorseAnimInstance", "IsInTrot");

	Params::VLocomotionHorseAnimInstance_IsInTrot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionHorseAnimInstance.IsMovingBackward
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionHorseAnimInstance::IsMovingBackward() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionHorseAnimInstance", "IsMovingBackward");

	Params::VLocomotionHorseAnimInstance_IsMovingBackward Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionHorseAnimInstance.IsMovingForward
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionHorseAnimInstance::IsMovingForward() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionHorseAnimInstance", "IsMovingForward");

	Params::VLocomotionHorseAnimInstance_IsMovingForward Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionHorseAnimInstance.IsWalking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionHorseAnimInstance::IsWalking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionHorseAnimInstance", "IsWalking");

	Params::VLocomotionHorseAnimInstance_IsWalking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.OnSpecialIdleExit
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVGroundLocomotionHorseAnimInstance::OnSpecialIdleExit(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "OnSpecialIdleExit");

	Params::VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.OnUpdateIdleState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVGroundLocomotionHorseAnimInstance::OnUpdateIdleState(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "OnUpdateIdleState");

	Params::VGroundLocomotionHorseAnimInstance_OnUpdateIdleState Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.ProcessIdleTransitionLogic
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGroundLocomotionHorseAnimInstance::ProcessIdleTransitionLogic(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "ProcessIdleTransitionLogic");

	Params::VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.ProcessSpecialIdleTransitionLogic
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVGroundLocomotionHorseAnimInstance::ProcessSpecialIdleTransitionLogic(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "ProcessSpecialIdleTransitionLogic");

	Params::VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.CanPlaySpecialIdle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVGroundLocomotionHorseAnimInstance::CanPlaySpecialIdle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "CanPlaySpecialIdle");

	Params::VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.GetCurrentSpecialIdleIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVGroundLocomotionHorseAnimInstance::GetCurrentSpecialIdleIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "GetCurrentSpecialIdleIndex");

	Params::VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGroundLocomotionHorseAnimInstance.GetLocomotionPlayRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVGroundLocomotionHorseAnimInstance::GetLocomotionPlayRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseAnimInstance", "GetLocomotionPlayRate");

	Params::VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VGroundLocomotionHorseRiderAnimInstance.SetGroundLayerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVHorseRiderLocomotionStanding&InGroundLayerData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVGroundLocomotionHorseRiderAnimInstance::SetGroundLayerData(const struct FVHorseRiderLocomotionStanding& InGroundLayerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VGroundLocomotionHorseRiderAnimInstance", "SetGroundLayerData");

	Params::VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData Parms{};

	Parms.InGroundLayerData = std::move(InGroundLayerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHelpMenuViewModel.LoadHelpMenuViewModel
// (Final, Native, Public, BlueprintCallable)

void UVHelpMenuViewModel::LoadHelpMenuViewModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHelpMenuViewModel", "LoadHelpMenuViewModel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHelpMenuViewModel.SetViewMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHelpMenuViewModel::SetViewMode(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHelpMenuViewModel", "SetViewMode");

	Params::VHelpMenuViewModel_SetViewMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHelpMenuViewModel.UnloadHelpMenuViewModel
// (Final, Native, Public, BlueprintCallable)

void UVHelpMenuViewModel::UnloadHelpMenuViewModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHelpMenuViewModel", "UnloadHelpMenuViewModel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHelpMenuViewModel.GetTutorialData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UVHelpMenuViewModel::GetTutorialData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHelpMenuViewModel", "GetTutorialData");

	Params::VHelpMenuViewModel_GetTutorialData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHelpMenuViewModel.GetViewMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVHelpMenuViewModel::GetViewMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHelpMenuViewModel", "GetViewMode");

	Params::VHelpMenuViewModel_GetViewMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHitReactionKeyframeAnimInstance.ShouldPlayHitReaction
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHitReactionKeyframeAnimInstance::ShouldPlayHitReaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitReactionKeyframeAnimInstance", "ShouldPlayHitReaction");

	Params::VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHitReactionProceduralAnimInstance.InitHitReaction
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName                       HitBoneName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitDirection                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsArrow                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPowerAttack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSpell                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHitReactionProceduralAnimInstance::InitHitReaction(const class FName HitBoneName, const struct FVector& HitDirection, bool bIsArrow, bool bIsPowerAttack, bool bIsSpell)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitReactionProceduralAnimInstance", "InitHitReaction");

	Params::VHitReactionProceduralAnimInstance_InitHitReaction Parms{};

	Parms.HitBoneName = HitBoneName;
	Parms.HitDirection = std::move(HitDirection);
	Parms.bIsArrow = bIsArrow;
	Parms.bIsPowerAttack = bIsPowerAttack;
	Parms.bIsSpell = bIsSpell;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitReactionProceduralAnimInstance.OnHitReaction
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FVHitReactEvent&           HitReactEvent                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVHitReactionProceduralAnimInstance::OnHitReaction(const struct FVHitReactEvent& HitReactEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitReactionProceduralAnimInstance", "OnHitReaction");

	Params::VHitReactionProceduralAnimInstance_OnHitReaction Parms{};

	Parms.HitReactEvent = std::move(HitReactEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitReactionProceduralAnimInstance.OnPawnPhysicsSimulationStart
// (Final, Native, Protected)

void UVHitReactionProceduralAnimInstance::OnPawnPhysicsSimulationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitReactionProceduralAnimInstance", "OnPawnPhysicsSimulationStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHitReactionProceduralAnimInstance.OnPawnPhysicsSimulationStop
// (Final, Native, Protected)

void UVHitReactionProceduralAnimInstance::OnPawnPhysicsSimulationStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHitReactionProceduralAnimInstance", "OnPawnPhysicsSimulationStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.AcrobaticWaterJump
// (Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::AcrobaticWaterJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "AcrobaticWaterJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.DoSpecialJump
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   JumpHeightMultiplier                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HorizontalVelocityMultiplier                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::DoSpecialJump(float JumpHeightMultiplier, float HorizontalVelocityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "DoSpecialJump");

	Params::VPairedPawnMovementComponent_DoSpecialJump Parms{};

	Parms.JumpHeightMultiplier = JumpHeightMultiplier;
	Parms.HorizontalVelocityMultiplier = HorizontalVelocityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsRunning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsRunning");

	Params::VPairedPawnMovementComponent_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.OnHitFromSimulatingActor
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::OnHitFromSimulatingActor(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "OnHitFromSimulatingActor");

	Params::VPairedPawnMovementComponent_OnHitFromSimulatingActor Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.OnPawnOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::OnPawnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "OnPawnOverlapBegin");

	Params::VPairedPawnMovementComponent_OnPawnOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.OnPawnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::OnPawnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "OnPawnOverlapEnd");

	Params::VPairedPawnMovementComponent_OnPawnOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.OnSprintFatigueRegenDelayFinished
// (Final, Native, Protected)

void UVPairedPawnMovementComponent::OnSprintFatigueRegenDelayFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "OnSprintFatigueRegenDelayFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.ResetFallingTimer
// (Final, Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::ResetFallingTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "ResetFallingTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.ResetGlobalSpeedMultiplier
// (Final, Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::ResetGlobalSpeedMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "ResetGlobalSpeedMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.ResetOffsetMovementInput
// (Final, Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::ResetOffsetMovementInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "ResetOffsetMovementInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.ResetOverrideMaxSpeed
// (Final, Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::ResetOverrideMaxSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "ResetOverrideMaxSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetAllowWaterWalking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAllowWaterWalking                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetAllowWaterWalking(bool bNewAllowWaterWalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetAllowWaterWalking");

	Params::VPairedPawnMovementComponent_SetAllowWaterWalking Parms{};

	Parms.bNewAllowWaterWalking = bNewAllowWaterWalking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetGlobalSpeedMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMultiplier                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetGlobalSpeedMultiplier(float NewMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetGlobalSpeedMultiplier");

	Params::VPairedPawnMovementComponent_SetGlobalSpeedMultiplier Parms{};

	Parms.NewMultiplier = NewMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetIsMovementLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    LockMovement                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetIsMovementLocked(bool LockMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetIsMovementLocked");

	Params::VPairedPawnMovementComponent_SetIsMovementLocked Parms{};

	Parms.LockMovement = LockMovement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetOffsetMovementInput
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewOverrideMoveInput                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetOffsetMovementInput(const struct FVector& NewOverrideMoveInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetOffsetMovementInput");

	Params::VPairedPawnMovementComponent_SetOffsetMovementInput Parms{};

	Parms.NewOverrideMoveInput = std::move(NewOverrideMoveInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetOverrideMaxSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   fNewOverrideMaxSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetOverrideMaxSpeed(float fNewOverrideMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetOverrideMaxSpeed");

	Params::VPairedPawnMovementComponent_SetOverrideMaxSpeed Parms{};

	Parms.fNewOverrideMaxSpeed = fNewOverrideMaxSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetPreventSwimming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNeverSwim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetPreventSwimming(bool bNeverSwim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetPreventSwimming");

	Params::VPairedPawnMovementComponent_SetPreventSwimming Parms{};

	Parms.bNeverSwim = bNeverSwim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SetUseControllerRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUseControllerRotation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPairedPawnMovementComponent::SetUseControllerRotation(bool bUseControllerRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SetUseControllerRotation");

	Params::VPairedPawnMovementComponent_SetUseControllerRotation Parms{};

	Parms.bUseControllerRotation = bUseControllerRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.StartSprint
// (Final, Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::StartSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "StartSprint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.StopSprint
// (Final, Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::StopSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "StopSprint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.SwimmingJumpOutOfWater
// (Native, Public, BlueprintCallable)

void UVPairedPawnMovementComponent::SwimmingJumpOutOfWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "SwimmingJumpOutOfWater");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnMovementComponent.CanAcrobaticWaterJump
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::CanAcrobaticWaterJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "CanAcrobaticWaterJump");

	Params::VPairedPawnMovementComponent_CanAcrobaticWaterJump Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.CanJumpOutOfWater
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::CanJumpOutOfWater() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "CanJumpOutOfWater");

	Params::VPairedPawnMovementComponent_CanJumpOutOfWater Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.CanWaterWalk
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::CanWaterWalk() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "CanWaterWalk");

	Params::VPairedPawnMovementComponent_CanWaterWalk Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetCurrentGaitMaxSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetCurrentGaitMaxSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetCurrentGaitMaxSpeed");

	Params::VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetDistanceToUnderneathWaterPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetDistanceToUnderneathWaterPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetDistanceToUnderneathWaterPlane");

	Params::VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetFallingTimer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetFallingTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetFallingTimer");

	Params::VPairedPawnMovementComponent_GetFallingTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetGlobalSpeedMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetGlobalSpeedMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetGlobalSpeedMultiplier");

	Params::VPairedPawnMovementComponent_GetGlobalSpeedMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetImmersionDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetImmersionDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetImmersionDepth");

	Params::VPairedPawnMovementComponent_GetImmersionDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetIsSwimming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::GetIsSwimming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetIsSwimming");

	Params::VPairedPawnMovementComponent_GetIsSwimming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMaxFlySpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetMaxFlySpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMaxFlySpeed");

	Params::VPairedPawnMovementComponent_GetMaxFlySpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMaxGroundRunSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetMaxGroundRunSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMaxGroundRunSpeed");

	Params::VPairedPawnMovementComponent_GetMaxGroundRunSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMaxGroundSprintSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetMaxGroundSprintSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMaxGroundSprintSpeed");

	Params::VPairedPawnMovementComponent_GetMaxGroundSprintSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMaxGroundWalkSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetMaxGroundWalkSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMaxGroundWalkSpeed");

	Params::VPairedPawnMovementComponent_GetMaxGroundWalkSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMaxSwimRunSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetMaxSwimRunSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMaxSwimRunSpeed");

	Params::VPairedPawnMovementComponent_GetMaxSwimRunSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMaxSwimWalkSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnMovementComponent::GetMaxSwimWalkSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMaxSwimWalkSpeed");

	Params::VPairedPawnMovementComponent_GetMaxSwimWalkSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.GetMovementDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVMoveDirection                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVMoveDirection UVPairedPawnMovementComponent::GetMovementDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "GetMovementDirection");

	Params::VPairedPawnMovementComponent_GetMovementDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsAboveWater
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsAboveWater() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsAboveWater");

	Params::VPairedPawnMovementComponent_IsAboveWater Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsInSprintRegenDelay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsInSprintRegenDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsInSprintRegenDelay");

	Params::VPairedPawnMovementComponent_IsInSprintRegenDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsMovementLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsMovementLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsMovementLocked");

	Params::VPairedPawnMovementComponent_IsMovementLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsSprinting");

	Params::VPairedPawnMovementComponent_IsSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsTouchingWater
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsTouchingWater() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsTouchingWater");

	Params::VPairedPawnMovementComponent_IsTouchingWater Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsWaterWalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsWaterWalking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsWaterWalking");

	Params::VPairedPawnMovementComponent_IsWaterWalking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnMovementComponent.IsWaterWalkingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedPawnMovementComponent::IsWaterWalkingAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnMovementComponent", "IsWaterWalkingAllowed");

	Params::VPairedPawnMovementComponent_IsWaterWalkingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHorseMovementComponent.GetMaxGroundTrotSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHorseMovementComponent::GetMaxGroundTrotSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHorseMovementComponent", "GetMaxGroundTrotSpeed");

	Params::VHorseMovementComponent_GetMaxGroundTrotSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCreatureAnimInstance.OnNotTurnUpdate
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVTurnInPlaceCreatureAnimInstance::OnNotTurnUpdate(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCreatureAnimInstance", "OnNotTurnUpdate");

	Params::VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCreatureAnimInstance.OnTurnEnd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVTurnInPlaceCreatureAnimInstance::OnTurnEnd(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCreatureAnimInstance", "OnTurnEnd");

	Params::VTurnInPlaceCreatureAnimInstance_OnTurnEnd Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCreatureAnimInstance.OnTurnStart
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVTurnInPlaceCreatureAnimInstance::OnTurnStart(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCreatureAnimInstance", "OnTurnStart");

	Params::VTurnInPlaceCreatureAnimInstance_OnTurnStart Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCreatureAnimInstance.OnTurnUpdate
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVTurnInPlaceCreatureAnimInstance::OnTurnUpdate(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCreatureAnimInstance", "OnTurnUpdate");

	Params::VTurnInPlaceCreatureAnimInstance_OnTurnUpdate Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDBreathViewModel.SetBreathPercentage
// (Final, Native, Public, HasOutParams)
// Parameters:
// const float&                            NewBreathPercentage                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDBreathViewModel::SetBreathPercentage(const float& NewBreathPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDBreathViewModel", "SetBreathPercentage");

	Params::VHUDBreathViewModel_SetBreathPercentage Parms{};

	Parms.NewBreathPercentage = NewBreathPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDBreathViewModel.GetBreathPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UVHUDBreathViewModel::GetBreathPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDBreathViewModel", "GetBreathPercentage");

	Params::VHUDBreathViewModel_GetBreathPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDBreathViewModel.GetIsBreathBarBlinking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDBreathViewModel::GetIsBreathBarBlinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDBreathViewModel", "GetIsBreathBarBlinking");

	Params::VHUDBreathViewModel_GetIsBreathBarBlinking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.CheckForNewArea
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      AreaName                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::CheckForNewArea(const class FText& AreaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "CheckForNewArea");

	Params::VHUDMainViewModel_CheckForNewArea Parms{};

	Parms.AreaName = std::move(AreaName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.ComputeCompassMarkerXPosition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCompassIconMarker&        CompassIconMarker                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Heading                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ratio                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::ComputeCompassMarkerXPosition(const struct FCompassIconMarker& CompassIconMarker, float Heading, float Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "ComputeCompassMarkerXPosition");

	Params::VHUDMainViewModel_ComputeCompassMarkerXPosition Parms{};

	Parms.CompassIconMarker = std::move(CompassIconMarker);
	Parms.Heading = Heading;
	Parms.Ratio = Ratio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.ComputeRelativeMarkerXPosition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCompassIconMarker&        CompassIconMarker                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Heading                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::ComputeRelativeMarkerXPosition(const struct FCompassIconMarker& CompassIconMarker, float Heading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "ComputeRelativeMarkerXPosition");

	Params::VHUDMainViewModel_ComputeRelativeMarkerXPosition Parms{};

	Parms.CompassIconMarker = std::move(CompassIconMarker);
	Parms.Heading = Heading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.SetCompassIconMarkers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FCompassIconMarker>&IconMarkers                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDMainViewModel::SetCompassIconMarkers(const TArray<struct FCompassIconMarker>& IconMarkers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "SetCompassIconMarkers");

	Params::VHUDMainViewModel_SetCompassIconMarkers Parms{};

	Parms.IconMarkers = std::move(IconMarkers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDMainViewModel.SetHostileData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FHostileData>&      InHostileData                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDMainViewModel::SetHostileData(const TArray<struct FHostileData>& InHostileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "SetHostileData");

	Params::VHUDMainViewModel_SetHostileData Parms{};

	Parms.InHostileData = std::move(InHostileData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDMainViewModel.SetIsMenuMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDMainViewModel::SetIsMenuMode(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "SetIsMenuMode");

	Params::VHUDMainViewModel_SetIsMenuMode Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDMainViewModel.GetApparelData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernApparelData         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FModernApparelData UVHUDMainViewModel::GetApparelData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetApparelData");

	Params::VHUDMainViewModel_GetApparelData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetBrokenWeaponVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetBrokenWeaponVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetBrokenWeaponVisibility");

	Params::VHUDMainViewModel_GetBrokenWeaponVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetCanBeCast
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetCanBeCast() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetCanBeCast");

	Params::VHUDMainViewModel_GetCanBeCast Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetCompassDirectionValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetCompassDirectionValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetCompassDirectionValue");

	Params::VHUDMainViewModel_GetCompassDirectionValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetCompassIconMarkers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FCompassIconMarker> ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FCompassIconMarker> UVHUDMainViewModel::GetCompassIconMarkers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetCompassIconMarkers");

	Params::VHUDMainViewModel_GetCompassIconMarkers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetCurrentMagickaValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetCurrentMagickaValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetCurrentMagickaValue");

	Params::VHUDMainViewModel_GetCurrentMagickaValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetEffectsIcons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UTexture2D*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UTexture2D*> UVHUDMainViewModel::GetEffectsIcons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetEffectsIcons");

	Params::VHUDMainViewModel_GetEffectsIcons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetEffectsTimeLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<double>                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<double> UVHUDMainViewModel::GetEffectsTimeLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetEffectsTimeLeft");

	Params::VHUDMainViewModel_GetEffectsTimeLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetFatigueBarValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetFatigueBarValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetFatigueBarValue");

	Params::VHUDMainViewModel_GetFatigueBarValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetHealthBarValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetHealthBarValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetHealthBarValue");

	Params::VHUDMainViewModel_GetHealthBarValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetHostileData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FHostileData>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FHostileData> UVHUDMainViewModel::GetHostileData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetHostileData");

	Params::VHUDMainViewModel_GetHostileData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetIsHealthBarBlinking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetIsHealthBarBlinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetIsHealthBarBlinking");

	Params::VHUDMainViewModel_GetIsHealthBarBlinking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetIsMenuMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetIsMenuMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetIsMenuMode");

	Params::VHUDMainViewModel_GetIsMenuMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetIsTrespassing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetIsTrespassing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetIsTrespassing");

	Params::VHUDMainViewModel_GetIsTrespassing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetLevelUpIconVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetLevelUpIconVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetLevelUpIconVisibility");

	Params::VHUDMainViewModel_GetLevelUpIconVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetMagickaBarValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetMagickaBarValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetMagickaBarValue");

	Params::VHUDMainViewModel_GetMagickaBarValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetMaxMagickaValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetMaxMagickaValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetMaxMagickaValue");

	Params::VHUDMainViewModel_GetMaxMagickaValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetNewlyDiscovered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetNewlyDiscovered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetNewlyDiscovered");

	Params::VHUDMainViewModel_GetNewlyDiscovered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetOverencumberedVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetOverencumberedVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetOverencumberedVisibility");

	Params::VHUDMainViewModel_GetOverencumberedVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetRegionText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVHUDMainViewModel::GetRegionText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetRegionText");

	Params::VHUDMainViewModel_GetRegionText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetShouldDisplayBloodVignette
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetShouldDisplayBloodVignette() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetShouldDisplayBloodVignette");

	Params::VHUDMainViewModel_GetShouldDisplayBloodVignette Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetSkillProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernSkillProgression    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernSkillProgression UVHUDMainViewModel::GetSkillProgression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetSkillProgression");

	Params::VHUDMainViewModel_GetSkillProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetSpellIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UVHUDMainViewModel::GetSpellIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetSpellIcon");

	Params::VHUDMainViewModel_GetSpellIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetThirdPersonCompassOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetThirdPersonCompassOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetThirdPersonCompassOffset");

	Params::VHUDMainViewModel_GetThirdPersonCompassOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetWeaponAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetWeaponAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetWeaponAmmo");

	Params::VHUDMainViewModel_GetWeaponAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetWeaponChargeParams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FWeaponChargeParams        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FWeaponChargeParams UVHUDMainViewModel::GetWeaponChargeParams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetWeaponChargeParams");

	Params::VHUDMainViewModel_GetWeaponChargeParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetWeaponChargeVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::GetWeaponChargeVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetWeaponChargeVisibility");

	Params::VHUDMainViewModel_GetWeaponChargeVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetWeaponHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHUDMainViewModel::GetWeaponHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetWeaponHealth");

	Params::VHUDMainViewModel_GetWeaponHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetWeaponIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UVHUDMainViewModel::GetWeaponIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetWeaponIcon");

	Params::VHUDMainViewModel_GetWeaponIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.GetWeaponStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVHUDMainViewModel::GetWeaponStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "GetWeaponStatus");

	Params::VHUDMainViewModel_GetWeaponStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDMainViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDMainViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDMainViewModel", "ThisIsForPluginCompliance");

	Params::VHUDMainViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.SetEnemyHealthProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyReticleEnemyHealthProperties&NewEnemyHealthProperties                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetEnemyHealthProperties(const struct FLegacyReticleEnemyHealthProperties& NewEnemyHealthProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetEnemyHealthProperties");

	Params::VHUDReticleViewModel_SetEnemyHealthProperties Parms{};

	Parms.NewEnemyHealthProperties = std::move(NewEnemyHealthProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetIsMenuMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetIsMenuMode(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetIsMenuMode");

	Params::VHUDReticleViewModel_SetIsMenuMode Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetIsStealing
// (Final, Native, Public)
// Parameters:
// bool                                    bNewIsStealing                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetIsStealing(bool bNewIsStealing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetIsStealing");

	Params::VHUDReticleViewModel_SetIsStealing Parms{};

	Parms.bNewIsStealing = bNewIsStealing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetNPCName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewNpcName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetNPCName(const class FText& NewNpcName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetNPCName");

	Params::VHUDReticleViewModel_SetNPCName Parms{};

	Parms.NewNpcName = std::move(NewNpcName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetReticleIcon
// (Final, Native, Public)
// Parameters:
// ELegacyHudReticleIcon                   NewReticleIcon                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetReticleIcon(ELegacyHudReticleIcon NewReticleIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetReticleIcon");

	Params::VHUDReticleViewModel_SetReticleIcon Parms{};

	Parms.NewReticleIcon = NewReticleIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetReticleWeaponBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EModernReticleWeaponBehavior            newReticleWeaponBehavior                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetReticleWeaponBehavior(EModernReticleWeaponBehavior newReticleWeaponBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetReticleWeaponBehavior");

	Params::VHUDReticleViewModel_SetReticleWeaponBehavior Parms{};

	Parms.newReticleWeaponBehavior = newReticleWeaponBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetSneakDetectionLevel
// (Final, Native, Public)
// Parameters:
// const float                             Detection                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetSneakDetectionLevel(const float Detection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetSneakDetectionLevel");

	Params::VHUDReticleViewModel_SetSneakDetectionLevel Parms{};

	Parms.Detection = Detection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetSneakingProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyReticleSneakingProperties&NewSneakingProperties                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetSneakingProperties(const struct FLegacyReticleSneakingProperties& NewSneakingProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetSneakingProperties");

	Params::VHUDReticleViewModel_SetSneakingProperties Parms{};

	Parms.NewSneakingProperties = std::move(NewSneakingProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.SetWeaponTag
// (Final, Native, Public)
// Parameters:
// const struct FGameplayTag&              NewWeaponTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::SetWeaponTag(const struct FGameplayTag& NewWeaponTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "SetWeaponTag");

	Params::VHUDReticleViewModel_SetWeaponTag Parms{};

	Parms.NewWeaponTag = std::move(NewWeaponTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.TriggerHitCrosshairAnimation
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FPairedOblivionHitEvent&   HitEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVHUDReticleViewModel::TriggerHitCrosshairAnimation(const struct FPairedOblivionHitEvent& HitEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "TriggerHitCrosshairAnimation");

	Params::VHUDReticleViewModel_TriggerHitCrosshairAnimation Parms{};

	Parms.HitEvent = std::move(HitEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHUDReticleViewModel.GetEnemyHealthProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyReticleEnemyHealthPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyReticleEnemyHealthProperties UVHUDReticleViewModel::GetEnemyHealthProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetEnemyHealthProperties");

	Params::VHUDReticleViewModel_GetEnemyHealthProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetIsMenuMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDReticleViewModel::GetIsMenuMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetIsMenuMode");

	Params::VHUDReticleViewModel_GetIsMenuMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetIsStealing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHUDReticleViewModel::GetIsStealing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetIsStealing");

	Params::VHUDReticleViewModel_GetIsStealing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetNPCName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVHUDReticleViewModel::GetNPCName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetNPCName");

	Params::VHUDReticleViewModel_GetNPCName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetReticleIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyHudReticleIcon                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyHudReticleIcon UVHUDReticleViewModel::GetReticleIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetReticleIcon");

	Params::VHUDReticleViewModel_GetReticleIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetReticleWeaponBehavior
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EModernReticleWeaponBehavior      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EModernReticleWeaponBehavior UVHUDReticleViewModel::GetReticleWeaponBehavior() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetReticleWeaponBehavior");

	Params::VHUDReticleViewModel_GetReticleWeaponBehavior Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetSneakDetectionLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UVHUDReticleViewModel::GetSneakDetectionLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetSneakDetectionLevel");

	Params::VHUDReticleViewModel_GetSneakDetectionLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetSneakingLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UVHUDReticleViewModel::GetSneakingLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetSneakingLevel");

	Params::VHUDReticleViewModel_GetSneakingLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetSneakingProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVHUDReticleViewModel::GetSneakingProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetSneakingProperties");

	Params::VHUDReticleViewModel_GetSneakingProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHUDReticleViewModel.GetWeaponTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVHUDReticleViewModel::GetWeaponTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHUDReticleViewModel", "GetWeaponTag");

	Params::VHUDReticleViewModel_GetWeaponTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.GetEmotionBlendValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHumanoidHeadCharacterAnimInstance::GetEmotionBlendValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "GetEmotionBlendValue");

	Params::VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.GetEyeHeadingValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHumanoidHeadCharacterAnimInstance::GetEyeHeadingValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "GetEyeHeadingValue");

	Params::VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.GetEyePitchValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVHumanoidHeadCharacterAnimInstance::GetEyePitchValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "GetEyePitchValue");

	Params::VHumanoidHeadCharacterAnimInstance_GetEyePitchValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsAngry
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsAngry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsAngry");

	Params::VHumanoidHeadCharacterAnimInstance_IsAngry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsConscious
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsConscious() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsConscious");

	Params::VHumanoidHeadCharacterAnimInstance_IsConscious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsDisgusted
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsDisgusted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsDisgusted");

	Params::VHumanoidHeadCharacterAnimInstance_IsDisgusted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsFearful
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsFearful() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsFearful");

	Params::VHumanoidHeadCharacterAnimInstance_IsFearful Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsHappy
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsHappy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsHappy");

	Params::VHumanoidHeadCharacterAnimInstance_IsHappy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsNeutral
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsNeutral() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsNeutral");

	Params::VHumanoidHeadCharacterAnimInstance_IsNeutral Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsSad
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsSad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsSad");

	Params::VHumanoidHeadCharacterAnimInstance_IsSad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadCharacterAnimInstance.IsSurprised
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVHumanoidHeadCharacterAnimInstance::IsSurprised() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadCharacterAnimInstance", "IsSurprised");

	Params::VHumanoidHeadCharacterAnimInstance_IsSurprised Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VHumanoidHeadComponent.InstantiateHairComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVCharacterPhenotypeData*         Phenotype                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHumanoidHeadComponent::InstantiateHairComponents(class UVCharacterPhenotypeData* Phenotype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadComponent", "InstantiateHairComponents");

	Params::VHumanoidHeadComponent_InstantiateHairComponents Parms{};

	Parms.Phenotype = Phenotype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHumanoidHeadComponent.SetVisibilityOfFacialHair
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVFacialHairType                        FacialHair                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsHairVisible                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHumanoidHeadComponent::SetVisibilityOfFacialHair(EVFacialHairType FacialHair, bool bIsHairVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadComponent", "SetVisibilityOfFacialHair");

	Params::VHumanoidHeadComponent_SetVisibilityOfFacialHair Parms{};

	Parms.FacialHair = FacialHair;
	Parms.bIsHairVisible = bIsHairVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHumanoidHeadComponent.ShouldHideHair
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShouldHideHair                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInHideFacialHair                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVHumanoidHeadComponent::ShouldHideHair(bool bInShouldHideHair, bool bInHideFacialHair)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadComponent", "ShouldHideHair");

	Params::VHumanoidHeadComponent_ShouldHideHair Parms{};

	Parms.bInShouldHideHair = bInShouldHideHair;
	Parms.bInHideFacialHair = bInHideFacialHair;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VHumanoidHeadComponent.GetEmotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDialogueEmotion                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDialogueEmotion UVHumanoidHeadComponent::GetEmotion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VHumanoidHeadComponent", "GetEmotion");

	Params::VHumanoidHeadComponent_GetEmotion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInAirLocomotionHorseAnimInstance.OnStartJump
// (Final, Native, Protected, BlueprintCallable)

void UVInAirLocomotionHorseAnimInstance::OnStartJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseAnimInstance", "OnStartJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInAirLocomotionHorseAnimInstance.OnStartJumpEnd
// (Final, Native, Protected, BlueprintCallable)

void UVInAirLocomotionHorseAnimInstance::OnStartJumpEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseAnimInstance", "OnStartJumpEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInAirLocomotionHorseAnimInstance.IsFalling
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInAirLocomotionHorseAnimInstance::IsFalling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseAnimInstance", "IsFalling");

	Params::VInAirLocomotionHorseAnimInstance_IsFalling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInAirLocomotionHorseAnimInstance.IsJumping
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInAirLocomotionHorseAnimInstance::IsJumping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseAnimInstance", "IsJumping");

	Params::VInAirLocomotionHorseAnimInstance_IsJumping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInAirLocomotionHorseAnimInstance.IsLanding
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInAirLocomotionHorseAnimInstance::IsLanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseAnimInstance", "IsLanding");

	Params::VInAirLocomotionHorseAnimInstance_IsLanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInAirLocomotionHorseAnimInstance.IsRearing
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVInAirLocomotionHorseAnimInstance::IsRearing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseAnimInstance", "IsRearing");

	Params::VInAirLocomotionHorseAnimInstance_IsRearing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInAirLocomotionHorseRiderAnimInstance.SetJumpLayerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVHorseRiderLocomotionJump&InJumpLayerData                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UVInAirLocomotionHorseRiderAnimInstance::SetJumpLayerData(const struct FVHorseRiderLocomotionJump& InJumpLayerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInAirLocomotionHorseRiderAnimInstance", "SetJumpLayerData");

	Params::VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData Parms{};

	Parms.InJumpLayerData = std::move(InJumpLayerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryCharacterAnimInstance.OnEquippedWeaponChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   WeaponType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasShield                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasTorch                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVInventoryCharacterAnimInstance::OnEquippedWeaponChanged(int32 WeaponType, bool bHasShield, bool bHasTorch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryCharacterAnimInstance", "OnEquippedWeaponChanged");

	Params::VInventoryCharacterAnimInstance_OnEquippedWeaponChanged Parms{};

	Parms.WeaponType = WeaponType;
	Parms.bHasShield = bHasShield;
	Parms.bHasTorch = bHasTorch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryCharacterAnimInstance.SetCombatPose
// (Final, Native, Public)

void UVInventoryCharacterAnimInstance::SetCombatPose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryCharacterAnimInstance", "SetCombatPose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalInventoryMenuItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FOriginalInventoryMenuItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalInventoryMenuItem::SetProperties(const struct FOriginalInventoryMenuItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuItem", "SetProperties");

	Params::VOriginalInventoryMenuItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalInventoryMenuItem.GetInventoryIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVOriginalInventoryMenuItem::GetInventoryIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuItem", "GetInventoryIndex");

	Params::VOriginalInventoryMenuItem_GetInventoryIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalInventoryMenuItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FOriginalInventoryMenuItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FOriginalInventoryMenuItemProperties UVOriginalInventoryMenuItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuItem", "GetProperties");

	Params::VOriginalInventoryMenuItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenuSkillItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuSkillItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyStatsMenuSkillItem::SetProperties(const struct FLegacyStatsMenuSkillItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuSkillItem", "SetProperties");

	Params::VLegacyStatsMenuSkillItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyStatsMenuSkillItem.UpdateProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuSkillItemUpdatableProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyStatsMenuSkillItem::UpdateProperties(const struct FLegacyStatsMenuSkillItemUpdatableProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuSkillItem", "UpdateProperties");

	Params::VLegacyStatsMenuSkillItem_UpdateProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyStatsMenuSkillItem.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyStatsMenuSkillItem::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuSkillItem", "GetIndex");

	Params::VLegacyStatsMenuSkillItem_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenuSkillItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuSkillItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuSkillItemProperties UVLegacyStatsMenuSkillItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuSkillItem", "GetProperties");

	Params::VLegacyStatsMenuSkillItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VInventoryPlayerCharacter.ForceLOD0OnCharacter
// (Final, Native, Public, BlueprintCallable)

void AVInventoryPlayerCharacter::ForceLOD0OnCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryPlayerCharacter", "ForceLOD0OnCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryPlayerCharacter.OnAppearanceRefresh
// (Final, Native, Public)
// Parameters:
// const class UVCharacterPhenotypeData*   Preset                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVInventoryPlayerCharacter::OnAppearanceRefresh(const class UVCharacterPhenotypeData* Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryPlayerCharacter", "OnAppearanceRefresh");

	Params::VInventoryPlayerCharacter_OnAppearanceRefresh Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryPlayerCharacter.OnAppearanceRefreshedEnded
// (Final, Native, Protected)

void AVInventoryPlayerCharacter::OnAppearanceRefreshedEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryPlayerCharacter", "OnAppearanceRefreshedEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryPlayerCharacter.SetInventoryPlayerEquipment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBipedModularBodySlot                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTESForm*                   form                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVInventoryPlayerCharacter::SetInventoryPlayerEquipment(EBipedModularBodySlot Slot, const class UTESForm* form)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryPlayerCharacter", "SetInventoryPlayerEquipment");

	Params::VInventoryPlayerCharacter_SetInventoryPlayerEquipment Parms{};

	Parms.Slot = Slot;
	Parms.form = form;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VInventoryPlayerCharacter.SetLightChannelOnCharacter
// (Final, Native, Public, BlueprintCallable)

void AVInventoryPlayerCharacter::SetLightChannelOnCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VInventoryPlayerCharacter", "SetLightChannelOnCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetArmorPart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOriginalInventoryMenuArmorClothPart    NewArmorPart                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetArmorPart(EOriginalInventoryMenuArmorClothPart NewArmorPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetArmorPart");

	Params::VItemDetailsViewModel_SetArmorPart Parms{};

	Parms.NewArmorPart = NewArmorPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetBookType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOriginalInventoryMenuBookType          NewBookType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetBookType(EOriginalInventoryMenuBookType NewBookType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetBookType");

	Params::VItemDetailsViewModel_SetBookType Parms{};

	Parms.NewBookType = NewBookType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetClothPart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOriginalInventoryMenuArmorClothPart    NewClothPart                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetClothPart(EOriginalInventoryMenuArmorClothPart NewClothPart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetClothPart");

	Params::VItemDetailsViewModel_SetClothPart Parms{};

	Parms.NewClothPart = NewClothPart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetHoveredObjectTESForm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTESForm*                         NewForm                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetHoveredObjectTESForm(class UTESForm* NewForm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetHoveredObjectTESForm");

	Params::VItemDetailsViewModel_SetHoveredObjectTESForm Parms{};

	Parms.NewForm = NewForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetIsAlchemyToolUsable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsUsable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetIsAlchemyToolUsable(bool bNewIsUsable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetIsAlchemyToolUsable");

	Params::VItemDetailsViewModel_SetIsAlchemyToolUsable Parms{};

	Parms.bNewIsUsable = bNewIsUsable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetIsLightArmor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsLightArmor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetIsLightArmor(bool bNewIsLightArmor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetIsLightArmor");

	Params::VItemDetailsViewModel_SetIsLightArmor Parms{};

	Parms.bNewIsLightArmor = bNewIsLightArmor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetIsRepairHammerUsable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsUsable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetIsRepairHammerUsable(bool bNewIsUsable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetIsRepairHammerUsable");

	Params::VItemDetailsViewModel_SetIsRepairHammerUsable Parms{};

	Parms.bNewIsUsable = bNewIsUsable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetIsSoulgemUsable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsUsable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetIsSoulgemUsable(bool bNewIsUsable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetIsSoulgemUsable");

	Params::VItemDetailsViewModel_SetIsSoulgemUsable Parms{};

	Parms.bNewIsUsable = bNewIsUsable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetIsStoneUsable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsUsable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetIsStoneUsable(bool bNewIsUsable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetIsStoneUsable");

	Params::VItemDetailsViewModel_SetIsStoneUsable Parms{};

	Parms.bNewIsUsable = bNewIsUsable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetItemSkillInformations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FOriginalInventoryMenuItemSkillInformations&NewSkillInformations                                   (ConstParm, Parm, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetItemSkillInformations(const struct FOriginalInventoryMenuItemSkillInformations& NewSkillInformations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetItemSkillInformations");

	Params::VItemDetailsViewModel_SetItemSkillInformations Parms{};

	Parms.NewSkillInformations = std::move(NewSkillInformations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetPotionType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOriginalInventoryMenuPotionType        NewPotionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetPotionType(EOriginalInventoryMenuPotionType NewPotionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetPotionType");

	Params::VItemDetailsViewModel_SetPotionType Parms{};

	Parms.NewPotionType = NewPotionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetSoulgemCapacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSoulgemCapacity                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetSoulgemCapacity(int32 NewSoulgemCapacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetSoulgemCapacity");

	Params::VItemDetailsViewModel_SetSoulgemCapacity Parms{};

	Parms.NewSoulgemCapacity = NewSoulgemCapacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetSoulgemLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewSoulgemLevel                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetSoulgemLevel(const class FText& NewSoulgemLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetSoulgemLevel");

	Params::VItemDetailsViewModel_SetSoulgemLevel Parms{};

	Parms.NewSoulgemLevel = std::move(NewSoulgemLevel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetSoulgemMaxCapacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSoulgemMaxCapacity                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetSoulgemMaxCapacity(int32 NewSoulgemMaxCapacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetSoulgemMaxCapacity");

	Params::VItemDetailsViewModel_SetSoulgemMaxCapacity Parms{};

	Parms.NewSoulgemMaxCapacity = NewSoulgemMaxCapacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetWeaponCharge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewWeaponCharge                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetWeaponCharge(int32 NewWeaponCharge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetWeaponCharge");

	Params::VItemDetailsViewModel_SetWeaponCharge Parms{};

	Parms.NewWeaponCharge = NewWeaponCharge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetWeaponMaxCharge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewWeaponMaxCharge                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetWeaponMaxCharge(int32 NewWeaponMaxCharge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetWeaponMaxCharge");

	Params::VItemDetailsViewModel_SetWeaponMaxCharge Parms{};

	Parms.NewWeaponMaxCharge = NewWeaponMaxCharge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.SetWeaponUse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewWeaponUse                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVItemDetailsViewModel::SetWeaponUse(int32 NewWeaponUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "SetWeaponUse");

	Params::VItemDetailsViewModel_SetWeaponUse Parms{};

	Parms.NewWeaponUse = NewWeaponUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemDetailsViewModel.GetArmorPart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuArmorClothPart    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuArmorClothPart UVItemDetailsViewModel::GetArmorPart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetArmorPart");

	Params::VItemDetailsViewModel_GetArmorPart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetBookType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuBookType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuBookType UVItemDetailsViewModel::GetBookType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetBookType");

	Params::VItemDetailsViewModel_GetBookType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetClothPart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuArmorClothPart    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuArmorClothPart UVItemDetailsViewModel::GetClothPart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetClothPart");

	Params::VItemDetailsViewModel_GetClothPart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetHoveredObjectTESForm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UTESForm*                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTESForm* UVItemDetailsViewModel::GetHoveredObjectTESForm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetHoveredObjectTESForm");

	Params::VItemDetailsViewModel_GetHoveredObjectTESForm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetHoveredWeaponDescriptionText
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText&                      DescriptionTextFormat                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<struct FGameplayTag, class FText>&WeaponSizeToTextMap                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<struct FGameplayTag, class FText>&WeaponTypeToTextMap                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<struct FGameplayTag, class FText>&WeaponSkillToTextMap                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVItemDetailsViewModel::GetHoveredWeaponDescriptionText(const class FText& DescriptionTextFormat, const TMap<struct FGameplayTag, class FText>& WeaponSizeToTextMap, const TMap<struct FGameplayTag, class FText>& WeaponTypeToTextMap, const TMap<struct FGameplayTag, class FText>& WeaponSkillToTextMap) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetHoveredWeaponDescriptionText");

	Params::VItemDetailsViewModel_GetHoveredWeaponDescriptionText Parms{};

	Parms.DescriptionTextFormat = std::move(DescriptionTextFormat);
	Parms.WeaponSizeToTextMap = std::move(WeaponSizeToTextMap);
	Parms.WeaponTypeToTextMap = std::move(WeaponTypeToTextMap);
	Parms.WeaponSkillToTextMap = std::move(WeaponSkillToTextMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetIsAlchemyToolUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVItemDetailsViewModel::GetIsAlchemyToolUsable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetIsAlchemyToolUsable");

	Params::VItemDetailsViewModel_GetIsAlchemyToolUsable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetIsLightArmor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVItemDetailsViewModel::GetIsLightArmor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetIsLightArmor");

	Params::VItemDetailsViewModel_GetIsLightArmor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetIsRepairHammerUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVItemDetailsViewModel::GetIsRepairHammerUsable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetIsRepairHammerUsable");

	Params::VItemDetailsViewModel_GetIsRepairHammerUsable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetIsSoulgemUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVItemDetailsViewModel::GetIsSoulgemUsable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetIsSoulgemUsable");

	Params::VItemDetailsViewModel_GetIsSoulgemUsable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetIsStoneUsable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVItemDetailsViewModel::GetIsStoneUsable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetIsStoneUsable");

	Params::VItemDetailsViewModel_GetIsStoneUsable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetItemSkillInformations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FOriginalInventoryMenuItemSkillInformationsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const struct FOriginalInventoryMenuItemSkillInformations UVItemDetailsViewModel::GetItemSkillInformations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetItemSkillInformations");

	Params::VItemDetailsViewModel_GetItemSkillInformations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetPotionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuPotionType        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuPotionType UVItemDetailsViewModel::GetPotionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetPotionType");

	Params::VItemDetailsViewModel_GetPotionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetSoulgemCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVItemDetailsViewModel::GetSoulgemCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetSoulgemCapacity");

	Params::VItemDetailsViewModel_GetSoulgemCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetSoulgemLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVItemDetailsViewModel::GetSoulgemLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetSoulgemLevel");

	Params::VItemDetailsViewModel_GetSoulgemLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetSoulgemMaxCapacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVItemDetailsViewModel::GetSoulgemMaxCapacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetSoulgemMaxCapacity");

	Params::VItemDetailsViewModel_GetSoulgemMaxCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetWeaponCharge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVItemDetailsViewModel::GetWeaponCharge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetWeaponCharge");

	Params::VItemDetailsViewModel_GetWeaponCharge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetWeaponMaxCharge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVItemDetailsViewModel::GetWeaponMaxCharge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetWeaponMaxCharge");

	Params::VItemDetailsViewModel_GetWeaponMaxCharge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemDetailsViewModel.GetWeaponUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVItemDetailsViewModel::GetWeaponUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemDetailsViewModel", "GetWeaponUse");

	Params::VItemDetailsViewModel_GetWeaponUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.RegisterSendClickedOnCancel
// (Final, Native, Public, BlueprintCallable)

void UVSleepWaitMenuViewModel::RegisterSendClickedOnCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "RegisterSendClickedOnCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.RegisterSendClickedOnWait
// (Final, Native, Public, BlueprintCallable)

void UVSleepWaitMenuViewModel::RegisterSendClickedOnWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "RegisterSendClickedOnWait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.RegisterSendTimeToWait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewTimeToWait                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::RegisterSendTimeToWait(float NewTimeToWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "RegisterSendTimeToWait");

	Params::VSleepWaitMenuViewModel_RegisterSendTimeToWait Parms{};

	Parms.NewTimeToWait = NewTimeToWait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.SetIsWaitingInProgress
// (Final, Native, Public)
// Parameters:
// bool                                    bNewIsWaitingInProgress                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::SetIsWaitingInProgress(bool bNewIsWaitingInProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "SetIsWaitingInProgress");

	Params::VSleepWaitMenuViewModel_SetIsWaitingInProgress Parms{};

	Parms.bNewIsWaitingInProgress = bNewIsWaitingInProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.SetScrollbarProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyScrollbarValueProperties&NewScrollbarProperties                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::SetScrollbarProperties(const struct FLegacyScrollbarValueProperties& NewScrollbarProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "SetScrollbarProperties");

	Params::VSleepWaitMenuViewModel_SetScrollbarProperties Parms{};

	Parms.NewScrollbarProperties = std::move(NewScrollbarProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.SetShouldFadeOut
// (Final, Native, Public)
// Parameters:
// bool                                    bInShouldFadeOut                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::SetShouldFadeOut(bool bInShouldFadeOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "SetShouldFadeOut");

	Params::VSleepWaitMenuViewModel_SetShouldFadeOut Parms{};

	Parms.bInShouldFadeOut = bInShouldFadeOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.SetSleepWaitGameInfo
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacySleepWaitMenuGameInfo&NewSleepWaitGameInfo                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::SetSleepWaitGameInfo(const struct FLegacySleepWaitMenuGameInfo& NewSleepWaitGameInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "SetSleepWaitGameInfo");

	Params::VSleepWaitMenuViewModel_SetSleepWaitGameInfo Parms{};

	Parms.NewSleepWaitGameInfo = std::move(NewSleepWaitGameInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.SetTimeToWait
// (Final, Native, Public)
// Parameters:
// float                                   NewTimeToWait                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::SetTimeToWait(float NewTimeToWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "SetTimeToWait");

	Params::VSleepWaitMenuViewModel_SetTimeToWait Parms{};

	Parms.NewTimeToWait = NewTimeToWait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.SetVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSleepWaitMenuViewModel::SetVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "SetVisibility");

	Params::VSleepWaitMenuViewModel_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSleepWaitMenuViewModel.GetIsSleep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSleepWaitMenuViewModel::GetIsSleep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "GetIsSleep");

	Params::VSleepWaitMenuViewModel_GetIsSleep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.GetIsWaitingInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSleepWaitMenuViewModel::GetIsWaitingInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "GetIsWaitingInProgress");

	Params::VSleepWaitMenuViewModel_GetIsWaitingInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.GetScrollbarProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyScrollbarValueProperties  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLegacyScrollbarValueProperties UVSleepWaitMenuViewModel::GetScrollbarProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "GetScrollbarProperties");

	Params::VSleepWaitMenuViewModel_GetScrollbarProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.GetShouldFadeOut
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSleepWaitMenuViewModel::GetShouldFadeOut() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "GetShouldFadeOut");

	Params::VSleepWaitMenuViewModel_GetShouldFadeOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.GetSleepWaitGameInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacySleepWaitMenuGameInfo     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacySleepWaitMenuGameInfo UVSleepWaitMenuViewModel::GetSleepWaitGameInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "GetSleepWaitGameInfo");

	Params::VSleepWaitMenuViewModel_GetSleepWaitGameInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.GetTimeToWait
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVSleepWaitMenuViewModel::GetTimeToWait() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "GetTimeToWait");

	Params::VSleepWaitMenuViewModel_GetTimeToWait Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSleepWaitMenuViewModel.IsVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSleepWaitMenuViewModel::IsVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSleepWaitMenuViewModel", "IsVisible");

	Params::VSleepWaitMenuViewModel_IsVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalInventoryMenuIngredientEffects.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FOriginalInventoryMenuIngredientEffects&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalInventoryMenuIngredientEffects::SetProperties(const struct FOriginalInventoryMenuIngredientEffects& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuIngredientEffects", "SetProperties");

	Params::VOriginalInventoryMenuIngredientEffects_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalInventoryMenuIngredientEffects.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FOriginalInventoryMenuIngredientEffectsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FOriginalInventoryMenuIngredientEffects UVOriginalInventoryMenuIngredientEffects::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalInventoryMenuIngredientEffects", "GetProperties");

	Params::VOriginalInventoryMenuIngredientEffects_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemEffectsViewModel.SetIngredientEffects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FOriginalInventoryMenuIngredientEffects>&NewIngredientEffects                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVItemEffectsViewModel::SetIngredientEffects(const TArray<struct FOriginalInventoryMenuIngredientEffects>& NewIngredientEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemEffectsViewModel", "SetIngredientEffects");

	Params::VItemEffectsViewModel_SetIngredientEffects Parms{};

	Parms.NewIngredientEffects = std::move(NewIngredientEffects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemEffectsViewModel.SetItemEffects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemEffects>&NewItemEffects                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVItemEffectsViewModel::SetItemEffects(const TArray<struct FOriginalInventoryMenuItemEffects>& NewItemEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemEffectsViewModel", "SetItemEffects");

	Params::VItemEffectsViewModel_SetItemEffects Parms{};

	Parms.NewItemEffects = std::move(NewItemEffects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemEffectsViewModel.SetSigilstoneEffects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FModernEffectItemData>&NewSigilstoneEffects                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVItemEffectsViewModel::SetSigilstoneEffects(const TArray<struct FModernEffectItemData>& NewSigilstoneEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemEffectsViewModel", "SetSigilstoneEffects");

	Params::VItemEffectsViewModel_SetSigilstoneEffects Parms{};

	Parms.NewSigilstoneEffects = std::move(NewSigilstoneEffects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VItemEffectsViewModel.GetIngredientEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalInventoryMenuIngredientEffects>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalInventoryMenuIngredientEffects> UVItemEffectsViewModel::GetIngredientEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemEffectsViewModel", "GetIngredientEffects");

	Params::VItemEffectsViewModel_GetIngredientEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemEffectsViewModel.GetItemEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FOriginalInventoryMenuItemEffects>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FOriginalInventoryMenuItemEffects> UVItemEffectsViewModel::GetItemEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemEffectsViewModel", "GetItemEffects");

	Params::VItemEffectsViewModel_GetItemEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VItemEffectsViewModel.GetSigilstoneEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FModernEffectItemData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModernEffectItemData> UVItemEffectsViewModel::GetSigilstoneEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VItemEffectsViewModel", "GetSigilstoneEffects");

	Params::VItemEffectsViewModel_GetSigilstoneEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyAudioMenu.SetEffectVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyAudioMenu::SetEffectVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "SetEffectVolume");

	Params::VLegacyAudioMenu_SetEffectVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.SetFootVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyAudioMenu::SetFootVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "SetFootVolume");

	Params::VLegacyAudioMenu_SetFootVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.SetMasterVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyAudioMenu::SetMasterVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "SetMasterVolume");

	Params::VLegacyAudioMenu_SetMasterVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.SetMusicVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyAudioMenu::SetMusicVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "SetMusicVolume");

	Params::VLegacyAudioMenu_SetMusicVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyAudioSettings&      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyAudioMenu::SetSettings(const struct FLegacyAudioSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "SetSettings");

	Params::VLegacyAudioMenu_SetSettings Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.SetVoiceVolume
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyAudioMenu::SetVoiceVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "SetVoiceVolume");

	Params::VLegacyAudioMenu_SetVoiceVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.TriggerOnDefaultClicked
// (Final, Native, Public, BlueprintCallable)

void UVLegacyAudioMenu::TriggerOnDefaultClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "TriggerOnDefaultClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.TriggerOnReturnClicked
// (Final, Native, Public, BlueprintCallable)

void UVLegacyAudioMenu::TriggerOnReturnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "TriggerOnReturnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyAudioMenu.GetEffectVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyAudioMenu::GetEffectVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "GetEffectVolume");

	Params::VLegacyAudioMenu_GetEffectVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyAudioMenu.GetFootVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyAudioMenu::GetFootVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "GetFootVolume");

	Params::VLegacyAudioMenu_GetFootVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyAudioMenu.GetMasterVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyAudioMenu::GetMasterVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "GetMasterVolume");

	Params::VLegacyAudioMenu_GetMasterVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyAudioMenu.GetMusicVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyAudioMenu::GetMusicVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "GetMusicVolume");

	Params::VLegacyAudioMenu_GetMusicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyAudioMenu.GetSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyAudioSettings       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyAudioSettings UVLegacyAudioMenu::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "GetSettings");

	Params::VLegacyAudioMenu_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyAudioMenu.GetVoiceVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyAudioMenu::GetVoiceVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyAudioMenu", "GetVoiceVolume");

	Params::VLegacyAudioMenu_GetVoiceVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyBookMenu.ComputeNbLinePerPages
// (Final, Native, Public, BlueprintCallable)

void UVLegacyBookMenu::ComputeNbLinePerPages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyBookMenu", "ComputeNbLinePerPages");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyBookMenu.RemoveEmptyLinesAtTheEndOfTheList
// (Final, Native, Public, BlueprintCallable)

void UVLegacyBookMenu::RemoveEmptyLinesAtTheEndOfTheList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyBookMenu", "RemoveEmptyLinesAtTheEndOfTheList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyBookMenu.RemoveEmptyLinesBeforePageBreaks
// (Final, Native, Public, BlueprintCallable)

void UVLegacyBookMenu::RemoveEmptyLinesBeforePageBreaks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyBookMenu", "RemoveEmptyLinesBeforePageBreaks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyBookMenu.ResetContainers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEmptyContainers                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyBookMenu::ResetContainers(bool bEmptyContainers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyBookMenu", "ResetContainers");

	Params::VLegacyBookMenu_ResetContainers Parms{};

	Parms.bEmptyContainers = bEmptyContainers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyBookMenu.SplitTextIntoTextLines
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyBookStylizedText>&Texts                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyBookMenu::SplitTextIntoTextLines(const TArray<struct FLegacyBookStylizedText>& Texts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyBookMenu", "SplitTextIntoTextLines");

	Params::VLegacyBookMenu_SplitTextIntoTextLines Parms{};

	Parms.Texts = std::move(Texts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSettingsPageInterface.DoesAllowNavigation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVSettingsPageInterface::DoesAllowNavigation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VSettingsPageInterface", "DoesAllowNavigation");

	Params::VSettingsPageInterface_DoesAllowNavigation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMappingEntry.CaptureInput
// (Final, Native, Public, BlueprintCallable)

void UVLegacyControlsMappingEntry::CaptureInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "CaptureInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMappingEntry.OnIsEntryEnabledUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::OnIsEntryEnabledUpdated(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "OnIsEntryEnabledUpdated");

	Params::VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMappingEntry.OnItemObjectSet
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ListItemObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::OnItemObjectSet(class UObject* ListItemObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "OnItemObjectSet");

	Params::VLegacyControlsMappingEntry_OnItemObjectSet Parms{};

	Parms.ListItemObject = ListItemObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMappingEntry.OnLabelUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::OnLabelUpdated(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "OnLabelUpdated");

	Params::VLegacyControlsMappingEntry_OnLabelUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMappingEntry.OnMappingUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::OnMappingUpdated(const struct FKey& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "OnMappingUpdated");

	Params::VLegacyControlsMappingEntry_OnMappingUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMappingEntry.SetDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EFLegacyControlsDevice            Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::SetDevice(const EFLegacyControlsDevice Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "SetDevice");

	Params::VLegacyControlsMappingEntry_SetDevice Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMappingEntry.SetEntryEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::SetEntryEnabled(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "SetEntryEnabled");

	Params::VLegacyControlsMappingEntry_SetEntryEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMappingEntry.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::SetLabel(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "SetLabel");

	Params::VLegacyControlsMappingEntry_SetLabel Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMappingEntry.SetMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMappingEntry::SetMapping(const struct FKey& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "SetMapping");

	Params::VLegacyControlsMappingEntry_SetMapping Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMappingEntry.GetDevice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFLegacyControlsDevice                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFLegacyControlsDevice UVLegacyControlsMappingEntry::GetDevice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "GetDevice");

	Params::VLegacyControlsMappingEntry_GetDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMappingEntry.GetEntryEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyControlsMappingEntry::GetEntryEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "GetEntryEnabled");

	Params::VLegacyControlsMappingEntry_GetEntryEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMappingEntry.GetLabel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyControlsMappingEntry::GetLabel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "GetLabel");

	Params::VLegacyControlsMappingEntry_GetLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMappingEntry.GetMapping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UVLegacyControlsMappingEntry::GetMapping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMappingEntry", "GetMapping");

	Params::VLegacyControlsMappingEntry_GetMapping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsInputMapping.Set
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyControlsInputMapping&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EFLegacyControlsDevice                  InDevice                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsInputMapping::Set(const struct FLegacyControlsInputMapping& Value, EFLegacyControlsDevice InDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsInputMapping", "Set");

	Params::VLegacyControlsInputMapping_Set Parms{};

	Parms.Value = std::move(Value);
	Parms.InDevice = InDevice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsInputMapping.SetMapping
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsInputMapping::SetMapping(const struct FKey& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsInputMapping", "SetMapping");

	Params::VLegacyControlsInputMapping_SetMapping Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsInputMapping.GetAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyControlsInputMapping::GetAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsInputMapping", "GetAction");

	Params::VLegacyControlsInputMapping_GetAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsInputMapping.GetDevice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFLegacyControlsDevice                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFLegacyControlsDevice UVLegacyControlsInputMapping::GetDevice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsInputMapping", "GetDevice");

	Params::VLegacyControlsInputMapping_GetDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsInputMapping.GetMapping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UVLegacyControlsInputMapping::GetMapping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsInputMapping", "GetMapping");

	Params::VLegacyControlsInputMapping_GetMapping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMenu.OnDeviceMappingsUpdatedInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FLegacyControlsInputMapping>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::OnDeviceMappingsUpdatedInternal(const TArray<struct FLegacyControlsInputMapping>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "OnDeviceMappingsUpdatedInternal");

	Params::VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMenu.OnIsJoystickDetectedUpdatedInternal
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::OnIsJoystickDetectedUpdatedInternal(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "OnIsJoystickDetectedUpdatedInternal");

	Params::VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMenu.OnSettingsUpdatedInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLegacyControlsSettings&   Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::OnSettingsUpdatedInternal(const struct FLegacyControlsSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "OnSettingsUpdatedInternal");

	Params::VLegacyControlsMenu_OnSettingsUpdatedInternal Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyControlsMenu.SetDeviceMapping
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyControlsInputMapping&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetDeviceMapping(const struct FLegacyControlsInputMapping& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetDeviceMapping");

	Params::VLegacyControlsMenu_SetDeviceMapping Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.SetDeviceMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyControlsInputMapping>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetDeviceMappings(const TArray<struct FLegacyControlsInputMapping>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetDeviceMappings");

	Params::VLegacyControlsMenu_SetDeviceMappings Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.SetInvertYInternal
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetInvertYInternal(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetInvertYInternal");

	Params::VLegacyControlsMenu_SetInvertYInternal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.SetIsJoystickDetected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetIsJoystickDetected(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetIsJoystickDetected");

	Params::VLegacyControlsMenu_SetIsJoystickDetected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.SetMouseSensitivityInternal
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetMouseSensitivityInternal(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetMouseSensitivityInternal");

	Params::VLegacyControlsMenu_SetMouseSensitivityInternal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyControlsSettings&   Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetSettings(const struct FLegacyControlsSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetSettings");

	Params::VLegacyControlsMenu_SetSettings Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.SetSwapStickControlsInternal
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyControlsMenu::SetSwapStickControlsInternal(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "SetSwapStickControlsInternal");

	Params::VLegacyControlsMenu_SetSwapStickControlsInternal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyControlsMenu.GetDeviceMappings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyControlsInputMapping>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyControlsInputMapping> UVLegacyControlsMenu::GetDeviceMappings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "GetDeviceMappings");

	Params::VLegacyControlsMenu_GetDeviceMappings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMenu.GetIsJoystickDetected
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyControlsMenu::GetIsJoystickDetected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "GetIsJoystickDetected");

	Params::VLegacyControlsMenu_GetIsJoystickDetected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyControlsMenu.GetSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyControlsSettings    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyControlsSettings UVLegacyControlsMenu::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyControlsMenu", "GetSettings");

	Params::VLegacyControlsMenu_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyEditableText.CommitText
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVLegacyEditableText::CommitText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "CommitText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyEditableText.SetHintText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyEditableText::SetHintText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "SetHintText");

	Params::VLegacyEditableText_SetHintText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyEditableText.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyEditableText::SetText(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "SetText");

	Params::VLegacyEditableText_SetText Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyEditableText.ClearKeyboardFocus
// (Final, Native, Protected, BlueprintCallable, Const)

void UVLegacyEditableText::ClearKeyboardFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "ClearKeyboardFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyEditableText.ClearUserFocus
// (Final, Native, Protected, BlueprintCallable, Const)

void UVLegacyEditableText::ClearUserFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "ClearUserFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyEditableText.GetHintText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyEditableText::GetHintText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "GetHintText");

	Params::VLegacyEditableText_GetHintText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyEditableText.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyEditableText::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyEditableText", "GetText");

	Params::VLegacyEditableText_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudCompass.OnFrameVisibleUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudCompass::OnFrameVisibleUpdated(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudCompass", "OnFrameVisibleUpdated");

	Params::VLegacyHudCompass_OnFrameVisibleUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudCompass.OnHeadingUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudCompass::OnHeadingUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudCompass", "OnHeadingUpdated");

	Params::VLegacyHudCompass_OnHeadingUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudCompass.SetFrameVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudCompass::SetFrameVisible(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudCompass", "SetFrameVisible");

	Params::VLegacyHudCompass_SetFrameVisible Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudCompass.SetHeading
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudCompass::SetHeading(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudCompass", "SetHeading");

	Params::VLegacyHudCompass_SetHeading Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudCompass.GetFrameVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyHudCompass::GetFrameVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudCompass", "GetFrameVisible");

	Params::VLegacyHudCompass_GetFrameVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudCompass.GetHeading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyHudCompass::GetHeading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudCompass", "GetHeading");

	Params::VLegacyHudCompass_GetHeading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudMagicIcon.OnCanCastUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudMagicIcon::OnCanCastUpdated(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "OnCanCastUpdated");

	Params::VLegacyHudMagicIcon_OnCanCastUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudMagicIcon.OnMagicBrushUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyHudMagicIcon::OnMagicBrushUpdated(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "OnMagicBrushUpdated");

	Params::VLegacyHudMagicIcon_OnMagicBrushUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudMagicIcon.SetCanCast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudMagicIcon::SetCanCast(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "SetCanCast");

	Params::VLegacyHudMagicIcon_SetCanCast Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudMagicIcon.SetMagicBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyHudMagicIcon::SetMagicBrush(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "SetMagicBrush");

	Params::VLegacyHudMagicIcon_SetMagicBrush Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudMagicIcon.SetMagicTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudMagicIcon::SetMagicTexture(class UTexture2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "SetMagicTexture");

	Params::VLegacyHudMagicIcon_SetMagicTexture Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudMagicIcon.GetCanCast
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyHudMagicIcon::GetCanCast() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "GetCanCast");

	Params::VLegacyHudMagicIcon_GetCanCast Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudMagicIcon.GetMagicBrush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UVLegacyHudMagicIcon::GetMagicBrush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMagicIcon", "GetMagicBrush");

	Params::VLegacyHudMagicIcon_GetMagicBrush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudMain.OnForcePlayerMenuPageUpdated
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudMain::OnForcePlayerMenuPageUpdated(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMain", "OnForcePlayerMenuPageUpdated");

	Params::VLegacyHudMain_OnForcePlayerMenuPageUpdated Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudMain.OnHUDVisibilityChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHUDVisibility                          Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudMain::OnHUDVisibilityChanged(EHUDVisibility Flag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudMain", "OnHUDVisibilityChanged");

	Params::VLegacyHudMain_OnHUDVisibilityChanged Parms{};

	Parms.Flag = Flag;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudPrimaryLayout.OnHUDVisibilityChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EHUDVisibility                          Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudPrimaryLayout::OnHUDVisibilityChanged(EHUDVisibility Flag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudPrimaryLayout", "OnHUDVisibilityChanged");

	Params::VLegacyHudPrimaryLayout_OnHUDVisibilityChanged Parms{};

	Parms.Flag = Flag;
	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudStatusBars.OnFatigueProgressUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudStatusBars::OnFatigueProgressUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "OnFatigueProgressUpdated");

	Params::VLegacyHudStatusBars_OnFatigueProgressUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudStatusBars.OnHealthProgressUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudStatusBars::OnHealthProgressUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "OnHealthProgressUpdated");

	Params::VLegacyHudStatusBars_OnHealthProgressUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudStatusBars.OnMagickaProgressUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudStatusBars::OnMagickaProgressUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "OnMagickaProgressUpdated");

	Params::VLegacyHudStatusBars_OnMagickaProgressUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudStatusBars.SetFatigueProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudStatusBars::SetFatigueProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "SetFatigueProgress");

	Params::VLegacyHudStatusBars_SetFatigueProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudStatusBars.SetHealthProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudStatusBars::SetHealthProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "SetHealthProgress");

	Params::VLegacyHudStatusBars_SetHealthProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudStatusBars.SetMagickaProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudStatusBars::SetMagickaProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "SetMagickaProgress");

	Params::VLegacyHudStatusBars_SetMagickaProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudStatusBars.GetFatigueProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyHudStatusBars::GetFatigueProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "GetFatigueProgress");

	Params::VLegacyHudStatusBars_GetFatigueProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudStatusBars.GetHealthProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyHudStatusBars::GetHealthProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "GetHealthProgress");

	Params::VLegacyHudStatusBars_GetHealthProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudStatusBars.GetMagickaProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyHudStatusBars::GetMagickaProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudStatusBars", "GetMagickaProgress");

	Params::VLegacyHudStatusBars_GetMagickaProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudWeaponIcon.OnAmmoCountUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::OnAmmoCountUpdated(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "OnAmmoCountUpdated");

	Params::VLegacyHudWeaponIcon_OnAmmoCountUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudWeaponIcon.OnHealthUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::OnHealthUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "OnHealthUpdated");

	Params::VLegacyHudWeaponIcon_OnHealthUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudWeaponIcon.OnIsAmmoVisibleUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::OnIsAmmoVisibleUpdated(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "OnIsAmmoVisibleUpdated");

	Params::VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudWeaponIcon.OnStatusUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::OnStatusUpdated(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "OnStatusUpdated");

	Params::VLegacyHudWeaponIcon_OnStatusUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudWeaponIcon.OnWeaponBrushUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::OnWeaponBrushUpdated(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "OnWeaponBrushUpdated");

	Params::VLegacyHudWeaponIcon_OnWeaponBrushUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyHudWeaponIcon.SetAmmoCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetAmmoCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetAmmoCount");

	Params::VLegacyHudWeaponIcon_SetAmmoCount Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.SetHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetHealth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetHealth");

	Params::VLegacyHudWeaponIcon_SetHealth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.SetIsAmmoVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetIsAmmoVisible(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetIsAmmoVisible");

	Params::VLegacyHudWeaponIcon_SetIsAmmoVisible Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.SetStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetStatus(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetStatus");

	Params::VLegacyHudWeaponIcon_SetStatus Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.SetStatusInternal
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetStatusInternal(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetStatusInternal");

	Params::VLegacyHudWeaponIcon_SetStatusInternal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.SetWeaponBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetWeaponBrush(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetWeaponBrush");

	Params::VLegacyHudWeaponIcon_SetWeaponBrush Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.SetWeaponTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyHudWeaponIcon::SetWeaponTexture(class UTexture2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "SetWeaponTexture");

	Params::VLegacyHudWeaponIcon_SetWeaponTexture Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyHudWeaponIcon.GetAmmoCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyHudWeaponIcon::GetAmmoCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "GetAmmoCount");

	Params::VLegacyHudWeaponIcon_GetAmmoCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudWeaponIcon.GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyHudWeaponIcon::GetHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "GetHealth");

	Params::VLegacyHudWeaponIcon_GetHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudWeaponIcon.GetIsAmmoVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyHudWeaponIcon::GetIsAmmoVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "GetIsAmmoVisible");

	Params::VLegacyHudWeaponIcon_GetIsAmmoVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudWeaponIcon.GetStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyHudWeaponIcon::GetStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "GetStatus");

	Params::VLegacyHudWeaponIcon_GetStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudWeaponIcon.GetStatusInternal
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyHudWeaponIcon::GetStatusInternal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "GetStatusInternal");

	Params::VLegacyHudWeaponIcon_GetStatusInternal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyHudWeaponIcon.GetWeaponBrush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UVLegacyHudWeaponIcon::GetWeaponBrush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyHudWeaponIcon", "GetWeaponBrush");

	Params::VLegacyHudWeaponIcon_GetWeaponBrush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.FindOrAddGameThumbnailFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UVSaveLoadMenuViewModel::FindOrAddGameThumbnailFromSlot(const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "FindOrAddGameThumbnailFromSlot");

	Params::VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.RegisterSendClickedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SaveIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveSlotName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InIsShiftPressed                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::RegisterSendClickedItem(int32 SaveIndex, const class FString& SaveSlotName, bool InIsShiftPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "RegisterSendClickedItem");

	Params::VSaveLoadMenuViewModel_RegisterSendClickedItem Parms{};

	Parms.SaveIndex = SaveIndex;
	Parms.SaveSlotName = std::move(SaveSlotName);
	Parms.InIsShiftPressed = InIsShiftPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.RegisterSendClickedReturnButton
// (Final, Native, Public, BlueprintCallable)

void UVSaveLoadMenuViewModel::RegisterSendClickedReturnButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "RegisterSendClickedReturnButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.RegisterSendClickedUploadItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SaveIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveSlotName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveContext                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::RegisterSendClickedUploadItem(int32 SaveIndex, const class FString& SaveSlotName, const class FString& SaveContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "RegisterSendClickedUploadItem");

	Params::VSaveLoadMenuViewModel_RegisterSendClickedUploadItem Parms{};

	Parms.SaveIndex = SaveIndex;
	Parms.SaveSlotName = std::move(SaveSlotName);
	Parms.SaveContext = std::move(SaveContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.SetCanBackOutMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInNewValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::SetCanBackOutMenu(bool bInNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "SetCanBackOutMenu");

	Params::VSaveLoadMenuViewModel_SetCanBackOutMenu Parms{};

	Parms.bInNewValue = bInNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.SetMenuIsBusy
// (Final, Native, Public)
// Parameters:
// bool                                    newMenuIsBusy                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::SetMenuIsBusy(bool newMenuIsBusy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "SetMenuIsBusy");

	Params::VSaveLoadMenuViewModel_SetMenuIsBusy Parms{};

	Parms.newMenuIsBusy = newMenuIsBusy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.SetSavesMetaData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TMap<class FString, struct FVSaveGameDetails>&NewSavesMetaData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::SetSavesMetaData(const TMap<class FString, struct FVSaveGameDetails>& NewSavesMetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "SetSavesMetaData");

	Params::VSaveLoadMenuViewModel_SetSavesMetaData Parms{};

	Parms.NewSavesMetaData = std::move(NewSavesMetaData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.SetShouldAllowListViewItemClicks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInNewValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::SetShouldAllowListViewItemClicks(bool bInNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "SetShouldAllowListViewItemClicks");

	Params::VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks Parms{};

	Parms.bInNewValue = bInNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.UpdateLoadingScreenDataFromSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SaveSlotName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSaveLoadMenuViewModel::UpdateLoadingScreenDataFromSave(const class FString& SaveSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "UpdateLoadingScreenDataFromSave");

	Params::VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave Parms{};

	Parms.SaveSlotName = std::move(SaveSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSaveLoadMenuViewModel.CanBackOutMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSaveLoadMenuViewModel::CanBackOutMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "CanBackOutMenu");

	Params::VSaveLoadMenuViewModel_CanBackOutMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetCurrentPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVSaveLoadMenuViewModel::GetCurrentPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetCurrentPlayerName");

	Params::VSaveLoadMenuViewModel_GetCurrentPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetDisableAchievementFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSaveLoadMenuViewModel::GetDisableAchievementFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetDisableAchievementFromSlot");

	Params::VSaveLoadMenuViewModel_GetDisableAchievementFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetFullSaveNameFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVSaveLoadMenuViewModel::GetFullSaveNameFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetFullSaveNameFromSlot");

	Params::VSaveLoadMenuViewModel_GetFullSaveNameFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetGameDetailsFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetGameDetailsFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetGameDetailsFromSlot");

	Params::VSaveLoadMenuViewModel_GetGameDetailsFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveDateFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveDateFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveDateFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveDateFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveDayFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveDayFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveDayFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveDayFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveLevelFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveLevelFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveLevelFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveLocationFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveLocationFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveLocationFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveNameFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveNameFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveNameFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveNameFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSavePlayerNameFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSavePlayerNameFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSavePlayerNameFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveTimeFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              InFormat                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveTimeFromSlot(const class FString& SlotName, const bool InFormat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveTimeFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.InFormat = InFormat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetModernSaveTypeFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetModernSaveTypeFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetModernSaveTypeFromSlot");

	Params::VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetSavesMetaData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FVSaveGameDetails>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FVSaveGameDetails> UVSaveLoadMenuViewModel::GetSavesMetaData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetSavesMetaData");

	Params::VSaveLoadMenuViewModel_GetSavesMetaData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.GetSaveTextFromSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVSaveLoadMenuViewModel::GetSaveTextFromSlot(const class FString& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "GetSaveTextFromSlot");

	Params::VSaveLoadMenuViewModel_GetSaveTextFromSlot Parms{};

	Parms.SlotName = std::move(SlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.IsSaveMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSaveLoadMenuViewModel::IsSaveMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "IsSaveMenu");

	Params::VSaveLoadMenuViewModel_IsSaveMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.MenuIsBusy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSaveLoadMenuViewModel::MenuIsBusy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "MenuIsBusy");

	Params::VSaveLoadMenuViewModel_MenuIsBusy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.MustShowUploadItemButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSaveLoadMenuViewModel::MustShowUploadItemButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "MustShowUploadItemButton");

	Params::VSaveLoadMenuViewModel_MustShowUploadItemButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSaveLoadMenuViewModel.ShouldAllowListViewItemClicks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSaveLoadMenuViewModel::ShouldAllowListViewItemClicks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSaveLoadMenuViewModel", "ShouldAllowListViewItemClicks");

	Params::VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyImageTile.OnBrushUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyImageTile::OnBrushUpdated(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "OnBrushUpdated");

	Params::VLegacyImageTile_OnBrushUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyImageTile.OnCropUpdated
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyImageTile::OnCropUpdated(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "OnCropUpdated");

	Params::VLegacyImageTile_OnCropUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyImageTile.OnStretchImageUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyImageTile::OnStretchImageUpdated(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "OnStretchImageUpdated");

	Params::VLegacyImageTile_OnStretchImageUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyImageTile.OnSynchronizeProperties
// (Event, Protected, BlueprintEvent)

void UVLegacyImageTile::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyImageTile.SetBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyImageTile::SetBrush(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "SetBrush");

	Params::VLegacyImageTile_SetBrush Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyImageTile.SetCrop
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyImageTile::SetCrop(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "SetCrop");

	Params::VLegacyImageTile_SetCrop Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyImageTile.SetStretchImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyImageTile::SetStretchImage(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "SetStretchImage");

	Params::VLegacyImageTile_SetStretchImage Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyImageTile.GetBrush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UVLegacyImageTile::GetBrush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "GetBrush");

	Params::VLegacyImageTile_GetBrush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyImageTile.GetCrop
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVLegacyImageTile::GetCrop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "GetCrop");

	Params::VLegacyImageTile_GetCrop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyImageTile.GetStretchImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyImageTile::GetStretchImage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyImageTile", "GetStretchImage");

	Params::VLegacyImageTile_GetStretchImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTESObjectRefComponent.GetBossTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVBossCategory                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVBossCategory UVTESObjectRefComponent::GetBossTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTESObjectRefComponent", "GetBossTag");

	Params::VTESObjectRefComponent_GetBossTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTESObjectRefComponent.GetHexFormRefID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVTESObjectRefComponent::GetHexFormRefID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTESObjectRefComponent", "GetHexFormRefID");

	Params::VTESObjectRefComponent_GetHexFormRefID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyListViewEntryBase.OnItemObjectSet
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ListItemObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyListViewEntryBase::OnItemObjectSet(class UObject* ListItemObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyListViewEntryBase", "OnItemObjectSet");

	Params::VLegacyListViewEntryBase_OnItemObjectSet Parms{};

	Parms.ListItemObject = ListItemObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLoadingMenu.OnLoadingProgressUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLoadingMenu::OnLoadingProgressUpdated(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLoadingMenu", "OnLoadingProgressUpdated");

	Params::VLegacyLoadingMenu_OnLoadingProgressUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLoadingMenu.OnLoadingScreenUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLegacyLoadingMenuGameInfo&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyLoadingMenu::OnLoadingScreenUpdated(const struct FLegacyLoadingMenuGameInfo& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLoadingMenu", "OnLoadingScreenUpdated");

	Params::VLegacyLoadingMenu_OnLoadingScreenUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLoadingMenu.SetLoadingProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLoadingMenu::SetLoadingProgress(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLoadingMenu", "SetLoadingProgress");

	Params::VLegacyLoadingMenu_SetLoadingProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLoadingMenu.SetLoadingScreen
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyLoadingMenuGameInfo&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyLoadingMenu::SetLoadingScreen(const struct FLegacyLoadingMenuGameInfo& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLoadingMenu", "SetLoadingScreen");

	Params::VLegacyLoadingMenu_SetLoadingScreen Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLoadingMenu.GetLoadingProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UVLegacyLoadingMenu::GetLoadingProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLoadingMenu", "GetLoadingProgress");

	Params::VLegacyLoadingMenu_GetLoadingProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLoadingMenu.GetLoadingScreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyLoadingMenuGameInfo ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyLoadingMenuGameInfo UVLegacyLoadingMenu::GetLoadingScreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLoadingMenu", "GetLoadingScreen");

	Params::VLegacyLoadingMenu_GetLoadingScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickingMenuTumbler.AttemptSolve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyLockpickingMenuTumbler::AttemptSolve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "AttemptSolve");

	Params::VLegacyLockpickingMenuTumbler_AttemptSolve Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickingMenuTumbler.GetNextAnimationTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyLockpickingMenuTumbler::GetNextAnimationTime(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "GetNextAnimationTime");

	Params::VLegacyLockpickingMenuTumbler_GetNextAnimationTime Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickingMenuTumbler.PlayInitialMovementEffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyLockpickingMenuTumbler::PlayInitialMovementEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "PlayInitialMovementEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyLockpickingMenuTumbler.PlayIsSolvedEffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyLockpickingMenuTumbler::PlayIsSolvedEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "PlayIsSolvedEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyLockpickingMenuTumbler.PlayOnFallEffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyLockpickingMenuTumbler::PlayOnFallEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "PlayOnFallEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyLockpickingMenuTumbler.SetInitialMovement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyLockpickMenuTumblerProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyLockpickingMenuTumbler::SetInitialMovement(const struct FLegacyLockpickMenuTumblerProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "SetInitialMovement");

	Params::VLegacyLockpickingMenuTumbler_SetInitialMovement Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickingMenuTumbler.SetIsSolved
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickingMenuTumbler::SetIsSolved(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "SetIsSolved");

	Params::VLegacyLockpickingMenuTumbler_SetIsSolved Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickingMenuTumbler.SetIsTumbling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickingMenuTumbler::SetIsTumbling(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "SetIsTumbling");

	Params::VLegacyLockpickingMenuTumbler_SetIsTumbling Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickingMenuTumbler.UpdateAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickingMenuTumbler::UpdateAnimation(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "UpdateAnimation");

	Params::VLegacyLockpickingMenuTumbler_UpdateAnimation Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLockpickingMenuTumbler.GetInitialMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyLockpickMenuTumblerPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyLockpickMenuTumblerProperties UVLegacyLockpickingMenuTumbler::GetInitialMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "GetInitialMovement");

	Params::VLegacyLockpickingMenuTumbler_GetInitialMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickingMenuTumbler.GetIsSolved
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyLockpickingMenuTumbler::GetIsSolved() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "GetIsSolved");

	Params::VLegacyLockpickingMenuTumbler_GetIsSolved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickingMenuTumbler.GetIsTumbling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyLockpickingMenuTumbler::GetIsTumbling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickingMenuTumbler", "GetIsTumbling");

	Params::VLegacyLockpickingMenuTumbler_GetIsTumbling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenu.CheckMenuFocus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FGameplayTag&              TopMostLayer                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonActivatableWidget*         TopMostWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenu::CheckMenuFocus(const struct FGameplayTag& TopMostLayer, class UCommonActivatableWidget* TopMostWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenu", "CheckMenuFocus");

	Params::VLegacyLockpickMenu_CheckMenuFocus Parms{};

	Parms.TopMostLayer = std::move(TopMostLayer);
	Parms.TopMostWidget = TopMostWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenu.InitialiseTumblerMovement
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TumblerIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyLockpickMenuTumblerDefaultProperties&TumblerDefaultProperties                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLegacyLockpickMenuProperties&MenuProperties                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenu::InitialiseTumblerMovement(int32 TumblerIndex, const struct FLegacyLockpickMenuTumblerDefaultProperties& TumblerDefaultProperties, const struct FLegacyLockpickMenuProperties& MenuProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenu", "InitialiseTumblerMovement");

	Params::VLegacyLockpickMenu_InitialiseTumblerMovement Parms{};

	Parms.TumblerIndex = TumblerIndex;
	Parms.TumblerDefaultProperties = std::move(TumblerDefaultProperties);
	Parms.MenuProperties = std::move(MenuProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenu.OnMenuFocusChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocussed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenu::OnMenuFocusChanged(bool IsFocussed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenu", "OnMenuFocusChanged");

	Params::VLegacyLockpickMenu_OnMenuFocusChanged Parms{};

	Parms.IsFocussed = IsFocussed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLockpickMenu.OnTumberMovementInitialised
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TumblerIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyLockpickMenuTumblerProperties&TumbleProperties                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenu::OnTumberMovementInitialised(int32 TumblerIndex, const struct FLegacyLockpickMenuTumblerProperties& TumbleProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenu", "OnTumberMovementInitialised");

	Params::VLegacyLockpickMenu_OnTumberMovementInitialised Parms{};

	Parms.TumblerIndex = TumblerIndex;
	Parms.TumbleProperties = std::move(TumbleProperties);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLockpickMenu.SetDifficultyCurve
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ELegacyLockpickMenuDifficulty           Difficulty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenu::SetDifficultyCurve(ELegacyLockpickMenuDifficulty Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenu", "SetDifficultyCurve");

	Params::VLegacyLockpickMenu_SetDifficultyCurve Parms{};

	Parms.Difficulty = Difficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.GetMovementActionFromMouseMovement
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ELegacyLockpickMenuPickMovement         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyLockpickMenuPickMovement UVLegacyLockpickMenuPick::GetMovementActionFromMouseMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetMovementActionFromMouseMovement");

	Params::VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.MovePick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyLockpickMenuPickMovement   Action                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::MovePick(const ELegacyLockpickMenuPickMovement Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "MovePick");

	Params::VLegacyLockpickMenuPick_MovePick Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.OnActiveTumblerUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::OnActiveTumblerUpdated(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "OnActiveTumblerUpdated");

	Params::VLegacyLockpickMenuPick_OnActiveTumblerUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLockpickMenuPick.OnHandleTypeUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ELegacyLockpickMenuHandleType     Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::OnHandleTypeUpdated(const ELegacyLockpickMenuHandleType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "OnHandleTypeUpdated");

	Params::VLegacyLockpickMenuPick_OnHandleTypeUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLockpickMenuPick.OnIsBrokenUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::OnIsBrokenUpdated(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "OnIsBrokenUpdated");

	Params::VLegacyLockpickMenuPick_OnIsBrokenUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyLockpickMenuPick.OnTumbleAction
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyLockpickMenuPick::OnTumbleAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "OnTumbleAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyLockpickMenuPick.SetActiveTumbler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::SetActiveTumbler(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "SetActiveTumbler");

	Params::VLegacyLockpickMenuPick_SetActiveTumbler Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.SetDeadZone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::SetDeadZone(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "SetDeadZone");

	Params::VLegacyLockpickMenuPick_SetDeadZone Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.SetHandleType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyLockpickMenuHandleType     Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::SetHandleType(const ELegacyLockpickMenuHandleType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "SetHandleType");

	Params::VLegacyLockpickMenuPick_SetHandleType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.SetIsBroken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::SetIsBroken(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "SetIsBroken");

	Params::VLegacyLockpickMenuPick_SetIsBroken Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.SetIsMovementDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::SetIsMovementDisabled(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "SetIsMovementDisabled");

	Params::VLegacyLockpickMenuPick_SetIsMovementDisabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.SetTumblerPositions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyLockpickMenuPick::SetTumblerPositions(const TArray<float>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "SetTumblerPositions");

	Params::VLegacyLockpickMenuPick_SetTumblerPositions Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyLockpickMenuPick.CanPickMove
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyLockpickMenuPick::CanPickMove() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "CanPickMove");

	Params::VLegacyLockpickMenuPick_CanPickMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetActiveTumbler
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyLockpickMenuPick::GetActiveTumbler() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetActiveTumbler");

	Params::VLegacyLockpickMenuPick_GetActiveTumbler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetActiveTumblerPosition
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyLockpickMenuPick::GetActiveTumblerPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetActiveTumblerPosition");

	Params::VLegacyLockpickMenuPick_GetActiveTumblerPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetDeadZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyLockpickMenuPick::GetDeadZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetDeadZone");

	Params::VLegacyLockpickMenuPick_GetDeadZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetHandleType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyLockpickMenuHandleType           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyLockpickMenuHandleType UVLegacyLockpickMenuPick::GetHandleType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetHandleType");

	Params::VLegacyLockpickMenuPick_GetHandleType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetIsBroken
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyLockpickMenuPick::GetIsBroken() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetIsBroken");

	Params::VLegacyLockpickMenuPick_GetIsBroken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetIsMovementDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyLockpickMenuPick::GetIsMovementDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetIsMovementDisabled");

	Params::VLegacyLockpickMenuPick_GetIsMovementDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetPreviousTumblerPosition
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyLockpickMenuPick::GetPreviousTumblerPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetPreviousTumblerPosition");

	Params::VLegacyLockpickMenuPick_GetPreviousTumblerPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyLockpickMenuPick.GetTumblerPositions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<float>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<float> UVLegacyLockpickMenuPick::GetTumblerPositions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyLockpickMenuPick", "GetTumblerPositions");

	Params::VLegacyLockpickMenuPick_GetTumblerPositions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMagicMenu.MoveToNextPage
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyMagicMenu::MoveToNextPage(bool bRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenu", "MoveToNextPage");

	Params::VLegacyMagicMenu_MoveToNextPage Parms{};

	Parms.bRight = bRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyMagicMenu.GetMagicPopup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyMagicPopupMenu*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMagicPopupMenu* UVLegacyMagicMenu::GetMagicPopup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMagicMenu", "GetMagicPopup");

	Params::VLegacyMagicMenu_GetMagicPopup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenu.MoveToNextPage
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              bRight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyMapMenu::MoveToNextPage(const bool bRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenu", "MoveToNextPage");

	Params::VLegacyMapMenu_MoveToNextPage Parms{};

	Parms.bRight = bRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyMapMenu.OnClickedIcon
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyMapMenu::OnClickedIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenu", "OnClickedIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyMapMenu.GetLocalMapPage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyMapMenuMapPage*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuMapPage* UVLegacyMapMenu::GetLocalMapPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenu", "GetLocalMapPage");

	Params::VLegacyMapMenu_GetLocalMapPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenu.GetQuestsPage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyMapMenuQuestsPage*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuQuestsPage* UVLegacyMapMenu::GetQuestsPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenu", "GetQuestsPage");

	Params::VLegacyMapMenu_GetQuestsPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenu.GetWorldMapPage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UVLegacyMapMenuMapPage*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuMapPage* UVLegacyMapMenu::GetWorldMapPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyMapMenu", "GetWorldMapPage");

	Params::VLegacyMapMenu_GetWorldMapPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyStatsMenuMiscItem.SetItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuMiscItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyStatsMenuMiscItem::SetItem(const struct FLegacyStatsMenuMiscItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuMiscItem", "SetItem");

	Params::VLegacyStatsMenuMiscItem_SetItem Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyStatsMenuMiscItem.GetItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuMiscItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuMiscItemProperties UVLegacyStatsMenuMiscItem::GetItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyStatsMenuMiscItem", "GetItem");

	Params::VLegacyStatsMenuMiscItem_GetItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPageTab.OnIconUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyPageTab::OnIconUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "OnIconUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyPageTab.OnIsSelectedUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyPageTab::OnIsSelectedUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "OnIsSelectedUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyPageTab.SetIconBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyPageTab::SetIconBrush(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "SetIconBrush");

	Params::VLegacyPageTab_SetIconBrush Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyPageTab.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyPageTab::SetIsSelected(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "SetIsSelected");

	Params::VLegacyPageTab_SetIsSelected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyPageTab.TriggerTabClicked
// (Final, Native, Protected, BlueprintCallable)

void UVLegacyPageTab::TriggerTabClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "TriggerTabClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyPageTab.GetIconBrush
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UVLegacyPageTab::GetIconBrush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "GetIconBrush");

	Params::VLegacyPageTab_GetIconBrush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPageTab.GetIsSelected
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyPageTab::GetIsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPageTab", "GetIsSelected");

	Params::VLegacyPageTab_GetIsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.CloseMenu
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UVLegacyPlayerMenu::CloseMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "CloseMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyPlayerMenu.MoveToNextMenuPage
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              bLeft                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyPlayerMenu::MoveToNextMenuPage(const bool bLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "MoveToNextMenuPage");

	Params::VLegacyPlayerMenu_MoveToNextMenuPage Parms{};

	Parms.bLeft = bLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyPlayerMenu.OnDisplayPlayerInInventory
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyPlayerMenu::OnDisplayPlayerInInventory(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "OnDisplayPlayerInInventory");

	Params::VLegacyPlayerMenu_OnDisplayPlayerInInventory Parms{};

	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyPlayerMenu.GetCodex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UCommonActivatableWidget*   ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UCommonActivatableWidget* UVLegacyPlayerMenu::GetCodex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetCodex");

	Params::VLegacyPlayerMenu_GetCodex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetHudMain
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVLegacyHudMain*            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVLegacyHudMain* UVLegacyPlayerMenu::GetHudMain() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetHudMain");

	Params::VLegacyPlayerMenu_GetHudMain Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetInventoryMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVInventoryMenu*            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVInventoryMenu* UVLegacyPlayerMenu::GetInventoryMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetInventoryMenu");

	Params::VLegacyPlayerMenu_GetInventoryMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetMagicMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVLegacyMagicMenu*          ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVLegacyMagicMenu* UVLegacyPlayerMenu::GetMagicMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetMagicMenu");

	Params::VLegacyPlayerMenu_GetMagicMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetMapMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVLegacyMapMenu*            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVLegacyMapMenu* UVLegacyPlayerMenu::GetMapMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetMapMenu");

	Params::VLegacyPlayerMenu_GetMapMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetMenuFromEnum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyPlayerMenuPage                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UCommonActivatableWidget*   ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UCommonActivatableWidget* UVLegacyPlayerMenu::GetMenuFromEnum(ELegacyPlayerMenuPage Page) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetMenuFromEnum");

	Params::VLegacyPlayerMenu_GetMenuFromEnum Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetSettings
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVLegacySettingsMenu*       ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVLegacySettingsMenu* UVLegacyPlayerMenu::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetSettings");

	Params::VLegacyPlayerMenu_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetStatsMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVLegacyStatsMenu*          ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVLegacyStatsMenu* UVLegacyPlayerMenu::GetStatsMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetStatsMenu");

	Params::VLegacyPlayerMenu_GetStatsMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyPlayerMenu.GetViewModelRef
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UVPlayerMenuViewModel*      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVPlayerMenuViewModel* UVLegacyPlayerMenu::GetViewModelRef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyPlayerMenu", "GetViewModelRef");

	Params::VLegacyPlayerMenu_GetViewModelRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VLegacyRaceSexMenu.PostFadeAction
// (Final, Native, Public)

void UVLegacyRaceSexMenu::PostFadeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRaceSexMenu", "PostFadeAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.OnMarkerPositionUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyScrollbar::OnMarkerPositionUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "OnMarkerPositionUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyScrollbar.OnValueUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::OnValueUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "OnValueUpdated");

	Params::VLegacyScrollbar_OnValueUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyScrollbar.SetFocusBackgroundEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::SetFocusBackgroundEnabled(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "SetFocusBackgroundEnabled");

	Params::VLegacyScrollbar_SetFocusBackgroundEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.SetSliderLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::SetSliderLength(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "SetSliderLength");

	Params::VLegacyScrollbar_SetSliderLength Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.SetTextProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyScrollbarTextProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::SetTextProperties(const struct FLegacyScrollbarTextProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "SetTextProperties");

	Params::VLegacyScrollbar_SetTextProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::SetValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "SetValue");

	Params::VLegacyScrollbar_SetValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.SetValueProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyScrollbarValueProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::SetValueProperties(const struct FLegacyScrollbarValueProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "SetValueProperties");

	Params::VLegacyScrollbar_SetValueProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.UpdateValueFromSlider
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyScrollbar::UpdateValueFromSlider(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "UpdateValueFromSlider");

	Params::VLegacyScrollbar_UpdateValueFromSlider Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyScrollbar.GetFocusBackgroundEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyScrollbar::GetFocusBackgroundEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "GetFocusBackgroundEnabled");

	Params::VLegacyScrollbar_GetFocusBackgroundEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyScrollbar.GetSliderLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyScrollbar::GetSliderLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "GetSliderLength");

	Params::VLegacyScrollbar_GetSliderLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyScrollbar.GetTextProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyScrollbarTextPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyScrollbarTextProperties UVLegacyScrollbar::GetTextProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "GetTextProperties");

	Params::VLegacyScrollbar_GetTextProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyScrollbar.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyScrollbar::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "GetValue");

	Params::VLegacyScrollbar_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyScrollbar.GetValueAsPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyScrollbar::GetValueAsPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "GetValueAsPercentage");

	Params::VLegacyScrollbar_GetValueAsPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyScrollbar.GetValueProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyScrollbarValuePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyScrollbarValueProperties UVLegacyScrollbar::GetValueProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyScrollbar", "GetValueProperties");

	Params::VLegacyScrollbar_GetValueProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacySleepWaitMenu.SetInstantFadeIn
// (Final, Native, Protected, BlueprintCallable)

void UVLegacySleepWaitMenu::SetInstantFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySleepWaitMenu", "SetInstantFadeIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySleepWaitMenu.StartCameraFade
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bInFadeIn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacySleepWaitMenu::StartCameraFade(bool bInFadeIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySleepWaitMenu", "StartCameraFade");

	Params::VLegacySleepWaitMenu_StartCameraFade Parms{};

	Parms.bInFadeIn = bInFadeIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySpellPurchaseMenu.OnPlayerMoneyUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacySpellPurchaseMenu::OnPlayerMoneyUpdated(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellPurchaseMenu", "OnPlayerMoneyUpdated");

	Params::VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacySpellPurchaseMenu.OnSpellsUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FLegacySpellPurchaseMenuItemProperties>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacySpellPurchaseMenu::OnSpellsUpdated(const TArray<struct FLegacySpellPurchaseMenuItemProperties>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellPurchaseMenu", "OnSpellsUpdated");

	Params::VLegacySpellPurchaseMenu_OnSpellsUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VShieldHandPoseCharacterAnimInstance.SetupShieldHandPoseLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FShieldHandPoseSetup&      InHandPoseSetup                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVShieldHandPoseCharacterAnimInstance::SetupShieldHandPoseLayer(const struct FShieldHandPoseSetup& InHandPoseSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShieldHandPoseCharacterAnimInstance", "SetupShieldHandPoseLayer");

	Params::VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer Parms{};

	Parms.InHandPoseSetup = std::move(InHandPoseSetup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VShieldHandPoseCharacterAnimInstance.IsShieldHandPoseActive
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVShieldHandPoseCharacterAnimInstance::IsShieldHandPoseActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VShieldHandPoseCharacterAnimInstance", "IsShieldHandPoseActive");

	Params::VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyValueSwitcher.GetOptions
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class FText>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FText> UVLegacyValueSwitcher::GetOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "GetOptions");

	Params::VLegacyValueSwitcher_GetOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyValueSwitcher.GetSelectedIndex
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVLegacyValueSwitcher::GetSelectedIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "GetSelectedIndex");

	Params::VLegacyValueSwitcher_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyValueSwitcher.GetSelectedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const class FText UVLegacyValueSwitcher::GetSelectedValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "GetSelectedValue");

	Params::VLegacyValueSwitcher_GetSelectedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyValueSwitcher.OnSelectedValueUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVLegacyValueSwitcher::OnSelectedValueUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "OnSelectedValueUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLegacyValueSwitcher.SetOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FText>&              Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyValueSwitcher::SetOptions(const TArray<class FText>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "SetOptions");

	Params::VLegacyValueSwitcher_SetOptions Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyValueSwitcher.SetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyValueSwitcher::SetSelectedIndex(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "SetSelectedIndex");

	Params::VLegacyValueSwitcher_SetSelectedIndex Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyValueSwitcher.SwitchToNextOption
// (Final, Native, Private, BlueprintCallable)

void UVLegacyValueSwitcher::SwitchToNextOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "SwitchToNextOption");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyValueSwitcher.SwitchToPreviousOption
// (Final, Native, Private, BlueprintCallable)

void UVLegacyValueSwitcher::SwitchToPreviousOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyValueSwitcher", "SwitchToPreviousOption");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoMenu.OnSettingOptionsUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLegacyVideoTextSettingValues&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoMenu::OnSettingOptionsUpdated(const struct FLegacyVideoTextSettingValues& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "OnSettingOptionsUpdated");

	Params::VLegacyVideoMenu_OnSettingOptionsUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyVideoMenu.OnSettingsUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLegacyVideoSettings&      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoMenu::OnSettingsUpdated(const struct FLegacyVideoSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "OnSettingsUpdated");

	Params::VLegacyVideoMenu_OnSettingsUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyVideoMenu.SetFloatSetting
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EFLegacyVideoSettingsEnum         SettingName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoMenu::SetFloatSetting(const EFLegacyVideoSettingsEnum SettingName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "SetFloatSetting");

	Params::VLegacyVideoMenu_SetFloatSetting Parms{};

	Parms.SettingName = SettingName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoMenu.SetSettingOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyVideoTextSettingValues&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoMenu::SetSettingOptions(const struct FLegacyVideoTextSettingValues& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "SetSettingOptions");

	Params::VLegacyVideoMenu_SetSettingOptions Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoMenu.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyVideoSettings&      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoMenu::SetSettings(const struct FLegacyVideoSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "SetSettings");

	Params::VLegacyVideoMenu_SetSettings Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoMenu.SetUintSetting
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EFLegacyVideoSettingsEnum         SettingName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoMenu::SetUintSetting(const EFLegacyVideoSettingsEnum SettingName, uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "SetUintSetting");

	Params::VLegacyVideoMenu_SetUintSetting Parms{};

	Parms.SettingName = SettingName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoMenu.GetFloatSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EFLegacyVideoSettingsEnum         SettingName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVLegacyVideoMenu::GetFloatSetting(const EFLegacyVideoSettingsEnum SettingName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "GetFloatSetting");

	Params::VLegacyVideoMenu_GetFloatSetting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoMenu.GetSettingOptions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyVideoTextSettingValuesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyVideoTextSettingValues UVLegacyVideoMenu::GetSettingOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "GetSettingOptions");

	Params::VLegacyVideoMenu_GetSettingOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoMenu.GetSettingOptionsFromType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const ELegacyVideoMenuOptionType        OptionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FText>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FText> UVLegacyVideoMenu::GetSettingOptionsFromType(const ELegacyVideoMenuOptionType OptionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "GetSettingOptionsFromType");

	Params::VLegacyVideoMenu_GetSettingOptionsFromType Parms{};

	Parms.OptionType = OptionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoMenu.GetSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyVideoSettings       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyVideoSettings UVLegacyVideoMenu::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "GetSettings");

	Params::VLegacyVideoMenu_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoMenu.GetUintSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EFLegacyVideoSettingsEnum         SettingName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UVLegacyVideoMenu::GetUintSetting(const EFLegacyVideoSettingsEnum SettingName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "GetUintSetting");

	Params::VLegacyVideoMenu_GetUintSetting Parms{};

	Parms.SettingName = SettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoMenu.IsResolutionWidescreen
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLegacyVideoMenu::IsResolutionWidescreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoMenu", "IsResolutionWidescreen");

	Params::VLegacyVideoMenu_IsResolutionWidescreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoWidgetBase.GetOptions
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class FText>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FText> UVLegacyVideoWidgetBase::GetOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "GetOptions");

	Params::VLegacyVideoWidgetBase_GetOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoWidgetBase.GetSettingName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EFLegacyVideoSettingsEnum               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFLegacyVideoSettingsEnum UVLegacyVideoWidgetBase::GetSettingName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "GetSettingName");

	Params::VLegacyVideoWidgetBase_GetSettingName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyVideoWidgetBase.OnFloatValueUpdatedInternal
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::OnFloatValueUpdatedInternal(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "OnFloatValueUpdatedInternal");

	Params::VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyVideoWidgetBase.OnLabelUpdatedInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::OnLabelUpdatedInternal(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "OnLabelUpdatedInternal");

	Params::VLegacyVideoWidgetBase_OnLabelUpdatedInternal Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyVideoWidgetBase.OnOptionsUpdatedInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::OnOptionsUpdatedInternal(const TArray<class FText>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "OnOptionsUpdatedInternal");

	Params::VLegacyVideoWidgetBase_OnOptionsUpdatedInternal Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyVideoWidgetBase.OnUintValueUpdatedInternal
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const uint8                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::OnUintValueUpdatedInternal(const uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "OnUintValueUpdatedInternal");

	Params::VLegacyVideoWidgetBase_OnUintValueUpdatedInternal Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyVideoWidgetBase.SetFloatValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::SetFloatValue(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "SetFloatValue");

	Params::VLegacyVideoWidgetBase_SetFloatValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::SetLabel(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "SetLabel");

	Params::VLegacyVideoWidgetBase_SetLabel Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.SetOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FText>&              Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::SetOptions(const TArray<class FText>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "SetOptions");

	Params::VLegacyVideoWidgetBase_SetOptions Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.SetSettingName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EFLegacyVideoSettingsEnum         Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::SetSettingName(const EFLegacyVideoSettingsEnum Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "SetSettingName");

	Params::VLegacyVideoWidgetBase_SetSettingName Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.SetUintValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::SetUintValue(const uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "SetUintValue");

	Params::VLegacyVideoWidgetBase_SetUintValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.TriggerOnFloatUpdated
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EFLegacyVideoSettingsEnum               Setting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::TriggerOnFloatUpdated(EFLegacyVideoSettingsEnum Setting, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "TriggerOnFloatUpdated");

	Params::VLegacyVideoWidgetBase_TriggerOnFloatUpdated Parms{};

	Parms.Setting = Setting;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.TriggerOnUintUpdated
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EFLegacyVideoSettingsEnum               Setting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyVideoWidgetBase::TriggerOnUintUpdated(EFLegacyVideoSettingsEnum Setting, uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "TriggerOnUintUpdated");

	Params::VLegacyVideoWidgetBase_TriggerOnUintUpdated Parms{};

	Parms.Setting = Setting;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyVideoWidgetBase.GetLabel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVLegacyVideoWidgetBase::GetLabel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyVideoWidgetBase", "GetLabel");

	Params::VLegacyVideoWidgetBase_GetLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyXControlsMenu.OnControllerMappingsUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FLegacyControlsInputMapping>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::OnControllerMappingsUpdated(const TArray<struct FLegacyControlsInputMapping>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "OnControllerMappingsUpdated");

	Params::VLegacyXControlsMenu_OnControllerMappingsUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyXControlsMenu.OnSettingsUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLegacyXControllerSettings&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::OnSettingsUpdated(const struct FLegacyXControllerSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "OnSettingsUpdated");

	Params::VLegacyXControlsMenu_OnSettingsUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VLegacyXControlsMenu.SetControllerMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyControlsInputMapping>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetControllerMappings(const TArray<struct FLegacyControlsInputMapping>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetControllerMappings");

	Params::VLegacyXControlsMenu_SetControllerMappings Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.SetHorizontalSensitivity
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetHorizontalSensitivity(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetHorizontalSensitivity");

	Params::VLegacyXControlsMenu_SetHorizontalSensitivity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.SetInvertY
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetInvertY(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetInvertY");

	Params::VLegacyXControlsMenu_SetInvertY Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.SetMapping
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyControlsInputMapping&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetMapping(const struct FLegacyControlsInputMapping& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetMapping");

	Params::VLegacyXControlsMenu_SetMapping Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.SetSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyXControllerSettings&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetSettings(const struct FLegacyXControllerSettings& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetSettings");

	Params::VLegacyXControlsMenu_SetSettings Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.SetVerticalSensitivity
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetVerticalSensitivity(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetVerticalSensitivity");

	Params::VLegacyXControlsMenu_SetVerticalSensitivity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.SetVibration
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLegacyXControlsMenu::SetVibration(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "SetVibration");

	Params::VLegacyXControlsMenu_SetVibration Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyXControlsMenu.GetControllerMappings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyControlsInputMapping>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyControlsInputMapping> UVLegacyXControlsMenu::GetControllerMappings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "GetControllerMappings");

	Params::VLegacyXControlsMenu_GetControllerMappings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyXControlsMenu.GetSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyXControllerSettings ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyXControllerSettings UVLegacyXControlsMenu::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyXControlsMenu", "GetSettings");

	Params::VLegacyXControlsMenu_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelStreaming.OnInteriorLevelHidden
// (Final, Native, Public)

void UVLevelStreaming::OnInteriorLevelHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelStreaming", "OnInteriorLevelHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelStreaming.OnInteriorLevelLoaded
// (Final, Native, Public)

void UVLevelStreaming::OnInteriorLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelStreaming", "OnInteriorLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelStreaming.OnInteriorLevelShown
// (Final, Native, Public)

void UVLevelStreaming::OnInteriorLevelShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelStreaming", "OnInteriorLevelShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelStreaming.OnInteriorLevelUnloaded
// (Final, Native, Public)

void UVLevelStreaming::OnInteriorLevelUnloaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelStreaming", "OnInteriorLevelUnloaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.RegisterSendClickedDoneHandler
// (Final, Native, Public, BlueprintCallable)

void UVLevelUpMenuViewModel::RegisterSendClickedDoneHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "RegisterSendClickedDoneHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.RegisterSendModifiedAttributesAndClickedDoneHandler
// (Final, Native, Public, BlueprintCallable)

void UVLevelUpMenuViewModel::RegisterSendModifiedAttributesAndClickedDoneHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "RegisterSendModifiedAttributesAndClickedDoneHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.RegisterSendSelectAttributeHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EVAttribute                       SelectedAttribute                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLevelUpMenuViewModel::RegisterSendSelectAttributeHandler(const EVAttribute SelectedAttribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "RegisterSendSelectAttributeHandler");

	Params::VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler Parms{};

	Parms.SelectedAttribute = SelectedAttribute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.SetBonusesArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    NewBonusesArray                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLevelUpMenuViewModel::SetBonusesArray(const TArray<int32>& NewBonusesArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "SetBonusesArray");

	Params::VLevelUpMenuViewModel_SetBonusesArray Parms{};

	Parms.NewBonusesArray = std::move(NewBonusesArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.SetCurrentPointsNb
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            NewPointsNb                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLevelUpMenuViewModel::SetCurrentPointsNb(const int32& NewPointsNb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "SetCurrentPointsNb");

	Params::VLevelUpMenuViewModel_SetCurrentPointsNb Parms{};

	Parms.NewPointsNb = NewPointsNb;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.SetModifiedAttributesIndexArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    NewModifiedAttributesIndexArray                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLevelUpMenuViewModel::SetModifiedAttributesIndexArray(const TArray<int32>& NewModifiedAttributesIndexArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "SetModifiedAttributesIndexArray");

	Params::VLevelUpMenuViewModel_SetModifiedAttributesIndexArray Parms{};

	Parms.NewModifiedAttributesIndexArray = std::move(NewModifiedAttributesIndexArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.UpdateCurrentPointsNb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsPlus                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             BonusCost                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLevelUpMenuViewModel::UpdateCurrentPointsNb(const bool IsPlus, const int32 BonusCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "UpdateCurrentPointsNb");

	Params::VLevelUpMenuViewModel_UpdateCurrentPointsNb Parms{};

	Parms.IsPlus = IsPlus;
	Parms.BonusCost = BonusCost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLevelUpMenuViewModel.GetBonusesArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<int32> UVLevelUpMenuViewModel::GetBonusesArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "GetBonusesArray");

	Params::VLevelUpMenuViewModel_GetBonusesArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelUpMenuViewModel.GetCurrentPointsNb
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVLevelUpMenuViewModel::GetCurrentPointsNb() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "GetCurrentPointsNb");

	Params::VLevelUpMenuViewModel_GetCurrentPointsNb Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelUpMenuViewModel.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLevelUpMenuState          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLevelUpMenuState UVLevelUpMenuViewModel::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "GetCurrentState");

	Params::VLevelUpMenuViewModel_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelUpMenuViewModel.GetInitializationData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLevelUpMenuInitializationDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLevelUpMenuInitializationData UVLevelUpMenuViewModel::GetInitializationData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "GetInitializationData");

	Params::VLevelUpMenuViewModel_GetInitializationData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelUpMenuViewModel.GetModifiedAttributesIndexArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<int32> UVLevelUpMenuViewModel::GetModifiedAttributesIndexArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpMenuViewModel", "GetModifiedAttributesIndexArray");

	Params::VLevelUpMenuViewModel_GetModifiedAttributesIndexArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLevelUpSecondaryAttributeWidget.OnDecrementBonus
// (Event, Protected, BlueprintEvent)

void UVLevelUpSecondaryAttributeWidget::OnDecrementBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpSecondaryAttributeWidget", "OnDecrementBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLevelUpSecondaryAttributeWidget.OnIncrementBonus
// (Event, Protected, BlueprintEvent)

void UVLevelUpSecondaryAttributeWidget::OnIncrementBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLevelUpSecondaryAttributeWidget", "OnIncrementBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VLoadingScreenViewModel.SetHints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FHintData>&         NewHints                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVLoadingScreenViewModel::SetHints(const TArray<struct FHintData>& NewHints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "SetHints");

	Params::VLoadingScreenViewModel_SetHints Parms{};

	Parms.NewHints = std::move(NewHints);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLoadingScreenViewModel.SetLoadingScreenType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELoadingScreenType                      NewLoadingScreenType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLoadingScreenViewModel::SetLoadingScreenType(ELoadingScreenType NewLoadingScreenType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "SetLoadingScreenType");

	Params::VLoadingScreenViewModel_SetLoadingScreenType Parms{};

	Parms.NewLoadingScreenType = NewLoadingScreenType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLoadingScreenViewModel.SetPlayerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadScreenPlayerData&     NewPlayerData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLoadingScreenViewModel::SetPlayerData(const struct FLoadScreenPlayerData& NewPlayerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "SetPlayerData");

	Params::VLoadingScreenViewModel_SetPlayerData Parms{};

	Parms.NewPlayerData = std::move(NewPlayerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLoadingScreenViewModel.GetHints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FHintData>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FHintData> UVLoadingScreenViewModel::GetHints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "GetHints");

	Params::VLoadingScreenViewModel_GetHints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLoadingScreenViewModel.GetLoadingScreenType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELoadingScreenType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELoadingScreenType UVLoadingScreenViewModel::GetLoadingScreenType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "GetLoadingScreenType");

	Params::VLoadingScreenViewModel_GetLoadingScreenType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLoadingScreenViewModel.GetPlayerData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLoadScreenPlayerData      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLoadScreenPlayerData UVLoadingScreenViewModel::GetPlayerData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "GetPlayerData");

	Params::VLoadingScreenViewModel_GetPlayerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLoadingScreenViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLoadingScreenViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLoadingScreenViewModel", "ThisIsForPluginCompliance");

	Params::VLoadingScreenViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLockpickMenuViewModel.RegisterSendBrokeAPick
// (Final, Native, Public, BlueprintCallable)

void UVLockpickMenuViewModel::RegisterSendBrokeAPick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "RegisterSendBrokeAPick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.RegisterSendClickedAutoAttempt
// (Final, Native, Public, BlueprintCallable)

void UVLockpickMenuViewModel::RegisterSendClickedAutoAttempt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "RegisterSendClickedAutoAttempt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.RegisterSendClickedClose
// (Final, Native, Public, BlueprintCallable)

void UVLockpickMenuViewModel::RegisterSendClickedClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "RegisterSendClickedClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.RegisterSendComplete
// (Final, Native, Public, BlueprintCallable)

void UVLockpickMenuViewModel::RegisterSendComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "RegisterSendComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.RegisterSendTumblerPicked
// (Final, Native, Public, BlueprintCallable)

void UVLockpickMenuViewModel::RegisterSendTumblerPicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "RegisterSendTumblerPicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.SetHasAutoAttemptWorked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttemptSuccess                         NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVLockpickMenuViewModel::SetHasAutoAttemptWorked(EAttemptSuccess NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "SetHasAutoAttemptWorked");

	Params::VLockpickMenuViewModel_SetHasAutoAttemptWorked Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.SetMenuProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyLockpickMenuProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLockpickMenuViewModel::SetMenuProperties(const struct FLegacyLockpickMenuProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "SetMenuProperties");

	Params::VLockpickMenuViewModel_SetMenuProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.SetTumblerDefaultProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyLockpickMenuTumblerDefaultProperties&NewTumblerDefaultProperties                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVLockpickMenuViewModel::SetTumblerDefaultProperties(const struct FLegacyLockpickMenuTumblerDefaultProperties& NewTumblerDefaultProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "SetTumblerDefaultProperties");

	Params::VLockpickMenuViewModel_SetTumblerDefaultProperties Parms{};

	Parms.NewTumblerDefaultProperties = std::move(NewTumblerDefaultProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLockpickMenuViewModel.GetHasAutoAttemptWorked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttemptSuccess                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAttemptSuccess UVLockpickMenuViewModel::GetHasAutoAttemptWorked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "GetHasAutoAttemptWorked");

	Params::VLockpickMenuViewModel_GetHasAutoAttemptWorked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLockpickMenuViewModel.GetMenuProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyLockpickMenuPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyLockpickMenuProperties UVLockpickMenuViewModel::GetMenuProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "GetMenuProperties");

	Params::VLockpickMenuViewModel_GetMenuProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLockpickMenuViewModel.GetTumblerDefaultProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyLockpickMenuTumblerDefaultPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyLockpickMenuTumblerDefaultProperties UVLockpickMenuViewModel::GetTumblerDefaultProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLockpickMenuViewModel", "GetTumblerDefaultProperties");

	Params::VLockpickMenuViewModel_GetTumblerDefaultProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionStandTurnAnimInstance.CanTurn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionStandTurnAnimInstance::CanTurn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionStandTurnAnimInstance", "CanTurn");

	Params::VLocomotionStandTurnAnimInstance_CanTurn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionStandTurnAnimInstance.IsTurning
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionStandTurnAnimInstance::IsTurning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionStandTurnAnimInstance", "IsTurning");

	Params::VLocomotionStandTurnAnimInstance_IsTurning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLocomotionStandTurnAnimInstance.IsTurningLeft
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLocomotionStandTurnAnimInstance::IsTurningLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLocomotionStandTurnAnimInstance", "IsTurningLeft");

	Params::VLocomotionStandTurnAnimInstance_IsTurningLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWaterSoundFollower.OnLoadFinished
// (Final, Native, Protected)

void AVWaterSoundFollower::OnLoadFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWaterSoundFollower", "OnLoadFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWaterSoundFollower.OnLoadStarted
// (Final, Native, Protected)

void AVWaterSoundFollower::OnLoadStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWaterSoundFollower", "OnLoadStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLookAtAnimInstance.IsSitting
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVLookAtAnimInstance::IsSitting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLookAtAnimInstance", "IsSitting");

	Params::VLookAtAnimInstance_IsSitting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.RegisterSendClickOnItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::RegisterSendClickOnItemHandler(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "RegisterSendClickOnItemHandler");

	Params::VMagicMenuViewModel_RegisterSendClickOnItemHandler Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.RegisterSendItemHoverHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::RegisterSendItemHoverHandler(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "RegisterSendItemHoverHandler");

	Params::VMagicMenuViewModel_RegisterSendItemHoverHandler Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.ReplaceCurrentPageInventory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyMagicMenuItemProperties>&NewItems                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::ReplaceCurrentPageInventory(const TArray<struct FLegacyMagicMenuItemProperties>& NewItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "ReplaceCurrentPageInventory");

	Params::VMagicMenuViewModel_ReplaceCurrentPageInventory Parms{};

	Parms.NewItems = std::move(NewItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyMagicMenuPage                    NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetCurrentPage(ELegacyMagicMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetCurrentPage");

	Params::VMagicMenuViewModel_SetCurrentPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetCurrentSpellEquiped
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMagicMenuItemProperties&InSpellEquiped                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetCurrentSpellEquiped(const struct FLegacyMagicMenuItemProperties& InSpellEquiped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetCurrentSpellEquiped");

	Params::VMagicMenuViewModel_SetCurrentSpellEquiped Parms{};

	Parms.InSpellEquiped = std::move(InSpellEquiped);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetInventory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyMagicMenuItemProperties>&NewItems                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetInventory(const TArray<struct FLegacyMagicMenuItemProperties>& NewItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetInventory");

	Params::VMagicMenuViewModel_SetInventory Parms{};

	Parms.NewItems = std::move(NewItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetInventoryForPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyMagicMenuPage              Page                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetInventoryForPage(const ELegacyMagicMenuPage Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetInventoryForPage");

	Params::VMagicMenuViewModel_SetInventoryForPage Parms{};

	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetIsSortReversed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetIsSortReversed(bool bNewIsSortReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetIsSortReversed");

	Params::VMagicMenuViewModel_SetIsSortReversed Parms{};

	Parms.bNewIsSortReversed = bNewIsSortReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetSortType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyMagicMenuSortType                NewSortType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetSortType(ELegacyMagicMenuSortType NewSortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetSortType");

	Params::VMagicMenuViewModel_SetSortType Parms{};

	Parms.NewSortType = NewSortType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetSpellEfectivenessExplanation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FModernSpellEffectivenessProperties&NewSpellEffectivenessExplanation                       (ConstParm, Parm, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetSpellEfectivenessExplanation(const struct FModernSpellEffectivenessProperties& NewSpellEffectivenessExplanation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetSpellEfectivenessExplanation");

	Params::VMagicMenuViewModel_SetSpellEfectivenessExplanation Parms{};

	Parms.NewSpellEffectivenessExplanation = std::move(NewSpellEffectivenessExplanation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.SetSpellEffectiveness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSpellEffectiveness                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::SetSpellEffectiveness(float NewSpellEffectiveness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "SetSpellEffectiveness");

	Params::VMagicMenuViewModel_SetSpellEffectiveness Parms{};

	Parms.NewSpellEffectiveness = NewSpellEffectiveness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.ToggleFavoriteItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMagicMenuItemProperties&InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMagicMenuViewModel::ToggleFavoriteItem(const struct FLegacyMagicMenuItemProperties& InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "ToggleFavoriteItem");

	Params::VMagicMenuViewModel_ToggleFavoriteItem Parms{};

	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicMenuViewModel.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyMagicMenuPage                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyMagicMenuPage UVMagicMenuViewModel::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetCurrentPage");

	Params::VMagicMenuViewModel_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetCurrentPageInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMagicMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMagicMenuItemProperties> UVMagicMenuViewModel::GetCurrentPageInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetCurrentPageInventory");

	Params::VMagicMenuViewModel_GetCurrentPageInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetCurrentSpellEquiped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMagicMenuItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const struct FLegacyMagicMenuItemProperties UVMagicMenuViewModel::GetCurrentSpellEquiped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetCurrentSpellEquiped");

	Params::VMagicMenuViewModel_GetCurrentSpellEquiped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetFavoritesItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMagicMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMagicMenuItemProperties> UVMagicMenuViewModel::GetFavoritesItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetFavoritesItems");

	Params::VMagicMenuViewModel_GetFavoritesItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMagicMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMagicMenuItemProperties> UVMagicMenuViewModel::GetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetInventory");

	Params::VMagicMenuViewModel_GetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyMagicMenuSortType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyMagicMenuSortType UVMagicMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetSortType");

	Params::VMagicMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetSpellEfectivenessExplanation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FModernSpellEffectivenessPropertiesReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModernSpellEffectivenessProperties UVMagicMenuViewModel::GetSpellEfectivenessExplanation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetSpellEfectivenessExplanation");

	Params::VMagicMenuViewModel_GetSpellEfectivenessExplanation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.GetSpellEffectiveness
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVMagicMenuViewModel::GetSpellEffectiveness() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "GetSpellEffectiveness");

	Params::VMagicMenuViewModel_GetSpellEffectiveness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.IsItemTypeOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const ELegacyMagicMenuItemType          Item                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELegacyMagicMenuPage              Page                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMagicMenuViewModel::IsItemTypeOnPage(const ELegacyMagicMenuItemType Item, const ELegacyMagicMenuPage Page) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "IsItemTypeOnPage");

	Params::VMagicMenuViewModel_IsItemTypeOnPage Parms{};

	Parms.Item = Item;
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicMenuViewModel.IsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMagicMenuViewModel::IsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicMenuViewModel", "IsSortReversed");

	Params::VMagicMenuViewModel_IsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicPopupMenuViewModel.SetEffects
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyMagicPopupEffectProperties>&NewEffectsProperties                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMagicPopupMenuViewModel::SetEffects(const TArray<struct FLegacyMagicPopupEffectProperties>& NewEffectsProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "SetEffects");

	Params::VMagicPopupMenuViewModel_SetEffects Parms{};

	Parms.NewEffectsProperties = std::move(NewEffectsProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicPopupMenuViewModel.SetIsDisplayed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicPopupMenuViewModel::SetIsDisplayed(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "SetIsDisplayed");

	Params::VMagicPopupMenuViewModel_SetIsDisplayed Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicPopupMenuViewModel.SetRequires
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewRequiresText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMagicPopupMenuViewModel::SetRequires(const class FText& NewRequiresText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "SetRequires");

	Params::VMagicPopupMenuViewModel_SetRequires Parms{};

	Parms.NewRequiresText = std::move(NewRequiresText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicPopupMenuViewModel.SetTargetYOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMagicPopupMenuViewModel::SetTargetYOffset(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "SetTargetYOffset");

	Params::VMagicPopupMenuViewModel_SetTargetYOffset Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMagicPopupMenuViewModel.GetEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMagicPopupEffectProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMagicPopupEffectProperties> UVMagicPopupMenuViewModel::GetEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "GetEffects");

	Params::VMagicPopupMenuViewModel_GetEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicPopupMenuViewModel.GetIsDisplayed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMagicPopupMenuViewModel::GetIsDisplayed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "GetIsDisplayed");

	Params::VMagicPopupMenuViewModel_GetIsDisplayed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicPopupMenuViewModel.GetRequires
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVMagicPopupMenuViewModel::GetRequires() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "GetRequires");

	Params::VMagicPopupMenuViewModel_GetRequires Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMagicPopupMenuViewModel.GetTargetYOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVMagicPopupMenuViewModel::GetTargetYOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMagicPopupMenuViewModel", "GetTargetYOffset");

	Params::VMagicPopupMenuViewModel_GetTargetYOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.DockingTransitionUpdated
// (Final, Native, Private)
// Parameters:
// bool                                    bIsUndockingTransition                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::DockingTransitionUpdated(bool bIsUndockingTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "DockingTransitionUpdated");

	Params::VMainCharacterAnimInstance_DockingTransitionUpdated Parms{};

	Parms.bIsUndockingTransition = bIsUndockingTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.LinkDynamicAnimLayersRequest
// (Final, Native, Private)

void UVMainCharacterAnimInstance::LinkDynamicAnimLayersRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "LinkDynamicAnimLayersRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.OnCombatStateComplete
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::OnCombatStateComplete(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "OnCombatStateComplete");

	Params::VMainCharacterAnimInstance_OnCombatStateComplete Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.OnCombatStateExit
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::OnCombatStateExit(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "OnCombatStateExit");

	Params::VMainCharacterAnimInstance_OnCombatStateExit Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.OnCombatStateFullyBlendedIn
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::OnCombatStateFullyBlendedIn(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "OnCombatStateFullyBlendedIn");

	Params::VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.SetLocomotionLinkTable
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FCharacterPropertyLinkTable>&InLocomotionLinkTable                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::SetLocomotionLinkTable(const TArray<struct FCharacterPropertyLinkTable>& InLocomotionLinkTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "SetLocomotionLinkTable");

	Params::VMainCharacterAnimInstance_SetLocomotionLinkTable Parms{};

	Parms.InLocomotionLinkTable = std::move(InLocomotionLinkTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.SetPropertyLinkTable
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FCharacterPropertyLinkTable>&InPropertyLinkTable                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::SetPropertyLinkTable(const TArray<struct FCharacterPropertyLinkTable>& InPropertyLinkTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "SetPropertyLinkTable");

	Params::VMainCharacterAnimInstance_SetPropertyLinkTable Parms{};

	Parms.InPropertyLinkTable = std::move(InPropertyLinkTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.SpecialIdleAnimationStart
// (Final, Native, Private)
// Parameters:
// class UAnimSequenceBase*                AnimationAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::SpecialIdleAnimationStart(class UAnimSequenceBase* AnimationAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "SpecialIdleAnimationStart");

	Params::VMainCharacterAnimInstance_SpecialIdleAnimationStart Parms{};

	Parms.AnimationAsset = AnimationAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.StateMachineActionRequest
// (Final, Native, Private)
// Parameters:
// class UVPawnAnimatedAction*             Action                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::StateMachineActionRequest(class UVPawnAnimatedAction* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "StateMachineActionRequest");

	Params::VMainCharacterAnimInstance_StateMachineActionRequest Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.TryToLinkLayer
// (Final, Native, Protected)
// Parameters:
// const TSubclassOf<class UAnimInstance>  AnimLayerClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimInstance* UVMainCharacterAnimInstance::TryToLinkLayer(const TSubclassOf<class UAnimInstance> AnimLayerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "TryToLinkLayer");

	Params::VMainCharacterAnimInstance_TryToLinkLayer Parms{};

	Parms.AnimLayerClass = AnimLayerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.TryToLinkLayerAndUpdateLinkTable
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TSubclassOf<class UAnimInstance>  AnimLayerClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCharacterPropertyLinkTable*     InPropertyLinkTable                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class UAnimInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimInstance* UVMainCharacterAnimInstance::TryToLinkLayerAndUpdateLinkTable(const TSubclassOf<class UAnimInstance> AnimLayerClass, struct FCharacterPropertyLinkTable* InPropertyLinkTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "TryToLinkLayerAndUpdateLinkTable");

	Params::VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable Parms{};

	Parms.AnimLayerClass = AnimLayerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InPropertyLinkTable != nullptr)
		*InPropertyLinkTable = std::move(Parms.InPropertyLinkTable);

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.UpdateLocomotionLinkTable
// (Final, Native, Protected, BlueprintCallable)

void UVMainCharacterAnimInstance::UpdateLocomotionLinkTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "UpdateLocomotionLinkTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.UpdateLocomotionLinkTableStateNode
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVMainCharacterAnimInstance::UpdateLocomotionLinkTableStateNode(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "UpdateLocomotionLinkTableStateNode");

	Params::VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainCharacterAnimInstance.HasActionRequest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              ActionTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::HasActionRequest(const struct FGameplayTag& ActionTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "HasActionRequest");

	Params::VMainCharacterAnimInstance_HasActionRequest Parms{};

	Parms.ActionTag = std::move(ActionTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.HasActionRequestWithIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              ActionTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnimIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::HasActionRequestWithIndex(const struct FGameplayTag& ActionTag, int32 AnimIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "HasActionRequestWithIndex");

	Params::VMainCharacterAnimInstance_HasActionRequestWithIndex Parms{};

	Parms.ActionTag = std::move(ActionTag);
	Parms.AnimIndex = AnimIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.HasAnyActionRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer&     TagContainer                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::HasAnyActionRequest(const struct FGameplayTagContainer& TagContainer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "HasAnyActionRequest");

	Params::VMainCharacterAnimInstance_HasAnyActionRequest Parms{};

	Parms.TagContainer = std::move(TagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsAttacking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsAttacking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsAttacking");

	Params::VMainCharacterAnimInstance_IsAttacking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsBlocking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsBlocking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsBlocking");

	Params::VMainCharacterAnimInstance_IsBlocking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsDodging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsDodging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsDodging");

	Params::VMainCharacterAnimInstance_IsDodging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsGrabbing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsGrabbing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsGrabbing");

	Params::VMainCharacterAnimInstance_IsGrabbing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsInAir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsInAir");

	Params::VMainCharacterAnimInstance_IsInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsMoving
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsMoving");

	Params::VMainCharacterAnimInstance_IsMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsOnHorse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsOnHorse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsOnHorse");

	Params::VMainCharacterAnimInstance_IsOnHorse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsRecoiling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsRecoiling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsRecoiling");

	Params::VMainCharacterAnimInstance_IsRecoiling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsResurrecting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsResurrecting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsResurrecting");

	Params::VMainCharacterAnimInstance_IsResurrecting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsRunning");

	Params::VMainCharacterAnimInstance_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsSneaking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsSneaking");

	Params::VMainCharacterAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsStaggered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsStaggered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsStaggered");

	Params::VMainCharacterAnimInstance_IsStaggered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsStanding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsStanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsStanding");

	Params::VMainCharacterAnimInstance_IsStanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsSwimming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsSwimming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsSwimming");

	Params::VMainCharacterAnimInstance_IsSwimming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainCharacterAnimInstance.IsWeaponDrawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainCharacterAnimInstance::IsWeaponDrawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainCharacterAnimInstance", "IsWeaponDrawn");

	Params::VMainCharacterAnimInstance_IsWeaponDrawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.IsBackgroundLoaded
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainMenuViewModel::IsBackgroundLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "IsBackgroundLoaded");

	Params::VMainMenuViewModel_IsBackgroundLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.LoadInstanceOfLevels
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UWorld*                           CurrentWorld                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainMenuViewModel::LoadInstanceOfLevels(class UWorld* CurrentWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "LoadInstanceOfLevels");

	Params::VMainMenuViewModel_LoadInstanceOfLevels Parms{};

	Parms.CurrentWorld = CurrentWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.OnPostSeamlessTravel
// (Final, Native, Private, BlueprintCallable)

void UVMainMenuViewModel::OnPostSeamlessTravel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "OnPostSeamlessTravel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.PrepareLoadingScreenContextOnNewGame
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::PrepareLoadingScreenContextOnNewGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "PrepareLoadingScreenContextOnNewGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterSendClickedContinue
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RegisterSendClickedContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterSendClickedContinue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterSendClickedExitGame
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RegisterSendClickedExitGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterSendClickedExitGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterSendClickedLoadGame
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RegisterSendClickedLoadGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterSendClickedLoadGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterSendClickedNewGame
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RegisterSendClickedNewGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterSendClickedNewGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterSendClickedSettings
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RegisterSendClickedSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterSendClickedSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterSendConfirmNewGame
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RegisterSendConfirmNewGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterSendConfirmNewGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RegisterToLevelChangeData
// (Final, Native, Private, BlueprintCallable)

void UVMainMenuViewModel::RegisterToLevelChangeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RegisterToLevelChangeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.RequiresHideHUD
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::RequiresHideHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "RequiresHideHUD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.SendCloseMainMenu
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::SendCloseMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "SendCloseMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.SetButtonsVisibility
// (Final, Native, Public)
// Parameters:
// EFLegacyMainMenuButtonVisibility        NewButtonsVisibility                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainMenuViewModel::SetButtonsVisibility(EFLegacyMainMenuButtonVisibility NewButtonsVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "SetButtonsVisibility");

	Params::VMainMenuViewModel_SetButtonsVisibility Parms{};

	Parms.NewButtonsVisibility = NewButtonsVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.SetContinueVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainMenuViewModel::SetContinueVisibility(bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "SetContinueVisibility");

	Params::VMainMenuViewModel_SetContinueVisibility Parms{};

	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.SetIsMoviePlaying
// (Final, Native, Public)
// Parameters:
// bool                                    bNewIsMoviePlaying                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainMenuViewModel::SetIsMoviePlaying(bool bNewIsMoviePlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "SetIsMoviePlaying");

	Params::VMainMenuViewModel_SetIsMoviePlaying Parms{};

	Parms.bNewIsMoviePlaying = bNewIsMoviePlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.SetVersionText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMainMenuViewModel::SetVersionText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "SetVersionText");

	Params::VMainMenuViewModel_SetVersionText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.UnloadInstanceLevels
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UWorld*                           CurrentWorld                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMainMenuViewModel::UnloadInstanceLevels(class UWorld* CurrentWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "UnloadInstanceLevels");

	Params::VMainMenuViewModel_UnloadInstanceLevels Parms{};

	Parms.CurrentWorld = CurrentWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.UnRegisterToLevelChangeData
// (Final, Native, Private, BlueprintCallable)

void UVMainMenuViewModel::UnRegisterToLevelChangeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "UnRegisterToLevelChangeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.UpdateContinueVisibility
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::UpdateContinueVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "UpdateContinueVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.ValidateOnboarding
// (Final, Native, Public, BlueprintCallable)

void UVMainMenuViewModel::ValidateOnboarding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "ValidateOnboarding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMainMenuViewModel.GetBuildInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVMainMenuViewModel::GetBuildInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "GetBuildInfo");

	Params::VMainMenuViewModel_GetBuildInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.GetButtonsVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EFLegacyMainMenuButtonVisibility  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EFLegacyMainMenuButtonVisibility UVMainMenuViewModel::GetButtonsVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "GetButtonsVisibility");

	Params::VMainMenuViewModel_GetButtonsVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.GetContinueVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainMenuViewModel::GetContinueVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "GetContinueVisibility");

	Params::VMainMenuViewModel_GetContinueVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.GetDoesNeedOnboarding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainMenuViewModel::GetDoesNeedOnboarding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "GetDoesNeedOnboarding");

	Params::VMainMenuViewModel_GetDoesNeedOnboarding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.GetIsMoviePlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMainMenuViewModel::GetIsMoviePlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "GetIsMoviePlaying");

	Params::VMainMenuViewModel_GetIsMoviePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMainMenuViewModel.GetVersionText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVMainMenuViewModel::GetVersionText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMainMenuViewModel", "GetVersionText");

	Params::VMainMenuViewModel_GetVersionText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewDate                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      NewBody                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVLegacyMapMenuQuestCarouselItem* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuQuestCarouselItem* UVLegacyMapMenuQuestCarouselItem::CreateQuestCarouselItem(const class FText& NewDate, const class FText& NewBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLegacyMapMenuQuestCarouselItem", "CreateQuestCarouselItem");

	Params::VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem Parms{};

	Parms.NewDate = std::move(NewDate);
	Parms.NewBody = std::move(NewBody);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItemFromQuest
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuQuestProperties&Quest                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVLegacyMapMenuQuestCarouselItem* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuQuestCarouselItem* UVLegacyMapMenuQuestCarouselItem::CreateQuestCarouselItemFromQuest(const struct FLegacyMapMenuQuestProperties& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLegacyMapMenuQuestCarouselItem", "CreateQuestCarouselItemFromQuest");

	Params::VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest Parms{};

	Parms.Quest = std::move(Quest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItemLeftDecorator
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVLegacyMapMenuQuestCarouselItem* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuQuestCarouselItem* UVLegacyMapMenuQuestCarouselItem::CreateQuestCarouselItemLeftDecorator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLegacyMapMenuQuestCarouselItem", "CreateQuestCarouselItemLeftDecorator");

	Params::VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItemRightDecorator
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVLegacyMapMenuQuestCarouselItem* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVLegacyMapMenuQuestCarouselItem* UVLegacyMapMenuQuestCarouselItem::CreateQuestCarouselItemRightDecorator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VLegacyMapMenuQuestCarouselItem", "CreateQuestCarouselItemRightDecorator");

	Params::VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.RegisterSendHoverOnItemHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyStatsMenuPage                    Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::RegisterSendHoverOnItemHandler(ELegacyStatsMenuPage Page, int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "RegisterSendHoverOnItemHandler");

	Params::VStatsMenuViewModel_RegisterSendHoverOnItemHandler Parms{};

	Parms.Page = Page;
	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.ResetHoverData
// (Final, Native, Public, BlueprintCallable)

void UVStatsMenuViewModel::ResetHoverData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "ResetHoverData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetAreDetailsDisplayed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewAreDetailsDisplayed                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetAreDetailsDisplayed(bool NewAreDetailsDisplayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetAreDetailsDisplayed");

	Params::VStatsMenuViewModel_SetAreDetailsDisplayed Parms{};

	Parms.NewAreDetailsDisplayed = NewAreDetailsDisplayed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetCurrentPage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ELegacyStatsMenuPage&             NewCurrentPage                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetCurrentPage(const ELegacyStatsMenuPage& NewCurrentPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetCurrentPage");

	Params::VStatsMenuViewModel_SetCurrentPage Parms{};

	Parms.NewCurrentPage = NewCurrentPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetFactions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyStatsMenuFactionProperties>&NewFactions                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetFactions(const TArray<struct FLegacyStatsMenuFactionProperties>& NewFactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetFactions");

	Params::VStatsMenuViewModel_SetFactions Parms{};

	Parms.NewFactions = std::move(NewFactions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetFatigue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuPrimaryAttributeValues&NewFatigue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetFatigue(const struct FLegacyStatsMenuPrimaryAttributeValues& NewFatigue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetFatigue");

	Params::VStatsMenuViewModel_SetFatigue Parms{};

	Parms.NewFatigue = std::move(NewFatigue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetHealth
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuPrimaryAttributeValues&NewHealth                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetHealth(const struct FLegacyStatsMenuPrimaryAttributeValues& NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetHealth");

	Params::VStatsMenuViewModel_SetHealth Parms{};

	Parms.NewHealth = std::move(NewHealth);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetLevelProgression
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuLevelProgression&NewLevelProgression                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetLevelProgression(const struct FLegacyStatsMenuLevelProgression& NewLevelProgression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetLevelProgression");

	Params::VStatsMenuViewModel_SetLevelProgression Parms{};

	Parms.NewLevelProgression = std::move(NewLevelProgression);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetMagicka
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuPrimaryAttributeValues&NewMagicka                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetMagicka(const struct FLegacyStatsMenuPrimaryAttributeValues& NewMagicka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetMagicka");

	Params::VStatsMenuViewModel_SetMagicka Parms{};

	Parms.NewMagicka = std::move(NewMagicka);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetMiscItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyStatsMenuMiscItemProperties>&NewMiscItems                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetMiscItems(const TArray<struct FLegacyStatsMenuMiscItemProperties>& NewMiscItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetMiscItems");

	Params::VStatsMenuViewModel_SetMiscItems Parms{};

	Parms.NewMiscItems = std::move(NewMiscItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetPlayerInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuPlayerInfo&NewPlayerInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetPlayerInfo(const struct FLegacyStatsMenuPlayerInfo& NewPlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetPlayerInfo");

	Params::VStatsMenuViewModel_SetPlayerInfo Parms{};

	Parms.NewPlayerInfo = std::move(NewPlayerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetPopupContent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuPopupContent&NewPopUpContent                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetPopupContent(const struct FLegacyStatsMenuPopupContent& NewPopUpContent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetPopupContent");

	Params::VStatsMenuViewModel_SetPopupContent Parms{};

	Parms.NewPopUpContent = std::move(NewPopUpContent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetSecondaryAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const ELegacyStatsMenuPage2Items        Item                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyStatsMenuSecondaryAttribute&NewValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetSecondaryAttribute(const ELegacyStatsMenuPage2Items Item, const struct FLegacyStatsMenuSecondaryAttribute& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetSecondaryAttribute");

	Params::VStatsMenuViewModel_SetSecondaryAttribute Parms{};

	Parms.Item = Item;
	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetSecondaryAttributes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<ELegacyStatsMenuPage2Items, struct FLegacyStatsMenuSecondaryAttribute>&NewAttributes                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetSecondaryAttributes(const TMap<ELegacyStatsMenuPage2Items, struct FLegacyStatsMenuSecondaryAttribute>& NewAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetSecondaryAttributes");

	Params::VStatsMenuViewModel_SetSecondaryAttributes Parms{};

	Parms.NewAttributes = std::move(NewAttributes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetSkillItemProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyStatsMenuSkillItemProperties>&NewSkillItemProperties                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetSkillItemProperties(const TArray<struct FLegacyStatsMenuSkillItemProperties>& NewSkillItemProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetSkillItemProperties");

	Params::VStatsMenuViewModel_SetSkillItemProperties Parms{};

	Parms.NewSkillItemProperties = std::move(NewSkillItemProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.SetSkillItemUpdatableProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyStatsMenuSkillItemUpdatableProperties&NewSkillItemUpdatableProperties                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::SetSkillItemUpdatableProperties(const struct FLegacyStatsMenuSkillItemUpdatableProperties& NewSkillItemUpdatableProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "SetSkillItemUpdatableProperties");

	Params::VStatsMenuViewModel_SetSkillItemUpdatableProperties Parms{};

	Parms.NewSkillItemUpdatableProperties = std::move(NewSkillItemUpdatableProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.UpdateOneSkillItemProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyStatsMenuSkillItemUpdatableProperties&NewSkillItemProperties                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVStatsMenuViewModel::UpdateOneSkillItemProperties(const int32 Index_0, const struct FLegacyStatsMenuSkillItemUpdatableProperties& NewSkillItemProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "UpdateOneSkillItemProperties");

	Params::VStatsMenuViewModel_UpdateOneSkillItemProperties Parms{};

	Parms.Index_0 = Index_0;
	Parms.NewSkillItemProperties = std::move(NewSkillItemProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VStatsMenuViewModel.GetAreDetailsDisplayed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVStatsMenuViewModel::GetAreDetailsDisplayed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetAreDetailsDisplayed");

	Params::VStatsMenuViewModel_GetAreDetailsDisplayed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyStatsMenuPage                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyStatsMenuPage UVStatsMenuViewModel::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetCurrentPage");

	Params::VStatsMenuViewModel_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetFactions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyStatsMenuFactionProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyStatsMenuFactionProperties> UVStatsMenuViewModel::GetFactions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetFactions");

	Params::VStatsMenuViewModel_GetFactions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetFatigue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuPrimaryAttributeValuesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuPrimaryAttributeValues UVStatsMenuViewModel::GetFatigue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetFatigue");

	Params::VStatsMenuViewModel_GetFatigue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuPrimaryAttributeValuesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuPrimaryAttributeValues UVStatsMenuViewModel::GetHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetHealth");

	Params::VStatsMenuViewModel_GetHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetLevelProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuLevelProgressionReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuLevelProgression UVStatsMenuViewModel::GetLevelProgression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetLevelProgression");

	Params::VStatsMenuViewModel_GetLevelProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetMagicka
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuPrimaryAttributeValuesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuPrimaryAttributeValues UVStatsMenuViewModel::GetMagicka() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetMagicka");

	Params::VStatsMenuViewModel_GetMagicka Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetMiscItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyStatsMenuMiscItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyStatsMenuMiscItemProperties> UVStatsMenuViewModel::GetMiscItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetMiscItems");

	Params::VStatsMenuViewModel_GetMiscItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetPlayerInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuPlayerInfo ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuPlayerInfo UVStatsMenuViewModel::GetPlayerInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetPlayerInfo");

	Params::VStatsMenuViewModel_GetPlayerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetPopUpContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuPopupContentReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuPopupContent UVStatsMenuViewModel::GetPopUpContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetPopUpContent");

	Params::VStatsMenuViewModel_GetPopUpContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetSecondaryAttributes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<ELegacyStatsMenuPage2Items, struct FLegacyStatsMenuSecondaryAttribute>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<ELegacyStatsMenuPage2Items, struct FLegacyStatsMenuSecondaryAttribute> UVStatsMenuViewModel::GetSecondaryAttributes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetSecondaryAttributes");

	Params::VStatsMenuViewModel_GetSecondaryAttributes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetSkillItemProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyStatsMenuSkillItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyStatsMenuSkillItemProperties> UVStatsMenuViewModel::GetSkillItemProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetSkillItemProperties");

	Params::VStatsMenuViewModel_GetSkillItemProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VStatsMenuViewModel.GetSkillItemUpdatableProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyStatsMenuSkillItemUpdatablePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyStatsMenuSkillItemUpdatableProperties UVStatsMenuViewModel::GetSkillItemUpdatableProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VStatsMenuViewModel", "GetSkillItemUpdatableProperties");

	Params::VStatsMenuViewModel_GetSkillItemUpdatableProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.DelayFastTravelRequestUntilFadeEnd
// (Final, Native, Public)
// Parameters:
// EVFadeTransitionType                    InFadeTransitionType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::DelayFastTravelRequestUntilFadeEnd(EVFadeTransitionType InFadeTransitionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "DelayFastTravelRequestUntilFadeEnd");

	Params::VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd Parms{};

	Parms.InFadeTransitionType = InFadeTransitionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.HideMap
// (Final, Native, Public)

void UVMapMenuViewModel::HideMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "HideMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendClickedBack
// (Final, Native, Public, BlueprintCallable)

void UVMapMenuViewModel::RegisterSendClickedBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendClickedBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendClickedCurrentQuestHistory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::RegisterSendClickedCurrentQuestHistory(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendClickedCurrentQuestHistory");

	Params::VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendClickedDetailedQuest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::RegisterSendClickedDetailedQuest(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendClickedDetailedQuest");

	Params::VMapMenuViewModel_RegisterSendClickedDetailedQuest Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendClickedMap
// (Final, Native, Public, BlueprintCallable)

void UVMapMenuViewModel::RegisterSendClickedMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendClickedMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendClickedQuest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::RegisterSendClickedQuest(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendClickedQuest");

	Params::VMapMenuViewModel_RegisterSendClickedQuest Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendClickedQuestCompleted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::RegisterSendClickedQuestCompleted(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendClickedQuestCompleted");

	Params::VMapMenuViewModel_RegisterSendClickedQuestCompleted Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.RegisterSendCurrentPageUpdatedHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyMapMenuPage                NewPage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::RegisterSendCurrentPageUpdatedHandler(const ELegacyMapMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "RegisterSendCurrentPageUpdatedHandler");

	Params::VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.SetActiveQuestData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuQuestProperties&NewActiveQuestData                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::SetActiveQuestData(const struct FLegacyMapMenuQuestProperties& NewActiveQuestData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "SetActiveQuestData");

	Params::VMapMenuViewModel_SetActiveQuestData Parms{};

	Parms.NewActiveQuestData = std::move(NewActiveQuestData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyMapMenuPage                NewPage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::SetCurrentPage(const ELegacyMapMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "SetCurrentPage");

	Params::VMapMenuViewModel_SetCurrentPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.SetQuestHistory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyMapMenuQuestProperties>&NewQuestHistory                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::SetQuestHistory(const TArray<struct FLegacyMapMenuQuestProperties>& NewQuestHistory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "SetQuestHistory");

	Params::VMapMenuViewModel_SetQuestHistory Parms{};

	Parms.NewQuestHistory = std::move(NewQuestHistory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.SetQuests
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyMapMenuQuestProperties>&NewQuests                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::SetQuests(const TArray<struct FLegacyMapMenuQuestProperties>& NewQuests)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "SetQuests");

	Params::VMapMenuViewModel_SetQuests Parms{};

	Parms.NewQuests = std::move(NewQuests);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.SetTitleProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuTitleProperties&NewTitleProperties                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMapMenuViewModel::SetTitleProperties(const struct FLegacyMapMenuTitleProperties& NewTitleProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "SetTitleProperties");

	Params::VMapMenuViewModel_SetTitleProperties Parms{};

	Parms.NewTitleProperties = std::move(NewTitleProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapMenuViewModel.GetActiveQuestData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMapMenuQuestPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyMapMenuQuestProperties UVMapMenuViewModel::GetActiveQuestData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetActiveQuestData");

	Params::VMapMenuViewModel_GetActiveQuestData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyMapMenuPage                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyMapMenuPage UVMapMenuViewModel::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetCurrentPage");

	Params::VMapMenuViewModel_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.GetLocalMapMenuViewModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVMapPageViewModel*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVMapPageViewModel* UVMapMenuViewModel::GetLocalMapMenuViewModel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetLocalMapMenuViewModel");

	Params::VMapMenuViewModel_GetLocalMapMenuViewModel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.GetQuestHistory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMapMenuQuestProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMapMenuQuestProperties> UVMapMenuViewModel::GetQuestHistory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetQuestHistory");

	Params::VMapMenuViewModel_GetQuestHistory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.GetQuests
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMapMenuQuestProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMapMenuQuestProperties> UVMapMenuViewModel::GetQuests() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetQuests");

	Params::VMapMenuViewModel_GetQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.GetTitleProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMapMenuTitlePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyMapMenuTitleProperties UVMapMenuViewModel::GetTitleProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetTitleProperties");

	Params::VMapMenuViewModel_GetTitleProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapMenuViewModel.GetWorldMapMenuViewModel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UVMapPageViewModel*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVMapPageViewModel* UVMapMenuViewModel::GetWorldMapMenuViewModel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapMenuViewModel", "GetWorldMapMenuViewModel");

	Params::VMapMenuViewModel_GetWorldMapMenuViewModel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.CenterMapOnPlayer
// (Final, Native, Public, BlueprintCallable)

void UVMapPageViewModel::CenterMapOnPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "CenterMapOnPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.ForceSetMapPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewMapPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::ForceSetMapPosition(const struct FVector2D& NewMapPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "ForceSetMapPosition");

	Params::VMapPageViewModel_ForceSetMapPosition Parms{};

	Parms.NewMapPosition = std::move(NewMapPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.RegisterSendCreatePlayerMarkerHandler
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    IsWorldMap                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 MarkerPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 OblivionWorldMarkerPos                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::RegisterSendCreatePlayerMarkerHandler(bool IsWorldMap, const struct FVector2D& MarkerPos, const struct FVector2D& OblivionWorldMarkerPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "RegisterSendCreatePlayerMarkerHandler");

	Params::VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler Parms{};

	Parms.IsWorldMap = IsWorldMap;
	Parms.MarkerPos = std::move(MarkerPos);
	Parms.OblivionWorldMarkerPos = std::move(OblivionWorldMarkerPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.RegisterSendShowSleepWaitMenu
// (Final, Native, Public, BlueprintCallable)

void UVMapPageViewModel::RegisterSendShowSleepWaitMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "RegisterSendShowSleepWaitMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.RegisterSendWorldMapIconClickedHandlerAddress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Address                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::RegisterSendWorldMapIconClickedHandlerAddress(const class FString& Address)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "RegisterSendWorldMapIconClickedHandlerAddress");

	Params::VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress Parms{};

	Parms.Address = std::move(Address);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.RegisterSendWorldMapIconClickedHandlerName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::RegisterSendWorldMapIconClickedHandlerName(const class FName& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "RegisterSendWorldMapIconClickedHandlerName");

	Params::VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetHasTriedFastTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetHasTriedFastTravel(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetHasTriedFastTravel");

	Params::VMapPageViewModel_SetHasTriedFastTravel Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetLocalMapProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuLocalMapProperties&NewMapProperties                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetLocalMapProperties(const struct FLegacyMapMenuLocalMapProperties& NewMapProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetLocalMapProperties");

	Params::VMapPageViewModel_SetLocalMapProperties Parms{};

	Parms.NewMapProperties = std::move(NewMapProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetLockingUpdatesDuringDelayedFastTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InLockMapUpdates                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetLockingUpdatesDuringDelayedFastTravel(bool InLockMapUpdates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetLockingUpdatesDuringDelayedFastTravel");

	Params::VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel Parms{};

	Parms.InLockMapUpdates = InLockMapUpdates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetMapIcons
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyMapMenuIconProperties>&NewIcons                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetMapIcons(const TArray<struct FLegacyMapMenuIconProperties>& NewIcons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetMapIcons");

	Params::VMapPageViewModel_SetMapIcons Parms{};

	Parms.NewIcons = std::move(NewIcons);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetMapPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewMapPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetMapPosition(const struct FVector2D& NewMapPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetMapPosition");

	Params::VMapPageViewModel_SetMapPosition Parms{};

	Parms.NewMapPosition = std::move(NewMapPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetMaxZoomValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMaxZoomValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetMaxZoomValue(float NewMaxZoomValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetMaxZoomValue");

	Params::VMapPageViewModel_SetMaxZoomValue Parms{};

	Parms.NewMaxZoomValue = NewMaxZoomValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetMinZoomValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMinZoomValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetMinZoomValue(float NewMinZoomValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetMinZoomValue");

	Params::VMapPageViewModel_SetMinZoomValue Parms{};

	Parms.NewMinZoomValue = NewMinZoomValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetPlayerMarkerPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewMapPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetPlayerMarkerPosition(const struct FVector2D& NewMapPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetPlayerMarkerPosition");

	Params::VMapPageViewModel_SetPlayerMarkerPosition Parms{};

	Parms.NewMapPosition = std::move(NewMapPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetRenderTargetTextureFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetRenderTargetTextureFog(class UTextureRenderTarget2D* RenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetRenderTargetTextureFog");

	Params::VMapPageViewModel_SetRenderTargetTextureFog Parms{};

	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetWorldMapProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuWorldMapProperties&NewMapProperties                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetWorldMapProperties(const struct FLegacyMapMenuWorldMapProperties& NewMapProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetWorldMapProperties");

	Params::VMapPageViewModel_SetWorldMapProperties Parms{};

	Parms.NewMapProperties = std::move(NewMapProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.SetZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMapPageViewModel::SetZoom(float NewZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "SetZoom");

	Params::VMapPageViewModel_SetZoom Parms{};

	Parms.NewZoom = NewZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMapPageViewModel.GetHasTriedFastTravel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMapPageViewModel::GetHasTriedFastTravel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetHasTriedFastTravel");

	Params::VMapPageViewModel_GetHasTriedFastTravel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetLocalMapProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMapMenuLocalMapPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyMapMenuLocalMapProperties UVMapPageViewModel::GetLocalMapProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetLocalMapProperties");

	Params::VMapPageViewModel_GetLocalMapProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetLockingUpdatesDuringDelayedFastTravel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVMapPageViewModel::GetLockingUpdatesDuringDelayedFastTravel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetLockingUpdatesDuringDelayedFastTravel");

	Params::VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetMapIcons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyMapMenuIconProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyMapMenuIconProperties> UVMapPageViewModel::GetMapIcons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetMapIcons");

	Params::VMapPageViewModel_GetMapIcons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetMapPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UVMapPageViewModel::GetMapPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetMapPosition");

	Params::VMapPageViewModel_GetMapPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetMaxZoomValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVMapPageViewModel::GetMaxZoomValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetMaxZoomValue");

	Params::VMapPageViewModel_GetMaxZoomValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetMinZoomValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVMapPageViewModel::GetMinZoomValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetMinZoomValue");

	Params::VMapPageViewModel_GetMinZoomValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetPlayerMarkerPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UVMapPageViewModel::GetPlayerMarkerPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetPlayerMarkerPosition");

	Params::VMapPageViewModel_GetPlayerMarkerPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetWorldMapProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyMapMenuWorldMapPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLegacyMapMenuWorldMapProperties UVMapPageViewModel::GetWorldMapProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetWorldMapProperties");

	Params::VMapPageViewModel_GetWorldMapProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMapPageViewModel.GetZoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVMapPageViewModel::GetZoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMapPageViewModel", "GetZoom");

	Params::VMapPageViewModel_GetZoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMessageMenuViewModel.RegisterSendClickedButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMessageMenuViewModel::RegisterSendClickedButton(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "RegisterSendClickedButton");

	Params::VMessageMenuViewModel_RegisterSendClickedButton Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMessageMenuViewModel.SetButtonsText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class FText>&              NewButtonsText                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVMessageMenuViewModel::SetButtonsText(const TArray<class FText>& NewButtonsText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "SetButtonsText");

	Params::VMessageMenuViewModel_SetButtonsText Parms{};

	Parms.NewButtonsText = std::move(NewButtonsText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMessageMenuViewModel.SetMenuType
// (Final, Native, Public)
// Parameters:
// EModalMenuLayoutType                    NewMenuType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVMessageMenuViewModel::SetMenuType(EModalMenuLayoutType NewMenuType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "SetMenuType");

	Params::VMessageMenuViewModel_SetMenuType Parms{};

	Parms.NewMenuType = NewMenuType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMessageMenuViewModel.SetMessage
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewMessage                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVMessageMenuViewModel::SetMessage(const class FText& NewMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "SetMessage");

	Params::VMessageMenuViewModel_SetMessage Parms{};

	Parms.NewMessage = std::move(NewMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMessageMenuViewModel.GetButtonsText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FText>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FText> UVMessageMenuViewModel::GetButtonsText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "GetButtonsText");

	Params::VMessageMenuViewModel_GetButtonsText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMessageMenuViewModel.GetMenuType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EModalMenuLayoutType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModalMenuLayoutType UVMessageMenuViewModel::GetMenuType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "GetMenuType");

	Params::VMessageMenuViewModel_GetMenuType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VMessageMenuViewModel.GetMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVMessageMenuViewModel::GetMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMessageMenuViewModel", "GetMessage");

	Params::VMessageMenuViewModel_GetMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernGamepadRebindWidget.OnGamepadKeySelectorKeyChanged
// (Final, Native, Private)

void UVModernGamepadRebindWidget::OnGamepadKeySelectorKeyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernGamepadRebindWidget", "OnGamepadKeySelectorKeyChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernGamepadRebindWidget.OnGamepadKeySelectorKeySelected
// (Final, Native, Private)
// Parameters:
// const struct FInputChord&               NewInputChord                                          (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernGamepadRebindWidget::OnGamepadKeySelectorKeySelected(const struct FInputChord& NewInputChord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernGamepadRebindWidget", "OnGamepadKeySelectorKeySelected");

	Params::VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected Parms{};

	Parms.NewInputChord = std::move(NewInputChord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHelpMenu.CreateListData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<class FString, struct FHelpEntryCategoryData>&DataPerCategory                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernHelpMenu::CreateListData(const TMap<class FString, struct FHelpEntryCategoryData>& DataPerCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "CreateListData");

	Params::VModernHelpMenu_CreateListData Parms{};

	Parms.DataPerCategory = std::move(DataPerCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHelpMenu.OnDataSelectionToggled
// (Event, Public, BlueprintEvent)

void UVModernHelpMenu::OnDataSelectionToggled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "OnDataSelectionToggled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernHelpMenu.OnListEntriesUpdated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class UHelpMenuListEntryData*>&InListData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernHelpMenu::OnListEntriesUpdated(const TArray<class UHelpMenuListEntryData*>& InListData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "OnListEntriesUpdated");

	Params::VModernHelpMenu_OnListEntriesUpdated Parms{};

	Parms.InListData = std::move(InListData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernHelpMenu.OnNavigateEntry
// (Event, Public, BlueprintEvent)
// Parameters:
// class UHelpMenuListEntryData*           Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHelpMenu::OnNavigateEntry(class UHelpMenuListEntryData* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "OnNavigateEntry");

	Params::VModernHelpMenu_OnNavigateEntry Parms{};

	Parms.Entry = Entry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernHelpMenu.ProcessTutorials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UDataTable*                 Tutorials                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHelpMenu::ProcessTutorials(const class UDataTable* Tutorials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "ProcessTutorials");

	Params::VModernHelpMenu_ProcessTutorials Parms{};

	Parms.Tutorials = Tutorials;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHelpMenu.ShowLess
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernHelpMenu::ShowLess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "ShowLess");

	Params::VModernHelpMenu_ShowLess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VModernHelpMenu.ToggleCategory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHelpMenuListEntryData*           Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHelpMenu::ToggleCategory(class UHelpMenuListEntryData* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "ToggleCategory");

	Params::VModernHelpMenu_ToggleCategory Parms{};

	Parms.Entry = Entry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHelpMenu.ToggleData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHelpMenuListEntryData*           Entry                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       Tutorials                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHelpMenu::ToggleData(class UHelpMenuListEntryData* Entry, class UDataTable* Tutorials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "ToggleData");

	Params::VModernHelpMenu_ToggleData Parms{};

	Parms.Entry = Entry;
	Parms.Tutorials = Tutorials;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHelpMenu.UpdateListData
// (Final, Native, Public, BlueprintCallable)

void UVModernHelpMenu::UpdateListData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "UpdateListData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHelpMenu.GetCurrentDataAdjustedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernHelpMenu::GetCurrentDataAdjustedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "GetCurrentDataAdjustedIndex");

	Params::VModernHelpMenu_GetCurrentDataAdjustedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernHelpMenu.GetDetailIndexText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UVModernHelpMenu::GetDetailIndexText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenu", "GetDetailIndexText");

	Params::VModernHelpMenu_GetDetailIndexText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernHelpMenuListEntry.OnExpanded
// (Event, Protected, BlueprintEvent)

void UVModernHelpMenuListEntry::OnExpanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHelpMenuListEntry", "OnExpanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernHudMain.OnForcePlayerMenuPageUpdated
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHudMain::OnForcePlayerMenuPageUpdated(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHudMain", "OnForcePlayerMenuPageUpdated");

	Params::VModernHudMain_OnForcePlayerMenuPageUpdated Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernHudMain.OnHUDVisibilityChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHUDVisibility                          Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHudMain::OnHUDVisibilityChanged(EHUDVisibility Flag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHudMain", "OnHUDVisibilityChanged");

	Params::VModernHudMain_OnHUDVisibilityChanged Parms{};

	Parms.Flag = Flag;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernHudPrimaryLayout.OnHUDGlobalVisibilityChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHudPrimaryLayout::OnHUDGlobalVisibilityChanged(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHudPrimaryLayout", "OnHUDGlobalVisibilityChanged");

	Params::VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernHudPrimaryLayout.OnHUDVisibilityChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EHUDVisibility                          Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernHudPrimaryLayout::OnHUDVisibilityChanged(EHUDVisibility Flag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHudPrimaryLayout", "OnHUDVisibilityChanged");

	Params::VModernHudPrimaryLayout_OnHUDVisibilityChanged Parms{};

	Parms.Flag = Flag;
	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernHudReticle.CheckForBehaviorTypeUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              WeaponTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVHUDReticleViewModel*            ViewModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernHudReticle::CheckForBehaviorTypeUpdate(const struct FGameplayTag& WeaponTag, class UVHUDReticleViewModel* ViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernHudReticle", "CheckForBehaviorTypeUpdate");

	Params::VModernHudReticle_CheckForBehaviorTypeUpdate Parms{};

	Parms.WeaponTag = std::move(WeaponTag);
	Parms.ViewModel = ViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernKeyboardRebindWidget.OnPrimaryKeyboardKeySelectorKeyChanged
// (Final, Native, Private)

void UVModernKeyboardRebindWidget::OnPrimaryKeyboardKeySelectorKeyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernKeyboardRebindWidget", "OnPrimaryKeyboardKeySelectorKeyChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernKeyboardRebindWidget.OnPrimaryKeyboardKeySelectorKeySelected
// (Final, Native, Private)
// Parameters:
// const struct FInputChord&               NewInputChord                                          (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernKeyboardRebindWidget::OnPrimaryKeyboardKeySelectorKeySelected(const struct FInputChord& NewInputChord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernKeyboardRebindWidget", "OnPrimaryKeyboardKeySelectorKeySelected");

	Params::VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected Parms{};

	Parms.NewInputChord = std::move(NewInputChord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernKeyboardRebindWidget.OnSecondaryKeyboardKeySelectorKeyChanged
// (Final, Native, Private)

void UVModernKeyboardRebindWidget::OnSecondaryKeyboardKeySelectorKeyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernKeyboardRebindWidget", "OnSecondaryKeyboardKeySelectorKeyChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernKeyboardRebindWidget.OnSecondaryKeyboardKeySelectorKeySelected
// (Final, Native, Private)
// Parameters:
// const struct FInputChord&               NewInputChord                                          (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernKeyboardRebindWidget::OnSecondaryKeyboardKeySelectorKeySelected(const struct FInputChord& NewInputChord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernKeyboardRebindWidget", "OnSecondaryKeyboardKeySelectorKeySelected");

	Params::VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected Parms{};

	Parms.NewInputChord = std::move(NewInputChord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernListView.OnListViewScrollbarChangedInternal
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   MinScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentScrollbarValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ThumbFractionSize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernListView::OnListViewScrollbarChangedInternal(float MinScrollbarValue, float MaxScrollbarValue, float CurrentScrollbarValue, float ThumbFractionSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernListView", "OnListViewScrollbarChangedInternal");

	Params::VModernListView_OnListViewScrollbarChangedInternal Parms{};

	Parms.MinScrollbarValue = MinScrollbarValue;
	Parms.MaxScrollbarValue = MaxScrollbarValue;
	Parms.CurrentScrollbarValue = CurrentScrollbarValue;
	Parms.ThumbFractionSize = ThumbFractionSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickingMenuTumbler.AttemptSolve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernLockpickingMenuTumbler::AttemptSolve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "AttemptSolve");

	Params::VModernLockpickingMenuTumbler_AttemptSolve Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickingMenuTumbler.ForceTumblerDown
// (Final, Native, Public, BlueprintCallable)

void UVModernLockpickingMenuTumbler::ForceTumblerDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "ForceTumblerDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickingMenuTumbler.GetNextAnimationTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModernLockpickingMenuTumbler::GetNextAnimationTime(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "GetNextAnimationTime");

	Params::VModernLockpickingMenuTumbler_GetNextAnimationTime Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickingMenuTumbler.PlayInitialMovementEffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVModernLockpickingMenuTumbler::PlayInitialMovementEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "PlayInitialMovementEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernLockpickingMenuTumbler.PlayIsSolvedEffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVModernLockpickingMenuTumbler::PlayIsSolvedEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "PlayIsSolvedEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernLockpickingMenuTumbler.PlayOnFallEffects
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVModernLockpickingMenuTumbler::PlayOnFallEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "PlayOnFallEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernLockpickingMenuTumbler.SetInitialMovement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernLockpickMenuTumblerProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModernLockpickingMenuTumbler::SetInitialMovement(const struct FModernLockpickMenuTumblerProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "SetInitialMovement");

	Params::VModernLockpickingMenuTumbler_SetInitialMovement Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickingMenuTumbler.SetIsSolved
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickingMenuTumbler::SetIsSolved(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "SetIsSolved");

	Params::VModernLockpickingMenuTumbler_SetIsSolved Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickingMenuTumbler.SetIsTumbling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickingMenuTumbler::SetIsTumbling(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "SetIsTumbling");

	Params::VModernLockpickingMenuTumbler_SetIsTumbling Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickingMenuTumbler.UpdateAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickingMenuTumbler::UpdateAnimation(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "UpdateAnimation");

	Params::VModernLockpickingMenuTumbler_UpdateAnimation Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernLockpickingMenuTumbler.GetInitialMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernLockpickMenuTumblerPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FModernLockpickMenuTumblerProperties UVModernLockpickingMenuTumbler::GetInitialMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "GetInitialMovement");

	Params::VModernLockpickingMenuTumbler_GetInitialMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickingMenuTumbler.GetIsSolved
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernLockpickingMenuTumbler::GetIsSolved() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "GetIsSolved");

	Params::VModernLockpickingMenuTumbler_GetIsSolved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickingMenuTumbler.GetIsTumbling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernLockpickingMenuTumbler::GetIsTumbling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickingMenuTumbler", "GetIsTumbling");

	Params::VModernLockpickingMenuTumbler_GetIsTumbling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickMenu.GetTumblersToReset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   SecuritySkillLevel                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernLockpickMenu::GetTumblersToReset(int32 SecuritySkillLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenu", "GetTumblersToReset");

	Params::VModernLockpickMenu_GetTumblersToReset Parms{};

	Parms.SecuritySkillLevel = SecuritySkillLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickMenu.InitialiseTumblerMovement
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TumblerIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyLockpickMenuTumblerDefaultProperties&TumblerDefaultProperties                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLegacyLockpickMenuProperties&MenuProperties                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModernLockpickMenu::InitialiseTumblerMovement(int32 TumblerIndex, const struct FLegacyLockpickMenuTumblerDefaultProperties& TumblerDefaultProperties, const struct FLegacyLockpickMenuProperties& MenuProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenu", "InitialiseTumblerMovement");

	Params::VModernLockpickMenu_InitialiseTumblerMovement Parms{};

	Parms.TumblerIndex = TumblerIndex;
	Parms.TumblerDefaultProperties = std::move(TumblerDefaultProperties);
	Parms.MenuProperties = std::move(MenuProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenu.OnTumberMovementInitialised
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TumblerIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModernLockpickMenuTumblerProperties&TumbleProperties                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModernLockpickMenu::OnTumberMovementInitialised(int32 TumblerIndex, const struct FModernLockpickMenuTumblerProperties& TumbleProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenu", "OnTumberMovementInitialised");

	Params::VModernLockpickMenu_OnTumberMovementInitialised Parms{};

	Parms.TumblerIndex = TumblerIndex;
	Parms.TumbleProperties = std::move(TumbleProperties);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernLockpickMenu.SetDifficultyCurve
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ELegacyLockpickMenuDifficulty           Difficulty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickMenu::SetDifficultyCurve(ELegacyLockpickMenuDifficulty Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenu", "SetDifficultyCurve");

	Params::VModernLockpickMenu_SetDifficultyCurve Parms{};

	Parms.Difficulty = Difficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.GetMovementActionFromMouseMovement
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPointerEvent&             Input                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EModernLockpickMenuPickMovement         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EModernLockpickMenuPickMovement UVModernLockpickMenuPick::GetMovementActionFromMouseMovement(const struct FPointerEvent& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "GetMovementActionFromMouseMovement");

	Params::VModernLockpickMenuPick_GetMovementActionFromMouseMovement Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernLockpickMenuPick.MovePick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EModernLockpickMenuPickMovement   Action                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickMenuPick::MovePick(const EModernLockpickMenuPickMovement Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "MovePick");

	Params::VModernLockpickMenuPick_MovePick Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.NextActiveTumbler
// (Final, Native, Public, BlueprintCallable)

void UVModernLockpickMenuPick::NextActiveTumbler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "NextActiveTumbler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.OnActiveTumblerUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickMenuPick::OnActiveTumblerUpdated(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "OnActiveTumblerUpdated");

	Params::VModernLockpickMenuPick_OnActiveTumblerUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernLockpickMenuPick.OnHandleTypeUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EModernLockpickMenuHandleType     Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickMenuPick::OnHandleTypeUpdated(const EModernLockpickMenuHandleType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "OnHandleTypeUpdated");

	Params::VModernLockpickMenuPick_OnHandleTypeUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernLockpickMenuPick.OnIsBrokenUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickMenuPick::OnIsBrokenUpdated(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "OnIsBrokenUpdated");

	Params::VModernLockpickMenuPick_OnIsBrokenUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernLockpickMenuPick.OnTumbleAction
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVModernLockpickMenuPick::OnTumbleAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "OnTumbleAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModernLockpickMenuPick.PreviousActiveTumbler
// (Final, Native, Public, BlueprintCallable)

void UVModernLockpickMenuPick::PreviousActiveTumbler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "PreviousActiveTumbler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.SetActiveTumbler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernLockpickMenuPick::SetActiveTumbler(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "SetActiveTumbler");

	Params::VModernLockpickMenuPick_SetActiveTumbler Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.SetCycledMousePosition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPointerEvent&             Input                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernLockpickMenuPick::SetCycledMousePosition(const struct FPointerEvent& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "SetCycledMousePosition");

	Params::VModernLockpickMenuPick_SetCycledMousePosition Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.TumblerUp
// (Final, Native, Public, BlueprintCallable)

void UVModernLockpickMenuPick::TumblerUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "TumblerUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernLockpickMenuPick.CanPickMove
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernLockpickMenuPick::CanPickMove() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernLockpickMenuPick", "CanPickMove");

	Params::VModernLockpickMenuPick_CanPickMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Altar.VModernMagicFilter.ActivateFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernMagicFilter::ActivateFilter(class UCommonUserWidget* Activator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMagicFilter", "ActivateFilter");

	Params::VModernMagicFilter_ActivateFilter Parms{};

	Parms.Activator = Activator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernMagicFilter.OnFilterIconCreated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                NewFilter                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModernMagicFilterTableRow&FilterDesign                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernMagicFilter::OnFilterIconCreated(class UCommonUserWidget* NewFilter, const struct FModernMagicFilterTableRow& FilterDesign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMagicFilter", "OnFilterIconCreated");

	Params::VModernMagicFilter_OnFilterIconCreated Parms{};

	Parms.NewFilter = NewFilter;
	Parms.FilterDesign = std::move(FilterDesign);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernMagicFilter.RequestUpdateFilterWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                Filter                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDisplayed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernMagicFilter::RequestUpdateFilterWidget(class UCommonUserWidget* Filter, bool bIsDisplayed, bool bIsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMagicFilter", "RequestUpdateFilterWidget");

	Params::VModernMagicFilter_RequestUpdateFilterWidget Parms{};

	Parms.Filter = Filter;
	Parms.bIsDisplayed = bIsDisplayed;
	Parms.bIsEnable = bIsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernMagicFilter.SetActiveFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacyMagicMenuSortType          ActiveFilterEnum                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernMagicFilter::SetActiveFilter(const ELegacyMagicMenuSortType ActiveFilterEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMagicFilter", "SetActiveFilter");

	Params::VModernMagicFilter_SetActiveFilter Parms{};

	Parms.ActiveFilterEnum = ActiveFilterEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernMagicFilter.SetEnabledFilters
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<ELegacyMagicMenuSortType>& EnabledFilterEnums                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernMagicFilter::SetEnabledFilters(const TArray<ELegacyMagicMenuSortType>& EnabledFilterEnums)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernMagicFilter", "SetEnabledFilters");

	Params::VModernMagicFilter_SetEnabledFilters Parms{};

	Parms.EnabledFilterEnums = std::move(EnabledFilterEnums);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingFunctionLibrary.AcceptEULA
// (Final, Native, Static, Public, BlueprintCallable)

void UVModernOnboardingFunctionLibrary::AcceptEULA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "AcceptEULA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingFunctionLibrary.IsEULAAccepted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingFunctionLibrary::IsEULAAccepted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "IsEULAAccepted");

	Params::VModernOnboardingFunctionLibrary_IsEULAAccepted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingFunctionLibrary.IsOnboardingSettingsDone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingFunctionLibrary::IsOnboardingSettingsDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "IsOnboardingSettingsDone");

	Params::VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingFunctionLibrary.IsOnPC
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingFunctionLibrary::IsOnPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "IsOnPC");

	Params::VModernOnboardingFunctionLibrary_IsOnPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingFunctionLibrary.ValidateOnboardingBrighnessSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UVModernOnboardingFunctionLibrary::ValidateOnboardingBrighnessSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "ValidateOnboardingBrighnessSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingFunctionLibrary.ValidateOnboardingGameplaySettings
// (Final, Native, Static, Public, BlueprintCallable)

void UVModernOnboardingFunctionLibrary::ValidateOnboardingGameplaySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "ValidateOnboardingGameplaySettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingFunctionLibrary.ValidateOnboardingSoundSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UVModernOnboardingFunctionLibrary::ValidateOnboardingSoundSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernOnboardingFunctionLibrary", "ValidateOnboardingSoundSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingPage.CallEnterAnimationDelegate
// (Native, Public, BlueprintCallable)

void UVModernOnboardingPage::CallEnterAnimationDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingPage", "CallEnterAnimationDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingPage.CallExitAnimationDelegate
// (Native, Public, BlueprintCallable)

void UVModernOnboardingPage::CallExitAnimationDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingPage", "CallExitAnimationDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernOnboardingPage.IsOnPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingPage::IsOnPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingPage", "IsOnPC");

	Params::VModernOnboardingPage_IsOnPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernOnboardingPage.IsOnPlaystation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernOnboardingPage::IsOnPlaystation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernOnboardingPage", "IsOnPlaystation");

	Params::VModernOnboardingPage_IsOnPlaystation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernQuickKeysMenu.ComputeKeyIDOnMouseMove
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGeometry&                 InGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernQuickKeysMenu::ComputeKeyIDOnMouseMove(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernQuickKeysMenu", "ComputeKeyIDOnMouseMove");

	Params::VModernQuickKeysMenu_ComputeKeyIDOnMouseMove Parms{};

	Parms.InGeometry = std::move(InGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernQuickKeysMenu.ComputeKeyIDWithCenterToCursor
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 CenterToCursor                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernQuickKeysMenu::ComputeKeyIDWithCenterToCursor(const struct FVector2D& CenterToCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernQuickKeysMenu", "ComputeKeyIDWithCenterToCursor");

	Params::VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor Parms{};

	Parms.CenterToCursor = std::move(CenterToCursor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernQuickKeysMenu.SetQuickKeyByIndex
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernQuickKeysMenu::SetQuickKeyByIndex(int32 Index_0, class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernQuickKeysMenu", "SetQuickKeyByIndex");

	Params::VModernQuickKeysMenu_SetQuickKeyByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernQuickKeysMenu.SetVisibilityByIndex
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernQuickKeysMenu::SetVisibilityByIndex(int32 Index_0, bool bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernQuickKeysMenu", "SetVisibilityByIndex");

	Params::VModernQuickKeysMenu_SetVisibilityByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.bVisibility = bVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernQuickKeysMenu.UpdateIcons
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UTexture2D*>&        NewArray                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernQuickKeysMenu::UpdateIcons(const TArray<class UTexture2D*>& NewArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernQuickKeysMenu", "UpdateIcons");

	Params::VModernQuickKeysMenu_UpdateIcons Parms{};

	Parms.NewArray = std::move(NewArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernScrollBox.OnScrollboxScrollbarChangedInternal
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   MinScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxScrollbarValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentScrollbarValue                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ThumbFractionSize                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernScrollBox::OnScrollboxScrollbarChangedInternal(float MinScrollbarValue, float MaxScrollbarValue, float CurrentScrollbarValue, float ThumbFractionSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernScrollBox", "OnScrollboxScrollbarChangedInternal");

	Params::VModernScrollBox_OnScrollboxScrollbarChangedInternal Parms{};

	Parms.MinScrollbarValue = MinScrollbarValue;
	Parms.MaxScrollbarValue = MaxScrollbarValue;
	Parms.CurrentScrollbarValue = CurrentScrollbarValue;
	Parms.ThumbFractionSize = ThumbFractionSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingCategoryWidget.GetSettingCategoryRow
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FModernSettingCategoryTableRowReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernSettingCategoryTableRow UVModernSettingCategoryWidget::GetSettingCategoryRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingCategoryWidget", "GetSettingCategoryRow");

	Params::VModernSettingCategoryWidget_GetSettingCategoryRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingCategoryWidget.OnSettingCategoryChanged
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FModernSettingCategoryTableRow&NewSettingCategoryRow                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSettingCategoryWidget::OnSettingCategoryChanged(const struct FModernSettingCategoryTableRow& NewSettingCategoryRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingCategoryWidget", "OnSettingCategoryChanged");

	Params::VModernSettingCategoryWidget_OnSettingCategoryChanged Parms{};

	Parms.NewSettingCategoryRow = std::move(NewSettingCategoryRow);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModernSettingCategoryWidget.SetSettingCategoryRow
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernSettingCategoryTableRow&NewSettingCategoryRow                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSettingCategoryWidget::SetSettingCategoryRow(const struct FModernSettingCategoryTableRow& NewSettingCategoryRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingCategoryWidget", "SetSettingCategoryRow");

	Params::VModernSettingCategoryWidget_SetSettingCategoryRow Parms{};

	Parms.NewSettingCategoryRow = std::move(NewSettingCategoryRow);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingComboBoxItem.SetOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewOption                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModernSettingComboBoxItem::SetOption(const class FText& NewOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingComboBoxItem", "SetOption");

	Params::VModernSettingComboBoxItem_SetOption Parms{};

	Parms.NewOption = std::move(NewOption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModernSettingComboBoxItem.GetOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVModernSettingComboBoxItem::GetOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernSettingComboBoxItem", "GetOption");

	Params::VModernSettingComboBoxItem_GetOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.CreateCommand
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    CommandName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CommandValue                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVModernSettingsFunctionLibrary::CreateCommand(const class FString& CommandName, const class FString& CommandValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "CreateCommand");

	Params::VModernSettingsFunctionLibrary_CreateCommand Parms{};

	Parms.CommandName = std::move(CommandName);
	Parms.CommandValue = std::move(CommandValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.FixBooleen
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVModernSettingsFunctionLibrary::FixBooleen(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "FixBooleen");

	Params::VModernSettingsFunctionLibrary_FixBooleen Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.GetCommandFloatValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    CommandName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModernSettingsFunctionLibrary::GetCommandFloatValue(const class FString& CommandName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "GetCommandFloatValue");

	Params::VModernSettingsFunctionLibrary_GetCommandFloatValue Parms{};

	Parms.CommandName = std::move(CommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.GetCommandIntegerValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    CommandName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModernSettingsFunctionLibrary::GetCommandIntegerValue(const class FString& CommandName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "GetCommandIntegerValue");

	Params::VModernSettingsFunctionLibrary_GetCommandIntegerValue Parms{};

	Parms.CommandName = std::move(CommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.GetCommandValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    CommandName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVModernSettingsFunctionLibrary::GetCommandValue(const class FString& CommandName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "GetCommandValue");

	Params::VModernSettingsFunctionLibrary_GetCommandValue Parms{};

	Parms.CommandName = std::move(CommandName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.IsPlatformValidForSetting
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ModernCategoryPlatormFlag                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSettingsFunctionLibrary::IsPlatformValidForSetting(int32 ModernCategoryPlatormFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "IsPlatformValidForSetting");

	Params::VModernSettingsFunctionLibrary_IsPlatformValidForSetting Parms{};

	Parms.ModernCategoryPlatormFlag = ModernCategoryPlatormFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.IsRunningOnSteam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSettingsFunctionLibrary::IsRunningOnSteam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "IsRunningOnSteam");

	Params::VModernSettingsFunctionLibrary_IsRunningOnSteam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernSettingsFunctionLibrary.IsRunningOnSteamDeck
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModernSettingsFunctionLibrary::IsRunningOnSteamDeck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VModernSettingsFunctionLibrary", "IsRunningOnSteamDeck");

	Params::VModernSettingsFunctionLibrary_IsRunningOnSteamDeck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_CharacCreationGenericSettingInterface.ExecuteLastIfLastItemActionLogic
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVModern_CharacCreationGenericSettingInterface::ExecuteLastIfLastItemActionLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VModern_CharacCreationGenericSettingInterface", "ExecuteLastIfLastItemActionLogic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_CharacCreationGenericSettingInterface.GetRow
// (Native, Public, Const)
// Parameters:
// const struct FLegacyRaceSexMenuTableRow ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRaceSexMenuTableRow IVModern_CharacCreationGenericSettingInterface::GetRow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VModern_CharacCreationGenericSettingInterface", "GetRow");

	Params::VModern_CharacCreationGenericSettingInterface_GetRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_CharacCreationNavigableRaceScrollbar.ScrollBody
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const float&                            ScrollDelta                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            TriggerTime                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_CharacCreationNavigableRaceScrollbar::ScrollBody(const float& ScrollDelta, const float& TriggerTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_CharacCreationNavigableRaceScrollbar", "ScrollBody");

	Params::VModern_CharacCreationNavigableRaceScrollbar_ScrollBody Parms{};

	Parms.ScrollDelta = ScrollDelta;
	Parms.TriggerTime = TriggerTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_ColorPickerItem.SetColorOption
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_ColorPickerItem::SetColorOption(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_ColorPickerItem", "SetColorOption");

	Params::VModern_ColorPickerItem_SetColorOption Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_ColorPickerItem.SetIsDefaultColor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const bool&                             Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_ColorPickerItem::SetIsDefaultColor(const bool& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_ColorPickerItem", "SetIsDefaultColor");

	Params::VModern_ColorPickerItem_SetIsDefaultColor Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_ColorPickerItem.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_ColorPickerItem::SetIsSelected(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_ColorPickerItem", "SetIsSelected");

	Params::VModern_ColorPickerItem_SetIsSelected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_ColorPickerItem.GetColorOption
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UVModern_ColorPickerItem::GetColorOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_ColorPickerItem", "GetColorOption");

	Params::VModern_ColorPickerItem_GetColorOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_ColorPickerItem.IsDefaultColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModern_ColorPickerItem::IsDefaultColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_ColorPickerItem", "IsDefaultColor");

	Params::VModern_ColorPickerItem_IsDefaultColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_ColorPickerItem.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVModern_ColorPickerItem::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_ColorPickerItem", "IsSelected");

	Params::VModern_ColorPickerItem_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTutorialMenu.OnFadeEnded
// (Event, Public, BlueprintEvent)

void UVTutorialMenu::OnFadeEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenu", "OnFadeEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VTutorialMenu.OnFadeStarted
// (Event, Public, BlueprintEvent)

void UVTutorialMenu::OnFadeStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenu", "OnFadeStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USizeBox*                         SizeBox                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconProperties(class USizeBox* SizeBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconProperties");

	Params::VModern_MapIconCommonUserWidget_SetIconProperties Parms{};

	Parms.SizeBox = SizeBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             IconSize                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconSize(const float IconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconSize");

	Params::VModern_MapIconCommonUserWidget_SetIconSize Parms{};

	Parms.IconSize = IconSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconSizeGivenZoomFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             ZoomFactor                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconSizeGivenZoomFactor(const float ZoomFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconSizeGivenZoomFactor");

	Params::VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor Parms{};

	Parms.ZoomFactor = ZoomFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconSizeGivenZoomLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             ZoomLevel                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconSizeGivenZoomLevel(const int32 ZoomLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconSizeGivenZoomLevel");

	Params::VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel Parms{};

	Parms.ZoomLevel = ZoomLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconSizeSmoothlyGivenZoomLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             ZoomLevel                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             IconSizeAlpha                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconSizeSmoothlyGivenZoomLevel(const int32 ZoomLevel, const float IconSizeAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconSizeSmoothlyGivenZoomLevel");

	Params::VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel Parms{};

	Parms.ZoomLevel = ZoomLevel;
	Parms.IconSizeAlpha = IconSizeAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconStartingSizeAccordingToMapType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bIsWorldMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconStartingSizeAccordingToMapType(const bool bIsWorldMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconStartingSizeAccordingToMapType");

	Params::VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType Parms{};

	Parms.bIsWorldMap = bIsWorldMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconStartingSizeOnMapSetup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bIsWorldMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconStartingSizeOnMapSetup(const bool bIsWorldMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconStartingSizeOnMapSetup");

	Params::VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup Parms{};

	Parms.bIsWorldMap = bIsWorldMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconCommonUserWidget.SetIconStartingSizeOnMapSwitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bIsWorldMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconCommonUserWidget::SetIconStartingSizeOnMapSwitch(const bool bIsWorldMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconCommonUserWidget", "SetIconStartingSizeOnMapSwitch");

	Params::VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch Parms{};

	Parms.bIsWorldMap = bIsWorldMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.ActivateControlFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAll                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::ActivateControlFilter(class UCommonUserWidget* Activator, bool bIsAll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "ActivateControlFilter");

	Params::VModern_MapIconFilter_ActivateControlFilter Parms{};

	Parms.Activator = Activator;
	Parms.bIsAll = bIsAll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.ActivateControlFilterFromEnum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyMapMenuIcon                      ActivatorEnum                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::ActivateControlFilterFromEnum(ELegacyMapMenuIcon ActivatorEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "ActivateControlFilterFromEnum");

	Params::VModern_MapIconFilter_ActivateControlFilterFromEnum Parms{};

	Parms.ActivatorEnum = ActivatorEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.ActivateFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::ActivateFilter(class UCommonUserWidget* Activator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "ActivateFilter");

	Params::VModern_MapIconFilter_ActivateFilter Parms{};

	Parms.Activator = Activator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.ActivateIconFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::ActivateIconFilter(class UCommonUserWidget* Activator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "ActivateIconFilter");

	Params::VModern_MapIconFilter_ActivateIconFilter Parms{};

	Parms.Activator = Activator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.ActivateSpecificFilterFromEnum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyMapMenuIcon                      ActivatorEnum                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::ActivateSpecificFilterFromEnum(ELegacyMapMenuIcon ActivatorEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "ActivateSpecificFilterFromEnum");

	Params::VModern_MapIconFilter_ActivateSpecificFilterFromEnum Parms{};

	Parms.ActivatorEnum = ActivatorEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.DesactivateFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::DesactivateFilter(class UCommonUserWidget* Activator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "DesactivateFilter");

	Params::VModern_MapIconFilter_DesactivateFilter Parms{};

	Parms.Activator = Activator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.DesactivateIconFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::DesactivateIconFilter(class UCommonUserWidget* Activator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "DesactivateIconFilter");

	Params::VModern_MapIconFilter_DesactivateIconFilter Parms{};

	Parms.Activator = Activator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapIconFilter.IsFilterHasAtLeastOneDisplayedIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModern_MapIconFilter::IsFilterHasAtLeastOneDisplayedIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "IsFilterHasAtLeastOneDisplayedIcon");

	Params::VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_MapIconFilter.OnFilterIconCreated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                NewFilter                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModern_AltarMapIconDesignTableRow&FilterDesign                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsControlFilter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::OnFilterIconCreated(class UCommonUserWidget* NewFilter, const struct FModern_AltarMapIconDesignTableRow& FilterDesign, bool bIsControlFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "OnFilterIconCreated");

	Params::VModern_MapIconFilter_OnFilterIconCreated Parms{};

	Parms.NewFilter = NewFilter;
	Parms.FilterDesign = std::move(FilterDesign);
	Parms.bIsControlFilter = bIsControlFilter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_MapIconFilter.OnPostTryRegisterWidgetToFilter
// (Event, Public, BlueprintEvent)

void UVModern_MapIconFilter::OnPostTryRegisterWidgetToFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "OnPostTryRegisterWidgetToFilter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModern_MapIconFilter.OnWidgetRegisterToFilter
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                Filter                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonUserWidget*                NewWidgetToFilter                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfFilteredObjects                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::OnWidgetRegisterToFilter(class UCommonUserWidget* Filter, class UCommonUserWidget* NewWidgetToFilter, int32 NumberOfFilteredObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "OnWidgetRegisterToFilter");

	Params::VModern_MapIconFilter_OnWidgetRegisterToFilter Parms{};

	Parms.Filter = Filter;
	Parms.NewWidgetToFilter = NewWidgetToFilter;
	Parms.NumberOfFilteredObjects = NumberOfFilteredObjects;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_MapIconFilter.OnWidgetUnregisterToFilter
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                Filter                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonUserWidget*                RemovedWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfFilteredObjects                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::OnWidgetUnregisterToFilter(class UCommonUserWidget* Filter, class UCommonUserWidget* RemovedWidget, int32 NumberOfFilteredObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "OnWidgetUnregisterToFilter");

	Params::VModern_MapIconFilter_OnWidgetUnregisterToFilter Parms{};

	Parms.Filter = Filter;
	Parms.RemovedWidget = RemovedWidget;
	Parms.NumberOfFilteredObjects = NumberOfFilteredObjects;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_MapIconFilter.RequestUpdateFilteredWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                FilteredWidget                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanBeDisplay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::RequestUpdateFilteredWidget(class UCommonUserWidget* FilteredWidget, bool bCanBeDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "RequestUpdateFilteredWidget");

	Params::VModern_MapIconFilter_RequestUpdateFilteredWidget Parms{};

	Parms.FilteredWidget = FilteredWidget;
	Parms.bCanBeDisplay = bCanBeDisplay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_MapIconFilter.RequestUpdateFilterWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                Filter                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapIconFilter::RequestUpdateFilterWidget(class UCommonUserWidget* Filter, bool bIsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "RequestUpdateFilterWidget");

	Params::VModern_MapIconFilter_RequestUpdateFilterWidget Parms{};

	Parms.Filter = Filter;
	Parms.bIsEnable = bIsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_MapIconFilter.GetControlFilter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCommonUserWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCommonUserWidget* UVModern_MapIconFilter::GetControlFilter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "GetControlFilter");

	Params::VModern_MapIconFilter_GetControlFilter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_MapIconFilter.IsFilterFlagAll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModern_MapIconFilter::IsFilterFlagAll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapIconFilter", "IsFilterFlagAll");

	Params::VModern_MapIconFilter_IsFilterFlagAll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_MapZoomSlider.SetLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   newLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_MapZoomSlider::SetLevel(int32 newLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapZoomSlider", "SetLevel");

	Params::VModern_MapZoomSlider_SetLevel Parms{};

	Parms.newLevel = newLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_MapZoomSlider.GetCurrentLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModern_MapZoomSlider::GetCurrentLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapZoomSlider", "GetCurrentLevel");

	Params::VModern_MapZoomSlider_GetCurrentLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_MapZoomSlider.GetMaxLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVModern_MapZoomSlider::GetMaxLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_MapZoomSlider", "GetMaxLevel");

	Params::VModern_MapZoomSlider_GetMaxLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.AddMapZoom
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ZoomDelta                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::AddMapZoom(float ZoomDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "AddMapZoom");

	Params::VModern_NavigableMapWidget_AddMapZoom Parms{};

	Parms.ZoomDelta = ZoomDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.ClearAllMapIcons
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::ClearAllMapIcons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "ClearAllMapIcons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.HandleMouseMove
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGeometry&                 InGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::HandleMouseMove(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "HandleMouseMove");

	Params::VModern_NavigableMapWidget_HandleMouseMove Parms{};

	Parms.InGeometry = std::move(InGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.InitializeMapWidget_LocalMap
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuLocalMapProperties&LocalMapData                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::InitializeMapWidget_LocalMap(const struct FLegacyMapMenuLocalMapProperties& LocalMapData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "InitializeMapWidget_LocalMap");

	Params::VModern_NavigableMapWidget_InitializeMapWidget_LocalMap Parms{};

	Parms.LocalMapData = std::move(LocalMapData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.InitializeMapWidget_WorldMap
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuWorldMapProperties&WorldMapData                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::InitializeMapWidget_WorldMap(const struct FLegacyMapMenuWorldMapProperties& WorldMapData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "InitializeMapWidget_WorldMap");

	Params::VModern_NavigableMapWidget_InitializeMapWidget_WorldMap Parms{};

	Parms.WorldMapData = std::move(WorldMapData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.LoadBaseColorRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::LoadBaseColorRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadBaseColorRenderTarget");

	Params::VModern_NavigableMapWidget_LoadBaseColorRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LoadFogMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UMaterial*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterial* UVModern_NavigableMapWidget::LoadFogMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadFogMaterial");

	Params::VModern_NavigableMapWidget_LoadFogMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LoadFogRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::LoadFogRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadFogRenderTarget");

	Params::VModern_NavigableMapWidget_LoadFogRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LoadLocalMapMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UVModern_NavigableMapWidget::LoadLocalMapMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadLocalMapMaterial");

	Params::VModern_NavigableMapWidget_LoadLocalMapMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LoadLocalMapSobelMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UMaterial*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterial* UVModern_NavigableMapWidget::LoadLocalMapSobelMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadLocalMapSobelMaterial");

	Params::VModern_NavigableMapWidget_LoadLocalMapSobelMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LoadSceneDepthRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::LoadSceneDepthRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadSceneDepthRenderTarget");

	Params::VModern_NavigableMapWidget_LoadSceneDepthRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LoadSecondPassRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::LoadSecondPassRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LoadSecondPassRenderTarget");

	Params::VModern_NavigableMapWidget_LoadSecondPassRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.MapZoomSmoothInternal
// (Final, Native, Protected)
// Parameters:
// float                                   InNewZoomValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::MapZoomSmoothInternal(float InNewZoomValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "MapZoomSmoothInternal");

	Params::VModern_NavigableMapWidget_MapZoomSmoothInternal Parms{};

	Parms.InNewZoomValue = InNewZoomValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.MouseDrag
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 MousePosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::MouseDrag(const struct FVector2D& MousePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "MouseDrag");

	Params::VModern_NavigableMapWidget_MouseDrag Parms{};

	Parms.MousePosition = std::move(MousePosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.OnCursorHoverIcon
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                HoveredIcon                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnCursorHoverIcon(class UCommonUserWidget* HoveredIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnCursorHoverIcon");

	Params::VModern_NavigableMapWidget_OnCursorHoverIcon Parms{};

	Parms.HoveredIcon = HoveredIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnCursorPositionChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnCursorPositionChanged(const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnCursorPositionChanged");

	Params::VModern_NavigableMapWidget_OnCursorPositionChanged Parms{};

	Parms.NewPosition = std::move(NewPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnCursorUnhoverIcon
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                UnhoveredIcon                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnCursorUnhoverIcon(class UCommonUserWidget* UnhoveredIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnCursorUnhoverIcon");

	Params::VModern_NavigableMapWidget_OnCursorUnhoverIcon Parms{};

	Parms.UnhoveredIcon = UnhoveredIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnIconCreated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                NewMapIcon                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyMapMenuIconProperties&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnIconCreated(class UCommonUserWidget* NewMapIcon, const struct FLegacyMapMenuIconProperties& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnIconCreated");

	Params::VModern_NavigableMapWidget_OnIconCreated Parms{};

	Parms.NewMapIcon = NewMapIcon;
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnMapInputMethodChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// ECommonInputType                        NewInputType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnMapInputMethodChanged(ECommonInputType NewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnMapInputMethodChanged");

	Params::VModern_NavigableMapWidget_OnMapInputMethodChanged Parms{};

	Parms.NewInputType = NewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnMapPivotChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 NewPivot                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnMapPivotChanged(const struct FVector2D& NewPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnMapPivotChanged");

	Params::VModern_NavigableMapWidget_OnMapPivotChanged Parms{};

	Parms.NewPivot = std::move(NewPivot);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnMapPositionChanged
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnMapPositionChanged(const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnMapPositionChanged");

	Params::VModern_NavigableMapWidget_OnMapPositionChanged Parms{};

	Parms.NewPosition = std::move(NewPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnMapSetup
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class UObject*                    MapBrushObject                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 OriginalMapSize                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnMapSetup(const class UObject* MapBrushObject, const struct FVector2D& OriginalMapSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnMapSetup");

	Params::VModern_NavigableMapWidget_OnMapSetup Parms{};

	Parms.MapBrushObject = MapBrushObject;
	Parms.OriginalMapSize = std::move(OriginalMapSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnMouseDrag
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 DragDelta                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnMouseDrag(const struct FVector2D& DragDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnMouseDrag");

	Params::VModern_NavigableMapWidget_OnMouseDrag Parms{};

	Parms.DragDelta = std::move(DragDelta);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.OnPlayerMarkerRequested
// (Event, Public, BlueprintEvent)

void UVModern_NavigableMapWidget::OnPlayerMarkerRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnPlayerMarkerRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModern_NavigableMapWidget.OnSwitchInputMode
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ECommonInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnSwitchInputMode(ECommonInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnSwitchInputMode");

	Params::VModern_NavigableMapWidget_OnSwitchInputMode Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.OnSyncMouseWithCursorRequested
// (Event, Public, BlueprintEvent)

void UVModern_NavigableMapWidget::OnSyncMouseWithCursorRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnSyncMouseWithCursorRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VModern_NavigableMapWidget.OnZoomChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewZoom                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::OnZoomChanged(float NewZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OnZoomChanged");

	Params::VModern_NavigableMapWidget_OnZoomChanged Parms{};

	Parms.NewZoom = NewZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VModern_NavigableMapWidget.RemapCircleToSquare
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector2D&                 DirectionalVector                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::RemapCircleToSquare(const struct FVector2D& DirectionalVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "RemapCircleToSquare");

	Params::VModern_NavigableMapWidget_RemapCircleToSquare Parms{};

	Parms.DirectionalVector = std::move(DirectionalVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.RequestMapPositionUpdateWithGeometryValidation
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewPositionVector                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::RequestMapPositionUpdateWithGeometryValidation(const struct FVector2D& NewPositionVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "RequestMapPositionUpdateWithGeometryValidation");

	Params::VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation Parms{};

	Parms.NewPositionVector = std::move(NewPositionVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.SetCursorPosition
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::SetCursorPosition(const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "SetCursorPosition");

	Params::VModern_NavigableMapWidget_SetCursorPosition Parms{};

	Parms.NewPosition = std::move(NewPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.SetMapPivot
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 PivotValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::SetMapPivot(const struct FVector2D& PivotValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "SetMapPivot");

	Params::VModern_NavigableMapWidget_SetMapPivot Parms{};

	Parms.PivotValue = std::move(PivotValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.SetMapPivotToViewCenter
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::SetMapPivotToViewCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "SetMapPivotToViewCenter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.SetMapPosition
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewPositionVector                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::SetMapPosition(const struct FVector2D& NewPositionVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "SetMapPosition");

	Params::VModern_NavigableMapWidget_SetMapPosition Parms{};

	Parms.NewPositionVector = std::move(NewPositionVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.SetMapZoom
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ZoomValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsZoomingOnMouse                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::SetMapZoom(float ZoomValue, bool bIsZoomingOnMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "SetMapZoom");

	Params::VModern_NavigableMapWidget_SetMapZoom Parms{};

	Parms.ZoomValue = ZoomValue;
	Parms.bIsZoomingOnMouse = bIsZoomingOnMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.SetMapZoomSmooth
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InNewZoomValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::SetMapZoomSmooth(float InNewZoomValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "SetMapZoomSmooth");

	Params::VModern_NavigableMapWidget_SetMapZoomSmooth Parms{};

	Parms.InNewZoomValue = InNewZoomValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.StartMouseDrag
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 MousePosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::StartMouseDrag(const struct FVector2D& MousePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "StartMouseDrag");

	Params::VModern_NavigableMapWidget_StartMouseDrag Parms{};

	Parms.MousePosition = std::move(MousePosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.StopMouseDrag
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::StopMouseDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "StopMouseDrag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.TranslateCursor
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 DirectionVector                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::TranslateCursor(const struct FVector2D& DirectionVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "TranslateCursor");

	Params::VModern_NavigableMapWidget_TranslateCursor Parms{};

	Parms.DirectionVector = std::move(DirectionVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.TranslateMap
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 DirectionVector                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::TranslateMap(const struct FVector2D& DirectionVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "TranslateMap");

	Params::VModern_NavigableMapWidget_TranslateMap Parms{};

	Parms.DirectionVector = std::move(DirectionVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadBaseColorRenderTarget
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadBaseColorRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadBaseColorRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadFogMaterial
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadFogMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadFogMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadFogRenderTarget
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadFogRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadFogRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadLocalMapMaterial
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadLocalMapMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadLocalMapMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadLocalMapSobelMaterial
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadLocalMapSobelMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadLocalMapSobelMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadSceneDepthRenderTarget
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadSceneDepthRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadSceneDepthRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UnloadSecondPassRenderTarget
// (Final, Native, Protected, BlueprintCallable)

void UVModern_NavigableMapWidget::UnloadSecondPassRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UnloadSecondPassRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdateIconsSizeOnMapSetup
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              bIsWorldMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdateIconsSizeOnMapSetup(const bool bIsWorldMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdateIconsSizeOnMapSetup");

	Params::VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup Parms{};

	Parms.bIsWorldMap = bIsWorldMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdateIconsSizeOnMapSwitch
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              bIsWorldMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdateIconsSizeOnMapSwitch(const bool bIsWorldMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdateIconsSizeOnMapSwitch");

	Params::VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch Parms{};

	Parms.bIsWorldMap = bIsWorldMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdateIconsSizeSmoothly
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              bSmooth                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdateIconsSizeSmoothly(const bool bSmooth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdateIconsSizeSmoothly");

	Params::VModern_NavigableMapWidget_UpdateIconsSizeSmoothly Parms{};

	Parms.bSmooth = bSmooth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdateMapIconPosition
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                MapIcon                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdateMapIconPosition(class UCommonUserWidget* MapIcon, const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdateMapIconPosition");

	Params::VModern_NavigableMapWidget_UpdateMapIconPosition Parms{};

	Parms.MapIcon = MapIcon;
	Parms.NewPosition = std::move(NewPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdateOrCreateMapIcon
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyMapMenuIconProperties&IconData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsLocalMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdateOrCreateMapIcon(const struct FLegacyMapMenuIconProperties& IconData, const bool bIsLocalMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdateOrCreateMapIcon");

	Params::VModern_NavigableMapWidget_UpdateOrCreateMapIcon Parms{};

	Parms.IconData = std::move(IconData);
	Parms.bIsLocalMap = bIsLocalMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdateOrCreateMapIcons
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLegacyMapMenuIconProperties>&IconsData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bIsLocalMap                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdateOrCreateMapIcons(const TArray<struct FLegacyMapMenuIconProperties>& IconsData, const bool bIsLocalMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdateOrCreateMapIcons");

	Params::VModern_NavigableMapWidget_UpdateOrCreateMapIcons Parms{};

	Parms.IconsData = std::move(IconsData);
	Parms.bIsLocalMap = bIsLocalMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.UpdatePlayerMarkerPosition
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_NavigableMapWidget::UpdatePlayerMarkerPosition(const struct FVector2D& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "UpdatePlayerMarkerPosition");

	Params::VModern_NavigableMapWidget_UpdatePlayerMarkerPosition Parms{};

	Parms.NewPosition = std::move(NewPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_NavigableMapWidget.AbsoluteSpaceToMapSpace
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 AbsoluteSpace                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::AbsoluteSpaceToMapSpace(const struct FVector2D& AbsoluteSpace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "AbsoluteSpaceToMapSpace");

	Params::VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace Parms{};

	Parms.AbsoluteSpace = std::move(AbsoluteSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.ClampZoomValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   NewZoomValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModern_NavigableMapWidget::ClampZoomValue(float NewZoomValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "ClampZoomValue");

	Params::VModern_NavigableMapWidget_ClampZoomValue Parms{};

	Parms.NewZoomValue = NewZoomValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetBaseColorRenderTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::GetBaseColorRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetBaseColorRenderTarget");

	Params::VModern_NavigableMapWidget_GetBaseColorRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetCurrentZoomValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModern_NavigableMapWidget::GetCurrentZoomValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetCurrentZoomValue");

	Params::VModern_NavigableMapWidget_GetCurrentZoomValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetDPIScaling
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModern_NavigableMapWidget::GetDPIScaling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetDPIScaling");

	Params::VModern_NavigableMapWidget_GetDPIScaling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetFogMaterial
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterial*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterial* UVModern_NavigableMapWidget::GetFogMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetFogMaterial");

	Params::VModern_NavigableMapWidget_GetFogMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetFogRenderTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::GetFogRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetFogRenderTarget");

	Params::VModern_NavigableMapWidget_GetFogRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetIsPaintSpaceGeometryValid
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModern_NavigableMapWidget::GetIsPaintSpaceGeometryValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetIsPaintSpaceGeometryValid");

	Params::VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetLocalMapMaterial
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UVModern_NavigableMapWidget::GetLocalMapMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetLocalMapMaterial");

	Params::VModern_NavigableMapWidget_GetLocalMapMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetLocalMapSobelMaterial
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterial*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterial* UVModern_NavigableMapWidget::GetLocalMapSobelMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetLocalMapSobelMaterial");

	Params::VModern_NavigableMapWidget_GetLocalMapSobelMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetOriginalMapSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::GetOriginalMapSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetOriginalMapSize");

	Params::VModern_NavigableMapWidget_GetOriginalMapSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetPlayerPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::GetPlayerPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetPlayerPosition");

	Params::VModern_NavigableMapWidget_GetPlayerPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::GetResolution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetResolution");

	Params::VModern_NavigableMapWidget_GetResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetSceneDepthRenderTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::GetSceneDepthRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetSceneDepthRenderTarget");

	Params::VModern_NavigableMapWidget_GetSceneDepthRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetSecondPassRenderTarget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UVModern_NavigableMapWidget::GetSecondPassRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetSecondPassRenderTarget");

	Params::VModern_NavigableMapWidget_GetSecondPassRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetSmallestPossibleZoomValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVModern_NavigableMapWidget::GetSmallestPossibleZoomValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetSmallestPossibleZoomValue");

	Params::VModern_NavigableMapWidget_GetSmallestPossibleZoomValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetViewSize
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::GetViewSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetViewSize");

	Params::VModern_NavigableMapWidget_GetViewSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.GetZoomedMapSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::GetZoomedMapSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "GetZoomedMapSize");

	Params::VModern_NavigableMapWidget_GetZoomedMapSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.IsAskingForPlayerMarker
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModern_NavigableMapWidget::IsAskingForPlayerMarker() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "IsAskingForPlayerMarker");

	Params::VModern_NavigableMapWidget_IsAskingForPlayerMarker Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.IsIconInLeftHalfOfView
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 IconPosition                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVModern_NavigableMapWidget::IsIconInLeftHalfOfView(const struct FVector2D& IconPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "IsIconInLeftHalfOfView");

	Params::VModern_NavigableMapWidget_IsIconInLeftHalfOfView Parms{};

	Parms.IconPosition = std::move(IconPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.LocalMapToOblivionWorld
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 IconPosition                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector3f UVModern_NavigableMapWidget::LocalMapToOblivionWorld(const struct FVector2D& IconPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "LocalMapToOblivionWorld");

	Params::VModern_NavigableMapWidget_LocalMapToOblivionWorld Parms{};

	Parms.IconPosition = std::move(IconPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.OTAMapCoord
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 OMapCoord                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::OTAMapCoord(const struct FVector2D& OMapCoord) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "OTAMapCoord");

	Params::VModern_NavigableMapWidget_OTAMapCoord Parms{};

	Parms.OMapCoord = std::move(OMapCoord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.ViewSpaceToAbsoluteSpace
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 ViewSpace                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::ViewSpaceToAbsoluteSpace(const struct FVector2D& ViewSpace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "ViewSpaceToAbsoluteSpace");

	Params::VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace Parms{};

	Parms.ViewSpace = std::move(ViewSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_NavigableMapWidget.ViewSpaceToMapSpace
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 ViewSpace                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVModern_NavigableMapWidget::ViewSpaceToMapSpace(const struct FVector2D& ViewSpace) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_NavigableMapWidget", "ViewSpaceToMapSpace");

	Params::VModern_NavigableMapWidget_ViewSpaceToMapSpace Parms{};

	Parms.ViewSpace = std::move(ViewSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_RacePortraitItem.SetIsSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_RacePortraitItem::SetIsSelected(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "SetIsSelected");

	Params::VModern_RacePortraitItem_SetIsSelected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_RacePortraitItem.SetName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_RacePortraitItem::SetName(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "SetName");

	Params::VModern_RacePortraitItem_SetName Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_RacePortraitItem.SetProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_RacePortraitItem::SetProperties(class UTexture2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "SetProperties");

	Params::VModern_RacePortraitItem_SetProperties Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_RacePortraitItem.SetPropertiesHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModern_RacePortraitItem::SetPropertiesHover(class UTexture2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "SetPropertiesHover");

	Params::VModern_RacePortraitItem_SetPropertiesHover Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VModern_RacePortraitItem.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVModern_RacePortraitItem::GetName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "GetName");

	Params::VModern_RacePortraitItem_GetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_RacePortraitItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UTexture2D*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTexture2D* UVModern_RacePortraitItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "GetProperties");

	Params::VModern_RacePortraitItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_RacePortraitItem.GetPropertiesHover
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UTexture2D*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UTexture2D* UVModern_RacePortraitItem::GetPropertiesHover() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "GetPropertiesHover");

	Params::VModern_RacePortraitItem_GetPropertiesHover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModern_RacePortraitItem.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UVModern_RacePortraitItem::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModern_RacePortraitItem", "IsSelected");

	Params::VModern_RacePortraitItem_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAmuletModularBodyPart.UpdateChestSnappingAlpha
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             NewAlpha                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVAmuletModularBodyPart::UpdateChestSnappingAlpha(const float NewAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAmuletModularBodyPart", "UpdateChestSnappingAlpha");

	Params::VAmuletModularBodyPart_UpdateChestSnappingAlpha Parms{};

	Parms.NewAlpha = NewAlpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VMusicPlayer.OnLoadStarted
// (Final, Native, Private)

void AVMusicPlayer::OnLoadStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMusicPlayer", "OnLoadStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMusicPlayer.OnMusicSuccessEnded
// (Final, Native, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVMusicPlayer::OnMusicSuccessEnded(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMusicPlayer", "OnMusicSuccessEnded");

	Params::VMusicPlayer_OnMusicSuccessEnded Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VMusicPlayer.PlayMainMenuMusic
// (Final, Native, Public, BlueprintCallable)

void AVMusicPlayer::PlayMainMenuMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VMusicPlayer", "PlayMainMenuMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VNegotiateMenuViewModel.RegisterSendClickedCancelHandler
// (Final, Native, Public, BlueprintCallable)

void UVNegotiateMenuViewModel::RegisterSendClickedCancelHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VNegotiateMenuViewModel", "RegisterSendClickedCancelHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VNegotiateMenuViewModel.RegisterSendConfirmHaggleHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   HagglePercentValue                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVNegotiateMenuViewModel::RegisterSendConfirmHaggleHandler(int32 HagglePercentValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VNegotiateMenuViewModel", "RegisterSendConfirmHaggleHandler");

	Params::VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler Parms{};

	Parms.HagglePercentValue = HagglePercentValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VNegotiateMenuViewModel.GetInitializationData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FNegotiateMenuInitializationDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FNegotiateMenuInitializationData UVNegotiateMenuViewModel::GetInitializationData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VNegotiateMenuViewModel", "GetInitializationData");

	Params::VNegotiateMenuViewModel_GetInitializationData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionCharacterAnimInstance.OnAnimationStateChange
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const struct FOblivionSourcedCharacterAnimationState&OldState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FOblivionSourcedCharacterAnimationState&NewState                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVOblivionCharacterAnimInstance::OnAnimationStateChange(const struct FOblivionSourcedCharacterAnimationState& OldState, const struct FOblivionSourcedCharacterAnimationState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnAnimationStateChange");

	Params::VOblivionCharacterAnimInstance_OnAnimationStateChange Parms{};

	Parms.OldState = std::move(OldState);
	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionCharacterAnimInstance.OnAttackStarted
// (Native, Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnAttackStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnAttackStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionCharacterAnimInstance.OnCastSpellRanged
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnCastSpellRanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnCastSpellRanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.OnCastSpellSelf
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnCastSpellSelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnCastSpellSelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.OnCastSpellTouch
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnCastSpellTouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnCastSpellTouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.OnEquipStarted
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnEquipStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnEquipStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.OnJumpStarted
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnJumpStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnJumpStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.OnLanded
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnLanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnLanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.OnUnequipStarted
// (Event, Protected, BlueprintEvent)

void UVOblivionCharacterAnimInstance::OnUnequipStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "OnUnequipStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionCharacterAnimInstance.SetCombatMoveset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOblivionCombatMoveset                  Moveset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOblivionCharacterAnimInstance::SetCombatMoveset(EOblivionCombatMoveset Moveset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "SetCombatMoveset");

	Params::VOblivionCharacterAnimInstance_SetCombatMoveset Parms{};

	Parms.Moveset = Moveset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionCharacterAnimInstance.SetForcePosePairing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ForcePosePairing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOblivionCharacterAnimInstance::SetForcePosePairing(bool ForcePosePairing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionCharacterAnimInstance", "SetForcePosePairing");

	Params::VOblivionCharacterAnimInstance_SetForcePosePairing Parms{};

	Parms.ForcePosePairing = ForcePosePairing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionGameInstanceSubSystem.OnGarbageCollection
// (Final, Native, Public)

void UVOblivionGameInstanceSubSystem::OnGarbageCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGameInstanceSubSystem", "OnGarbageCollection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionGameInstanceSubSystem.WriteAltarCrashInfos
// (Final, Native, Public)

void UVOblivionGameInstanceSubSystem::WriteAltarCrashInfos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGameInstanceSubSystem", "WriteAltarCrashInfos");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionGate.OnDisabled
// (Event, Protected, BlueprintEvent)

void AVOblivionGate::OnDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGate", "OnDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionGate.OnEnabled
// (Event, Protected, BlueprintEvent)

void AVOblivionGate::OnEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGate", "OnEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionGate.RegisterToPlayer
// (Final, Native, Public, BlueprintCallable)

void AVOblivionGate::RegisterToPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGate", "RegisterToPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionGate.UnregisterFromPlayer
// (Final, Native, Public, BlueprintCallable)

void AVOblivionGate::UnregisterFromPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGate", "UnregisterFromPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionGate.ShouldComputeDistanceWithPlayer
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVOblivionGate::ShouldComputeDistanceWithPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionGate", "ShouldComputeDistanceWithPlayer");

	Params::VOblivionGate_ShouldComputeDistanceWithPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.GetLastHitObjectRefComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVTESObjectRefComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVTESObjectRefComponent* AVOblivionPlayerCharacter::GetLastHitObjectRefComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "GetLastHitObjectRefComponent");

	Params::VOblivionPlayerCharacter_GetLastHitObjectRefComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.OnChangeLevel
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVOblivionPlayerCharacter::OnChangeLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnChangeLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionPlayerCharacter.OnEndGrabAction
// (Final, Native, Public, BlueprintCallable)

void AVOblivionPlayerCharacter::OnEndGrabAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnEndGrabAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnEndTelekinesisAction
// (Final, Native, Public, BlueprintCallable)

void AVOblivionPlayerCharacter::OnEndTelekinesisAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnEndTelekinesisAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnEndTelekinesisPullAction
// (Final, Native, Public, BlueprintCallable)

void AVOblivionPlayerCharacter::OnEndTelekinesisPullAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnEndTelekinesisPullAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnEndTelekinesisPushAction
// (Final, Native, Public, BlueprintCallable)

void AVOblivionPlayerCharacter::OnEndTelekinesisPushAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnEndTelekinesisPushAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnEnterUnderwater
// (Event, Public, BlueprintEvent)

void AVOblivionPlayerCharacter::OnEnterUnderwater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnEnterUnderwater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionPlayerCharacter.OnEnterWaterSurface
// (Event, Public, BlueprintEvent)

void AVOblivionPlayerCharacter::OnEnterWaterSurface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnEnterWaterSurface");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionPlayerCharacter.OnExitUnderwater
// (Event, Public, BlueprintEvent)

void AVOblivionPlayerCharacter::OnExitUnderwater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnExitUnderwater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionPlayerCharacter.OnExitWaterSurface
// (Event, Public, BlueprintEvent)

void AVOblivionPlayerCharacter::OnExitWaterSurface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnExitWaterSurface");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOblivionPlayerCharacter.OnGameplayCameraContextChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayCameraContext                  GameplayCameraContext                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::OnGameplayCameraContextChanged(EGameplayCameraContext GameplayCameraContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnGameplayCameraContextChanged");

	Params::VOblivionPlayerCharacter_OnGameplayCameraContextChanged Parms{};

	Parms.GameplayCameraContext = GameplayCameraContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOblivionPlayerCharacter.OnGameplayCameraFocusOnPoint
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   FromPosition                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ToPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::OnGameplayCameraFocusOnPoint(const struct FVector& FromPosition, const struct FVector& ToPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnGameplayCameraFocusOnPoint");

	Params::VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint Parms{};

	Parms.FromPosition = std::move(FromPosition);
	Parms.ToPosition = std::move(ToPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOblivionPlayerCharacter.OnPlayFailCastSound
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EMagicSchool                            MagicSchool                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::OnPlayFailCastSound(EMagicSchool MagicSchool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnPlayFailCastSound");

	Params::VOblivionPlayerCharacter_OnPlayFailCastSound Parms{};

	Parms.MagicSchool = MagicSchool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnQuiverChanged
// (Final, Native, Protected)
// Parameters:
// const class AVQuiver*                   QuiverActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::OnQuiverChanged(const class AVQuiver* QuiverActor, bool bEquipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnQuiverChanged");

	Params::VOblivionPlayerCharacter_OnQuiverChanged Parms{};

	Parms.QuiverActor = QuiverActor;
	Parms.bEquipping = bEquipping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnStartGrabAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVOblivionPlayerCharacter::OnStartGrabAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnStartGrabAction");

	Params::VOblivionPlayerCharacter_OnStartGrabAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.OnStartTelekinesisAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVOblivionPlayerCharacter::OnStartTelekinesisAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnStartTelekinesisAction");

	Params::VOblivionPlayerCharacter_OnStartTelekinesisAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.OnStartTelekinesisPullAction
// (Final, Native, Public, BlueprintCallable)

void AVOblivionPlayerCharacter::OnStartTelekinesisPullAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnStartTelekinesisPullAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnStartTelekinesisPushAction
// (Final, Native, Public, BlueprintCallable)

void AVOblivionPlayerCharacter::OnStartTelekinesisPushAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnStartTelekinesisPushAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.OnTorchChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     TorchActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEquipping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::OnTorchChanged(const class AActor* TorchActor, bool bEquipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "OnTorchChanged");

	Params::VOblivionPlayerCharacter_OnTorchChanged Parms{};

	Parms.TorchActor = TorchActor;
	Parms.bEquipping = bEquipping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.RefreshFPSClippingFixFirstPersonBody
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bShoudForceRefresh                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::RefreshFPSClippingFixFirstPersonBody(bool bShoudForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "RefreshFPSClippingFixFirstPersonBody");

	Params::VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody Parms{};

	Parms.bShoudForceRefresh = bShoudForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.ResetInstance
// (Final, Native, Public)

void AVOblivionPlayerCharacter::ResetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "ResetInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.SetLastHitObjectRefComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVTESObjectRefComponent*          Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::SetLastHitObjectRefComponent(class UVTESObjectRefComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "SetLastHitObjectRefComponent");

	Params::VOblivionPlayerCharacter_SetLastHitObjectRefComponent Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.SetUseBowAimingRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUseBowRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVOblivionPlayerCharacter::SetUseBowAimingRotation(bool bUseBowRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "SetUseBowAimingRotation");

	Params::VOblivionPlayerCharacter_SetUseBowAimingRotation Parms{};

	Parms.bUseBowRotation = bUseBowRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOblivionPlayerCharacter.CanTryInteract
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVOblivionPlayerCharacter::CanTryInteract() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "CanTryInteract");

	Params::VOblivionPlayerCharacter_CanTryInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.GetInventoryPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AVInventoryPlayerCharacter*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AVInventoryPlayerCharacter* AVOblivionPlayerCharacter::GetInventoryPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "GetInventoryPlayer");

	Params::VOblivionPlayerCharacter_GetInventoryPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.GetSubLevelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AVOblivionPlayerCharacter::GetSubLevelName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "GetSubLevelName");

	Params::VOblivionPlayerCharacter_GetSubLevelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOblivionPlayerCharacter.RequestPowerAttack
// (Final, Native, Public, BlueprintCallable, Const)

void AVOblivionPlayerCharacter::RequestPowerAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOblivionPlayerCharacter", "RequestPowerAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.Clean
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVOnboardingPageInterface::Clean()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "Clean");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.LaunchEnterAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVOnboardingPageInterface::LaunchEnterAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "LaunchEnterAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.LaunchExitAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVOnboardingPageInterface::LaunchExitAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "LaunchExitAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.OnEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVOnboardingPageInterface::OnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "OnEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.OnEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVOnboardingPageInterface::OnEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "OnEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.OnExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Forward                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVOnboardingPageInterface::OnExit(bool Forward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "OnExit");

	Params::VOnboardingPageInterface_OnExit Parms{};

	Parms.Forward = Forward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.OnStart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IVOnboardingPageInterface::OnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "OnStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOnboardingPageInterface.CanBeSkiped
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVOnboardingPageInterface::CanBeSkiped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "CanBeSkiped");

	Params::VOnboardingPageInterface_CanBeSkiped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOnboardingPageInterface.CanEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVOnboardingPageInterface::CanEnter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "CanEnter");

	Params::VOnboardingPageInterface_CanEnter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOnboardingPageInterface.CanExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVOnboardingPageInterface::CanExit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "CanExit");

	Params::VOnboardingPageInterface_CanExit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOnboardingPageInterface.DoesNeedEnterAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVOnboardingPageInterface::DoesNeedEnterAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "DoesNeedEnterAnimation");

	Params::VOnboardingPageInterface_DoesNeedEnterAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOnboardingPageInterface.DoesNeedExitAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IVOnboardingPageInterface::DoesNeedExitAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VOnboardingPageInterface", "DoesNeedExitAnimation");

	Params::VOnboardingPageInterface_DoesNeedExitAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalImageTile.GetCeilPowerOfTwo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVOriginalImageTile::GetCeilPowerOfTwo(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VOriginalImageTile", "GetCeilPowerOfTwo");

	Params::VOriginalImageTile_GetCeilPowerOfTwo Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalImageTile.GetFixedOffsetPowerOfTwo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FImageCorrectionData&      Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UVOriginalImageTile::GetFixedOffsetPowerOfTwo(const struct FImageCorrectionData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VOriginalImageTile", "GetFixedOffsetPowerOfTwo");

	Params::VOriginalImageTile_GetFixedOffsetPowerOfTwo Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginalImageTile.OnBrushUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalImageTile::OnBrushUpdated(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "OnBrushUpdated");

	Params::VOriginalImageTile_OnBrushUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginalImageTile.OnCorrectionDataUpdated
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FImageCorrectionData&      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalImageTile::OnCorrectionDataUpdated(const struct FImageCorrectionData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "OnCorrectionDataUpdated");

	Params::VOriginalImageTile_OnCorrectionDataUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginalImageTile.OnFixPowerOfTwoOffsetsUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginalImageTile::OnFixPowerOfTwoOffsetsUpdated(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "OnFixPowerOfTwoOffsetsUpdated");

	Params::VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginalImageTile.OnOriginalImageSizeUpdated
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginalImageTile::OnOriginalImageSizeUpdated(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "OnOriginalImageSizeUpdated");

	Params::VOriginalImageTile_OnOriginalImageSizeUpdated Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginalImageTile.OnSynchronizeProperties
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UVOriginalImageTile::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "OnSynchronizeProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VOriginalImageTile.SetBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalImageTile::SetBrush(const struct FSlateBrush& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "SetBrush");

	Params::VOriginalImageTile_SetBrush Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalImageTile.SetCorrectionData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FImageCorrectionData&      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginalImageTile::SetCorrectionData(const struct FImageCorrectionData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "SetCorrectionData");

	Params::VOriginalImageTile_SetCorrectionData Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalImageTile.SetFixPowerOfTwoOffsets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginalImageTile::SetFixPowerOfTwoOffsets(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "SetFixPowerOfTwoOffsets");

	Params::VOriginalImageTile_SetFixPowerOfTwoOffsets Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalImageTile.SetOriginalImageSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginalImageTile::SetOriginalImageSize(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "SetOriginalImageSize");

	Params::VOriginalImageTile_SetOriginalImageSize Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginalImageTile.GetCorrectionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FImageCorrectionData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FImageCorrectionData UVOriginalImageTile::GetCorrectionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginalImageTile", "GetCorrectionData");

	Params::VOriginalImageTile_GetCorrectionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VOriginal_InventoryFilter.ActivateFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCommonUserWidget*                Activator                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginal_InventoryFilter::ActivateFilter(class UCommonUserWidget* Activator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginal_InventoryFilter", "ActivateFilter");

	Params::VOriginal_InventoryFilter_ActivateFilter Parms{};

	Parms.Activator = Activator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginal_InventoryFilter.OnFilterIconCreated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                NewFilter                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOriginal_InventoryFilterTableRow&FilterDesign                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginal_InventoryFilter::OnFilterIconCreated(class UCommonUserWidget* NewFilter, const struct FOriginal_InventoryFilterTableRow& FilterDesign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginal_InventoryFilter", "OnFilterIconCreated");

	Params::VOriginal_InventoryFilter_OnFilterIconCreated Parms{};

	Parms.NewFilter = NewFilter;
	Parms.FilterDesign = std::move(FilterDesign);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginal_InventoryFilter.RequestUpdateFilterWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCommonUserWidget*                Filter                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDisplayed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginal_InventoryFilter::RequestUpdateFilterWidget(class UCommonUserWidget* Filter, bool bIsDisplayed, bool bIsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginal_InventoryFilter", "RequestUpdateFilterWidget");

	Params::VOriginal_InventoryFilter_RequestUpdateFilterWidget Parms{};

	Parms.Filter = Filter;
	Parms.bIsDisplayed = bIsDisplayed;
	Parms.bIsEnable = bIsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VOriginal_InventoryFilter.SetActiveFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOriginalInventoryMenuSortType          ActiveFilterEnum                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVOriginal_InventoryFilter::SetActiveFilter(EOriginalInventoryMenuSortType ActiveFilterEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginal_InventoryFilter", "SetActiveFilter");

	Params::VOriginal_InventoryFilter_SetActiveFilter Parms{};

	Parms.ActiveFilterEnum = ActiveFilterEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VOriginal_InventoryFilter.SetEnabledFilters
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<EOriginalInventoryMenuSortType>&EnabledFilterEnums                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVOriginal_InventoryFilter::SetEnabledFilters(const TArray<EOriginalInventoryMenuSortType>& EnabledFilterEnums)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VOriginal_InventoryFilter", "SetEnabledFilters");

	Params::VOriginal_InventoryFilter_SetEnabledFilters Parms{};

	Parms.EnabledFilterEnums = std::move(EnabledFilterEnums);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedAssetsLoadingSubsystem.RegisterPreloadRequestFromForm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UTESForm*                   InPairedActorForm                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVPreloadPriority                       InPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             InOwnerInstanceFormID                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UVPairedAssetsLoadingSubsystem::RegisterPreloadRequestFromForm(const class UTESForm* InPairedActorForm, EVPreloadPriority InPriority, const int64 InOwnerInstanceFormID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedAssetsLoadingSubsystem", "RegisterPreloadRequestFromForm");

	Params::VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm Parms{};

	Parms.InPairedActorForm = InPairedActorForm;
	Parms.InPriority = InPriority;
	Parms.InOwnerInstanceFormID = InOwnerInstanceFormID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedAssetsLoadingSubsystem.RegisterPreloadRequestFromFormID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int64                             InPairedActorFormID                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVPreloadPriority                       InPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             InOwnerInstanceFormID                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UVPairedAssetsLoadingSubsystem::RegisterPreloadRequestFromFormID(const int64 InPairedActorFormID, EVPreloadPriority InPriority, const int64 InOwnerInstanceFormID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedAssetsLoadingSubsystem", "RegisterPreloadRequestFromFormID");

	Params::VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID Parms{};

	Parms.InPairedActorFormID = InPairedActorFormID;
	Parms.InPriority = InPriority;
	Parms.InOwnerInstanceFormID = InOwnerInstanceFormID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedAssetsLoadingSubsystem.UnregisterPreloadRequestFromForm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UTESForm*                   InPairedActorForm                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             InOwnerInstanceFormID                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedAssetsLoadingSubsystem::UnregisterPreloadRequestFromForm(const class UTESForm* InPairedActorForm, const int64 InOwnerInstanceFormID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedAssetsLoadingSubsystem", "UnregisterPreloadRequestFromForm");

	Params::VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm Parms{};

	Parms.InPairedActorForm = InPairedActorForm;
	Parms.InOwnerInstanceFormID = InOwnerInstanceFormID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedAssetsLoadingSubsystem.UnregisterPreloadRequestFromFormID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int64                             InPairedActorFormID                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             InOwnerInstanceFormID                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedAssetsLoadingSubsystem::UnregisterPreloadRequestFromFormID(const int64 InPairedActorFormID, const int64 InOwnerInstanceFormID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedAssetsLoadingSubsystem", "UnregisterPreloadRequestFromFormID");

	Params::VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID Parms{};

	Parms.InPairedActorFormID = InPairedActorFormID;
	Parms.InOwnerInstanceFormID = InOwnerInstanceFormID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedAssetsLoadingSubsystem.UnregisterPreloadRequestFromRequestID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int64                             InPreloadRequestID                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             InOwnerInstanceFormID                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPairedAssetsLoadingSubsystem::UnregisterPreloadRequestFromRequestID(const int64 InPreloadRequestID, const int64 InOwnerInstanceFormID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedAssetsLoadingSubsystem", "UnregisterPreloadRequestFromRequestID");

	Params::VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID Parms{};

	Parms.InPreloadRequestID = InPreloadRequestID;
	Parms.InOwnerInstanceFormID = InOwnerInstanceFormID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.AnimNotifyActionEventInfo.GetNotifyDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimNotifyActionEventInfo::GetNotifyDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotifyActionEventInfo", "GetNotifyDuration");

	Params::AnimNotifyActionEventInfo_GetNotifyDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPawnAnimatedAction.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPawnAnimatedAction::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPawnAnimatedAction", "IsValid");

	Params::VPawnAnimatedAction_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellCastSingleAnimInstance.OnCastSelfLeftEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastSingleAnimInstance::OnCastSelfLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastSingleAnimInstance", "OnCastSelfLeftEnter");

	Params::VSpellCastSingleAnimInstance_OnCastSelfLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastSingleAnimInstance.OnCastSelfRightEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastSingleAnimInstance::OnCastSelfRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastSingleAnimInstance", "OnCastSelfRightEnter");

	Params::VSpellCastSingleAnimInstance_OnCastSelfRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastSingleAnimInstance.OnCastTargeRightEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastSingleAnimInstance::OnCastTargeRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastSingleAnimInstance", "OnCastTargeRightEnter");

	Params::VSpellCastSingleAnimInstance_OnCastTargeRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastSingleAnimInstance.OnCastTargetLeftEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastSingleAnimInstance::OnCastTargetLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastSingleAnimInstance", "OnCastTargetLeftEnter");

	Params::VSpellCastSingleAnimInstance_OnCastTargetLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastSingleAnimInstance.OnCastTouchLeftEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastSingleAnimInstance::OnCastTouchLeftEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastSingleAnimInstance", "OnCastTouchLeftEnter");

	Params::VSpellCastSingleAnimInstance_OnCastTouchLeftEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellCastSingleAnimInstance.OnCastTouchRightEnter
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVSpellCastSingleAnimInstance::OnCastTouchRightEnter(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellCastSingleAnimInstance", "OnCastTouchRightEnter");

	Params::VSpellCastSingleAnimInstance_OnCastTouchRightEnter Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAIBlackboard.ClearValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarAIBlackboard::ClearValue(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarAIBlackboard", "ClearValue");

	Params::VAltarAIBlackboard_ClearValue Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAIBlackboard.SetScalarValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVAltarAIBlackboard::SetScalarValue(const struct FGameplayTag& Tag, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarAIBlackboard", "SetScalarValue");

	Params::VAltarAIBlackboard_SetScalarValue Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VAltarAIBlackboard.HasValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVAltarAIBlackboard::HasValue(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarAIBlackboard", "HasValue");

	Params::VAltarAIBlackboard_HasValue Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VAltarAIBlackboard.ReadScalarValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVAltarAIBlackboard::ReadScalarValue(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VAltarAIBlackboard", "ReadScalarValue");

	Params::VAltarAIBlackboard_ReadScalarValue Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnAIController.ActivateCombatDebugMode
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawnAIController::ActivateCombatDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "ActivateCombatDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnAIController.ActivateDebugMode
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawnAIController::ActivateDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "ActivateDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnAIController.DeactivateCombatDebugMode
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawnAIController::DeactivateCombatDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "DeactivateCombatDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnAIController.DeactivateDebugMode
// (Final, Native, Public, BlueprintCallable)

void AVPairedPawnAIController::DeactivateDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "DeactivateDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnAIController.OnControlledPawnWeaponChanged
// (Final, Native, Protected)
// Parameters:
// const class AVWeapon*                   NewWeaponForm                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPairedPawnAIController::OnControlledPawnWeaponChanged(const class AVWeapon* NewWeaponForm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "OnControlledPawnWeaponChanged");

	Params::VPairedPawnAIController_OnControlledPawnWeaponChanged Parms{};

	Parms.NewWeaponForm = NewWeaponForm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPairedPawnAIController.OnDebugModeActivated
// (Event, Protected, BlueprintEvent)

void AVPairedPawnAIController::OnDebugModeActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "OnDebugModeActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawnAIController.OnDebugModeDeactivated
// (Event, Protected, BlueprintEvent)

void AVPairedPawnAIController::OnDebugModeDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "OnDebugModeDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawnAIController.OnProcedureInterrupted
// (Event, Protected, BlueprintEvent)

void AVPairedPawnAIController::OnProcedureInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "OnProcedureInterrupted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawnAIController.OnProcedureStarted
// (Event, Protected, BlueprintEvent)

void AVPairedPawnAIController::OnProcedureStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "OnProcedureStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawnAIController.UpdateCombatDebugDisplay
// (Event, Protected, BlueprintEvent)

void AVPairedPawnAIController::UpdateCombatDebugDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "UpdateCombatDebugDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Altar.VPairedPawnAIController.ComputePackageRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   RadiusTypeIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVPairedPawnAIController::ComputePackageRadius(int32 RadiusTypeIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "ComputePackageRadius");

	Params::VPairedPawnAIController_ComputePackageRadius Parms{};

	Parms.RadiusTypeIndex = RadiusTypeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnAIController.GetDynamicTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AVPairedPawnAIController::GetDynamicTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "GetDynamicTargetActor");

	Params::VPairedPawnAIController_GetDynamicTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnAIController.HasDynamicTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVPairedPawnAIController::HasDynamicTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnAIController", "HasDynamicTarget");

	Params::VPairedPawnAIController_HasDynamicTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnStateMachineComponent.GetActionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVPairedPawnStateMachineComponent::GetActionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnStateMachineComponent", "GetActionState");

	Params::VPairedPawnStateMachineComponent_GetActionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnStateMachineComponent.GetActionStateDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVPairedPawnStateMachineComponent::GetActionStateDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnStateMachineComponent", "GetActionStateDuration");

	Params::VPairedPawnStateMachineComponent_GetActionStateDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnStateMachineComponent.GetActionStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVPairedPawnStateMachineComponent::GetActionStateTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnStateMachineComponent", "GetActionStateTag");

	Params::VPairedPawnStateMachineComponent_GetActionStateTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPairedPawnStateMachineComponent.GetLocomotionStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UVPairedPawnStateMachineComponent::GetLocomotionStateTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPairedPawnStateMachineComponent", "GetLocomotionStateTag");

	Params::VPairedPawnStateMachineComponent_GetLocomotionStateTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VParticleEffectPairingComponent.AttachVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    VisualEffectKey                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   VisualEffect                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVParticleEffectPairingComponent::AttachVFX(const class FString& VisualEffectKey, class UNiagaraSystem* VisualEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "AttachVFX");

	Params::VParticleEffectPairingComponent_AttachVFX Parms{};

	Parms.VisualEffectKey = std::move(VisualEffectKey);
	Parms.VisualEffect = VisualEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.InitializeComponent
// (Final, Native, Public, BlueprintCallable)

void UVParticleEffectPairingComponent::InitializeComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "InitializeComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.OrderActorDestruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDoesStopEmitting                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVParticleEffectPairingComponent::OrderActorDestruction(bool bDoesStopEmitting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "OrderActorDestruction");

	Params::VParticleEffectPairingComponent_OrderActorDestruction Parms{};

	Parms.bDoesStopEmitting = bDoesStopEmitting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.SetAutoplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInDoesAutoplay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVParticleEffectPairingComponent::SetAutoplay(bool bInDoesAutoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "SetAutoplay");

	Params::VParticleEffectPairingComponent_SetAutoplay Parms{};

	Parms.bInDoesAutoplay = bInDoesAutoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.SetCanBeDestroyed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInCanBeDestroyed                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVParticleEffectPairingComponent::SetCanBeDestroyed(bool bInCanBeDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "SetCanBeDestroyed");

	Params::VParticleEffectPairingComponent_SetCanBeDestroyed Parms{};

	Parms.bInCanBeDestroyed = bInCanBeDestroyed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.SetCanBeDestroyedToTrue
// (Final, Native, Public, BlueprintCallable)

void UVParticleEffectPairingComponent::SetCanBeDestroyedToTrue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "SetCanBeDestroyedToTrue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.StopVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDoesStopImmediately                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVParticleEffectPairingComponent::StopVFX(bool bDoesStopImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "StopVFX");

	Params::VParticleEffectPairingComponent_StopVFX Parms{};

	Parms.bDoesStopImmediately = bDoesStopImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.TriggerVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SequenceName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVParticleEffectPairingComponent::TriggerVFX(const class FString& SequenceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "TriggerVFX");

	Params::VParticleEffectPairingComponent_TriggerVFX Parms{};

	Parms.SequenceName = std::move(SequenceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.TryToDestroyActor
// (Final, Native, Private, BlueprintCallable)

void UVParticleEffectPairingComponent::TryToDestroyActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "TryToDestroyActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VParticleEffectPairingComponent.GetNiagaraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* UVParticleEffectPairingComponent::GetNiagaraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VParticleEffectPairingComponent", "GetNiagaraComponent");

	Params::VParticleEffectPairingComponent_GetNiagaraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPawnSparkVFXBlueprint.OnStartPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsBlocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damages                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     Attacker                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesBeginInFirstPerson                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceType                         HitSourceType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVHitSourceMaterial                     HitSourceMaterial                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVPawnSparkVFXBlueprint::OnStartPlay(bool bIsBlocked, float Damages, const class AActor* Target, const class AActor* Attacker, bool bDoesBeginInFirstPerson, EVHitSourceType HitSourceType, EVHitSourceMaterial HitSourceMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPawnSparkVFXBlueprint", "OnStartPlay");

	Params::VPawnSparkVFXBlueprint_OnStartPlay Parms{};

	Parms.bIsBlocked = bIsBlocked;
	Parms.Damages = Damages;
	Parms.Target = Target;
	Parms.Attacker = Attacker;
	Parms.bDoesBeginInFirstPerson = bDoesBeginInFirstPerson;
	Parms.HitSourceType = HitSourceType;
	Parms.HitSourceMaterial = HitSourceMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VPhysicsControllableWidget.UpdateDisplayedData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FVPhysicsControllableDebugData&ControllableDebugData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   DataIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsControllableWidget::UpdateDisplayedData(const struct FVPhysicsControllableDebugData& ControllableDebugData, int32 DataIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllableWidget", "UpdateDisplayedData");

	Params::VPhysicsControllableWidget_UpdateDisplayedData Parms{};

	Parms.ControllableDebugData = std::move(ControllableDebugData);
	Parms.DataIndex = DataIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VPhysicsControllableWidget.UpdateEntries
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class UVControllableEntry*>&ControllableEntries                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVPhysicsControllableWidget::UpdateEntries(const TArray<class UVControllableEntry*>& ControllableEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllableWidget", "UpdateEntries");

	Params::VPhysicsControllableWidget_UpdateEntries Parms{};

	Parms.ControllableEntries = std::move(ControllableEntries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Altar.VPhysicsControllableWidget.GetCurrentMapName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVPhysicsControllableWidget::GetCurrentMapName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllableWidget", "GetCurrentMapName");

	Params::VPhysicsControllableWidget_GetCurrentMapName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsControllerComponent.ChangeDampingValues
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DampingValuesMultiplier                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::ChangeDampingValues(float DampingValuesMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "ChangeDampingValues");

	Params::VPhysicsControllerComponent_ChangeDampingValues Parms{};

	Parms.DampingValuesMultiplier = DampingValuesMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.ClearWaterBodyInfo
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::ClearWaterBodyInfo(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "ClearWaterBodyInfo");

	Params::VPhysicsControllerComponent_ClearWaterBodyInfo Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.HandleCollisionSoundOnBeginOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnusedOtherBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UnusedSweep                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                EmptyHitResult                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::HandleCollisionSoundOnBeginOverlap(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, int32 UnusedOtherBox, bool UnusedSweep, const struct FHitResult& EmptyHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "HandleCollisionSoundOnBeginOverlap");

	Params::VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.UnusedOtherBox = UnusedOtherBox;
	Parms.UnusedSweep = UnusedSweep;
	Parms.EmptyHitResult = std::move(EmptyHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.HandleCollisionSoundOnHit
// (Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              SourceComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              TargetComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::HandleCollisionSoundOnHit(class UPrimitiveComponent* SourceComp, class AActor* TargetActor, class UPrimitiveComponent* TargetComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "HandleCollisionSoundOnHit");

	Params::VPhysicsControllerComponent_HandleCollisionSoundOnHit Parms{};

	Parms.SourceComp = SourceComp;
	Parms.TargetActor = TargetActor;
	Parms.TargetComp = TargetComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.InitializePontoons
// (Final, Native, Public, BlueprintCallable)

void UVPhysicsControllerComponent::InitializePontoons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "InitializePontoons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.OnComponentPhysicsStateChanged
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComponentPhysicsStateChange            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::OnComponentPhysicsStateChanged(class UPrimitiveComponent* Component, EComponentPhysicsStateChange State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "OnComponentPhysicsStateChanged");

	Params::VPhysicsControllerComponent_OnComponentPhysicsStateChanged Parms{};

	Parms.Component = Component;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.RetrieveWaterBodyInfo
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::RetrieveWaterBodyInfo(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "RetrieveWaterBodyInfo");

	Params::VPhysicsControllerComponent_RetrieveWaterBodyInfo Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.TryOwnerPerformSnapToEnvironment
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComponentPhysicsStateChange            StateChange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsControllerComponent::TryOwnerPerformSnapToEnvironment(class UPrimitiveComponent* Component, EComponentPhysicsStateChange StateChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "TryOwnerPerformSnapToEnvironment");

	Params::VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment Parms{};

	Parms.Component = Component;
	Parms.StateChange = StateChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsControllerComponent.FindWaterInteractiveComponents
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UPrimitiveComponent*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UPrimitiveComponent*> UVPhysicsControllerComponent::FindWaterInteractiveComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "FindWaterInteractiveComponents");

	Params::VPhysicsControllerComponent_FindWaterInteractiveComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsControllerComponent.IsOwnerDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsControllerComponent::IsOwnerDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPhysicsControllerComponent", "IsOwnerDisabled");

	Params::VPhysicsControllerComponent_IsOwnerDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.ApplyEquippedProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           EquippedActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyEquippedProfile(class AActor* EquippedActor, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyEquippedProfile");

	Params::VPhysicsUtilities_ApplyEquippedProfile Parms{};

	Parms.EquippedActor = EquippedActor;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyGhostProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyGhostProfiles(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyGhostProfiles");

	Params::VPhysicsUtilities_ApplyGhostProfiles Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyGrabbedProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           GrabbedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyGrabbedProfile(class AActor* GrabbedActor, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyGrabbedProfile");

	Params::VPhysicsUtilities_ApplyGrabbedProfile Parms{};

	Parms.GrabbedActor = GrabbedActor;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyIgnoreCameraProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyIgnoreCameraProfiles(class AActor* Actor, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyIgnoreCameraProfiles");

	Params::VPhysicsUtilities_ApplyIgnoreCameraProfiles Parms{};

	Parms.Actor = Actor;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyInvisibilityProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyInvisibilityProfiles(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyInvisibilityProfiles");

	Params::VPhysicsUtilities_ApplyInvisibilityProfiles Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyNoCollisionProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyNoCollisionProfile(class AActor* Actor, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyNoCollisionProfile");

	Params::VPhysicsUtilities_ApplyNoCollisionProfile Parms{};

	Parms.Actor = Actor;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyPawnDockingOnHorseProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            aPawn                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyPawnDockingOnHorseProfile(class APawn* aPawn, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyPawnDockingOnHorseProfile");

	Params::VPhysicsUtilities_ApplyPawnDockingOnHorseProfile Parms{};

	Parms.aPawn = aPawn;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyPawnDockingProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            aPawn                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyPawnDockingProfile(class APawn* aPawn, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyPawnDockingProfile");

	Params::VPhysicsUtilities_ApplyPawnDockingProfile Parms{};

	Parms.aPawn = aPawn;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ApplyWaterWalkingProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ApplyWaterWalkingProfile(class AActor* Actor, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ApplyWaterWalkingProfile");

	Params::VPhysicsUtilities_ApplyWaterWalkingProfile Parms{};

	Parms.Actor = Actor;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.CheckIsCollisionProfileNotAnonymous
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UPrimitiveComponent*        PrimitiveComponent                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::CheckIsCollisionProfileNotAnonymous(const class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "CheckIsCollisionProfileNotAnonymous");

	Params::VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ClearAllCollisionTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ClearAllCollisionTags(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ClearAllCollisionTags");

	Params::VPhysicsUtilities_ClearAllCollisionTags Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.FindDefaultCanEverAffectNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsUtilities::FindDefaultCanEverAffectNavigation(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "FindDefaultCanEverAffectNavigation");

	Params::VPhysicsUtilities_FindDefaultCanEverAffectNavigation Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.FindDefaultCollisionProfileName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVPhysicsUtilities::FindDefaultCollisionProfileName(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "FindDefaultCollisionProfileName");

	Params::VPhysicsUtilities_FindDefaultCollisionProfileName Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.FindNavigableTeleportSpot
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class APawn*                      Pawn                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  TeleportRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector&                         TeleportLocation                                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsUtilities::FindNavigableTeleportSpot(const class APawn* Pawn, const struct FRotator& TeleportRotation, struct FVector& TeleportLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "FindNavigableTeleportSpot");

	Params::VPhysicsUtilities_FindNavigableTeleportSpot Parms{};

	Parms.Pawn = Pawn;
	Parms.TeleportRotation = std::move(TeleportRotation);
	Parms.TeleportLocation = std::move(TeleportLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TeleportLocation = std::move(Parms.TeleportLocation);

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.IsCollisionProfileCodeDrivable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsUtilities::IsCollisionProfileCodeDrivable(const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "IsCollisionProfileCodeDrivable");

	Params::VPhysicsUtilities_IsCollisionProfileCodeDrivable Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.IsCollisionProfileNameValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsUtilities::IsCollisionProfileNameValid(const class FName& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "IsCollisionProfileNameValid");

	Params::VPhysicsUtilities_IsCollisionProfileNameValid Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.IsCollisionProfilePurelyCodeDriven
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UPrimitiveComponent*        PrimitiveComponent                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsUtilities::IsCollisionProfilePurelyCodeDriven(const class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "IsCollisionProfilePurelyCodeDriven");

	Params::VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.IsUsingTemporaryProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPhysicsUtilities::IsUsingTemporaryProfile(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "IsUsingTemporaryProfile");

	Params::VPhysicsUtilities_IsUsingTemporaryProfile Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPhysicsUtilities.RemoveGhostProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::RemoveGhostProfiles(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "RemoveGhostProfiles");

	Params::VPhysicsUtilities_RemoveGhostProfiles Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.RemoveInvisibilityProfiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::RemoveInvisibilityProfiles(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "RemoveInvisibilityProfiles");

	Params::VPhysicsUtilities_RemoveInvisibilityProfiles Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.ResetAllOriginalProfilesToDefault
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::ResetAllOriginalProfilesToDefault(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "ResetAllOriginalProfilesToDefault");

	Params::VPhysicsUtilities_ResetAllOriginalProfilesToDefault Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPhysicsUtilities.RestoreOriginalProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CollisionLockKey                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPhysicsUtilities::RestoreOriginalProfile(class AActor* Actor, const class FString& CollisionLockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VPhysicsUtilities", "RestoreOriginalProfile");

	Params::VPhysicsUtilities_RestoreOriginalProfile Parms{};

	Parms.Actor = Actor;
	Parms.CollisionLockKey = std::move(CollisionLockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.RegisterChangeMenuHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyPlayerMenuPage                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPlayerMenuViewModel::RegisterChangeMenuHandler(ELegacyPlayerMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "RegisterChangeMenuHandler");

	Params::VPlayerMenuViewModel_RegisterChangeMenuHandler Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.RegisterCloseMenuFromSaveMenuHandler
// (Final, Native, Public, BlueprintCallable)

void UVPlayerMenuViewModel::RegisterCloseMenuFromSaveMenuHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "RegisterCloseMenuFromSaveMenuHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.RegisterCloseMenuHandler
// (Final, Native, Public, BlueprintCallable)

void UVPlayerMenuViewModel::RegisterCloseMenuHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "RegisterCloseMenuHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.RegisterClosePauseMenuHandler
// (Final, Native, Public, BlueprintCallable)

void UVPlayerMenuViewModel::RegisterClosePauseMenuHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "RegisterClosePauseMenuHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.RegisterOpenPauseMenuHandler
// (Final, Native, Public, BlueprintCallable)

void UVPlayerMenuViewModel::RegisterOpenPauseMenuHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "RegisterOpenPauseMenuHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyPlayerMenuPage                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPlayerMenuViewModel::SetCurrentPage(ELegacyPlayerMenuPage NewPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "SetCurrentPage");

	Params::VPlayerMenuViewModel_SetCurrentPage Parms{};

	Parms.NewPage = NewPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.SetQuickKeysVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPlayerMenuViewModel::SetQuickKeysVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "SetQuickKeysVisibility");

	Params::VPlayerMenuViewModel_SetQuickKeysVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.SetVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVPlayerMenuViewModel::SetVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "SetVisibility");

	Params::VPlayerMenuViewModel_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VPlayerMenuViewModel.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyPlayerMenuPage                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyPlayerMenuPage UVPlayerMenuViewModel::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "GetCurrentPage");

	Params::VPlayerMenuViewModel_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPlayerMenuViewModel.IsQuickKeysVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPlayerMenuViewModel::IsQuickKeysVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "IsQuickKeysVisible");

	Params::VPlayerMenuViewModel_IsQuickKeysVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VPlayerMenuViewModel.IsVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVPlayerMenuViewModel::IsVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VPlayerMenuViewModel", "IsVisible");

	Params::VPlayerMenuViewModel_IsVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VQuantityMenuViewModel.RegisterSendClickedOnCancel
// (Final, Native, Public, BlueprintCallable)

void UVQuantityMenuViewModel::RegisterSendClickedOnCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuantityMenuViewModel", "RegisterSendClickedOnCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuantityMenuViewModel.RegisterSendClickedOnOkay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVQuantityMenuViewModel::RegisterSendClickedOnOkay(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuantityMenuViewModel", "RegisterSendClickedOnOkay");

	Params::VQuantityMenuViewModel_RegisterSendClickedOnOkay Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuantityMenuViewModel.SetScrollbarProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyScrollbarValueProperties&NewScrollbarProperties                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVQuantityMenuViewModel::SetScrollbarProperties(const struct FLegacyScrollbarValueProperties& NewScrollbarProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuantityMenuViewModel", "SetScrollbarProperties");

	Params::VQuantityMenuViewModel_SetScrollbarProperties Parms{};

	Parms.NewScrollbarProperties = std::move(NewScrollbarProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuantityMenuViewModel.SetSelectedValue
// (Final, Native, Public)
// Parameters:
// float                                   NewSelectedValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVQuantityMenuViewModel::SetSelectedValue(float NewSelectedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuantityMenuViewModel", "SetSelectedValue");

	Params::VQuantityMenuViewModel_SetSelectedValue Parms{};

	Parms.NewSelectedValue = NewSelectedValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuantityMenuViewModel.GetScrollbarProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyScrollbarValueProperties  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLegacyScrollbarValueProperties UVQuantityMenuViewModel::GetScrollbarProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuantityMenuViewModel", "GetScrollbarProperties");

	Params::VQuantityMenuViewModel_GetScrollbarProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VQuantityMenuViewModel.GetSelectedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVQuantityMenuViewModel::GetSelectedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuantityMenuViewModel", "GetSelectedValue");

	Params::VQuantityMenuViewModel_GetSelectedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VQuickKeysMenuViewModel.RegisterSendClose
// (Final, Native, Public, BlueprintCallable)

void UVQuickKeysMenuViewModel::RegisterSendClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "RegisterSendClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.RegisterSendForceMouseInputByAltar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewForceMouseInputByAltar                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVQuickKeysMenuViewModel::RegisterSendForceMouseInputByAltar(bool bNewForceMouseInputByAltar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "RegisterSendForceMouseInputByAltar");

	Params::VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar Parms{};

	Parms.bNewForceMouseInputByAltar = bNewForceMouseInputByAltar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.RegisterSendOpen
// (Final, Native, Public, BlueprintCallable)

void UVQuickKeysMenuViewModel::RegisterSendOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "RegisterSendOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.RegisterSendSelectedQuickKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   KeyID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVQuickKeysMenuViewModel::RegisterSendSelectedQuickKey(int32 KeyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "RegisterSendSelectedQuickKey");

	Params::VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey Parms{};

	Parms.KeyID = KeyID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.SetIcons
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class UTexture2D*>&        NewIcons                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVQuickKeysMenuViewModel::SetIcons(const TArray<class UTexture2D*>& NewIcons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "SetIcons");

	Params::VQuickKeysMenuViewModel_SetIcons Parms{};

	Parms.NewIcons = std::move(NewIcons);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.SetKeyIndex
// (Final, Native, Public)
// Parameters:
// int32                                   NewKeyIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVQuickKeysMenuViewModel::SetKeyIndex(int32 NewKeyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "SetKeyIndex");

	Params::VQuickKeysMenuViewModel_SetKeyIndex Parms{};

	Parms.NewKeyIndex = NewKeyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.SetMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewMessage                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVQuickKeysMenuViewModel::SetMessage(const class FText& NewMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "SetMessage");

	Params::VQuickKeysMenuViewModel_SetMessage Parms{};

	Parms.NewMessage = std::move(NewMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuickKeysMenuViewModel.GetIcons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UTexture2D*>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UTexture2D*> UVQuickKeysMenuViewModel::GetIcons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "GetIcons");

	Params::VQuickKeysMenuViewModel_GetIcons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VQuickKeysMenuViewModel.GetKeyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVQuickKeysMenuViewModel::GetKeyIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "GetKeyIndex");

	Params::VQuickKeysMenuViewModel_GetKeyIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VQuickKeysMenuViewModel.GetMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVQuickKeysMenuViewModel::GetMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuickKeysMenuViewModel", "GetMessage");

	Params::VQuickKeysMenuViewModel_GetMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VModernStatsDataItem.SetBaseValues
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EStatGroupType                          InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      InName                                                 (Parm, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVModernStatsDataItem::SetBaseValues(EStatGroupType InType, const class FText& InName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VModernStatsDataItem", "SetBaseValues");

	Params::VModernStatsDataItem_SetBaseValues Parms{};

	Parms.InType = InType;
	Parms.InName = std::move(InName);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTorchCharacterAnimInstance.SetupTorchLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FTorchAnimationData&       InAnimSet                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UVTorchCharacterAnimInstance::SetupTorchLayer(const struct FTorchAnimationData& InAnimSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTorchCharacterAnimInstance", "SetupTorchLayer");

	Params::VTorchCharacterAnimInstance_SetupTorchLayer Parms{};

	Parms.InAnimSet = std::move(InAnimSet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTorchCharacterAnimInstance.CanDisableTorchPose
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTorchCharacterAnimInstance::CanDisableTorchPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTorchCharacterAnimInstance", "CanDisableTorchPose");

	Params::VTorchCharacterAnimInstance_CanDisableTorchPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTorchCharacterAnimInstance.CanEnableTorchPose
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTorchCharacterAnimInstance::CanEnableTorchPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTorchCharacterAnimInstance", "CanEnableTorchPose");

	Params::VTorchCharacterAnimInstance_CanEnableTorchPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTorchCharacterAnimInstance.IsBlocking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTorchCharacterAnimInstance::IsBlocking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTorchCharacterAnimInstance", "IsBlocking");

	Params::VTorchCharacterAnimInstance_IsBlocking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTorchCharacterAnimInstance.IsSneaking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTorchCharacterAnimInstance::IsSneaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTorchCharacterAnimInstance", "IsSneaking");

	Params::VTorchCharacterAnimInstance_IsSneaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.CloseMenu
// (Final, Native, Public)
// Parameters:
// EVFadeTransitionType                    Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::CloseMenu(EVFadeTransitionType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "CloseMenu");

	Params::VRaceSexMenuViewModel_CloseMenu Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentHairIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHardReset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVRaceSexMenuViewModel::GetCurrentHairIndex(bool bHardReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentHairIndex");

	Params::VRaceSexMenuViewModel_GetCurrentHairIndex Parms{};

	Parms.bHardReset = bHardReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.OnResetRefreshEnd
// (Final, Native, Public)

void UVRaceSexMenuViewModel::OnResetRefreshEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "OnResetRefreshEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.ParseButtonProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLegacyRaceSexMenuButtonProperties&TableProperties                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLegacyRaceSexMenuButtonPropertiesReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacyRaceSexMenuButtonProperties UVRaceSexMenuViewModel::ParseButtonProperties(const struct FLegacyRaceSexMenuButtonProperties& TableProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "ParseButtonProperties");

	Params::VRaceSexMenuViewModel_ParseButtonProperties Parms{};

	Parms.TableProperties = std::move(TableProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.ParseToggleProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLegacyRaceSexMenuToggleProperties&TableProperties                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLegacyRaceSexMenuTogglePropertiesReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacyRaceSexMenuToggleProperties UVRaceSexMenuViewModel::ParseToggleProperties(const struct FLegacyRaceSexMenuToggleProperties& TableProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "ParseToggleProperties");

	Params::VRaceSexMenuViewModel_ParseToggleProperties Parms{};

	Parms.TableProperties = std::move(TableProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.Random
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::Random()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "Random");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.RegisterSendDoneButtonHandler
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::RegisterSendDoneButtonHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "RegisterSendDoneButtonHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.RequestColorPicker
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bShouldShow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      Caller                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModernRaceSexMenuColorProperties&Properties                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::RequestColorPicker(bool bShouldShow, class UUserWidget* Caller, const struct FModernRaceSexMenuColorProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "RequestColorPicker");

	Params::VRaceSexMenuViewModel_RequestColorPicker Parms{};

	Parms.bShouldShow = bShouldShow;
	Parms.Caller = Caller;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.Reset
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.ReturnToPreviousPage
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::ReturnToPreviousPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "ReturnToPreviousPage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetActorStats
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVActorValuesPairingComponent*    NewCurrentActorStats                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetActorStats(class UVActorValuesPairingComponent* NewCurrentActorStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetActorStats");

	Params::VRaceSexMenuViewModel_SetActorStats Parms{};

	Parms.NewCurrentActorStats = NewCurrentActorStats;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetActorStatsWrapper
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::SetActorStatsWrapper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetActorStatsWrapper");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetArchetypesProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FModernRaceSexMenuArchetypeProperties>&NewArchetypesProperties                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetArchetypesProperties(const TArray<struct FModernRaceSexMenuArchetypeProperties>& NewArchetypesProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetArchetypesProperties");

	Params::VRaceSexMenuViewModel_SetArchetypesProperties Parms{};

	Parms.NewArchetypesProperties = std::move(NewArchetypesProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentArchetype
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            NewArchetype                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentArchetype(const int32& NewArchetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentArchetype");

	Params::VRaceSexMenuViewModel_SetCurrentArchetype Parms{};

	Parms.NewArchetype = NewArchetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentHairName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentHairName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentHairName");

	Params::VRaceSexMenuViewModel_SetCurrentHairName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentName(const class FText& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentName");

	Params::VRaceSexMenuViewModel_SetCurrentName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyRaceSexMenuPage                  NewCurrentPage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentPage(ELegacyRaceSexMenuPage NewCurrentPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentPage");

	Params::VRaceSexMenuViewModel_SetCurrentPage Parms{};

	Parms.NewCurrentPage = NewCurrentPage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentRace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewRace                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentRace(const class FString& NewRace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentRace");

	Params::VRaceSexMenuViewModel_SetCurrentRace Parms{};

	Parms.NewRace = std::move(NewRace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentRaceWithForceUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewRace                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentRaceWithForceUpdate(const class FString& NewRace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentRaceWithForceUpdate");

	Params::VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate Parms{};

	Parms.NewRace = std::move(NewRace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetCurrentSex
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            NewSex                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetCurrentSex(const int32& NewSex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetCurrentSex");

	Params::VRaceSexMenuViewModel_SetCurrentSex Parms{};

	Parms.NewSex = NewSex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetPhenotypeData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRaceSexMenuPhenotypeData& NewPhenotypeData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetPhenotypeData(const struct FRaceSexMenuPhenotypeData& NewPhenotypeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetPhenotypeData");

	Params::VRaceSexMenuViewModel_SetPhenotypeData Parms{};

	Parms.NewPhenotypeData = std::move(NewPhenotypeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetPlayerNameLocalizationPair
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPlayerNamePair&           NewNamePair                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetPlayerNameLocalizationPair(const struct FPlayerNamePair& NewNamePair)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetPlayerNameLocalizationPair");

	Params::VRaceSexMenuViewModel_SetPlayerNameLocalizationPair Parms{};

	Parms.NewNamePair = std::move(NewNamePair);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetRaceDescription
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      NewRaceDescription                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SetRaceDescription(const class FText& NewRaceDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetRaceDescription");

	Params::VRaceSexMenuViewModel_SetRaceDescription Parms{};

	Parms.NewRaceDescription = std::move(NewRaceDescription);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SetSave
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::SetSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SetSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SilentSetCurrentRace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewRace                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::SilentSetCurrentRace(const class FString& NewRace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SilentSetCurrentRace");

	Params::VRaceSexMenuViewModel_SilentSetCurrentRace Parms{};

	Parms.NewRace = std::move(NewRace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.SyncCharacterWithModel
// (Final, Native, Public, BlueprintCallable)

void UVRaceSexMenuViewModel::SyncCharacterWithModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "SyncCharacterWithModel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateArchetype
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ArchetypeIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateArchetype(int32 ArchetypeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateArchetype");

	Params::VRaceSexMenuViewModel_UpdateArchetype Parms{};

	Parms.ArchetypeIndex = ArchetypeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateColorTarget
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FName&                      ValueType                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    TargetValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateColorTarget(const class FName& ValueType, const struct FColor& TargetValue, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateColorTarget");

	Params::VRaceSexMenuViewModel_UpdateColorTarget Parms{};

	Parms.ValueType = ValueType;
	Parms.TargetValue = std::move(TargetValue);
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateCustomisationTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyRaceSexMenuToggleProperties&Property                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   OptionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateCustomisationTarget(const struct FLegacyRaceSexMenuToggleProperties& Property, int32 OptionIndex, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateCustomisationTarget");

	Params::VRaceSexMenuViewModel_UpdateCustomisationTarget Parms{};

	Parms.Property = std::move(Property);
	Parms.OptionIndex = OptionIndex;
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateEyeColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               EyeMaterial                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomisationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateEyeColor(class UMaterialInterface* EyeMaterial, int32 CustomisationIndex, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateEyeColor");

	Params::VRaceSexMenuViewModel_UpdateEyeColor Parms{};

	Parms.EyeMaterial = EyeMaterial;
	Parms.CustomisationIndex = CustomisationIndex;
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateHair
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UVCharacterHairPieceBase*   HairPiece                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomisationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateHair(const class UVCharacterHairPieceBase* HairPiece, int32 CustomisationIndex, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateHair");

	Params::VRaceSexMenuViewModel_UpdateHair Parms{};

	Parms.HairPiece = HairPiece;
	Parms.CustomisationIndex = CustomisationIndex;
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateMorphTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TargetName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateMorphTarget(class FName TargetName, float TargetValue, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateMorphTarget");

	Params::VRaceSexMenuViewModel_UpdateMorphTarget Parms{};

	Parms.TargetName = TargetName;
	Parms.TargetValue = TargetValue;
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdatePhenotypeValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      ValueType                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdatePhenotypeValue(const class FName& ValueType, float Value, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdatePhenotypeValue");

	Params::VRaceSexMenuViewModel_UpdatePhenotypeValue Parms{};

	Parms.ValueType = ValueType;
	Parms.Value = Value;
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateRaceSexArchetype
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      NewRaceDescription                                     (Parm, NativeAccessSpecifierPublic)
// int32                                   RaceIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SexIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ArchetypeIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTESRace*                         TESRacePtr                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateRaceSexArchetype(const class FText& NewRaceDescription, int32 RaceIndex, int32 SexIndex, int32 ArchetypeIndex, class UTESRace* TESRacePtr, bool bUpdateCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateRaceSexArchetype");

	Params::VRaceSexMenuViewModel_UpdateRaceSexArchetype Parms{};

	Parms.NewRaceDescription = std::move(NewRaceDescription);
	Parms.RaceIndex = RaceIndex;
	Parms.SexIndex = SexIndex;
	Parms.ArchetypeIndex = ArchetypeIndex;
	Parms.TESRacePtr = TESRacePtr;
	Parms.bUpdateCharacter = bUpdateCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.UpdateWidgetPhenotypeData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHardReset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRaceSexMenuViewModel::UpdateWidgetPhenotypeData(bool bHardReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "UpdateWidgetPhenotypeData");

	Params::VRaceSexMenuViewModel_UpdateWidgetPhenotypeData Parms{};

	Parms.bHardReset = bHardReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRaceSexMenuViewModel.GetActorStats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UVActorValuesPairingComponent*ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UVActorValuesPairingComponent* UVRaceSexMenuViewModel::GetActorStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetActorStats");

	Params::VRaceSexMenuViewModel_GetActorStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetAllRaceModificationProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyRaceSexMenuRaceProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyRaceSexMenuRaceProperties> UVRaceSexMenuViewModel::GetAllRaceModificationProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetAllRaceModificationProperties");

	Params::VRaceSexMenuViewModel_GetAllRaceModificationProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetArchetypesProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FModernRaceSexMenuArchetypeProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FModernRaceSexMenuArchetypeProperties> UVRaceSexMenuViewModel::GetArchetypesProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetArchetypesProperties");

	Params::VRaceSexMenuViewModel_GetArchetypesProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCommonCharacterModifications
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyRaceSexMenuTableRow>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyRaceSexMenuTableRow> UVRaceSexMenuViewModel::GetCommonCharacterModifications() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCommonCharacterModifications");

	Params::VRaceSexMenuViewModel_GetCommonCharacterModifications Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentArchetype
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVRaceSexMenuViewModel::GetCurrentArchetype() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentArchetype");

	Params::VRaceSexMenuViewModel_GetCurrentArchetype Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentHairName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVRaceSexMenuViewModel::GetCurrentHairName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentHairName");

	Params::VRaceSexMenuViewModel_GetCurrentHairName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVRaceSexMenuViewModel::GetCurrentName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentName");

	Params::VRaceSexMenuViewModel_GetCurrentName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyRaceSexMenuPage                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacyRaceSexMenuPage UVRaceSexMenuViewModel::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentPage");

	Params::VRaceSexMenuViewModel_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentRace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVRaceSexMenuViewModel::GetCurrentRace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentRace");

	Params::VRaceSexMenuViewModel_GetCurrentRace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetCurrentSex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVRaceSexMenuViewModel::GetCurrentSex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetCurrentSex");

	Params::VRaceSexMenuViewModel_GetCurrentSex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetPagesOfCategory
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EModernRaceSexPage&               CurrentPageToAnalyse                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class FText>          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, class FText> UVRaceSexMenuViewModel::GetPagesOfCategory(const EModernRaceSexPage& CurrentPageToAnalyse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetPagesOfCategory");

	Params::VRaceSexMenuViewModel_GetPagesOfCategory Parms{};

	Parms.CurrentPageToAnalyse = CurrentPageToAnalyse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetPhenotypeData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRaceSexMenuPhenotypeData  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FRaceSexMenuPhenotypeData UVRaceSexMenuViewModel::GetPhenotypeData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetPhenotypeData");

	Params::VRaceSexMenuViewModel_GetPhenotypeData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetPlayerNameLocalizationPair
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerNamePair            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FPlayerNamePair UVRaceSexMenuViewModel::GetPlayerNameLocalizationPair() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetPlayerNameLocalizationPair");

	Params::VRaceSexMenuViewModel_GetPlayerNameLocalizationPair Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetRaceDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVRaceSexMenuViewModel::GetRaceDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetRaceDescription");

	Params::VRaceSexMenuViewModel_GetRaceDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetRaceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    RaceName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVRaceSexMenuViewModel::GetRaceId(const class FString& RaceName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetRaceId");

	Params::VRaceSexMenuViewModel_GetRaceId Parms{};

	Parms.RaceName = std::move(RaceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetRaceModificationItemsProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    RaceName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLegacyRaceSexMenuTableRow>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLegacyRaceSexMenuTableRow> UVRaceSexMenuViewModel::GetRaceModificationItemsProperties(const class FString& RaceName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetRaceModificationItemsProperties");

	Params::VRaceSexMenuViewModel_GetRaceModificationItemsProperties Parms{};

	Parms.RaceName = std::move(RaceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetRaceModificationProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    RaceName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyRaceSexMenuRacePropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRaceSexMenuRaceProperties UVRaceSexMenuViewModel::GetRaceModificationProperties(const class FString& RaceName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetRaceModificationProperties");

	Params::VRaceSexMenuViewModel_GetRaceModificationProperties Parms{};

	Parms.RaceName = std::move(RaceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetRaceTableRows
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    RaceName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLegacyRaceSexMenuTableRow>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyRaceSexMenuTableRow> UVRaceSexMenuViewModel::GetRaceTableRows(const class FString& RaceName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetRaceTableRows");

	Params::VRaceSexMenuViewModel_GetRaceTableRows Parms{};

	Parms.RaceName = std::move(RaceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetSliderTableRowDataFromCommon
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      MorphTarget                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyRaceSexMenuTableRow ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRaceSexMenuTableRow UVRaceSexMenuViewModel::GetSliderTableRowDataFromCommon(const class FName& MorphTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetSliderTableRowDataFromCommon");

	Params::VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon Parms{};

	Parms.MorphTarget = MorphTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetSyncedPhenotypeData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRaceSexMenuPhenotypeData  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FRaceSexMenuPhenotypeData UVRaceSexMenuViewModel::GetSyncedPhenotypeData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetSyncedPhenotypeData");

	Params::VRaceSexMenuViewModel_GetSyncedPhenotypeData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.GetToggleTableRowDataFromCommon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacyRaceSexMenuToggleType            Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLegacyRaceSexMenuTableRow ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRaceSexMenuTableRow UVRaceSexMenuViewModel::GetToggleTableRowDataFromCommon(ELegacyRaceSexMenuToggleType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "GetToggleTableRowDataFromCommon");

	Params::VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.IsGenericPageScrollboxValid
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      CategoryKey                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScrollBox*                       ScrollBox                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRaceSexMenuViewModel::IsGenericPageScrollboxValid(const class FName& CategoryKey, class UScrollBox* ScrollBox) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "IsGenericPageScrollboxValid");

	Params::VRaceSexMenuViewModel_IsGenericPageScrollboxValid Parms{};

	Parms.CategoryKey = CategoryKey;
	Parms.ScrollBox = ScrollBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRaceSexMenuViewModel.RequestQuitDialog
// (Final, Native, Public, BlueprintCallable, Const)

void UVRaceSexMenuViewModel::RequestQuitDialog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRaceSexMenuViewModel", "RequestQuitDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRadialMenu.GetMouseCursorAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVRadialMenu::GetMouseCursorAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRadialMenu", "GetMouseCursorAngle");

	Params::VRadialMenu_GetMouseCursorAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRadialMenu.GetMouseCursorDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVRadialMenu::GetMouseCursorDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRadialMenu", "GetMouseCursorDistance");

	Params::VRadialMenu_GetMouseCursorDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRebindGlobalSubsystem.NotifyRebindHasBeenChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bListenState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::NotifyRebindHasBeenChanged(bool bListenState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "NotifyRebindHasBeenChanged");

	Params::VRebindGlobalSubsystem_NotifyRebindHasBeenChanged Parms{};

	Parms.bListenState = bListenState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.RegisterKeySelector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVAltarNavigableInputKeySelector* Selector                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::RegisterKeySelector(class UVAltarNavigableInputKeySelector* Selector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "RegisterKeySelector");

	Params::VRebindGlobalSubsystem_RegisterKeySelector Parms{};

	Parms.Selector = Selector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.RegisterListeningWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVModernRebindSettingWidget*      RebindWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVNavigableInputKeySelector*      Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::RegisterListeningWidget(class UVModernRebindSettingWidget* RebindWidget, class UVNavigableInputKeySelector* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "RegisterListeningWidget");

	Params::VRebindGlobalSubsystem_RegisterListeningWidget Parms{};

	Parms.RebindWidget = RebindWidget;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.RegisterRebindWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UVModernRebindSettingWidget*      OwnerItem                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVModernRebindType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FModernRebindData&         RebindData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FModernPairedRebindData&   PairedRebindData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::RegisterRebindWidget(class UVModernRebindSettingWidget* OwnerItem, EVModernRebindType Type, const struct FModernRebindData& RebindData, const struct FModernPairedRebindData& PairedRebindData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "RegisterRebindWidget");

	Params::VRebindGlobalSubsystem_RegisterRebindWidget Parms{};

	Parms.OwnerItem = OwnerItem;
	Parms.Type = Type;
	Parms.RebindData = std::move(RebindData);
	Parms.PairedRebindData = std::move(PairedRebindData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.RequestBroadcastOnSettingsChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVModernRebindSettingWidget*      ChangedRebind                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::RequestBroadcastOnSettingsChanged(class UVModernRebindSettingWidget* ChangedRebind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "RequestBroadcastOnSettingsChanged");

	Params::VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged Parms{};

	Parms.ChangedRebind = ChangedRebind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.RequestWidgetsRefresh
// (Final, Native, Public, BlueprintCallable)

void UVRebindGlobalSubsystem::RequestWidgetsRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "RequestWidgetsRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.StopAllSelectorListenning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UVAltarNavigableInputKeySelector*Exeption                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::StopAllSelectorListenning(const class UVAltarNavigableInputKeySelector* Exeption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "StopAllSelectorListenning");

	Params::VRebindGlobalSubsystem_StopAllSelectorListenning Parms{};

	Parms.Exeption = Exeption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.UnregisterKeySelector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVAltarNavigableInputKeySelector* Selector                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::UnregisterKeySelector(class UVAltarNavigableInputKeySelector* Selector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "UnregisterKeySelector");

	Params::VRebindGlobalSubsystem_UnregisterKeySelector Parms{};

	Parms.Selector = Selector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.UnregisterListeningWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVModernRebindSettingWidget*      RebindWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVNavigableInputKeySelector*      Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::UnregisterListeningWidget(class UVModernRebindSettingWidget* RebindWidget, class UVNavigableInputKeySelector* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "UnregisterListeningWidget");

	Params::VRebindGlobalSubsystem_UnregisterListeningWidget Parms{};

	Parms.RebindWidget = RebindWidget;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.UnregisterRebindWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UVModernRebindSettingWidget*      OwnerItem                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRebindGlobalSubsystem::UnregisterRebindWidget(class UVModernRebindSettingWidget* OwnerItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "UnregisterRebindWidget");

	Params::VRebindGlobalSubsystem_UnregisterRebindWidget Parms{};

	Parms.OwnerItem = OwnerItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRebindGlobalSubsystem.DoesHaveAEmptyPrimaryBinding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRebindGlobalSubsystem::DoesHaveAEmptyPrimaryBinding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "DoesHaveAEmptyPrimaryBinding");

	Params::VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRebindGlobalSubsystem.DoesHaveAEmptyPrimaryBindingForType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVModernRebindType                      ComparedType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRebindGlobalSubsystem::DoesHaveAEmptyPrimaryBindingForType(EVModernRebindType ComparedType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRebindGlobalSubsystem", "DoesHaveAEmptyPrimaryBindingForType");

	Params::VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType Parms{};

	Parms.ComparedType = ComparedType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyRechargeMenuItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyRechargeMenuItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyRechargeMenuItem::SetProperties(const struct FLegacyRechargeMenuItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRechargeMenuItem", "SetProperties");

	Params::VLegacyRechargeMenuItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyRechargeMenuItem.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyRechargeMenuItem::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRechargeMenuItem", "GetIndex");

	Params::VLegacyRechargeMenuItem_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyRechargeMenuItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyRechargeMenuItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRechargeMenuItemProperties UVLegacyRechargeMenuItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRechargeMenuItem", "GetProperties");

	Params::VLegacyRechargeMenuItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.RegisterSendClickedExit
// (Final, Native, Public, BlueprintCallable)

void UVRechargeMenuViewModel::RegisterSendClickedExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "RegisterSendClickedExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.RegisterSendClickedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::RegisterSendClickedItem(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "RegisterSendClickedItem");

	Params::VRechargeMenuViewModel_RegisterSendClickedItem Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.RegisterSendClickedRechargeAll
// (Final, Native, Public, BlueprintCallable)

void UVRechargeMenuViewModel::RegisterSendClickedRechargeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "RegisterSendClickedRechargeAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.RegisterSendHoveredItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::RegisterSendHoveredItem(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "RegisterSendHoveredItem");

	Params::VRechargeMenuViewModel_RegisterSendHoveredItem Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetIsOpenedFromQuickWheel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsOpenedFromQuickWheel                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetIsOpenedFromQuickWheel(bool bNewIsOpenedFromQuickWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetIsOpenedFromQuickWheel");

	Params::VRechargeMenuViewModel_SetIsOpenedFromQuickWheel Parms{};

	Parms.bNewIsOpenedFromQuickWheel = bNewIsOpenedFromQuickWheel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetIsSortReversed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSortReversed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetIsSortReversed(bool bNewIsSortReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetIsSortReversed");

	Params::VRechargeMenuViewModel_SetIsSortReversed Parms{};

	Parms.bNewIsSortReversed = bNewIsSortReversed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetItems
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FLegacyRechargeMenuItemProperties>&NewItems                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetItems(const TArray<struct FLegacyRechargeMenuItemProperties>& NewItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetItems");

	Params::VRechargeMenuViewModel_SetItems Parms{};

	Parms.NewItems = std::move(NewItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetMerchantData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernRechargeMenuCharacterData&NewMerchantData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetMerchantData(const struct FModernRechargeMenuCharacterData& NewMerchantData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetMerchantData");

	Params::VRechargeMenuViewModel_SetMerchantData Parms{};

	Parms.NewMerchantData = std::move(NewMerchantData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetMerchantGold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMerchantGold                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetMerchantGold(int32 NewMerchantGold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetMerchantGold");

	Params::VRechargeMenuViewModel_SetMerchantGold Parms{};

	Parms.NewMerchantGold = NewMerchantGold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetPlayerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FModernRechargeMenuCharacterData&NewPlayerData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetPlayerData(const struct FModernRechargeMenuCharacterData& NewPlayerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetPlayerData");

	Params::VRechargeMenuViewModel_SetPlayerData Parms{};

	Parms.NewPlayerData = std::move(NewPlayerData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetPlayerGold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPlayerGold                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetPlayerGold(int32 NewPlayerGold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetPlayerGold");

	Params::VRechargeMenuViewModel_SetPlayerGold Parms{};

	Parms.NewPlayerGold = NewPlayerGold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetRechargeMenuGoldProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyRechargeMenuGoldProperties&NewValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetRechargeMenuGoldProperties(const struct FLegacyRechargeMenuGoldProperties& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetRechargeMenuGoldProperties");

	Params::VRechargeMenuViewModel_SetRechargeMenuGoldProperties Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetRechargeMenuPage
// (Final, Native, Public, HasOutParams)
// Parameters:
// const ELegacyRechargeMenuPage&          NewValue                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetRechargeMenuPage(const ELegacyRechargeMenuPage& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetRechargeMenuPage");

	Params::VRechargeMenuViewModel_SetRechargeMenuPage Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetRechargeMenuSoulProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyRechargeMenuSoulProperties&NewValue                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetRechargeMenuSoulProperties(const struct FLegacyRechargeMenuSoulProperties& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetRechargeMenuSoulProperties");

	Params::VRechargeMenuViewModel_SetRechargeMenuSoulProperties Parms{};

	Parms.NewValue = std::move(NewValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.SetSortType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const EOriginalInventoryMenuSortType&   NewSortType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVRechargeMenuViewModel::SetSortType(const EOriginalInventoryMenuSortType& NewSortType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "SetSortType");

	Params::VRechargeMenuViewModel_SetSortType Parms{};

	Parms.NewSortType = NewSortType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VRechargeMenuViewModel.GetItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacyRechargeMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacyRechargeMenuItemProperties> UVRechargeMenuViewModel::GetItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetItems");

	Params::VRechargeMenuViewModel_GetItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.GetMerchantData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FModernRechargeMenuCharacterData ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModernRechargeMenuCharacterData UVRechargeMenuViewModel::GetMerchantData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetMerchantData");

	Params::VRechargeMenuViewModel_GetMerchantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.GetPlayerData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FModernRechargeMenuCharacterData ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModernRechargeMenuCharacterData UVRechargeMenuViewModel::GetPlayerData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetPlayerData");

	Params::VRechargeMenuViewModel_GetPlayerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.GetRechargeMenuGoldProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyRechargeMenuGoldPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRechargeMenuGoldProperties UVRechargeMenuViewModel::GetRechargeMenuGoldProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetRechargeMenuGoldProperties");

	Params::VRechargeMenuViewModel_GetRechargeMenuGoldProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.GetRechargeMenuPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const ELegacyRechargeMenuPage           ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const ELegacyRechargeMenuPage UVRechargeMenuViewModel::GetRechargeMenuPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetRechargeMenuPage");

	Params::VRechargeMenuViewModel_GetRechargeMenuPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.GetRechargeMenuSoulProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyRechargeMenuSoulPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRechargeMenuSoulProperties UVRechargeMenuViewModel::GetRechargeMenuSoulProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetRechargeMenuSoulProperties");

	Params::VRechargeMenuViewModel_GetRechargeMenuSoulProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOriginalInventoryMenuSortType          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOriginalInventoryMenuSortType UVRechargeMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "GetSortType");

	Params::VRechargeMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.IsOpenedFromQuickWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRechargeMenuViewModel::IsOpenedFromQuickWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "IsOpenedFromQuickWheel");

	Params::VRechargeMenuViewModel_IsOpenedFromQuickWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRechargeMenuViewModel.IsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVRechargeMenuViewModel::IsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRechargeMenuViewModel", "IsSortReversed");

	Params::VRechargeMenuViewModel_IsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VRecoilCharacterAnimInstance.UpdateData
// (Native, Protected, BlueprintCallable)

void UVRecoilCharacterAnimInstance::UpdateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VRecoilCharacterAnimInstance", "UpdateData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyRepairMenuItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyRepairItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacyRepairMenuItem::SetProperties(const struct FLegacyRepairItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRepairMenuItem", "SetProperties");

	Params::VLegacyRepairMenuItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacyRepairMenuItem.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVLegacyRepairMenuItem::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRepairMenuItem", "GetIndex");

	Params::VLegacyRepairMenuItem_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacyRepairMenuItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyRepairItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyRepairItemProperties UVLegacyRepairMenuItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacyRepairMenuItem", "GetProperties");

	Params::VLegacyRepairMenuItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpecialIdleLayerAnimInstance.ShouldStopSpecialIdle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpecialIdleLayerAnimInstance::ShouldStopSpecialIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpecialIdleLayerAnimInstance", "ShouldStopSpecialIdle");

	Params::VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpecialIdleLayerAnimInstance.StartSpecialIdle
// (Final, Native, Protected, BlueprintCallable)

void UVSpecialIdleLayerAnimInstance::StartSpecialIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpecialIdleLayerAnimInstance", "StartSpecialIdle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpecialIdleLayerAnimInstance.StopSpecialIdle
// (Final, Native, Protected, BlueprintCallable)

void UVSpecialIdleLayerAnimInstance::StopSpecialIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpecialIdleLayerAnimInstance", "StopSpecialIdle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySpellMakingItem.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacyEffectsItemProperties&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVLegacySpellMakingItem::SetProperties(const struct FLegacyEffectsItemProperties& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellMakingItem", "SetProperties");

	Params::VLegacySpellMakingItem_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VLegacySpellMakingItem.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UVLegacySpellMakingItem::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellMakingItem", "GetIndex");

	Params::VLegacySpellMakingItem_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VLegacySpellMakingItem.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacyEffectsItemPropertiesReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacyEffectsItemProperties UVLegacySpellMakingItem::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VLegacySpellMakingItem", "GetProperties");

	Params::VLegacySpellMakingItem_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellPurchaseMenuViewModel.RegisterSendCloseButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UVSpellPurchaseMenuViewModel::RegisterSendCloseButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "RegisterSendCloseButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.RegisterSendHaggleButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UVSpellPurchaseMenuViewModel::RegisterSendHaggleButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "RegisterSendHaggleButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.RegisterSendItemHoverHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::RegisterSendItemHoverHandler(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "RegisterSendItemHoverHandler");

	Params::VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.RegisterSendSpellItemClicked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::RegisterSendSpellItemClicked(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "RegisterSendSpellItemClicked");

	Params::VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.SetIsSortReversed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::SetIsSortReversed(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "SetIsSortReversed");

	Params::VSpellPurchaseMenuViewModel_SetIsSortReversed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.SetNpcData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLegacySpellPurchaseMenuNPCData&NewNPCData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::SetNpcData(const struct FLegacySpellPurchaseMenuNPCData& NewNPCData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "SetNpcData");

	Params::VSpellPurchaseMenuViewModel_SetNpcData Parms{};

	Parms.NewNPCData = std::move(NewNPCData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.SetPlayerMoney
// (Final, Native, Public)
// Parameters:
// int32                                   NewPlayerMoney                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::SetPlayerMoney(int32 NewPlayerMoney)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "SetPlayerMoney");

	Params::VSpellPurchaseMenuViewModel_SetPlayerMoney Parms{};

	Parms.NewPlayerMoney = NewPlayerMoney;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.SetPlayerName
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      NewPlayerName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::SetPlayerName(const class FText& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "SetPlayerName");

	Params::VSpellPurchaseMenuViewModel_SetPlayerName Parms{};

	Parms.NewPlayerName = std::move(NewPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.SetSortType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELegacySpellPurchaseMenuSortType  Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVSpellPurchaseMenuViewModel::SetSortType(const ELegacySpellPurchaseMenuSortType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "SetSortType");

	Params::VSpellPurchaseMenuViewModel_SetSortType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VSpellPurchaseMenuViewModel.GetIsSortReversed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVSpellPurchaseMenuViewModel::GetIsSortReversed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "GetIsSortReversed");

	Params::VSpellPurchaseMenuViewModel_GetIsSortReversed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellPurchaseMenuViewModel.GetNpcData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLegacySpellPurchaseMenuNPCDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FLegacySpellPurchaseMenuNPCData UVSpellPurchaseMenuViewModel::GetNpcData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "GetNpcData");

	Params::VSpellPurchaseMenuViewModel_GetNpcData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellPurchaseMenuViewModel.GetPlayerMoney
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVSpellPurchaseMenuViewModel::GetPlayerMoney() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "GetPlayerMoney");

	Params::VSpellPurchaseMenuViewModel_GetPlayerMoney Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellPurchaseMenuViewModel.GetPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UVSpellPurchaseMenuViewModel::GetPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "GetPlayerName");

	Params::VSpellPurchaseMenuViewModel_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellPurchaseMenuViewModel.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELegacySpellPurchaseMenuSortType        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELegacySpellPurchaseMenuSortType UVSpellPurchaseMenuViewModel::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "GetSortType");

	Params::VSpellPurchaseMenuViewModel_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VSpellPurchaseMenuViewModel.GetSpellList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLegacySpellPurchaseMenuItemProperties>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FLegacySpellPurchaseMenuItemProperties> UVSpellPurchaseMenuViewModel::GetSpellList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VSpellPurchaseMenuViewModel", "GetSpellList");

	Params::VSpellPurchaseMenuViewModel_GetSpellList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTrainingMenuViewModel.RegisterSendCloseButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UVTrainingMenuViewModel::RegisterSendCloseButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrainingMenuViewModel", "RegisterSendCloseButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTrainingMenuViewModel.RegisterSendTrainButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UVTrainingMenuViewModel::RegisterSendTrainButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrainingMenuViewModel", "RegisterSendTrainButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTrainingMenuViewModel.SetProperties
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLegacyTrainMenuProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVTrainingMenuViewModel::SetProperties(const struct FLegacyTrainMenuProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrainingMenuViewModel", "SetProperties");

	Params::VTrainingMenuViewModel_SetProperties Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTrainingMenuViewModel.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLegacyTrainMenuProperties       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLegacyTrainMenuProperties UVTrainingMenuViewModel::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrainingMenuViewModel", "GetProperties");

	Params::VTrainingMenuViewModel_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTrainingMenuViewModel.GetSkillProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FModernSkillProgression    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FModernSkillProgression UVTrainingMenuViewModel::GetSkillProgression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTrainingMenuViewModel", "GetSkillProgression");

	Params::VTrainingMenuViewModel_GetSkillProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTransformPairingComponent.GetLatestPairedTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVTransformPairingComponent::GetLatestPairedTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTransformPairingComponent", "GetLatestPairedTransform");

	Params::VTransformPairingComponent_GetLatestPairedTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.IsOnHorse
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::IsOnHorse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "IsOnHorse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.OnIdleStateEntry
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVTurnInPlaceCharacterAnimInstance::OnIdleStateEntry(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "OnIdleStateEntry");

	Params::VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.OnStartTurnTransitionStateEntry
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVTurnInPlaceCharacterAnimInstance::OnStartTurnTransitionStateEntry(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "OnStartTurnTransitionStateEntry");

	Params::VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.SafeUpdatePawnStates
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::SafeUpdatePawnStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "SafeUpdatePawnStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.SafeUpdateTurnValues
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::SafeUpdateTurnValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "SafeUpdateTurnValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.TriggerLastTurn
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::TriggerLastTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "TriggerLastTurn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.TriggerStartTurn
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::TriggerStartTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "TriggerStartTurn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.TriggerTurnInPlace
// (Final, Native, Protected)
// Parameters:
// float                                   InTurnAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVTurnInPlaceCharacterAnimInstance::TriggerTurnInPlace(float InTurnAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "TriggerTurnInPlace");

	Params::VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace Parms{};

	Parms.InTurnAngle = InTurnAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.UpdateAimingOffset
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::UpdateAimingOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "UpdateAimingOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.UpdateAnimStatus
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::UpdateAnimStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "UpdateAnimStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.UpdateOffsets
// (Final, Native, Protected)

void UVTurnInPlaceCharacterAnimInstance::UpdateOffsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "UpdateOffsets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.UpdateTurnSystem
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTurnInPlaceCharacterAnimInstance::UpdateTurnSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "UpdateTurnSystem");

	Params::VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetActorOffset
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVTurnInPlaceCharacterAnimInstance::GetActorOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetActorOffset");

	Params::VTurnInPlaceCharacterAnimInstance_GetActorOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetAnimRotationRatio
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVTurnInPlaceCharacterAnimInstance::GetAnimRotationRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetAnimRotationRatio");

	Params::VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetAnimYawRotation
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVTurnInPlaceCharacterAnimInstance::GetAnimYawRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetAnimYawRotation");

	Params::VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetInterruptionState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTurnInPlaceCharacterAnimInstance::GetInterruptionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetInterruptionState");

	Params::VTurnInPlaceCharacterAnimInstance_GetInterruptionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetRootOffset
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVTurnInPlaceCharacterAnimInstance::GetRootOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetRootOffset");

	Params::VTurnInPlaceCharacterAnimInstance_GetRootOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetStopState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTurnInPlaceCharacterAnimInstance::GetStopState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetStopState");

	Params::VTurnInPlaceCharacterAnimInstance_GetStopState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.GetTurningYawAimOffset
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVTurnInPlaceCharacterAnimInstance::GetTurningYawAimOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "GetTurningYawAimOffset");

	Params::VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.HasPawnHasTag
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTurnInPlaceCharacterAnimInstance::HasPawnHasTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "HasPawnHasTag");

	Params::VTurnInPlaceCharacterAnimInstance_HasPawnHasTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.IsTurnTooSmall
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTurnInPlaceCharacterAnimInstance::IsTurnTooSmall(float Angle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "IsTurnTooSmall");

	Params::VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall Parms{};

	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTurnInPlaceCharacterAnimInstance.NeedsTurnInPlace
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTurnInPlaceCharacterAnimInstance::NeedsTurnInPlace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTurnInPlaceCharacterAnimInstance", "NeedsTurnInPlace");

	Params::VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTutorialMenuViewModel.Clear
// (Final, Native, Public)

void UVTutorialMenuViewModel::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenuViewModel", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTutorialMenuViewModel.Dequeue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FModernTutorialQueueProperties   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FModernTutorialQueueProperties UVTutorialMenuViewModel::Dequeue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenuViewModel", "Dequeue");

	Params::VTutorialMenuViewModel_Dequeue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTutorialMenuViewModel.Enqueue
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FModernTutorialQueueProperties&NewProperties                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVTutorialMenuViewModel::Enqueue(const struct FModernTutorialQueueProperties& NewProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenuViewModel", "Enqueue");

	Params::VTutorialMenuViewModel_Enqueue Parms{};

	Parms.NewProperties = std::move(NewProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VTutorialMenuViewModel.IsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTutorialMenuViewModel::IsEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenuViewModel", "IsEmpty");

	Params::VTutorialMenuViewModel_IsEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VTutorialMenuViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVTutorialMenuViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VTutorialMenuViewModel", "ThisIsForPluginCompliance");

	Params::VTutorialMenuViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUsablePropItem.OnAttachedToPawnAsProp
// (Event, Public, BlueprintEvent)
// Parameters:
// class AVPairedPawn*                     PawnUsingThisItem                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVUsablePropItem::OnAttachedToPawnAsProp(class AVPairedPawn* PawnUsingThisItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VUsablePropItem", "OnAttachedToPawnAsProp");

	Params::VUsablePropItem_OnAttachedToPawnAsProp Parms{};

	Parms.PawnUsingThisItem = PawnUsingThisItem;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function Altar.VUsablePropItem.GetAttachSocketName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AVPairedPawn*                     PawnUsingThisItem                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName IVUsablePropItem::GetAttachSocketName(class AVPairedPawn* PawnUsingThisItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VUsablePropItem", "GetAttachSocketName");

	Params::VUsablePropItem_GetAttachSocketName Parms{};

	Parms.PawnUsingThisItem = PawnUsingThisItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VUsablePropItem.GetOffsetWhenUsedAsProp
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// class AVPairedPawn*                     PawnUsingThisItem                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform IVUsablePropItem::GetOffsetWhenUsedAsProp(class AVPairedPawn* PawnUsingThisItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("VUsablePropItem", "GetOffsetWhenUsedAsProp");

	Params::VUsablePropItem_GetOffsetWhenUsedAsProp Parms{};

	Parms.PawnUsingThisItem = PawnUsingThisItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VVideoMenuViewModel.RegisterSendClickedButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELegacyVideoMenuIDs                     InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVVideoMenuViewModel::RegisterSendClickedButton(ELegacyVideoMenuIDs InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VVideoMenuViewModel", "RegisterSendClickedButton");

	Params::VVideoMenuViewModel_RegisterSendClickedButton Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VVideoMenuViewModel.ThisIsForPluginCompliance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVVideoMenuViewModel::ThisIsForPluginCompliance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VVideoMenuViewModel", "ThisIsForPluginCompliance");

	Params::VVideoMenuViewModel_ThisIsForPluginCompliance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VViewModelBase_Deprecated.RegisterDelegates
// (Native, Protected)

void UVViewModelBase_Deprecated::RegisterDelegates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VViewModelBase_Deprecated", "RegisterDelegates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon_Bow.OnDraw
// (Native, Event, Public, BlueprintEvent)

void AVWeapon_Bow::OnDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon_Bow", "OnDraw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeapon_Bow.OnShoot
// (Native, Event, Public, BlueprintEvent)

void AVWeapon_Bow::OnShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeapon_Bow", "OnShoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuiver.OnArrowCountChange
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVQuiver::OnArrowCountChange(int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuiver", "OnArrowCountChange");

	Params::VQuiver_OnArrowCountChange Parms{};

	Parms.NewCount = NewCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VQuiver.GetArrowCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AVQuiver::GetArrowCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VQuiver", "GetArrowCount");

	Params::VQuiver_GetArrowCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Altar.VWeatherAudioPlayer.SetOblivionStormIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVWeatherAudioPlayer::SetOblivionStormIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeatherAudioPlayer", "SetOblivionStormIntensity");

	Params::VWeatherAudioPlayer_SetOblivionStormIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeatherAudioPlayer.SetRainIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVWeatherAudioPlayer::SetRainIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeatherAudioPlayer", "SetRainIntensity");

	Params::VWeatherAudioPlayer_SetRainIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeatherAudioPlayer.SetSnowIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVWeatherAudioPlayer::SetSnowIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeatherAudioPlayer", "SetSnowIntensity");

	Params::VWeatherAudioPlayer_SetSnowIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeatherAudioPlayer.SetThunderstormIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVWeatherAudioPlayer::SetThunderstormIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeatherAudioPlayer", "SetThunderstormIntensity");

	Params::VWeatherAudioPlayer_SetThunderstormIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Altar.VWeatherAudioPlayer.SetWindIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Intensity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVWeatherAudioPlayer::SetWindIntensity(float Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VWeatherAudioPlayer", "SetWindIntensity");

	Params::VWeatherAudioPlayer_SetWindIntensity Parms{};

	Parms.Intensity = Intensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

