#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationNodeRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimationNodeRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class AnimationNodeRuntime.ActorFeetIKDataAsset
// 0x02B0 (0x02E0 - 0x0030)
class UActorFeetIKDataAsset final : public UDataAsset
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutofill;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RootBoneSearcher;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PelvisBoneSearcher;                                // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FootBoneSearcher;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeanBoneSearcher;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndLeanBoneSearcher;                               // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0090(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RootRotationAlpha;                                 // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLimbBoneSettings                      PelvisSettings;                                    // 0x00A8(0x0080)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           PelvisOffsetSettings;                              // 0x0128(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FeetRotationAlpha;                                 // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFeetHeightOffset;                               // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FootOffsetSettings;                                // 0x0138(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FootNormalSettings;                                // 0x0140(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLimbSettings>                  FeetData;                                          // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCanLean;                                          // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBoneChain;                                     // 0x0159(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         LeanBone;                                          // 0x015C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         StartLeanBone;                                     // 0x016C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndLeanBone;                                       // 0x017C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x14];                                     // 0x018C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFeetIKInterpolationSettings           LeanBonesRotationSettings;                         // 0x01A0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxForwardLeanOffsetAngle;                         // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBackwardLeanOffsetAngle;                        // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSideLeanOffsetAngle;                            // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyRadius;                                        // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootCheckOffset;                                   // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorCheckOffset;                                  // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElevationBalanceAlpha;                             // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeetIKInterpolationSettings           FloorNormalSettings;                               // 0x01C4(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x114];                                    // 0x01CC(0x0114)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorFeetIKDataAsset">();
	}
	static class UActorFeetIKDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorFeetIKDataAsset>();
	}
};
static_assert(alignof(UActorFeetIKDataAsset) == 0x000008, "Wrong alignment on UActorFeetIKDataAsset");
static_assert(sizeof(UActorFeetIKDataAsset) == 0x0002E0, "Wrong size on UActorFeetIKDataAsset");
static_assert(offsetof(UActorFeetIKDataAsset, Skeleton) == 0x000030, "Member 'UActorFeetIKDataAsset::Skeleton' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, bEnableAutofill) == 0x000038, "Member 'UActorFeetIKDataAsset::bEnableAutofill' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, RootBoneSearcher) == 0x000040, "Member 'UActorFeetIKDataAsset::RootBoneSearcher' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, PelvisBoneSearcher) == 0x000050, "Member 'UActorFeetIKDataAsset::PelvisBoneSearcher' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FootBoneSearcher) == 0x000060, "Member 'UActorFeetIKDataAsset::FootBoneSearcher' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, LeanBoneSearcher) == 0x000070, "Member 'UActorFeetIKDataAsset::LeanBoneSearcher' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, EndLeanBoneSearcher) == 0x000080, "Member 'UActorFeetIKDataAsset::EndLeanBoneSearcher' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, RootBone) == 0x000090, "Member 'UActorFeetIKDataAsset::RootBone' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, RootRotationAlpha) == 0x0000A0, "Member 'UActorFeetIKDataAsset::RootRotationAlpha' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, PelvisSettings) == 0x0000A8, "Member 'UActorFeetIKDataAsset::PelvisSettings' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, PelvisOffsetSettings) == 0x000128, "Member 'UActorFeetIKDataAsset::PelvisOffsetSettings' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FeetRotationAlpha) == 0x000130, "Member 'UActorFeetIKDataAsset::FeetRotationAlpha' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, MaxFeetHeightOffset) == 0x000134, "Member 'UActorFeetIKDataAsset::MaxFeetHeightOffset' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FootOffsetSettings) == 0x000138, "Member 'UActorFeetIKDataAsset::FootOffsetSettings' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FootNormalSettings) == 0x000140, "Member 'UActorFeetIKDataAsset::FootNormalSettings' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FeetData) == 0x000148, "Member 'UActorFeetIKDataAsset::FeetData' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, bCanLean) == 0x000158, "Member 'UActorFeetIKDataAsset::bCanLean' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, bUseBoneChain) == 0x000159, "Member 'UActorFeetIKDataAsset::bUseBoneChain' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, LeanBone) == 0x00015C, "Member 'UActorFeetIKDataAsset::LeanBone' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, StartLeanBone) == 0x00016C, "Member 'UActorFeetIKDataAsset::StartLeanBone' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, EndLeanBone) == 0x00017C, "Member 'UActorFeetIKDataAsset::EndLeanBone' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, LeanBonesRotationSettings) == 0x0001A0, "Member 'UActorFeetIKDataAsset::LeanBonesRotationSettings' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, MaxForwardLeanOffsetAngle) == 0x0001A8, "Member 'UActorFeetIKDataAsset::MaxForwardLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, MaxBackwardLeanOffsetAngle) == 0x0001AC, "Member 'UActorFeetIKDataAsset::MaxBackwardLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, MaxSideLeanOffsetAngle) == 0x0001B0, "Member 'UActorFeetIKDataAsset::MaxSideLeanOffsetAngle' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, BodyRadius) == 0x0001B4, "Member 'UActorFeetIKDataAsset::BodyRadius' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FootCheckOffset) == 0x0001B8, "Member 'UActorFeetIKDataAsset::FootCheckOffset' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FloorCheckOffset) == 0x0001BC, "Member 'UActorFeetIKDataAsset::FloorCheckOffset' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, ElevationBalanceAlpha) == 0x0001C0, "Member 'UActorFeetIKDataAsset::ElevationBalanceAlpha' has a wrong offset!");
static_assert(offsetof(UActorFeetIKDataAsset, FloorNormalSettings) == 0x0001C4, "Member 'UActorFeetIKDataAsset::FloorNormalSettings' has a wrong offset!");

// Class AnimationNodeRuntime.AdvancedLookAtSettings
// 0x0140 (0x0170 - 0x0030)
class UAdvancedLookAtSettings final : public UDataAsset
{
public:
	ESkeletonAxisForward                          MeshForwardAxis;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdvancedLookAt_LookType                      LookType;                                          // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceRotationSensibility;                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleBehind;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadRadius;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpineRadius;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEyes;                                          // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LeftEyeBoneName;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightEyeBoneName;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAdvancedLookAt_Clamp                  EyesClamp;                                         // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EyesSpeed;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EyesForwardLocalAxis;                              // 0x0070(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EyesUpLocalAxis;                                   // 0x0088(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHead;                                          // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAdvancedLookAt_BoneChain              HeadChain;                                         // 0x00A8(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                HeadForwardLocalAxis;                              // 0x00D0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HeadUpLocalAxis;                                   // 0x00E8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpine;                                         // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAdvancedLookAt_BoneChain              SpineChain;                                        // 0x0108(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                SpineForwardLocalAxis;                             // 0x0130(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpineUpLocalAxis;                                  // 0x0148(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedSpineBones;                                // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedLookAtSettings">();
	}
	static class UAdvancedLookAtSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdvancedLookAtSettings>();
	}
};
static_assert(alignof(UAdvancedLookAtSettings) == 0x000008, "Wrong alignment on UAdvancedLookAtSettings");
static_assert(sizeof(UAdvancedLookAtSettings) == 0x000170, "Wrong size on UAdvancedLookAtSettings");
static_assert(offsetof(UAdvancedLookAtSettings, MeshForwardAxis) == 0x000030, "Member 'UAdvancedLookAtSettings::MeshForwardAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, LookType) == 0x000031, "Member 'UAdvancedLookAtSettings::LookType' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, ForceRotationSensibility) == 0x000034, "Member 'UAdvancedLookAtSettings::ForceRotationSensibility' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, AngleBehind) == 0x000038, "Member 'UAdvancedLookAtSettings::AngleBehind' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, HeadRadius) == 0x00003C, "Member 'UAdvancedLookAtSettings::HeadRadius' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, SpineRadius) == 0x000040, "Member 'UAdvancedLookAtSettings::SpineRadius' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, bUseEyes) == 0x000044, "Member 'UAdvancedLookAtSettings::bUseEyes' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, LeftEyeBoneName) == 0x000048, "Member 'UAdvancedLookAtSettings::LeftEyeBoneName' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, RightEyeBoneName) == 0x000050, "Member 'UAdvancedLookAtSettings::RightEyeBoneName' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, EyesClamp) == 0x000058, "Member 'UAdvancedLookAtSettings::EyesClamp' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, EyesSpeed) == 0x000068, "Member 'UAdvancedLookAtSettings::EyesSpeed' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, EyesForwardLocalAxis) == 0x000070, "Member 'UAdvancedLookAtSettings::EyesForwardLocalAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, EyesUpLocalAxis) == 0x000088, "Member 'UAdvancedLookAtSettings::EyesUpLocalAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, bUseHead) == 0x0000A0, "Member 'UAdvancedLookAtSettings::bUseHead' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, HeadChain) == 0x0000A8, "Member 'UAdvancedLookAtSettings::HeadChain' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, HeadForwardLocalAxis) == 0x0000D0, "Member 'UAdvancedLookAtSettings::HeadForwardLocalAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, HeadUpLocalAxis) == 0x0000E8, "Member 'UAdvancedLookAtSettings::HeadUpLocalAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, bUseSpine) == 0x000100, "Member 'UAdvancedLookAtSettings::bUseSpine' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, SpineChain) == 0x000108, "Member 'UAdvancedLookAtSettings::SpineChain' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, SpineForwardLocalAxis) == 0x000130, "Member 'UAdvancedLookAtSettings::SpineForwardLocalAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, SpineUpLocalAxis) == 0x000148, "Member 'UAdvancedLookAtSettings::SpineUpLocalAxis' has a wrong offset!");
static_assert(offsetof(UAdvancedLookAtSettings, ExcludedSpineBones) == 0x000160, "Member 'UAdvancedLookAtSettings::ExcludedSpineBones' has a wrong offset!");

}

