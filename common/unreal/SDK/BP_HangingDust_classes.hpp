#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HangingDust

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "BPE_ShapeLocationMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HangingDust.BP_HangingDust_C
// 0x0138 (0x03D0 - 0x0298)
class ABP_HangingDust_C final : public AActor
{
public:
	class UNiagaraComponent*                      Debugview_System;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      HangingDustVFX;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Spawn_Burst;                                       // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spawn_Rate;                                        // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustParticles_LifeMin;                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustParticles_LifeMax;                             // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Max;                                         // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Min;                                         // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Intensity;                                // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Box_Offset;                                        // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpriteSize_Max;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpriteSize_Min;                                    // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SriteSize_Scale;                                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_ShapeLocationMode                        Shape_Selection;                                   // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Box_Size;                                          // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cone_Offset;                                       // 0x0328(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cone_Length;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cone_Angle;                                        // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cone_Axis;                                         // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sphere_Offset;                                     // 0x0360(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sphere_Radius;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Sphere_Size;                                       // 0x0380(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cylinder_Offset;                                   // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cylinder_Radius;                                   // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cylinder_Height;                                   // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Debugview_Mode;                             // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wind_Intensity;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gravity;                                           // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HangingDust_C">();
	}
	static class ABP_HangingDust_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HangingDust_C>();
	}
};
static_assert(alignof(ABP_HangingDust_C) == 0x000008, "Wrong alignment on ABP_HangingDust_C");
static_assert(sizeof(ABP_HangingDust_C) == 0x0003D0, "Wrong size on ABP_HangingDust_C");
static_assert(offsetof(ABP_HangingDust_C, Debugview_System) == 0x000298, "Member 'ABP_HangingDust_C::Debugview_System' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, HangingDustVFX) == 0x0002A0, "Member 'ABP_HangingDust_C::HangingDustVFX' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_HangingDust_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Spawn_Burst) == 0x0002B0, "Member 'ABP_HangingDust_C::Spawn_Burst' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Spawn_Rate) == 0x0002B4, "Member 'ABP_HangingDust_C::Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, DustParticles_LifeMin) == 0x0002B8, "Member 'ABP_HangingDust_C::DustParticles_LifeMin' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, DustParticles_LifeMax) == 0x0002BC, "Member 'ABP_HangingDust_C::DustParticles_LifeMax' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Color_Max) == 0x0002C0, "Member 'ABP_HangingDust_C::Color_Max' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Color_Min) == 0x0002D0, "Member 'ABP_HangingDust_C::Color_Min' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Emissive_Intensity) == 0x0002E0, "Member 'ABP_HangingDust_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Box_Offset) == 0x0002E8, "Member 'ABP_HangingDust_C::Box_Offset' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, SpriteSize_Max) == 0x000300, "Member 'ABP_HangingDust_C::SpriteSize_Max' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, SpriteSize_Min) == 0x000304, "Member 'ABP_HangingDust_C::SpriteSize_Min' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, SriteSize_Scale) == 0x000308, "Member 'ABP_HangingDust_C::SriteSize_Scale' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Shape_Selection) == 0x00030C, "Member 'ABP_HangingDust_C::Shape_Selection' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Box_Size) == 0x000310, "Member 'ABP_HangingDust_C::Box_Size' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cone_Offset) == 0x000328, "Member 'ABP_HangingDust_C::Cone_Offset' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cone_Length) == 0x000340, "Member 'ABP_HangingDust_C::Cone_Length' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cone_Angle) == 0x000344, "Member 'ABP_HangingDust_C::Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cone_Axis) == 0x000348, "Member 'ABP_HangingDust_C::Cone_Axis' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Sphere_Offset) == 0x000360, "Member 'ABP_HangingDust_C::Sphere_Offset' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Sphere_Radius) == 0x000378, "Member 'ABP_HangingDust_C::Sphere_Radius' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Sphere_Size) == 0x000380, "Member 'ABP_HangingDust_C::Sphere_Size' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cylinder_Offset) == 0x000398, "Member 'ABP_HangingDust_C::Cylinder_Offset' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cylinder_Radius) == 0x0003B0, "Member 'ABP_HangingDust_C::Cylinder_Radius' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Cylinder_Height) == 0x0003B4, "Member 'ABP_HangingDust_C::Cylinder_Height' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Enable_Debugview_Mode) == 0x0003B8, "Member 'ABP_HangingDust_C::Enable_Debugview_Mode' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Wind_Intensity) == 0x0003C0, "Member 'ABP_HangingDust_C::Wind_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_HangingDust_C, Gravity) == 0x0003C8, "Member 'ABP_HangingDust_C::Gravity' has a wrong offset!");

}

