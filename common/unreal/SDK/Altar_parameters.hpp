#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Altar

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Altar_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function Altar.VLayerCharacterAnimInstance.GetMainAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct VLayerCharacterAnimInstance_GetMainAnimInstance final
{
public:
	class UVMainCharacterAnimInstance*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLayerCharacterAnimInstance_GetMainAnimInstance) == 0x000008, "Wrong alignment on VLayerCharacterAnimInstance_GetMainAnimInstance");
static_assert(sizeof(VLayerCharacterAnimInstance_GetMainAnimInstance) == 0x000008, "Wrong size on VLayerCharacterAnimInstance_GetMainAnimInstance");
static_assert(offsetof(VLayerCharacterAnimInstance_GetMainAnimInstance, ReturnValue) == 0x000000, "Member 'VLayerCharacterAnimInstance_GetMainAnimInstance::ReturnValue' has a wrong offset!");

// Function Altar.VLayerCharacterAnimInstance.GetMontageFromArrayWithGivenIndexIfValid
// 0x0020 (0x0020 - 0x0000)
struct VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid final
{
public:
	int32                                         GameplayArrayIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   MontageArray;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid) == 0x000008, "Wrong alignment on VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid");
static_assert(sizeof(VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid) == 0x000020, "Wrong size on VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid");
static_assert(offsetof(VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid, GameplayArrayIndex) == 0x000000, "Member 'VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid::GameplayArrayIndex' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid, MontageArray) == 0x000008, "Member 'VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid::MontageArray' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid, ReturnValue) == 0x000018, "Member 'VLayerCharacterAnimInstance_GetMontageFromArrayWithGivenIndexIfValid::ReturnValue' has a wrong offset!");

// Function Altar.VLayerCharacterAnimInstance.GetSequenceFromArrayWithGivenIndexIfValid
// 0x0020 (0x0020 - 0x0000)
struct VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid final
{
public:
	int32                                         GameplayArrayIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimSequenceBase*>              ActionAnim;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid) == 0x000008, "Wrong alignment on VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid");
static_assert(sizeof(VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid) == 0x000020, "Wrong size on VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid");
static_assert(offsetof(VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid, GameplayArrayIndex) == 0x000000, "Member 'VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid::GameplayArrayIndex' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid, ActionAnim) == 0x000008, "Member 'VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid::ActionAnim' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid, ReturnValue) == 0x000018, "Member 'VLayerCharacterAnimInstance_GetSequenceFromArrayWithGivenIndexIfValid::ReturnValue' has a wrong offset!");

// Function Altar.VLayerCharacterAnimInstance.ScheduledPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct VLayerCharacterAnimInstance_ScheduledPlayMontage final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMontagePlayReturnType                        ReturnValueType;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTimeToStartMontageAt;                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAllMontages;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VLayerCharacterAnimInstance_ScheduledPlayMontage) == 0x000008, "Wrong alignment on VLayerCharacterAnimInstance_ScheduledPlayMontage");
static_assert(sizeof(VLayerCharacterAnimInstance_ScheduledPlayMontage) == 0x000028, "Wrong size on VLayerCharacterAnimInstance_ScheduledPlayMontage");
static_assert(offsetof(VLayerCharacterAnimInstance_ScheduledPlayMontage, MontageToPlay) == 0x000000, "Member 'VLayerCharacterAnimInstance_ScheduledPlayMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_ScheduledPlayMontage, InPlayRate) == 0x000008, "Member 'VLayerCharacterAnimInstance_ScheduledPlayMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_ScheduledPlayMontage, AnimInstance) == 0x000010, "Member 'VLayerCharacterAnimInstance_ScheduledPlayMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_ScheduledPlayMontage, ReturnValueType) == 0x000018, "Member 'VLayerCharacterAnimInstance_ScheduledPlayMontage::ReturnValueType' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_ScheduledPlayMontage, InTimeToStartMontageAt) == 0x00001C, "Member 'VLayerCharacterAnimInstance_ScheduledPlayMontage::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_ScheduledPlayMontage, bStopAllMontages) == 0x000020, "Member 'VLayerCharacterAnimInstance_ScheduledPlayMontage::bStopAllMontages' has a wrong offset!");

// Function Altar.VLayerCharacterAnimInstance.UpdateActionData
// 0x0010 (0x0010 - 0x0000)
struct VLayerCharacterAnimInstance_UpdateActionData final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                ActionAnim;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLayerCharacterAnimInstance_UpdateActionData) == 0x000008, "Wrong alignment on VLayerCharacterAnimInstance_UpdateActionData");
static_assert(sizeof(VLayerCharacterAnimInstance_UpdateActionData) == 0x000010, "Wrong size on VLayerCharacterAnimInstance_UpdateActionData");
static_assert(offsetof(VLayerCharacterAnimInstance_UpdateActionData, ActionTag) == 0x000000, "Member 'VLayerCharacterAnimInstance_UpdateActionData::ActionTag' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_UpdateActionData, ActionAnim) == 0x000008, "Member 'VLayerCharacterAnimInstance_UpdateActionData::ActionAnim' has a wrong offset!");

// Function Altar.VLayerCharacterAnimInstance.UpdateActionDataFromArray
// 0x0018 (0x0018 - 0x0000)
struct VLayerCharacterAnimInstance_UpdateActionDataFromArray final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              ActionAnims;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLayerCharacterAnimInstance_UpdateActionDataFromArray) == 0x000008, "Wrong alignment on VLayerCharacterAnimInstance_UpdateActionDataFromArray");
static_assert(sizeof(VLayerCharacterAnimInstance_UpdateActionDataFromArray) == 0x000018, "Wrong size on VLayerCharacterAnimInstance_UpdateActionDataFromArray");
static_assert(offsetof(VLayerCharacterAnimInstance_UpdateActionDataFromArray, ActionTag) == 0x000000, "Member 'VLayerCharacterAnimInstance_UpdateActionDataFromArray::ActionTag' has a wrong offset!");
static_assert(offsetof(VLayerCharacterAnimInstance_UpdateActionDataFromArray, ActionAnims) == 0x000008, "Member 'VLayerCharacterAnimInstance_UpdateActionDataFromArray::ActionAnims' has a wrong offset!");

// Function Altar.VLayerCharacterAnimInstance.IsInCombat
// 0x0001 (0x0001 - 0x0000)
struct VLayerCharacterAnimInstance_IsInCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLayerCharacterAnimInstance_IsInCombat) == 0x000001, "Wrong alignment on VLayerCharacterAnimInstance_IsInCombat");
static_assert(sizeof(VLayerCharacterAnimInstance_IsInCombat) == 0x000001, "Wrong size on VLayerCharacterAnimInstance_IsInCombat");
static_assert(offsetof(VLayerCharacterAnimInstance_IsInCombat, ReturnValue) == 0x000000, "Member 'VLayerCharacterAnimInstance_IsInCombat::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidLowerAndUpperCharacterAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking");
static_assert(sizeof(VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong size on VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking");
static_assert(offsetof(VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VHumanoidLowerAndUpperCharacterAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidLowerAndUpperCharacterAnimInstance.IsSwimming
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming) == 0x000001, "Wrong alignment on VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming");
static_assert(sizeof(VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming) == 0x000001, "Wrong size on VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming");
static_assert(offsetof(VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming, ReturnValue) == 0x000000, "Member 'VHumanoidLowerAndUpperCharacterAnimInstance_IsSwimming::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidLowerAndUpperCharacterAnimInstance.IsUsingBow
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow) == 0x000001, "Wrong alignment on VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow");
static_assert(sizeof(VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow) == 0x000001, "Wrong size on VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow");
static_assert(offsetof(VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow, ReturnValue) == 0x000000, "Member 'VHumanoidLowerAndUpperCharacterAnimInstance_IsUsingBow::ReturnValue' has a wrong offset!");

// Function Altar.VActor.OnActivateAnimation
// 0x0010 (0x0010 - 0x0000)
struct VActor_OnActivateAnimation final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActor_OnActivateAnimation) == 0x000008, "Wrong alignment on VActor_OnActivateAnimation");
static_assert(sizeof(VActor_OnActivateAnimation) == 0x000010, "Wrong size on VActor_OnActivateAnimation");
static_assert(offsetof(VActor_OnActivateAnimation, AnimationName) == 0x000000, "Member 'VActor_OnActivateAnimation::AnimationName' has a wrong offset!");

// Function Altar.VActor.OnResetAnimation
// 0x0018 (0x0018 - 0x0000)
struct VActor_OnResetAnimation final
{
public:
	class FString                                 AnimationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FramePosRatio;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsDestroyed;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VActor_OnResetAnimation) == 0x000008, "Wrong alignment on VActor_OnResetAnimation");
static_assert(sizeof(VActor_OnResetAnimation) == 0x000018, "Wrong size on VActor_OnResetAnimation");
static_assert(offsetof(VActor_OnResetAnimation, AnimationName) == 0x000000, "Member 'VActor_OnResetAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(VActor_OnResetAnimation, FramePosRatio) == 0x000010, "Member 'VActor_OnResetAnimation::FramePosRatio' has a wrong offset!");
static_assert(offsetof(VActor_OnResetAnimation, _bIsDestroyed) == 0x000014, "Member 'VActor_OnResetAnimation::_bIsDestroyed' has a wrong offset!");

// Function Altar.VActor.GetDroppedItemSexVariant
// 0x0001 (0x0001 - 0x0000)
struct VActor_GetDroppedItemSexVariant final
{
public:
	ECharacterSex                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActor_GetDroppedItemSexVariant) == 0x000001, "Wrong alignment on VActor_GetDroppedItemSexVariant");
static_assert(sizeof(VActor_GetDroppedItemSexVariant) == 0x000001, "Wrong size on VActor_GetDroppedItemSexVariant");
static_assert(offsetof(VActor_GetDroppedItemSexVariant, ReturnValue) == 0x000000, "Member 'VActor_GetDroppedItemSexVariant::ReturnValue' has a wrong offset!");

// Function Altar.VActor.GetItemStackCount
// 0x0004 (0x0004 - 0x0000)
struct VActor_GetItemStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActor_GetItemStackCount) == 0x000004, "Wrong alignment on VActor_GetItemStackCount");
static_assert(sizeof(VActor_GetItemStackCount) == 0x000004, "Wrong size on VActor_GetItemStackCount");
static_assert(offsetof(VActor_GetItemStackCount, ReturnValue) == 0x000000, "Member 'VActor_GetItemStackCount::ReturnValue' has a wrong offset!");

// Function Altar.VActor.GetVariantReferenceCharacter
// 0x0008 (0x0008 - 0x0000)
struct VActor_GetVariantReferenceCharacter final
{
public:
	class AVPairedCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActor_GetVariantReferenceCharacter) == 0x000008, "Wrong alignment on VActor_GetVariantReferenceCharacter");
static_assert(sizeof(VActor_GetVariantReferenceCharacter) == 0x000008, "Wrong size on VActor_GetVariantReferenceCharacter");
static_assert(offsetof(VActor_GetVariantReferenceCharacter, ReturnValue) == 0x000000, "Member 'VActor_GetVariantReferenceCharacter::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormTypeFromFormString
// 0x0010 (0x0010 - 0x0000)
struct TESForm_GetFormTypeFromFormString final
{
public:
	int64                                         formString;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFormID                                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TESForm_GetFormTypeFromFormString) == 0x000008, "Wrong alignment on TESForm_GetFormTypeFromFormString");
static_assert(sizeof(TESForm_GetFormTypeFromFormString) == 0x000010, "Wrong size on TESForm_GetFormTypeFromFormString");
static_assert(offsetof(TESForm_GetFormTypeFromFormString, formString) == 0x000000, "Member 'TESForm_GetFormTypeFromFormString::formString' has a wrong offset!");
static_assert(offsetof(TESForm_GetFormTypeFromFormString, ReturnValue) == 0x000008, "Member 'TESForm_GetFormTypeFromFormString::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetComponent
// 0x0008 (0x0008 - 0x0000)
struct TESForm_GetComponent final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetComponent) == 0x000008, "Wrong alignment on TESForm_GetComponent");
static_assert(sizeof(TESForm_GetComponent) == 0x000008, "Wrong size on TESForm_GetComponent");
static_assert(offsetof(TESForm_GetComponent, ReturnValue) == 0x000000, "Member 'TESForm_GetComponent::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetDelete
// 0x0001 (0x0001 - 0x0000)
struct TESForm_GetDelete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetDelete) == 0x000001, "Wrong alignment on TESForm_GetDelete");
static_assert(sizeof(TESForm_GetDelete) == 0x000001, "Wrong size on TESForm_GetDelete");
static_assert(offsetof(TESForm_GetDelete, ReturnValue) == 0x000000, "Member 'TESForm_GetDelete::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetEquipableBlueprintClass
// 0x0028 (0x0028 - 0x0000)
struct TESForm_GetEquipableBlueprintClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetEquipableBlueprintClass) == 0x000008, "Wrong alignment on TESForm_GetEquipableBlueprintClass");
static_assert(sizeof(TESForm_GetEquipableBlueprintClass) == 0x000028, "Wrong size on TESForm_GetEquipableBlueprintClass");
static_assert(offsetof(TESForm_GetEquipableBlueprintClass, ReturnValue) == 0x000000, "Member 'TESForm_GetEquipableBlueprintClass::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormDetailedString
// 0x0010 (0x0010 - 0x0000)
struct TESForm_GetFormDetailedString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetFormDetailedString) == 0x000008, "Wrong alignment on TESForm_GetFormDetailedString");
static_assert(sizeof(TESForm_GetFormDetailedString) == 0x000010, "Wrong size on TESForm_GetFormDetailedString");
static_assert(offsetof(TESForm_GetFormDetailedString, ReturnValue) == 0x000000, "Member 'TESForm_GetFormDetailedString::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.CanFormBeUsedAsPropItem
// 0x0001 (0x0001 - 0x0000)
struct TESForm_CanFormBeUsedAsPropItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_CanFormBeUsedAsPropItem) == 0x000001, "Wrong alignment on TESForm_CanFormBeUsedAsPropItem");
static_assert(sizeof(TESForm_CanFormBeUsedAsPropItem) == 0x000001, "Wrong size on TESForm_CanFormBeUsedAsPropItem");
static_assert(offsetof(TESForm_CanFormBeUsedAsPropItem, ReturnValue) == 0x000000, "Member 'TESForm_CanFormBeUsedAsPropItem::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetBPFormID
// 0x0008 (0x0008 - 0x0000)
struct TESForm_GetBPFormID final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetBPFormID) == 0x000008, "Wrong alignment on TESForm_GetBPFormID");
static_assert(sizeof(TESForm_GetBPFormID) == 0x000008, "Wrong size on TESForm_GetBPFormID");
static_assert(offsetof(TESForm_GetBPFormID, ReturnValue) == 0x000000, "Member 'TESForm_GetBPFormID::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormEditorID
// 0x0010 (0x0010 - 0x0000)
struct TESForm_GetFormEditorID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetFormEditorID) == 0x000008, "Wrong alignment on TESForm_GetFormEditorID");
static_assert(sizeof(TESForm_GetFormEditorID) == 0x000010, "Wrong size on TESForm_GetFormEditorID");
static_assert(offsetof(TESForm_GetFormEditorID, ReturnValue) == 0x000000, "Member 'TESForm_GetFormEditorID::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormFlags
// 0x0008 (0x0008 - 0x0000)
struct TESForm_GetFormFlags final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetFormFlags) == 0x000008, "Wrong alignment on TESForm_GetFormFlags");
static_assert(sizeof(TESForm_GetFormFlags) == 0x000008, "Wrong size on TESForm_GetFormFlags");
static_assert(offsetof(TESForm_GetFormFlags, ReturnValue) == 0x000000, "Member 'TESForm_GetFormFlags::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormType
// 0x0001 (0x0001 - 0x0000)
struct TESForm_GetFormType final
{
public:
	EFormID                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetFormType) == 0x000001, "Wrong alignment on TESForm_GetFormType");
static_assert(sizeof(TESForm_GetFormType) == 0x000001, "Wrong size on TESForm_GetFormType");
static_assert(offsetof(TESForm_GetFormType, ReturnValue) == 0x000000, "Member 'TESForm_GetFormType::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormTypeString
// 0x0010 (0x0010 - 0x0000)
struct TESForm_GetFormTypeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetFormTypeString) == 0x000008, "Wrong alignment on TESForm_GetFormTypeString");
static_assert(sizeof(TESForm_GetFormTypeString) == 0x000010, "Wrong size on TESForm_GetFormTypeString");
static_assert(offsetof(TESForm_GetFormTypeString, ReturnValue) == 0x000000, "Member 'TESForm_GetFormTypeString::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetFormTypeStringFromFlags
// 0x0010 (0x0010 - 0x0000)
struct TESForm_GetFormTypeStringFromFlags final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetFormTypeStringFromFlags) == 0x000008, "Wrong alignment on TESForm_GetFormTypeStringFromFlags");
static_assert(sizeof(TESForm_GetFormTypeStringFromFlags) == 0x000010, "Wrong size on TESForm_GetFormTypeStringFromFlags");
static_assert(offsetof(TESForm_GetFormTypeStringFromFlags, ReturnValue) == 0x000000, "Member 'TESForm_GetFormTypeStringFromFlags::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetHexFormID
// 0x0010 (0x0010 - 0x0000)
struct TESForm_GetHexFormID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetHexFormID) == 0x000008, "Wrong alignment on TESForm_GetHexFormID");
static_assert(sizeof(TESForm_GetHexFormID) == 0x000010, "Wrong size on TESForm_GetHexFormID");
static_assert(offsetof(TESForm_GetHexFormID, ReturnValue) == 0x000000, "Member 'TESForm_GetHexFormID::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetMaster
// 0x0001 (0x0001 - 0x0000)
struct TESForm_GetMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetMaster) == 0x000001, "Wrong alignment on TESForm_GetMaster");
static_assert(sizeof(TESForm_GetMaster) == 0x000001, "Wrong size on TESForm_GetMaster");
static_assert(offsetof(TESForm_GetMaster, ReturnValue) == 0x000000, "Member 'TESForm_GetMaster::ReturnValue' has a wrong offset!");

// Function Altar.TESForm.GetTemporary
// 0x0001 (0x0001 - 0x0000)
struct TESForm_GetTemporary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESForm_GetTemporary) == 0x000001, "Wrong alignment on TESForm_GetTemporary");
static_assert(sizeof(TESForm_GetTemporary) == 0x000001, "Wrong size on TESForm_GetTemporary");
static_assert(offsetof(TESForm_GetTemporary, ReturnValue) == 0x000000, "Member 'TESForm_GetTemporary::ReturnValue' has a wrong offset!");

// Function Altar.VModularBodyPartBase.GetModularBodyPartClassFromSlot
// 0x0010 (0x0010 - 0x0000)
struct VModularBodyPartBase_GetModularBodyPartClassFromSlot final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AVModularBodyPartBase>      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModularBodyPartBase_GetModularBodyPartClassFromSlot) == 0x000008, "Wrong alignment on VModularBodyPartBase_GetModularBodyPartClassFromSlot");
static_assert(sizeof(VModularBodyPartBase_GetModularBodyPartClassFromSlot) == 0x000010, "Wrong size on VModularBodyPartBase_GetModularBodyPartClassFromSlot");
static_assert(offsetof(VModularBodyPartBase_GetModularBodyPartClassFromSlot, Slot) == 0x000000, "Member 'VModularBodyPartBase_GetModularBodyPartClassFromSlot::Slot' has a wrong offset!");
static_assert(offsetof(VModularBodyPartBase_GetModularBodyPartClassFromSlot, ReturnValue) == 0x000008, "Member 'VModularBodyPartBase_GetModularBodyPartClassFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VModularBodyPartBase.OnAttachedToPhenotype
// 0x0018 (0x0018 - 0x0000)
struct VModularBodyPartBase_OnAttachedToPhenotype final
{
public:
	class UVCharacterPhenotypeData*               PhenotypeData;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTESRace*                               CharacterRace;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterSex                                 CharacterSex;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModularBodyPartBase_OnAttachedToPhenotype) == 0x000008, "Wrong alignment on VModularBodyPartBase_OnAttachedToPhenotype");
static_assert(sizeof(VModularBodyPartBase_OnAttachedToPhenotype) == 0x000018, "Wrong size on VModularBodyPartBase_OnAttachedToPhenotype");
static_assert(offsetof(VModularBodyPartBase_OnAttachedToPhenotype, PhenotypeData) == 0x000000, "Member 'VModularBodyPartBase_OnAttachedToPhenotype::PhenotypeData' has a wrong offset!");
static_assert(offsetof(VModularBodyPartBase_OnAttachedToPhenotype, CharacterRace) == 0x000008, "Member 'VModularBodyPartBase_OnAttachedToPhenotype::CharacterRace' has a wrong offset!");
static_assert(offsetof(VModularBodyPartBase_OnAttachedToPhenotype, CharacterSex) == 0x000010, "Member 'VModularBodyPartBase_OnAttachedToPhenotype::CharacterSex' has a wrong offset!");

// Function Altar.VModularBodyPartBase.OnAttachToLeaderComponent
// 0x0008 (0x0008 - 0x0000)
struct VModularBodyPartBase_OnAttachToLeaderComponent final
{
public:
	class USkeletalMeshComponent*                 MasterComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModularBodyPartBase_OnAttachToLeaderComponent) == 0x000008, "Wrong alignment on VModularBodyPartBase_OnAttachToLeaderComponent");
static_assert(sizeof(VModularBodyPartBase_OnAttachToLeaderComponent) == 0x000008, "Wrong size on VModularBodyPartBase_OnAttachToLeaderComponent");
static_assert(offsetof(VModularBodyPartBase_OnAttachToLeaderComponent, MasterComponent) == 0x000000, "Member 'VModularBodyPartBase_OnAttachToLeaderComponent::MasterComponent' has a wrong offset!");

// Function Altar.VAIProcedureExecution_FOLLOW.GetFollowDistance
// 0x0004 (0x0004 - 0x0000)
struct VAIProcedureExecution_FOLLOW_GetFollowDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_FOLLOW_GetFollowDistance) == 0x000004, "Wrong alignment on VAIProcedureExecution_FOLLOW_GetFollowDistance");
static_assert(sizeof(VAIProcedureExecution_FOLLOW_GetFollowDistance) == 0x000004, "Wrong size on VAIProcedureExecution_FOLLOW_GetFollowDistance");
static_assert(offsetof(VAIProcedureExecution_FOLLOW_GetFollowDistance, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_FOLLOW_GetFollowDistance::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_FOLLOW.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_FOLLOW_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_FOLLOW_GetTargetActor) == 0x000008, "Wrong alignment on VAIProcedureExecution_FOLLOW_GetTargetActor");
static_assert(sizeof(VAIProcedureExecution_FOLLOW_GetTargetActor) == 0x000008, "Wrong size on VAIProcedureExecution_FOLLOW_GetTargetActor");
static_assert(offsetof(VAIProcedureExecution_FOLLOW_GetTargetActor, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_FOLLOW_GetTargetActor::ReturnValue' has a wrong offset!");

// Function Altar.TESBoundObject.GetPropBlueprintClass
// 0x0008 (0x0008 - 0x0000)
struct TESBoundObject_GetPropBlueprintClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESBoundObject_GetPropBlueprintClass) == 0x000008, "Wrong alignment on TESBoundObject_GetPropBlueprintClass");
static_assert(sizeof(TESBoundObject_GetPropBlueprintClass) == 0x000008, "Wrong size on TESBoundObject_GetPropBlueprintClass");
static_assert(offsetof(TESBoundObject_GetPropBlueprintClass, ReturnValue) == 0x000000, "Member 'TESBoundObject_GetPropBlueprintClass::ReturnValue' has a wrong offset!");

// Function Altar.VEquippable.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct VEquippable_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquippable_IsEquipped) == 0x000001, "Wrong alignment on VEquippable_IsEquipped");
static_assert(sizeof(VEquippable_IsEquipped) == 0x000001, "Wrong size on VEquippable_IsEquipped");
static_assert(offsetof(VEquippable_IsEquipped, ReturnValue) == 0x000000, "Member 'VEquippable_IsEquipped::ReturnValue' has a wrong offset!");

// Function Altar.VAmmunition.Collide
// 0x0120 (0x0120 - 0x0000)
struct VAmmunition_Collide final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVProjectilePenetrationSettings        PenetrationSettings;                               // 0x00E8(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           TargetActor;                                       // 0x0100(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0108(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAmmunition_Collide) == 0x000008, "Wrong alignment on VAmmunition_Collide");
static_assert(sizeof(VAmmunition_Collide) == 0x000120, "Wrong size on VAmmunition_Collide");
static_assert(offsetof(VAmmunition_Collide, HitResult) == 0x000000, "Member 'VAmmunition_Collide::HitResult' has a wrong offset!");
static_assert(offsetof(VAmmunition_Collide, PenetrationSettings) == 0x0000E8, "Member 'VAmmunition_Collide::PenetrationSettings' has a wrong offset!");
static_assert(offsetof(VAmmunition_Collide, TargetActor) == 0x000100, "Member 'VAmmunition_Collide::TargetActor' has a wrong offset!");
static_assert(offsetof(VAmmunition_Collide, ImpactVelocity) == 0x000108, "Member 'VAmmunition_Collide::ImpactVelocity' has a wrong offset!");

// Function Altar.VAmmunition.OnBounce
// 0x0100 (0x0100 - 0x0000)
struct VAmmunition_OnBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x00E8(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAmmunition_OnBounce) == 0x000008, "Wrong alignment on VAmmunition_OnBounce");
static_assert(sizeof(VAmmunition_OnBounce) == 0x000100, "Wrong size on VAmmunition_OnBounce");
static_assert(offsetof(VAmmunition_OnBounce, ImpactResult) == 0x000000, "Member 'VAmmunition_OnBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnBounce, ImpactVelocity) == 0x0000E8, "Member 'VAmmunition_OnBounce::ImpactVelocity' has a wrong offset!");

// Function Altar.VAmmunition.OnStaticMeshBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct VAmmunition_OnStaticMeshBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAmmunition_OnStaticMeshBeginOverlap) == 0x000008, "Wrong alignment on VAmmunition_OnStaticMeshBeginOverlap");
static_assert(sizeof(VAmmunition_OnStaticMeshBeginOverlap) == 0x000108, "Wrong size on VAmmunition_OnStaticMeshBeginOverlap");
static_assert(offsetof(VAmmunition_OnStaticMeshBeginOverlap, OverlappedComponent) == 0x000000, "Member 'VAmmunition_OnStaticMeshBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshBeginOverlap, OtherActor) == 0x000008, "Member 'VAmmunition_OnStaticMeshBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshBeginOverlap, OtherComp) == 0x000010, "Member 'VAmmunition_OnStaticMeshBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'VAmmunition_OnStaticMeshBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshBeginOverlap, bFromSweep) == 0x00001C, "Member 'VAmmunition_OnStaticMeshBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshBeginOverlap, SweepResult) == 0x000020, "Member 'VAmmunition_OnStaticMeshBeginOverlap::SweepResult' has a wrong offset!");

// Function Altar.VAmmunition.OnStaticMeshEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct VAmmunition_OnStaticMeshEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAmmunition_OnStaticMeshEndOverlap) == 0x000008, "Wrong alignment on VAmmunition_OnStaticMeshEndOverlap");
static_assert(sizeof(VAmmunition_OnStaticMeshEndOverlap) == 0x000020, "Wrong size on VAmmunition_OnStaticMeshEndOverlap");
static_assert(offsetof(VAmmunition_OnStaticMeshEndOverlap, OverlappedComponent) == 0x000000, "Member 'VAmmunition_OnStaticMeshEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshEndOverlap, OtherActor) == 0x000008, "Member 'VAmmunition_OnStaticMeshEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshEndOverlap, OtherComp) == 0x000010, "Member 'VAmmunition_OnStaticMeshEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VAmmunition_OnStaticMeshEndOverlap, OtherBodyIndex) == 0x000018, "Member 'VAmmunition_OnStaticMeshEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Altar.VAmmunition.SendCollide
// 0x0010 (0x0010 - 0x0000)
struct VAmmunition_SendCollide final
{
public:
	float                                         ArrowAgeMaxOnceCollided;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CollidedActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAmmunition_SendCollide) == 0x000008, "Wrong alignment on VAmmunition_SendCollide");
static_assert(sizeof(VAmmunition_SendCollide) == 0x000010, "Wrong size on VAmmunition_SendCollide");
static_assert(offsetof(VAmmunition_SendCollide, ArrowAgeMaxOnceCollided) == 0x000000, "Member 'VAmmunition_SendCollide::ArrowAgeMaxOnceCollided' has a wrong offset!");
static_assert(offsetof(VAmmunition_SendCollide, CollidedActor) == 0x000008, "Member 'VAmmunition_SendCollide::CollidedActor' has a wrong offset!");

// Function Altar.VAmmunition.ShootAmunition
// 0x0028 (0x0028 - 0x0000)
struct VAmmunition_ShootAmunition final
{
public:
	class AVPairedPawn*                           Shooter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAmmunition_ShootAmunition) == 0x000008, "Wrong alignment on VAmmunition_ShootAmunition");
static_assert(sizeof(VAmmunition_ShootAmunition) == 0x000028, "Wrong size on VAmmunition_ShootAmunition");
static_assert(offsetof(VAmmunition_ShootAmunition, Shooter) == 0x000000, "Member 'VAmmunition_ShootAmunition::Shooter' has a wrong offset!");
static_assert(offsetof(VAmmunition_ShootAmunition, Direction) == 0x000008, "Member 'VAmmunition_ShootAmunition::Direction' has a wrong offset!");
static_assert(offsetof(VAmmunition_ShootAmunition, Speed) == 0x000020, "Member 'VAmmunition_ShootAmunition::Speed' has a wrong offset!");

// Function Altar.VDockingPairingComponent.GetSitSleepState
// 0x0001 (0x0001 - 0x0000)
struct VDockingPairingComponent_GetSitSleepState final
{
public:
	ESitSleepState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDockingPairingComponent_GetSitSleepState) == 0x000001, "Wrong alignment on VDockingPairingComponent_GetSitSleepState");
static_assert(sizeof(VDockingPairingComponent_GetSitSleepState) == 0x000001, "Wrong size on VDockingPairingComponent_GetSitSleepState");
static_assert(offsetof(VDockingPairingComponent_GetSitSleepState, ReturnValue) == 0x000000, "Member 'VDockingPairingComponent_GetSitSleepState::ReturnValue' has a wrong offset!");

// Function Altar.VDockingPairingComponent.GetUsedDockActor
// 0x0008 (0x0008 - 0x0000)
struct VDockingPairingComponent_GetUsedDockActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDockingPairingComponent_GetUsedDockActor) == 0x000008, "Wrong alignment on VDockingPairingComponent_GetUsedDockActor");
static_assert(sizeof(VDockingPairingComponent_GetUsedDockActor) == 0x000008, "Wrong size on VDockingPairingComponent_GetUsedDockActor");
static_assert(offsetof(VDockingPairingComponent_GetUsedDockActor, ReturnValue) == 0x000000, "Member 'VDockingPairingComponent_GetUsedDockActor::ReturnValue' has a wrong offset!");

// Function Altar.VDockingPairingComponent.HasPendingDockingTransition
// 0x0001 (0x0001 - 0x0000)
struct VDockingPairingComponent_HasPendingDockingTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDockingPairingComponent_HasPendingDockingTransition) == 0x000001, "Wrong alignment on VDockingPairingComponent_HasPendingDockingTransition");
static_assert(sizeof(VDockingPairingComponent_HasPendingDockingTransition) == 0x000001, "Wrong size on VDockingPairingComponent_HasPendingDockingTransition");
static_assert(offsetof(VDockingPairingComponent_HasPendingDockingTransition, ReturnValue) == 0x000000, "Member 'VDockingPairingComponent_HasPendingDockingTransition::ReturnValue' has a wrong offset!");

// Function Altar.VDockingPairingComponent.IsDocked
// 0x0001 (0x0001 - 0x0000)
struct VDockingPairingComponent_IsDocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDockingPairingComponent_IsDocked) == 0x000001, "Wrong alignment on VDockingPairingComponent_IsDocked");
static_assert(sizeof(VDockingPairingComponent_IsDocked) == 0x000001, "Wrong size on VDockingPairingComponent_IsDocked");
static_assert(offsetof(VDockingPairingComponent_IsDocked, ReturnValue) == 0x000000, "Member 'VDockingPairingComponent_IsDocked::ReturnValue' has a wrong offset!");

// Function Altar.VContainer.IsContainerOpen
// 0x0001 (0x0001 - 0x0000)
struct VContainer_IsContainerOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainer_IsContainerOpen) == 0x000001, "Wrong alignment on VContainer_IsContainerOpen");
static_assert(sizeof(VContainer_IsContainerOpen) == 0x000001, "Wrong size on VContainer_IsContainerOpen");
static_assert(offsetof(VContainer_IsContainerOpen, ReturnValue) == 0x000000, "Member 'VContainer_IsContainerOpen::ReturnValue' has a wrong offset!");

// Function Altar.VContainer.IsContainerUnlocked
// 0x0001 (0x0001 - 0x0000)
struct VContainer_IsContainerUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainer_IsContainerUnlocked) == 0x000001, "Wrong alignment on VContainer_IsContainerUnlocked");
static_assert(sizeof(VContainer_IsContainerUnlocked) == 0x000001, "Wrong size on VContainer_IsContainerUnlocked");
static_assert(offsetof(VContainer_IsContainerUnlocked, ReturnValue) == 0x000000, "Member 'VContainer_IsContainerUnlocked::ReturnValue' has a wrong offset!");

// Function Altar.VLevelChangeData.GetLevelChangeData
// 0x0010 (0x0010 - 0x0000)
struct VLevelChangeData_GetLevelChangeData final
{
public:
	const class UWorld*                           InWorld;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVLevelChangeData*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelChangeData_GetLevelChangeData) == 0x000008, "Wrong alignment on VLevelChangeData_GetLevelChangeData");
static_assert(sizeof(VLevelChangeData_GetLevelChangeData) == 0x000010, "Wrong size on VLevelChangeData_GetLevelChangeData");
static_assert(offsetof(VLevelChangeData_GetLevelChangeData, InWorld) == 0x000000, "Member 'VLevelChangeData_GetLevelChangeData::InWorld' has a wrong offset!");
static_assert(offsetof(VLevelChangeData_GetLevelChangeData, ReturnValue) == 0x000008, "Member 'VLevelChangeData_GetLevelChangeData::ReturnValue' has a wrong offset!");

// Function Altar.VLevelChangeData.OnFadeToBlackEndEventReceived
// 0x0004 (0x0004 - 0x0000)
struct VLevelChangeData_OnFadeToBlackEndEventReceived final
{
public:
	EVFadeTransitionType                          InType;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelChangeData_OnFadeToBlackEndEventReceived) == 0x000004, "Wrong alignment on VLevelChangeData_OnFadeToBlackEndEventReceived");
static_assert(sizeof(VLevelChangeData_OnFadeToBlackEndEventReceived) == 0x000004, "Wrong size on VLevelChangeData_OnFadeToBlackEndEventReceived");
static_assert(offsetof(VLevelChangeData_OnFadeToBlackEndEventReceived, InType) == 0x000000, "Member 'VLevelChangeData_OnFadeToBlackEndEventReceived::InType' has a wrong offset!");

// Function Altar.VDoor.OnBeginOverlapPreLoadBox
// 0x0108 (0x0108 - 0x0000)
struct VDoor_OnBeginOverlapPreLoadBox final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnusedSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             EmptyHitResult;                                    // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDoor_OnBeginOverlapPreLoadBox) == 0x000008, "Wrong alignment on VDoor_OnBeginOverlapPreLoadBox");
static_assert(sizeof(VDoor_OnBeginOverlapPreLoadBox) == 0x000108, "Wrong size on VDoor_OnBeginOverlapPreLoadBox");
static_assert(offsetof(VDoor_OnBeginOverlapPreLoadBox, SourceComp) == 0x000000, "Member 'VDoor_OnBeginOverlapPreLoadBox::SourceComp' has a wrong offset!");
static_assert(offsetof(VDoor_OnBeginOverlapPreLoadBox, TargetActor) == 0x000008, "Member 'VDoor_OnBeginOverlapPreLoadBox::TargetActor' has a wrong offset!");
static_assert(offsetof(VDoor_OnBeginOverlapPreLoadBox, TargetComp) == 0x000010, "Member 'VDoor_OnBeginOverlapPreLoadBox::TargetComp' has a wrong offset!");
static_assert(offsetof(VDoor_OnBeginOverlapPreLoadBox, UnusedOtherBox) == 0x000018, "Member 'VDoor_OnBeginOverlapPreLoadBox::UnusedOtherBox' has a wrong offset!");
static_assert(offsetof(VDoor_OnBeginOverlapPreLoadBox, UnusedSweep) == 0x00001C, "Member 'VDoor_OnBeginOverlapPreLoadBox::UnusedSweep' has a wrong offset!");
static_assert(offsetof(VDoor_OnBeginOverlapPreLoadBox, EmptyHitResult) == 0x000020, "Member 'VDoor_OnBeginOverlapPreLoadBox::EmptyHitResult' has a wrong offset!");

// Function Altar.VDoor.OnEndOverlapPreLoadBox
// 0x0020 (0x0020 - 0x0000)
struct VDoor_OnEndOverlapPreLoadBox final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDoor_OnEndOverlapPreLoadBox) == 0x000008, "Wrong alignment on VDoor_OnEndOverlapPreLoadBox");
static_assert(sizeof(VDoor_OnEndOverlapPreLoadBox) == 0x000020, "Wrong size on VDoor_OnEndOverlapPreLoadBox");
static_assert(offsetof(VDoor_OnEndOverlapPreLoadBox, OverlappedComp) == 0x000000, "Member 'VDoor_OnEndOverlapPreLoadBox::OverlappedComp' has a wrong offset!");
static_assert(offsetof(VDoor_OnEndOverlapPreLoadBox, OtherActor) == 0x000008, "Member 'VDoor_OnEndOverlapPreLoadBox::OtherActor' has a wrong offset!");
static_assert(offsetof(VDoor_OnEndOverlapPreLoadBox, OtherComp) == 0x000010, "Member 'VDoor_OnEndOverlapPreLoadBox::OtherComp' has a wrong offset!");
static_assert(offsetof(VDoor_OnEndOverlapPreLoadBox, OtherBodyIndex) == 0x000018, "Member 'VDoor_OnEndOverlapPreLoadBox::OtherBodyIndex' has a wrong offset!");

// Function Altar.VDoor.SetAnimationTickEnable_Delegate
// 0x0001 (0x0001 - 0x0000)
struct VDoor_SetAnimationTickEnable_Delegate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDoor_SetAnimationTickEnable_Delegate) == 0x000001, "Wrong alignment on VDoor_SetAnimationTickEnable_Delegate");
static_assert(sizeof(VDoor_SetAnimationTickEnable_Delegate) == 0x000001, "Wrong size on VDoor_SetAnimationTickEnable_Delegate");
static_assert(offsetof(VDoor_SetAnimationTickEnable_Delegate, bEnable) == 0x000000, "Member 'VDoor_SetAnimationTickEnable_Delegate::bEnable' has a wrong offset!");

// Function Altar.VDoor.IsAnimated
// 0x0001 (0x0001 - 0x0000)
struct VDoor_IsAnimated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDoor_IsAnimated) == 0x000001, "Wrong alignment on VDoor_IsAnimated");
static_assert(sizeof(VDoor_IsAnimated) == 0x000001, "Wrong size on VDoor_IsAnimated");
static_assert(offsetof(VDoor_IsAnimated, ReturnValue) == 0x000000, "Member 'VDoor_IsAnimated::ReturnValue' has a wrong offset!");

// Function Altar.VDoor.IsDestroyed
// 0x0001 (0x0001 - 0x0000)
struct VDoor_IsDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDoor_IsDestroyed) == 0x000001, "Wrong alignment on VDoor_IsDestroyed");
static_assert(sizeof(VDoor_IsDestroyed) == 0x000001, "Wrong size on VDoor_IsDestroyed");
static_assert(offsetof(VDoor_IsDestroyed, ReturnValue) == 0x000000, "Member 'VDoor_IsDestroyed::ReturnValue' has a wrong offset!");

// Function Altar.VDoor.IsDoorToExitSewers
// 0x0001 (0x0001 - 0x0000)
struct VDoor_IsDoorToExitSewers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDoor_IsDoorToExitSewers) == 0x000001, "Wrong alignment on VDoor_IsDoorToExitSewers");
static_assert(sizeof(VDoor_IsDoorToExitSewers) == 0x000001, "Wrong size on VDoor_IsDoorToExitSewers");
static_assert(offsetof(VDoor_IsDoorToExitSewers, ReturnValue) == 0x000000, "Member 'VDoor_IsDoorToExitSewers::ReturnValue' has a wrong offset!");

// Function Altar.VFlora.OnActivated
// 0x0010 (0x0010 - 0x0000)
struct VFlora_OnActivated final
{
public:
	class AVPairedPawn*                           ActivatorPawn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfullyPicked;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VFlora_OnActivated) == 0x000008, "Wrong alignment on VFlora_OnActivated");
static_assert(sizeof(VFlora_OnActivated) == 0x000010, "Wrong size on VFlora_OnActivated");
static_assert(offsetof(VFlora_OnActivated, ActivatorPawn) == 0x000000, "Member 'VFlora_OnActivated::ActivatorPawn' has a wrong offset!");
static_assert(offsetof(VFlora_OnActivated, bSuccessfullyPicked) == 0x000008, "Member 'VFlora_OnActivated::bSuccessfullyPicked' has a wrong offset!");

// Function Altar.VFlora.CanBePicked
// 0x0001 (0x0001 - 0x0000)
struct VFlora_CanBePicked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFlora_CanBePicked) == 0x000001, "Wrong alignment on VFlora_CanBePicked");
static_assert(sizeof(VFlora_CanBePicked) == 0x000001, "Wrong size on VFlora_CanBePicked");
static_assert(offsetof(VFlora_CanBePicked, ReturnValue) == 0x000000, "Member 'VFlora_CanBePicked::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnEnterStartState
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState) == 0x000008, "Wrong alignment on VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState");
static_assert(sizeof(VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState) == 0x000020, "Wrong size on VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState, Context) == 0x000000, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState::Context' has a wrong offset!");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState, Node) == 0x000010, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnEnterStartState::Node' has a wrong offset!");

// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnLeftStartState
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState) == 0x000008, "Wrong alignment on VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState");
static_assert(sizeof(VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState) == 0x000020, "Wrong size on VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState, Context) == 0x000000, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState::Context' has a wrong offset!");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState, Node) == 0x000010, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnLeftStartState::Node' has a wrong offset!");

// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnStandSneakTransitionFinished
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished) == 0x000008, "Wrong alignment on VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished");
static_assert(sizeof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished) == 0x000020, "Wrong size on VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished, Context) == 0x000000, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished::Context' has a wrong offset!");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished, Node) == 0x000010, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionFinished::Node' has a wrong offset!");

// Function Altar.VEnhancedLocomotionSystemCharacterAnimInstance.OnStandSneakTransitionUpdate
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate) == 0x000008, "Wrong alignment on VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate");
static_assert(sizeof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate) == 0x000020, "Wrong size on VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate, Context) == 0x000000, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate::Context' has a wrong offset!");
static_assert(offsetof(VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate, Node) == 0x000010, "Member 'VEnhancedLocomotionSystemCharacterAnimInstance_OnStandSneakTransitionUpdate::Node' has a wrong offset!");

// Function Altar.VFurniture.ShouldUseLowLyingAnimation
// 0x0001 (0x0001 - 0x0000)
struct VFurniture_ShouldUseLowLyingAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFurniture_ShouldUseLowLyingAnimation) == 0x000001, "Wrong alignment on VFurniture_ShouldUseLowLyingAnimation");
static_assert(sizeof(VFurniture_ShouldUseLowLyingAnimation) == 0x000001, "Wrong size on VFurniture_ShouldUseLowLyingAnimation");
static_assert(offsetof(VFurniture_ShouldUseLowLyingAnimation, ReturnValue) == 0x000000, "Member 'VFurniture_ShouldUseLowLyingAnimation::ReturnValue' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.ChangeErrorState
// 0x0001 (0x0001 - 0x0000)
struct VModernRebindSettingWidget_ChangeErrorState final
{
public:
	bool                                          bErrorState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_ChangeErrorState) == 0x000001, "Wrong alignment on VModernRebindSettingWidget_ChangeErrorState");
static_assert(sizeof(VModernRebindSettingWidget_ChangeErrorState) == 0x000001, "Wrong size on VModernRebindSettingWidget_ChangeErrorState");
static_assert(offsetof(VModernRebindSettingWidget_ChangeErrorState, bErrorState) == 0x000000, "Member 'VModernRebindSettingWidget_ChangeErrorState::bErrorState' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.GetAllSelector
// 0x0010 (0x0010 - 0x0000)
struct VModernRebindSettingWidget_GetAllSelector final
{
public:
	TArray<class UVAltarNavigableInputKeySelector*> ReturnValue;                                     // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_GetAllSelector) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_GetAllSelector");
static_assert(sizeof(VModernRebindSettingWidget_GetAllSelector) == 0x000010, "Wrong size on VModernRebindSettingWidget_GetAllSelector");
static_assert(offsetof(VModernRebindSettingWidget_GetAllSelector, ReturnValue) == 0x000000, "Member 'VModernRebindSettingWidget_GetAllSelector::ReturnValue' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.Init
// 0x0098 (0x0098 - 0x0000)
struct VModernRebindSettingWidget_Init final
{
public:
	struct FModernRebindSettingTableRow           Value;                                             // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_Init) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_Init");
static_assert(sizeof(VModernRebindSettingWidget_Init) == 0x000098, "Wrong size on VModernRebindSettingWidget_Init");
static_assert(offsetof(VModernRebindSettingWidget_Init, Value) == 0x000000, "Member 'VModernRebindSettingWidget_Init::Value' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.OnSelectorFocussed
// 0x0010 (0x0010 - 0x0000)
struct VModernRebindSettingWidget_OnSelectorFocussed final
{
public:
	class UVNavigableInputKeySelector*            FocussedSelector;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectorIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernRebindSettingWidget_OnSelectorFocussed) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_OnSelectorFocussed");
static_assert(sizeof(VModernRebindSettingWidget_OnSelectorFocussed) == 0x000010, "Wrong size on VModernRebindSettingWidget_OnSelectorFocussed");
static_assert(offsetof(VModernRebindSettingWidget_OnSelectorFocussed, FocussedSelector) == 0x000000, "Member 'VModernRebindSettingWidget_OnSelectorFocussed::FocussedSelector' has a wrong offset!");
static_assert(offsetof(VModernRebindSettingWidget_OnSelectorFocussed, SelectorIndex) == 0x000008, "Member 'VModernRebindSettingWidget_OnSelectorFocussed::SelectorIndex' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.OnSelectorListenStateChanged
// 0x0010 (0x0010 - 0x0000)
struct VModernRebindSettingWidget_OnSelectorListenStateChanged final
{
public:
	class UVNavigableInputKeySelector*            Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernRebindSettingWidget_OnSelectorListenStateChanged) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_OnSelectorListenStateChanged");
static_assert(sizeof(VModernRebindSettingWidget_OnSelectorListenStateChanged) == 0x000010, "Wrong size on VModernRebindSettingWidget_OnSelectorListenStateChanged");
static_assert(offsetof(VModernRebindSettingWidget_OnSelectorListenStateChanged, Target) == 0x000000, "Member 'VModernRebindSettingWidget_OnSelectorListenStateChanged::Target' has a wrong offset!");
static_assert(offsetof(VModernRebindSettingWidget_OnSelectorListenStateChanged, NewState) == 0x000008, "Member 'VModernRebindSettingWidget_OnSelectorListenStateChanged::NewState' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.OnUpdateWidgetBinding
// 0x0048 (0x0048 - 0x0000)
struct VModernRebindSettingWidget_OnUpdateWidgetBinding final
{
public:
	struct FKey                                   NewPrimaryKeyboard;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewSecondaryKeyboard;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewPrimaryGamepad;                                 // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_OnUpdateWidgetBinding) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_OnUpdateWidgetBinding");
static_assert(sizeof(VModernRebindSettingWidget_OnUpdateWidgetBinding) == 0x000048, "Wrong size on VModernRebindSettingWidget_OnUpdateWidgetBinding");
static_assert(offsetof(VModernRebindSettingWidget_OnUpdateWidgetBinding, NewPrimaryKeyboard) == 0x000000, "Member 'VModernRebindSettingWidget_OnUpdateWidgetBinding::NewPrimaryKeyboard' has a wrong offset!");
static_assert(offsetof(VModernRebindSettingWidget_OnUpdateWidgetBinding, NewSecondaryKeyboard) == 0x000018, "Member 'VModernRebindSettingWidget_OnUpdateWidgetBinding::NewSecondaryKeyboard' has a wrong offset!");
static_assert(offsetof(VModernRebindSettingWidget_OnUpdateWidgetBinding, NewPrimaryGamepad) == 0x000030, "Member 'VModernRebindSettingWidget_OnUpdateWidgetBinding::NewPrimaryGamepad' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.RevertBindingToDefault
// 0x0001 (0x0001 - 0x0000)
struct VModernRebindSettingWidget_RevertBindingToDefault final
{
public:
	bool                                          bSpreadChange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_RevertBindingToDefault) == 0x000001, "Wrong alignment on VModernRebindSettingWidget_RevertBindingToDefault");
static_assert(sizeof(VModernRebindSettingWidget_RevertBindingToDefault) == 0x000001, "Wrong size on VModernRebindSettingWidget_RevertBindingToDefault");
static_assert(offsetof(VModernRebindSettingWidget_RevertBindingToDefault, bSpreadChange) == 0x000000, "Member 'VModernRebindSettingWidget_RevertBindingToDefault::bSpreadChange' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.SetCurrentWidgetIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernRebindSettingWidget_SetCurrentWidgetIndex final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_SetCurrentWidgetIndex) == 0x000004, "Wrong alignment on VModernRebindSettingWidget_SetCurrentWidgetIndex");
static_assert(sizeof(VModernRebindSettingWidget_SetCurrentWidgetIndex) == 0x000004, "Wrong size on VModernRebindSettingWidget_SetCurrentWidgetIndex");
static_assert(offsetof(VModernRebindSettingWidget_SetCurrentWidgetIndex, NewValue) == 0x000000, "Member 'VModernRebindSettingWidget_SetCurrentWidgetIndex::NewValue' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.SetNavigationIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernRebindSettingWidget_SetNavigationIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_SetNavigationIndex) == 0x000004, "Wrong alignment on VModernRebindSettingWidget_SetNavigationIndex");
static_assert(sizeof(VModernRebindSettingWidget_SetNavigationIndex) == 0x000004, "Wrong size on VModernRebindSettingWidget_SetNavigationIndex");
static_assert(offsetof(VModernRebindSettingWidget_SetNavigationIndex, Value) == 0x000000, "Member 'VModernRebindSettingWidget_SetNavigationIndex::Value' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.SetRebindData
// 0x0098 (0x0098 - 0x0000)
struct VModernRebindSettingWidget_SetRebindData final
{
public:
	struct FModernRebindSettingTableRow           Value;                                             // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_SetRebindData) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_SetRebindData");
static_assert(sizeof(VModernRebindSettingWidget_SetRebindData) == 0x000098, "Wrong size on VModernRebindSettingWidget_SetRebindData");
static_assert(offsetof(VModernRebindSettingWidget_SetRebindData, Value) == 0x000000, "Member 'VModernRebindSettingWidget_SetRebindData::Value' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.DoesHaveAEmptyPrimaryBinding
// 0x0001 (0x0001 - 0x0000)
struct VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding) == 0x000001, "Wrong alignment on VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding");
static_assert(sizeof(VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding) == 0x000001, "Wrong size on VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding");
static_assert(offsetof(VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding, ReturnValue) == 0x000000, "Member 'VModernRebindSettingWidget_DoesHaveAEmptyPrimaryBinding::ReturnValue' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.GetCurrentWidgetIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernRebindSettingWidget_GetCurrentWidgetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_GetCurrentWidgetIndex) == 0x000004, "Wrong alignment on VModernRebindSettingWidget_GetCurrentWidgetIndex");
static_assert(sizeof(VModernRebindSettingWidget_GetCurrentWidgetIndex) == 0x000004, "Wrong size on VModernRebindSettingWidget_GetCurrentWidgetIndex");
static_assert(offsetof(VModernRebindSettingWidget_GetCurrentWidgetIndex, ReturnValue) == 0x000000, "Member 'VModernRebindSettingWidget_GetCurrentWidgetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.GetNavigationIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernRebindSettingWidget_GetNavigationIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_GetNavigationIndex) == 0x000004, "Wrong alignment on VModernRebindSettingWidget_GetNavigationIndex");
static_assert(sizeof(VModernRebindSettingWidget_GetNavigationIndex) == 0x000004, "Wrong size on VModernRebindSettingWidget_GetNavigationIndex");
static_assert(offsetof(VModernRebindSettingWidget_GetNavigationIndex, ReturnValue) == 0x000000, "Member 'VModernRebindSettingWidget_GetNavigationIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernRebindSettingWidget.GetRebindData
// 0x0098 (0x0098 - 0x0000)
struct VModernRebindSettingWidget_GetRebindData final
{
public:
	struct FModernRebindSettingTableRow           ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernRebindSettingWidget_GetRebindData) == 0x000008, "Wrong alignment on VModernRebindSettingWidget_GetRebindData");
static_assert(sizeof(VModernRebindSettingWidget_GetRebindData) == 0x000098, "Wrong size on VModernRebindSettingWidget_GetRebindData");
static_assert(offsetof(VModernRebindSettingWidget_GetRebindData, ReturnValue) == 0x000000, "Member 'VModernRebindSettingWidget_GetRebindData::ReturnValue' has a wrong offset!");

// Function Altar.VLeveledCreature.GetNameOptions
// 0x0010 (0x0010 - 0x0000)
struct VLeveledCreature_GetNameOptions final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLeveledCreature_GetNameOptions) == 0x000008, "Wrong alignment on VLeveledCreature_GetNameOptions");
static_assert(sizeof(VLeveledCreature_GetNameOptions) == 0x000010, "Wrong size on VLeveledCreature_GetNameOptions");
static_assert(offsetof(VLeveledCreature_GetNameOptions, ReturnValue) == 0x000000, "Member 'VLeveledCreature_GetNameOptions::ReturnValue' has a wrong offset!");

// Function Altar.VPrimaryGameLayout.ResumeInputForPlayer
// 0x0010 (0x0010 - 0x0000)
struct VPrimaryGameLayout_ResumeInputForPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspendToken;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPrimaryGameLayout_ResumeInputForPlayer) == 0x000008, "Wrong alignment on VPrimaryGameLayout_ResumeInputForPlayer");
static_assert(sizeof(VPrimaryGameLayout_ResumeInputForPlayer) == 0x000010, "Wrong size on VPrimaryGameLayout_ResumeInputForPlayer");
static_assert(offsetof(VPrimaryGameLayout_ResumeInputForPlayer, PlayerController) == 0x000000, "Member 'VPrimaryGameLayout_ResumeInputForPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(VPrimaryGameLayout_ResumeInputForPlayer, SuspendToken) == 0x000008, "Member 'VPrimaryGameLayout_ResumeInputForPlayer::SuspendToken' has a wrong offset!");

// Function Altar.VPrimaryGameLayout.SuspendInputForPlayer
// 0x0018 (0x0018 - 0x0000)
struct VPrimaryGameLayout_SuspendInputForPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuspendReason;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPrimaryGameLayout_SuspendInputForPlayer) == 0x000008, "Wrong alignment on VPrimaryGameLayout_SuspendInputForPlayer");
static_assert(sizeof(VPrimaryGameLayout_SuspendInputForPlayer) == 0x000018, "Wrong size on VPrimaryGameLayout_SuspendInputForPlayer");
static_assert(offsetof(VPrimaryGameLayout_SuspendInputForPlayer, PlayerController) == 0x000000, "Member 'VPrimaryGameLayout_SuspendInputForPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(VPrimaryGameLayout_SuspendInputForPlayer, SuspendReason) == 0x000008, "Member 'VPrimaryGameLayout_SuspendInputForPlayer::SuspendReason' has a wrong offset!");
static_assert(offsetof(VPrimaryGameLayout_SuspendInputForPlayer, ReturnValue) == 0x000010, "Member 'VPrimaryGameLayout_SuspendInputForPlayer::ReturnValue' has a wrong offset!");

// Function Altar.VPrimaryGameLayout.RegisterLayer
// 0x0010 (0x0010 - 0x0000)
struct VPrimaryGameLayout_RegisterLayer final
{
public:
	struct FGameplayTag                           LayerTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActivatableWidgetStack*               LayerWidget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPrimaryGameLayout_RegisterLayer) == 0x000008, "Wrong alignment on VPrimaryGameLayout_RegisterLayer");
static_assert(sizeof(VPrimaryGameLayout_RegisterLayer) == 0x000010, "Wrong size on VPrimaryGameLayout_RegisterLayer");
static_assert(offsetof(VPrimaryGameLayout_RegisterLayer, LayerTag) == 0x000000, "Member 'VPrimaryGameLayout_RegisterLayer::LayerTag' has a wrong offset!");
static_assert(offsetof(VPrimaryGameLayout_RegisterLayer, LayerWidget) == 0x000008, "Member 'VPrimaryGameLayout_RegisterLayer::LayerWidget' has a wrong offset!");

// Function Altar.VPrimaryGameLayout.GetBackgroundWidget
// 0x0008 (0x0008 - 0x0000)
struct VPrimaryGameLayout_GetBackgroundWidget final
{
public:
	class UVBackgroundWidgetBase*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPrimaryGameLayout_GetBackgroundWidget) == 0x000008, "Wrong alignment on VPrimaryGameLayout_GetBackgroundWidget");
static_assert(sizeof(VPrimaryGameLayout_GetBackgroundWidget) == 0x000008, "Wrong size on VPrimaryGameLayout_GetBackgroundWidget");
static_assert(offsetof(VPrimaryGameLayout_GetBackgroundWidget, ReturnValue) == 0x000000, "Member 'VPrimaryGameLayout_GetBackgroundWidget::ReturnValue' has a wrong offset!");

// Function Altar.VPrimaryGameLayout.IsLayerActive
// 0x000C (0x000C - 0x0000)
struct VPrimaryGameLayout_IsLayerActive final
{
public:
	struct FGameplayTag                           LayerTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPrimaryGameLayout_IsLayerActive) == 0x000004, "Wrong alignment on VPrimaryGameLayout_IsLayerActive");
static_assert(sizeof(VPrimaryGameLayout_IsLayerActive) == 0x00000C, "Wrong size on VPrimaryGameLayout_IsLayerActive");
static_assert(offsetof(VPrimaryGameLayout_IsLayerActive, LayerTag) == 0x000000, "Member 'VPrimaryGameLayout_IsLayerActive::LayerTag' has a wrong offset!");
static_assert(offsetof(VPrimaryGameLayout_IsLayerActive, ReturnValue) == 0x000008, "Member 'VPrimaryGameLayout_IsLayerActive::ReturnValue' has a wrong offset!");

// Function Altar.VMagicSpellVFX.SendVFXEndSignal
// 0x0008 (0x0008 - 0x0000)
struct VMagicSpellVFX_SendVFXEndSignal final
{
public:
	class AActor*                                 Blueprint;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicSpellVFX_SendVFXEndSignal) == 0x000008, "Wrong alignment on VMagicSpellVFX_SendVFXEndSignal");
static_assert(sizeof(VMagicSpellVFX_SendVFXEndSignal) == 0x000008, "Wrong size on VMagicSpellVFX_SendVFXEndSignal");
static_assert(offsetof(VMagicSpellVFX_SendVFXEndSignal, Blueprint) == 0x000000, "Member 'VMagicSpellVFX_SendVFXEndSignal::Blueprint' has a wrong offset!");

// Function Altar.VMagicSpellVFX.OnSpellProjectileBounce
// 0x0100 (0x0100 - 0x0000)
struct VMagicSpellVFX_OnSpellProjectileBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x00E8(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicSpellVFX_OnSpellProjectileBounce) == 0x000008, "Wrong alignment on VMagicSpellVFX_OnSpellProjectileBounce");
static_assert(sizeof(VMagicSpellVFX_OnSpellProjectileBounce) == 0x000100, "Wrong size on VMagicSpellVFX_OnSpellProjectileBounce");
static_assert(offsetof(VMagicSpellVFX_OnSpellProjectileBounce, ImpactResult) == 0x000000, "Member 'VMagicSpellVFX_OnSpellProjectileBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFX_OnSpellProjectileBounce, ImpactVelocity) == 0x0000E8, "Member 'VMagicSpellVFX_OnSpellProjectileBounce::ImpactVelocity' has a wrong offset!");

// Function Altar.VAIProcedureExecution_ACTIVATE.GetActivationRadius
// 0x0004 (0x0004 - 0x0000)
struct VAIProcedureExecution_ACTIVATE_GetActivationRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_ACTIVATE_GetActivationRadius) == 0x000004, "Wrong alignment on VAIProcedureExecution_ACTIVATE_GetActivationRadius");
static_assert(sizeof(VAIProcedureExecution_ACTIVATE_GetActivationRadius) == 0x000004, "Wrong size on VAIProcedureExecution_ACTIVATE_GetActivationRadius");
static_assert(offsetof(VAIProcedureExecution_ACTIVATE_GetActivationRadius, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_ACTIVATE_GetActivationRadius::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_ACTIVATE.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_ACTIVATE_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_ACTIVATE_GetTargetActor) == 0x000008, "Wrong alignment on VAIProcedureExecution_ACTIVATE_GetTargetActor");
static_assert(sizeof(VAIProcedureExecution_ACTIVATE_GetTargetActor) == 0x000008, "Wrong size on VAIProcedureExecution_ACTIVATE_GetTargetActor");
static_assert(offsetof(VAIProcedureExecution_ACTIVATE_GetTargetActor, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_ACTIVATE_GetTargetActor::ReturnValue' has a wrong offset!");

// Function Altar.AltarAnimationFunctionLibrary.DoesBlendspaceHaveAnimationForBlendValue
// 0x0028 (0x0028 - 0x0000)
struct AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue final
{
public:
	class UBlendSpace*                            BlendspaceAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlendValues;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue) == 0x000008, "Wrong alignment on AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue");
static_assert(sizeof(AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue) == 0x000028, "Wrong size on AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue");
static_assert(offsetof(AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue, BlendspaceAsset) == 0x000000, "Member 'AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue::BlendspaceAsset' has a wrong offset!");
static_assert(offsetof(AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue, BlendValues) == 0x000008, "Member 'AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue::BlendValues' has a wrong offset!");
static_assert(offsetof(AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue, ReturnValue) == 0x000020, "Member 'AltarAnimationFunctionLibrary_DoesBlendspaceHaveAnimationForBlendValue::ReturnValue' has a wrong offset!");

// Function Altar.AltarAnimationFunctionLibrary.GetMostRelevantAnimationForBlendspaceBlendValues
// 0x0028 (0x0028 - 0x0000)
struct AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues final
{
public:
	class UBlendSpace*                            BlendspaceAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlendValues;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues) == 0x000008, "Wrong alignment on AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues");
static_assert(sizeof(AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues) == 0x000028, "Wrong size on AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues");
static_assert(offsetof(AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues, BlendspaceAsset) == 0x000000, "Member 'AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues::BlendspaceAsset' has a wrong offset!");
static_assert(offsetof(AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues, BlendValues) == 0x000008, "Member 'AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues::BlendValues' has a wrong offset!");
static_assert(offsetof(AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues, ReturnValue) == 0x000020, "Member 'AltarAnimationFunctionLibrary_GetMostRelevantAnimationForBlendspaceBlendValues::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetPawnMeleeHitboxFromBase
// 0x00E0 (0x00E0 - 0x0000)
struct VPairedPawn_GetPawnMeleeHitboxFromBase final
{
public:
	struct FVector                                AimingStartPoint;                                  // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartPointOffset;                                  // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimingDirection;                                   // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachMultiplier;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   LocalSpaceBaseHitbox;                              // 0x0058(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutHitboxCenter;                                   // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitboxHalfExtent;                               // 0x00A8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  OutHitboxQuat;                                     // 0x00C0(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetPawnMeleeHitboxFromBase) == 0x000010, "Wrong alignment on VPairedPawn_GetPawnMeleeHitboxFromBase");
static_assert(sizeof(VPairedPawn_GetPawnMeleeHitboxFromBase) == 0x0000E0, "Wrong size on VPairedPawn_GetPawnMeleeHitboxFromBase");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, AimingStartPoint) == 0x000000, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::AimingStartPoint' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, CapsuleRadius) == 0x000018, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, StartPointOffset) == 0x000020, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::StartPointOffset' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, AimingDirection) == 0x000038, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::AimingDirection' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, ReachMultiplier) == 0x000050, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::ReachMultiplier' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, LocalSpaceBaseHitbox) == 0x000058, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::LocalSpaceBaseHitbox' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, OutHitboxCenter) == 0x000090, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::OutHitboxCenter' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, OutHitboxHalfExtent) == 0x0000A8, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::OutHitboxHalfExtent' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetPawnMeleeHitboxFromBase, OutHitboxQuat) == 0x0000C0, "Member 'VPairedPawn_GetPawnMeleeHitboxFromBase::OutHitboxQuat' has a wrong offset!");

// Function Altar.VPairedPawn.AddBufferedInputTag
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_AddBufferedInputTag final
{
public:
	struct FGameplayTag                           TagToAdd;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_AddBufferedInputTag) == 0x000004, "Wrong alignment on VPairedPawn_AddBufferedInputTag");
static_assert(sizeof(VPairedPawn_AddBufferedInputTag) == 0x000008, "Wrong size on VPairedPawn_AddBufferedInputTag");
static_assert(offsetof(VPairedPawn_AddBufferedInputTag, TagToAdd) == 0x000000, "Member 'VPairedPawn_AddBufferedInputTag::TagToAdd' has a wrong offset!");

// Function Altar.VPairedPawn.AddBufferedInputTagWithCustomTime
// 0x000C (0x000C - 0x0000)
struct VPairedPawn_AddBufferedInputTagWithCustomTime final
{
public:
	struct FGameplayTag                           TagToAdd;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomBufferTime;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_AddBufferedInputTagWithCustomTime) == 0x000004, "Wrong alignment on VPairedPawn_AddBufferedInputTagWithCustomTime");
static_assert(sizeof(VPairedPawn_AddBufferedInputTagWithCustomTime) == 0x00000C, "Wrong size on VPairedPawn_AddBufferedInputTagWithCustomTime");
static_assert(offsetof(VPairedPawn_AddBufferedInputTagWithCustomTime, TagToAdd) == 0x000000, "Member 'VPairedPawn_AddBufferedInputTagWithCustomTime::TagToAdd' has a wrong offset!");
static_assert(offsetof(VPairedPawn_AddBufferedInputTagWithCustomTime, CustomBufferTime) == 0x000008, "Member 'VPairedPawn_AddBufferedInputTagWithCustomTime::CustomBufferTime' has a wrong offset!");

// Function Altar.VPairedPawn.AddGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_AddGameplayTag final
{
public:
	struct FGameplayTag                           TagToAdd;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_AddGameplayTag) == 0x000004, "Wrong alignment on VPairedPawn_AddGameplayTag");
static_assert(sizeof(VPairedPawn_AddGameplayTag) == 0x000008, "Wrong size on VPairedPawn_AddGameplayTag");
static_assert(offsetof(VPairedPawn_AddGameplayTag, TagToAdd) == 0x000000, "Member 'VPairedPawn_AddGameplayTag::TagToAdd' has a wrong offset!");

// Function Altar.VPairedPawn.AddGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct VPairedPawn_AddGameplayTags final
{
public:
	struct FGameplayTagContainer                  GameplayTagsToAdd;                                 // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_AddGameplayTags) == 0x000008, "Wrong alignment on VPairedPawn_AddGameplayTags");
static_assert(sizeof(VPairedPawn_AddGameplayTags) == 0x000020, "Wrong size on VPairedPawn_AddGameplayTags");
static_assert(offsetof(VPairedPawn_AddGameplayTags, GameplayTagsToAdd) == 0x000000, "Member 'VPairedPawn_AddGameplayTags::GameplayTagsToAdd' has a wrong offset!");

// Function Altar.VPairedPawn.ApplyAndSaveConstraintProfile
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_ApplyAndSaveConstraintProfile final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_ApplyAndSaveConstraintProfile) == 0x000004, "Wrong alignment on VPairedPawn_ApplyAndSaveConstraintProfile");
static_assert(sizeof(VPairedPawn_ApplyAndSaveConstraintProfile) == 0x000008, "Wrong size on VPairedPawn_ApplyAndSaveConstraintProfile");
static_assert(offsetof(VPairedPawn_ApplyAndSaveConstraintProfile, ProfileName) == 0x000000, "Member 'VPairedPawn_ApplyAndSaveConstraintProfile::ProfileName' has a wrong offset!");

// Function Altar.VPairedPawn.ConsumeKnockdownRequest
// 0x0028 (0x0028 - 0x0000)
struct VPairedPawn_ConsumeKnockdownRequest final
{
public:
	struct FVPawnKnockdownRequest                 LatestRequestData;                                 // 0x0000(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_ConsumeKnockdownRequest) == 0x000008, "Wrong alignment on VPairedPawn_ConsumeKnockdownRequest");
static_assert(sizeof(VPairedPawn_ConsumeKnockdownRequest) == 0x000028, "Wrong size on VPairedPawn_ConsumeKnockdownRequest");
static_assert(offsetof(VPairedPawn_ConsumeKnockdownRequest, LatestRequestData) == 0x000000, "Member 'VPairedPawn_ConsumeKnockdownRequest::LatestRequestData' has a wrong offset!");

// Function Altar.VPairedPawn.ConsumeMeleeAttackFatigue
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_ConsumeMeleeAttackFatigue final
{
public:
	bool                                          bIsPowerAttack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_ConsumeMeleeAttackFatigue) == 0x000001, "Wrong alignment on VPairedPawn_ConsumeMeleeAttackFatigue");
static_assert(sizeof(VPairedPawn_ConsumeMeleeAttackFatigue) == 0x000001, "Wrong size on VPairedPawn_ConsumeMeleeAttackFatigue");
static_assert(offsetof(VPairedPawn_ConsumeMeleeAttackFatigue, bIsPowerAttack) == 0x000000, "Member 'VPairedPawn_ConsumeMeleeAttackFatigue::bIsPowerAttack' has a wrong offset!");

// Function Altar.VPairedPawn.DisableFatigueFreeze
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_DisableFatigueFreeze final
{
public:
	float                                         FatigueRestorationPercentage;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_DisableFatigueFreeze) == 0x000004, "Wrong alignment on VPairedPawn_DisableFatigueFreeze");
static_assert(sizeof(VPairedPawn_DisableFatigueFreeze) == 0x000004, "Wrong size on VPairedPawn_DisableFatigueFreeze");
static_assert(offsetof(VPairedPawn_DisableFatigueFreeze, FatigueRestorationPercentage) == 0x000000, "Member 'VPairedPawn_DisableFatigueFreeze::FatigueRestorationPercentage' has a wrong offset!");

// Function Altar.VPairedPawn.DoRagdoll
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_DoRagdoll final
{
public:
	EVRagdollSetup                                Setup;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_DoRagdoll) == 0x000001, "Wrong alignment on VPairedPawn_DoRagdoll");
static_assert(sizeof(VPairedPawn_DoRagdoll) == 0x000001, "Wrong size on VPairedPawn_DoRagdoll");
static_assert(offsetof(VPairedPawn_DoRagdoll, Setup) == 0x000000, "Member 'VPairedPawn_DoRagdoll::Setup' has a wrong offset!");

// Function Altar.VPairedPawn.GetBehaviorForTag
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_GetBehaviorForTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActorBehaviorBase*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetBehaviorForTag) == 0x000008, "Wrong alignment on VPairedPawn_GetBehaviorForTag");
static_assert(sizeof(VPairedPawn_GetBehaviorForTag) == 0x000010, "Wrong size on VPairedPawn_GetBehaviorForTag");
static_assert(offsetof(VPairedPawn_GetBehaviorForTag, Tag) == 0x000000, "Member 'VPairedPawn_GetBehaviorForTag::Tag' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetBehaviorForTag, ReturnValue) == 0x000008, "Member 'VPairedPawn_GetBehaviorForTag::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetGroundMaterialType
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_GetGroundMaterialType final
{
public:
	EGroundMaterialType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetGroundMaterialType) == 0x000001, "Wrong alignment on VPairedPawn_GetGroundMaterialType");
static_assert(sizeof(VPairedPawn_GetGroundMaterialType) == 0x000001, "Wrong size on VPairedPawn_GetGroundMaterialType");
static_assert(offsetof(VPairedPawn_GetGroundMaterialType, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetGroundMaterialType::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GroundMaterialTypeIsValid
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_GroundMaterialTypeIsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GroundMaterialTypeIsValid) == 0x000001, "Wrong alignment on VPairedPawn_GroundMaterialTypeIsValid");
static_assert(sizeof(VPairedPawn_GroundMaterialTypeIsValid) == 0x000001, "Wrong size on VPairedPawn_GroundMaterialTypeIsValid");
static_assert(offsetof(VPairedPawn_GroundMaterialTypeIsValid, ReturnValue) == 0x000000, "Member 'VPairedPawn_GroundMaterialTypeIsValid::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsValidTargetForStickyCollision
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_IsValidTargetForStickyCollision final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_IsValidTargetForStickyCollision) == 0x000008, "Wrong alignment on VPairedPawn_IsValidTargetForStickyCollision");
static_assert(sizeof(VPairedPawn_IsValidTargetForStickyCollision) == 0x000010, "Wrong size on VPairedPawn_IsValidTargetForStickyCollision");
static_assert(offsetof(VPairedPawn_IsValidTargetForStickyCollision, OtherActor) == 0x000000, "Member 'VPairedPawn_IsValidTargetForStickyCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_IsValidTargetForStickyCollision, ReturnValue) == 0x000008, "Member 'VPairedPawn_IsValidTargetForStickyCollision::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.OnActionStateEntered
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_OnActionStateEntered final
{
public:
	struct FGameplayTag                           InStateBaseTag;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnActionStateEntered) == 0x000004, "Wrong alignment on VPairedPawn_OnActionStateEntered");
static_assert(sizeof(VPairedPawn_OnActionStateEntered) == 0x000008, "Wrong size on VPairedPawn_OnActionStateEntered");
static_assert(offsetof(VPairedPawn_OnActionStateEntered, InStateBaseTag) == 0x000000, "Member 'VPairedPawn_OnActionStateEntered::InStateBaseTag' has a wrong offset!");

// Function Altar.VPairedPawn.OnActorValueChanged_Paralysis
// 0x0014 (0x0014 - 0x0000)
struct VPairedPawn_OnActorValueChanged_Paralysis final
{
public:
	EVActorValues                                 ActorValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousBaseValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousModifiedValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewBaseValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewModifiedValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnActorValueChanged_Paralysis) == 0x000004, "Wrong alignment on VPairedPawn_OnActorValueChanged_Paralysis");
static_assert(sizeof(VPairedPawn_OnActorValueChanged_Paralysis) == 0x000014, "Wrong size on VPairedPawn_OnActorValueChanged_Paralysis");
static_assert(offsetof(VPairedPawn_OnActorValueChanged_Paralysis, ActorValue) == 0x000000, "Member 'VPairedPawn_OnActorValueChanged_Paralysis::ActorValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnActorValueChanged_Paralysis, PreviousBaseValue) == 0x000004, "Member 'VPairedPawn_OnActorValueChanged_Paralysis::PreviousBaseValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnActorValueChanged_Paralysis, PreviousModifiedValue) == 0x000008, "Member 'VPairedPawn_OnActorValueChanged_Paralysis::PreviousModifiedValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnActorValueChanged_Paralysis, NewBaseValue) == 0x00000C, "Member 'VPairedPawn_OnActorValueChanged_Paralysis::NewBaseValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnActorValueChanged_Paralysis, NewModifiedValue) == 0x000010, "Member 'VPairedPawn_OnActorValueChanged_Paralysis::NewModifiedValue' has a wrong offset!");

// Function Altar.VPairedPawn.OnBeginOverlapWithBorder
// 0x0108 (0x0108 - 0x0000)
struct VPairedPawn_OnBeginOverlapWithBorder final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnBeginOverlapWithBorder) == 0x000008, "Wrong alignment on VPairedPawn_OnBeginOverlapWithBorder");
static_assert(sizeof(VPairedPawn_OnBeginOverlapWithBorder) == 0x000108, "Wrong size on VPairedPawn_OnBeginOverlapWithBorder");
static_assert(offsetof(VPairedPawn_OnBeginOverlapWithBorder, OverlappedComponent) == 0x000000, "Member 'VPairedPawn_OnBeginOverlapWithBorder::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnBeginOverlapWithBorder, OtherActor) == 0x000008, "Member 'VPairedPawn_OnBeginOverlapWithBorder::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnBeginOverlapWithBorder, OtherComp) == 0x000010, "Member 'VPairedPawn_OnBeginOverlapWithBorder::OtherComp' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnBeginOverlapWithBorder, OtherBodyIndex) == 0x000018, "Member 'VPairedPawn_OnBeginOverlapWithBorder::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnBeginOverlapWithBorder, bFromSweep) == 0x00001C, "Member 'VPairedPawn_OnBeginOverlapWithBorder::bFromSweep' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnBeginOverlapWithBorder, SweepResult) == 0x000020, "Member 'VPairedPawn_OnBeginOverlapWithBorder::SweepResult' has a wrong offset!");

// Function Altar.VPairedPawn.OnCapsuleHit
// 0x0118 (0x0118 - 0x0000)
struct VPairedPawn_OnCapsuleHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnCapsuleHit) == 0x000008, "Wrong alignment on VPairedPawn_OnCapsuleHit");
static_assert(sizeof(VPairedPawn_OnCapsuleHit) == 0x000118, "Wrong size on VPairedPawn_OnCapsuleHit");
static_assert(offsetof(VPairedPawn_OnCapsuleHit, HitComponent) == 0x000000, "Member 'VPairedPawn_OnCapsuleHit::HitComponent' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnCapsuleHit, OtherActor) == 0x000008, "Member 'VPairedPawn_OnCapsuleHit::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnCapsuleHit, OtherComp) == 0x000010, "Member 'VPairedPawn_OnCapsuleHit::OtherComp' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnCapsuleHit, NormalImpulse) == 0x000018, "Member 'VPairedPawn_OnCapsuleHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnCapsuleHit, Hit) == 0x000030, "Member 'VPairedPawn_OnCapsuleHit::Hit' has a wrong offset!");

// Function Altar.VPairedPawn.OnCombatHitDealt
// 0x0038 (0x0038 - 0x0000)
struct VPairedPawn_OnCombatHitDealt final
{
public:
	struct FPairedOblivionHitEvent                HitEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnCombatHitDealt) == 0x000008, "Wrong alignment on VPairedPawn_OnCombatHitDealt");
static_assert(sizeof(VPairedPawn_OnCombatHitDealt) == 0x000038, "Wrong size on VPairedPawn_OnCombatHitDealt");
static_assert(offsetof(VPairedPawn_OnCombatHitDealt, HitEvent) == 0x000000, "Member 'VPairedPawn_OnCombatHitDealt::HitEvent' has a wrong offset!");

// Function Altar.VPairedPawn.OnCombatHitTaken
// 0x0038 (0x0038 - 0x0000)
struct VPairedPawn_OnCombatHitTaken final
{
public:
	struct FPairedOblivionHitEvent                HitEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnCombatHitTaken) == 0x000008, "Wrong alignment on VPairedPawn_OnCombatHitTaken");
static_assert(sizeof(VPairedPawn_OnCombatHitTaken) == 0x000038, "Wrong size on VPairedPawn_OnCombatHitTaken");
static_assert(offsetof(VPairedPawn_OnCombatHitTaken, HitEvent) == 0x000000, "Member 'VPairedPawn_OnCombatHitTaken::HitEvent' has a wrong offset!");

// Function Altar.VPairedPawn.OnEndOverlapWithBorder
// 0x0020 (0x0020 - 0x0000)
struct VPairedPawn_OnEndOverlapWithBorder final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_OnEndOverlapWithBorder) == 0x000008, "Wrong alignment on VPairedPawn_OnEndOverlapWithBorder");
static_assert(sizeof(VPairedPawn_OnEndOverlapWithBorder) == 0x000020, "Wrong size on VPairedPawn_OnEndOverlapWithBorder");
static_assert(offsetof(VPairedPawn_OnEndOverlapWithBorder, OverlappedComponent) == 0x000000, "Member 'VPairedPawn_OnEndOverlapWithBorder::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnEndOverlapWithBorder, OtherActor) == 0x000008, "Member 'VPairedPawn_OnEndOverlapWithBorder::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnEndOverlapWithBorder, OtherComp) == 0x000010, "Member 'VPairedPawn_OnEndOverlapWithBorder::OtherComp' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnEndOverlapWithBorder, OtherBodyIndex) == 0x000018, "Member 'VPairedPawn_OnEndOverlapWithBorder::OtherBodyIndex' has a wrong offset!");

// Function Altar.VPairedPawn.OnGhostStateChanged
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_OnGhostStateChanged final
{
public:
	bool                                          bIsGhost;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnGhostStateChanged) == 0x000001, "Wrong alignment on VPairedPawn_OnGhostStateChanged");
static_assert(sizeof(VPairedPawn_OnGhostStateChanged) == 0x000001, "Wrong size on VPairedPawn_OnGhostStateChanged");
static_assert(offsetof(VPairedPawn_OnGhostStateChanged, bIsGhost) == 0x000000, "Member 'VPairedPawn_OnGhostStateChanged::bIsGhost' has a wrong offset!");

// Function Altar.VPairedPawn.OnHitReaction
// 0x0050 (0x0050 - 0x0000)
struct VPairedPawn_OnHitReaction final
{
public:
	float                                         ReceivedDamage;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnHitReaction) == 0x000008, "Wrong alignment on VPairedPawn_OnHitReaction");
static_assert(sizeof(VPairedPawn_OnHitReaction) == 0x000050, "Wrong size on VPairedPawn_OnHitReaction");
static_assert(offsetof(VPairedPawn_OnHitReaction, ReceivedDamage) == 0x000000, "Member 'VPairedPawn_OnHitReaction::ReceivedDamage' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnHitReaction, HitLocation) == 0x000008, "Member 'VPairedPawn_OnHitReaction::HitLocation' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnHitReaction, HitNormal) == 0x000020, "Member 'VPairedPawn_OnHitReaction::HitNormal' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnHitReaction, HitDirection) == 0x000038, "Member 'VPairedPawn_OnHitReaction::HitDirection' has a wrong offset!");

// Function Altar.VPairedPawn.OnPropItemEndingPlay
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_OnPropItemEndingPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_OnPropItemEndingPlay) == 0x000008, "Wrong alignment on VPairedPawn_OnPropItemEndingPlay");
static_assert(sizeof(VPairedPawn_OnPropItemEndingPlay) == 0x000010, "Wrong size on VPairedPawn_OnPropItemEndingPlay");
static_assert(offsetof(VPairedPawn_OnPropItemEndingPlay, Actor) == 0x000000, "Member 'VPairedPawn_OnPropItemEndingPlay::Actor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnPropItemEndingPlay, EndPlayReason) == 0x000008, "Member 'VPairedPawn_OnPropItemEndingPlay::EndPlayReason' has a wrong offset!");

// Function Altar.VPairedPawn.OnShieldChanged
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_OnShieldChanged final
{
public:
	const class AVShield*                         ShieldActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_OnShieldChanged) == 0x000008, "Wrong alignment on VPairedPawn_OnShieldChanged");
static_assert(sizeof(VPairedPawn_OnShieldChanged) == 0x000010, "Wrong size on VPairedPawn_OnShieldChanged");
static_assert(offsetof(VPairedPawn_OnShieldChanged, ShieldActor) == 0x000000, "Member 'VPairedPawn_OnShieldChanged::ShieldActor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnShieldChanged, bEquipping) == 0x000008, "Member 'VPairedPawn_OnShieldChanged::bEquipping' has a wrong offset!");

// Function Altar.VPairedPawn.OnSummonPawn
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_OnSummonPawn final
{
public:
	bool                                          bIsSummoned;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnSummonPawn) == 0x000001, "Wrong alignment on VPairedPawn_OnSummonPawn");
static_assert(sizeof(VPairedPawn_OnSummonPawn) == 0x000001, "Wrong size on VPairedPawn_OnSummonPawn");
static_assert(offsetof(VPairedPawn_OnSummonPawn, bIsSummoned) == 0x000000, "Member 'VPairedPawn_OnSummonPawn::bIsSummoned' has a wrong offset!");

// Function Altar.VPairedPawn.OnTorchVisibilityChanged
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_OnTorchVisibilityChanged final
{
public:
	const class AActor*                           TorchActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_OnTorchVisibilityChanged) == 0x000008, "Wrong alignment on VPairedPawn_OnTorchVisibilityChanged");
static_assert(sizeof(VPairedPawn_OnTorchVisibilityChanged) == 0x000010, "Wrong size on VPairedPawn_OnTorchVisibilityChanged");
static_assert(offsetof(VPairedPawn_OnTorchVisibilityChanged, TorchActor) == 0x000000, "Member 'VPairedPawn_OnTorchVisibilityChanged::TorchActor' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnTorchVisibilityChanged, bEquipping) == 0x000008, "Member 'VPairedPawn_OnTorchVisibilityChanged::bEquipping' has a wrong offset!");

// Function Altar.VPairedPawn.OnUpdateOverEncumbrance
// 0x0014 (0x0014 - 0x0000)
struct VPairedPawn_OnUpdateOverEncumbrance final
{
public:
	EVActorValues                                 ActorValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousBaseValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousModifiedValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewBaseValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewModifiedValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnUpdateOverEncumbrance) == 0x000004, "Wrong alignment on VPairedPawn_OnUpdateOverEncumbrance");
static_assert(sizeof(VPairedPawn_OnUpdateOverEncumbrance) == 0x000014, "Wrong size on VPairedPawn_OnUpdateOverEncumbrance");
static_assert(offsetof(VPairedPawn_OnUpdateOverEncumbrance, ActorValue) == 0x000000, "Member 'VPairedPawn_OnUpdateOverEncumbrance::ActorValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnUpdateOverEncumbrance, PreviousBaseValue) == 0x000004, "Member 'VPairedPawn_OnUpdateOverEncumbrance::PreviousBaseValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnUpdateOverEncumbrance, PreviousModifiedValue) == 0x000008, "Member 'VPairedPawn_OnUpdateOverEncumbrance::PreviousModifiedValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnUpdateOverEncumbrance, NewBaseValue) == 0x00000C, "Member 'VPairedPawn_OnUpdateOverEncumbrance::NewBaseValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnUpdateOverEncumbrance, NewModifiedValue) == 0x000010, "Member 'VPairedPawn_OnUpdateOverEncumbrance::NewModifiedValue' has a wrong offset!");

// Function Altar.VPairedPawn.OnWaterWalkingValueChanged
// 0x0014 (0x0014 - 0x0000)
struct VPairedPawn_OnWaterWalkingValueChanged final
{
public:
	EVActorValues                                 ActorValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousBaseValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousModifiedValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewBaseValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewModifiedValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnWaterWalkingValueChanged) == 0x000004, "Wrong alignment on VPairedPawn_OnWaterWalkingValueChanged");
static_assert(sizeof(VPairedPawn_OnWaterWalkingValueChanged) == 0x000014, "Wrong size on VPairedPawn_OnWaterWalkingValueChanged");
static_assert(offsetof(VPairedPawn_OnWaterWalkingValueChanged, ActorValue) == 0x000000, "Member 'VPairedPawn_OnWaterWalkingValueChanged::ActorValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnWaterWalkingValueChanged, PreviousBaseValue) == 0x000004, "Member 'VPairedPawn_OnWaterWalkingValueChanged::PreviousBaseValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnWaterWalkingValueChanged, PreviousModifiedValue) == 0x000008, "Member 'VPairedPawn_OnWaterWalkingValueChanged::PreviousModifiedValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnWaterWalkingValueChanged, NewBaseValue) == 0x00000C, "Member 'VPairedPawn_OnWaterWalkingValueChanged::NewBaseValue' has a wrong offset!");
static_assert(offsetof(VPairedPawn_OnWaterWalkingValueChanged, NewModifiedValue) == 0x000010, "Member 'VPairedPawn_OnWaterWalkingValueChanged::NewModifiedValue' has a wrong offset!");

// Function Altar.VPairedPawn.OnWeaponChanged
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_OnWeaponChanged final
{
public:
	const class AVWeapon*                         WeaponForm;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnWeaponChanged) == 0x000008, "Wrong alignment on VPairedPawn_OnWeaponChanged");
static_assert(sizeof(VPairedPawn_OnWeaponChanged) == 0x000008, "Wrong size on VPairedPawn_OnWeaponChanged");
static_assert(offsetof(VPairedPawn_OnWeaponChanged, WeaponForm) == 0x000000, "Member 'VPairedPawn_OnWeaponChanged::WeaponForm' has a wrong offset!");

// Function Altar.VPairedPawn.RemoveGameplayTag
// 0x000C (0x000C - 0x0000)
struct VPairedPawn_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           TagToRemove;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildTags;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_RemoveGameplayTag) == 0x000004, "Wrong alignment on VPairedPawn_RemoveGameplayTag");
static_assert(sizeof(VPairedPawn_RemoveGameplayTag) == 0x00000C, "Wrong size on VPairedPawn_RemoveGameplayTag");
static_assert(offsetof(VPairedPawn_RemoveGameplayTag, TagToRemove) == 0x000000, "Member 'VPairedPawn_RemoveGameplayTag::TagToRemove' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RemoveGameplayTag, bIncludeChildTags) == 0x000008, "Member 'VPairedPawn_RemoveGameplayTag::bIncludeChildTags' has a wrong offset!");

// Function Altar.VPairedPawn.RemoveGameplayTags
// 0x0028 (0x0028 - 0x0000)
struct VPairedPawn_RemoveGameplayTags final
{
public:
	struct FGameplayTagContainer                  GameplayTagsToRemove;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildTags;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_RemoveGameplayTags) == 0x000008, "Wrong alignment on VPairedPawn_RemoveGameplayTags");
static_assert(sizeof(VPairedPawn_RemoveGameplayTags) == 0x000028, "Wrong size on VPairedPawn_RemoveGameplayTags");
static_assert(offsetof(VPairedPawn_RemoveGameplayTags, GameplayTagsToRemove) == 0x000000, "Member 'VPairedPawn_RemoveGameplayTags::GameplayTagsToRemove' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RemoveGameplayTags, bIncludeChildTags) == 0x000020, "Member 'VPairedPawn_RemoveGameplayTags::bIncludeChildTags' has a wrong offset!");

// Function Altar.VPairedPawn.RequestApplyKnockForce
// 0x0030 (0x0030 - 0x0000)
struct VPairedPawn_RequestApplyKnockForce final
{
public:
	struct FVPawnKnockdownRequest                 RequestData;                                       // 0x0000(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanSwitchToKnockdownState;                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_RequestApplyKnockForce) == 0x000008, "Wrong alignment on VPairedPawn_RequestApplyKnockForce");
static_assert(sizeof(VPairedPawn_RequestApplyKnockForce) == 0x000030, "Wrong size on VPairedPawn_RequestApplyKnockForce");
static_assert(offsetof(VPairedPawn_RequestApplyKnockForce, RequestData) == 0x000000, "Member 'VPairedPawn_RequestApplyKnockForce::RequestData' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RequestApplyKnockForce, bCanSwitchToKnockdownState) == 0x000028, "Member 'VPairedPawn_RequestApplyKnockForce::bCanSwitchToKnockdownState' has a wrong offset!");

// Function Altar.VPairedPawn.RequestFootstepActionToWwise
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_RequestFootstepActionToWwise final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_RequestFootstepActionToWwise) == 0x000004, "Wrong alignment on VPairedPawn_RequestFootstepActionToWwise");
static_assert(sizeof(VPairedPawn_RequestFootstepActionToWwise) == 0x000008, "Wrong size on VPairedPawn_RequestFootstepActionToWwise");
static_assert(offsetof(VPairedPawn_RequestFootstepActionToWwise, Action) == 0x000000, "Member 'VPairedPawn_RequestFootstepActionToWwise::Action' has a wrong offset!");

// Function Altar.VPairedPawn.RunPawnMeleeHitDetection
// 0x0068 (0x0068 - 0x0000)
struct VPairedPawn_RunPawnMeleeHitDetection final
{
public:
	struct FBox                                   LocalSpaceBaseHitbox;                              // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CenterOffset;                                      // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalAngleDegrees;                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalAngleDegrees;                           // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AVPairedPawn*>                   ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_RunPawnMeleeHitDetection) == 0x000008, "Wrong alignment on VPairedPawn_RunPawnMeleeHitDetection");
static_assert(sizeof(VPairedPawn_RunPawnMeleeHitDetection) == 0x000068, "Wrong size on VPairedPawn_RunPawnMeleeHitDetection");
static_assert(offsetof(VPairedPawn_RunPawnMeleeHitDetection, LocalSpaceBaseHitbox) == 0x000000, "Member 'VPairedPawn_RunPawnMeleeHitDetection::LocalSpaceBaseHitbox' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RunPawnMeleeHitDetection, CenterOffset) == 0x000038, "Member 'VPairedPawn_RunPawnMeleeHitDetection::CenterOffset' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RunPawnMeleeHitDetection, MaxHorizontalAngleDegrees) == 0x000050, "Member 'VPairedPawn_RunPawnMeleeHitDetection::MaxHorizontalAngleDegrees' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RunPawnMeleeHitDetection, MaxVerticalAngleDegrees) == 0x000054, "Member 'VPairedPawn_RunPawnMeleeHitDetection::MaxVerticalAngleDegrees' has a wrong offset!");
static_assert(offsetof(VPairedPawn_RunPawnMeleeHitDetection, ReturnValue) == 0x000058, "Member 'VPairedPawn_RunPawnMeleeHitDetection::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.SendAttack
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_SendAttack final
{
public:
	EVActionType                                  AttackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDuration;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendAttack) == 0x000004, "Wrong alignment on VPairedPawn_SendAttack");
static_assert(sizeof(VPairedPawn_SendAttack) == 0x000008, "Wrong size on VPairedPawn_SendAttack");
static_assert(offsetof(VPairedPawn_SendAttack, AttackType) == 0x000000, "Member 'VPairedPawn_SendAttack::AttackType' has a wrong offset!");
static_assert(offsetof(VPairedPawn_SendAttack, AttackDuration) == 0x000004, "Member 'VPairedPawn_SendAttack::AttackDuration' has a wrong offset!");

// Function Altar.VPairedPawn.SendBlock
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SendBlock final
{
public:
	bool                                          bIsBlocking;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendBlock) == 0x000001, "Wrong alignment on VPairedPawn_SendBlock");
static_assert(sizeof(VPairedPawn_SendBlock) == 0x000001, "Wrong size on VPairedPawn_SendBlock");
static_assert(offsetof(VPairedPawn_SendBlock, bIsBlocking) == 0x000000, "Member 'VPairedPawn_SendBlock::bIsBlocking' has a wrong offset!");

// Function Altar.VPairedPawn.SendBowAttack
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_SendBowAttack final
{
public:
	float                                         DrawDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSwimming;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_SendBowAttack) == 0x000004, "Wrong alignment on VPairedPawn_SendBowAttack");
static_assert(sizeof(VPairedPawn_SendBowAttack) == 0x000008, "Wrong size on VPairedPawn_SendBowAttack");
static_assert(offsetof(VPairedPawn_SendBowAttack, DrawDuration) == 0x000000, "Member 'VPairedPawn_SendBowAttack::DrawDuration' has a wrong offset!");
static_assert(offsetof(VPairedPawn_SendBowAttack, bIsSwimming) == 0x000004, "Member 'VPairedPawn_SendBowAttack::bIsSwimming' has a wrong offset!");

// Function Altar.VPairedPawn.SendDrawWeaponSwitch
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SendDrawWeaponSwitch final
{
public:
	bool                                          bShouldDrawWeapon;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendDrawWeaponSwitch) == 0x000001, "Wrong alignment on VPairedPawn_SendDrawWeaponSwitch");
static_assert(sizeof(VPairedPawn_SendDrawWeaponSwitch) == 0x000001, "Wrong size on VPairedPawn_SendDrawWeaponSwitch");
static_assert(offsetof(VPairedPawn_SendDrawWeaponSwitch, bShouldDrawWeapon) == 0x000000, "Member 'VPairedPawn_SendDrawWeaponSwitch::bShouldDrawWeapon' has a wrong offset!");

// Function Altar.VPairedPawn.SendKnockState
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SendKnockState final
{
public:
	bool                                          bIsKnockedOut;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendKnockState) == 0x000001, "Wrong alignment on VPairedPawn_SendKnockState");
static_assert(sizeof(VPairedPawn_SendKnockState) == 0x000001, "Wrong size on VPairedPawn_SendKnockState");
static_assert(offsetof(VPairedPawn_SendKnockState, bIsKnockedOut) == 0x000000, "Member 'VPairedPawn_SendKnockState::bIsKnockedOut' has a wrong offset!");

// Function Altar.VPairedPawn.SendMeleeHitOnPairedPawn
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_SendMeleeHitOnPairedPawn final
{
public:
	class AVPairedPawn*                           StruckPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPowerAttack;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SneakDamageMultiplier;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendMeleeHitOnPairedPawn) == 0x000008, "Wrong alignment on VPairedPawn_SendMeleeHitOnPairedPawn");
static_assert(sizeof(VPairedPawn_SendMeleeHitOnPairedPawn) == 0x000010, "Wrong size on VPairedPawn_SendMeleeHitOnPairedPawn");
static_assert(offsetof(VPairedPawn_SendMeleeHitOnPairedPawn, StruckPawn) == 0x000000, "Member 'VPairedPawn_SendMeleeHitOnPairedPawn::StruckPawn' has a wrong offset!");
static_assert(offsetof(VPairedPawn_SendMeleeHitOnPairedPawn, bIsPowerAttack) == 0x000008, "Member 'VPairedPawn_SendMeleeHitOnPairedPawn::bIsPowerAttack' has a wrong offset!");
static_assert(offsetof(VPairedPawn_SendMeleeHitOnPairedPawn, SneakDamageMultiplier) == 0x00000C, "Member 'VPairedPawn_SendMeleeHitOnPairedPawn::SneakDamageMultiplier' has a wrong offset!");

// Function Altar.VPairedPawn.SendShieldBashHitOnPairedPawn
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_SendShieldBashHitOnPairedPawn final
{
public:
	class AVPairedPawn*                           StruckPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendShieldBashHitOnPairedPawn) == 0x000008, "Wrong alignment on VPairedPawn_SendShieldBashHitOnPairedPawn");
static_assert(sizeof(VPairedPawn_SendShieldBashHitOnPairedPawn) == 0x000008, "Wrong size on VPairedPawn_SendShieldBashHitOnPairedPawn");
static_assert(offsetof(VPairedPawn_SendShieldBashHitOnPairedPawn, StruckPawn) == 0x000000, "Member 'VPairedPawn_SendShieldBashHitOnPairedPawn::StruckPawn' has a wrong offset!");

// Function Altar.VPairedPawn.SendSpellReleaseCast
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SendSpellReleaseCast final
{
public:
	bool                                          bIsStaffCast;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendSpellReleaseCast) == 0x000001, "Wrong alignment on VPairedPawn_SendSpellReleaseCast");
static_assert(sizeof(VPairedPawn_SendSpellReleaseCast) == 0x000001, "Wrong size on VPairedPawn_SendSpellReleaseCast");
static_assert(offsetof(VPairedPawn_SendSpellReleaseCast, bIsStaffCast) == 0x000000, "Member 'VPairedPawn_SendSpellReleaseCast::bIsStaffCast' has a wrong offset!");

// Function Altar.VPairedPawn.SetIsPlayerCharacter
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SetIsPlayerCharacter final
{
public:
	bool                                          NewIsPlayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SetIsPlayerCharacter) == 0x000001, "Wrong alignment on VPairedPawn_SetIsPlayerCharacter");
static_assert(sizeof(VPairedPawn_SetIsPlayerCharacter) == 0x000001, "Wrong size on VPairedPawn_SetIsPlayerCharacter");
static_assert(offsetof(VPairedPawn_SetIsPlayerCharacter, NewIsPlayer) == 0x000000, "Member 'VPairedPawn_SetIsPlayerCharacter::NewIsPlayer' has a wrong offset!");

// Function Altar.VPairedPawn.SetLifeState
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SetLifeState final
{
public:
	EVLifeState                                   NewLifeState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SetLifeState) == 0x000001, "Wrong alignment on VPairedPawn_SetLifeState");
static_assert(sizeof(VPairedPawn_SetLifeState) == 0x000001, "Wrong size on VPairedPawn_SetLifeState");
static_assert(offsetof(VPairedPawn_SetLifeState, NewLifeState) == 0x000000, "Member 'VPairedPawn_SetLifeState::NewLifeState' has a wrong offset!");

// Function Altar.VPairedPawn.SetOblivionAnimAction
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SetOblivionAnimAction final
{
public:
	EVAnimAction                                  AnimAction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SetOblivionAnimAction) == 0x000001, "Wrong alignment on VPairedPawn_SetOblivionAnimAction");
static_assert(sizeof(VPairedPawn_SetOblivionAnimAction) == 0x000001, "Wrong size on VPairedPawn_SetOblivionAnimAction");
static_assert(offsetof(VPairedPawn_SetOblivionAnimAction, AnimAction) == 0x000000, "Member 'VPairedPawn_SetOblivionAnimAction::AnimAction' has a wrong offset!");

// Function Altar.VPairedPawn.SetRagdollConstraints
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SetRagdollConstraints final
{
public:
	EVConstrainingMode                            PawnRagdollConstrainingMode;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SetRagdollConstraints) == 0x000001, "Wrong alignment on VPairedPawn_SetRagdollConstraints");
static_assert(sizeof(VPairedPawn_SetRagdollConstraints) == 0x000001, "Wrong size on VPairedPawn_SetRagdollConstraints");
static_assert(offsetof(VPairedPawn_SetRagdollConstraints, PawnRagdollConstrainingMode) == 0x000000, "Member 'VPairedPawn_SetRagdollConstraints::PawnRagdollConstrainingMode' has a wrong offset!");

// Function Altar.VPairedPawn.SetSneak
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SetSneak final
{
public:
	bool                                          bShouldSneak;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SetSneak) == 0x000001, "Wrong alignment on VPairedPawn_SetSneak");
static_assert(sizeof(VPairedPawn_SetSneak) == 0x000001, "Wrong size on VPairedPawn_SetSneak");
static_assert(offsetof(VPairedPawn_SetSneak, bShouldSneak) == 0x000000, "Member 'VPairedPawn_SetSneak::bShouldSneak' has a wrong offset!");

// Function Altar.VPairedPawn.SetStickyCollisionStateEnabled
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SetStickyCollisionStateEnabled final
{
public:
	bool                                          bEnableStickyCollision;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SetStickyCollisionStateEnabled) == 0x000001, "Wrong alignment on VPairedPawn_SetStickyCollisionStateEnabled");
static_assert(sizeof(VPairedPawn_SetStickyCollisionStateEnabled) == 0x000001, "Wrong size on VPairedPawn_SetStickyCollisionStateEnabled");
static_assert(offsetof(VPairedPawn_SetStickyCollisionStateEnabled, bEnableStickyCollision) == 0x000000, "Member 'VPairedPawn_SetStickyCollisionStateEnabled::bEnableStickyCollision' has a wrong offset!");

// Function Altar.VPairedPawn.ShowEntityDetailsWidget
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_ShowEntityDetailsWidget final
{
public:
	int32                                         DebugIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_ShowEntityDetailsWidget) == 0x000004, "Wrong alignment on VPairedPawn_ShowEntityDetailsWidget");
static_assert(sizeof(VPairedPawn_ShowEntityDetailsWidget) == 0x000004, "Wrong size on VPairedPawn_ShowEntityDetailsWidget");
static_assert(offsetof(VPairedPawn_ShowEntityDetailsWidget, DebugIndex) == 0x000000, "Member 'VPairedPawn_ShowEntityDetailsWidget::DebugIndex' has a wrong offset!");

// Function Altar.VPairedPawn.CanBlink
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_CanBlink final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_CanBlink) == 0x000001, "Wrong alignment on VPairedPawn_CanBlink");
static_assert(sizeof(VPairedPawn_CanBlink) == 0x000001, "Wrong size on VPairedPawn_CanBlink");
static_assert(offsetof(VPairedPawn_CanBlink, ReturnValue) == 0x000000, "Member 'VPairedPawn_CanBlink::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.CanFly
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_CanFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_CanFly) == 0x000001, "Wrong alignment on VPairedPawn_CanFly");
static_assert(sizeof(VPairedPawn_CanFly) == 0x000001, "Wrong size on VPairedPawn_CanFly");
static_assert(offsetof(VPairedPawn_CanFly, ReturnValue) == 0x000000, "Member 'VPairedPawn_CanFly::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.CanOnlySwim
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_CanOnlySwim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_CanOnlySwim) == 0x000001, "Wrong alignment on VPairedPawn_CanOnlySwim");
static_assert(sizeof(VPairedPawn_CanOnlySwim) == 0x000001, "Wrong size on VPairedPawn_CanOnlySwim");
static_assert(offsetof(VPairedPawn_CanOnlySwim, ReturnValue) == 0x000000, "Member 'VPairedPawn_CanOnlySwim::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.CanSwim
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_CanSwim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_CanSwim) == 0x000001, "Wrong alignment on VPairedPawn_CanSwim");
static_assert(sizeof(VPairedPawn_CanSwim) == 0x000001, "Wrong size on VPairedPawn_CanSwim");
static_assert(offsetof(VPairedPawn_CanSwim, ReturnValue) == 0x000000, "Member 'VPairedPawn_CanSwim::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.CanUseAimOffset
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_CanUseAimOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_CanUseAimOffset) == 0x000001, "Wrong alignment on VPairedPawn_CanUseAimOffset");
static_assert(sizeof(VPairedPawn_CanUseAimOffset) == 0x000001, "Wrong size on VPairedPawn_CanUseAimOffset");
static_assert(offsetof(VPairedPawn_CanUseAimOffset, ReturnValue) == 0x000000, "Member 'VPairedPawn_CanUseAimOffset::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.FindFirstGameplayTagMatching
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_FindFirstGameplayTagMatching final
{
public:
	struct FGameplayTag                           TagToMatch;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_FindFirstGameplayTagMatching) == 0x000004, "Wrong alignment on VPairedPawn_FindFirstGameplayTagMatching");
static_assert(sizeof(VPairedPawn_FindFirstGameplayTagMatching) == 0x000010, "Wrong size on VPairedPawn_FindFirstGameplayTagMatching");
static_assert(offsetof(VPairedPawn_FindFirstGameplayTagMatching, TagToMatch) == 0x000000, "Member 'VPairedPawn_FindFirstGameplayTagMatching::TagToMatch' has a wrong offset!");
static_assert(offsetof(VPairedPawn_FindFirstGameplayTagMatching, ReturnValue) == 0x000008, "Member 'VPairedPawn_FindFirstGameplayTagMatching::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetActorBlinkDelayMax
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_GetActorBlinkDelayMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetActorBlinkDelayMax) == 0x000004, "Wrong alignment on VPairedPawn_GetActorBlinkDelayMax");
static_assert(sizeof(VPairedPawn_GetActorBlinkDelayMax) == 0x000004, "Wrong size on VPairedPawn_GetActorBlinkDelayMax");
static_assert(offsetof(VPairedPawn_GetActorBlinkDelayMax, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetActorBlinkDelayMax::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetActorBlinkDelayMin
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_GetActorBlinkDelayMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetActorBlinkDelayMin) == 0x000004, "Wrong alignment on VPairedPawn_GetActorBlinkDelayMin");
static_assert(sizeof(VPairedPawn_GetActorBlinkDelayMin) == 0x000004, "Wrong size on VPairedPawn_GetActorBlinkDelayMin");
static_assert(offsetof(VPairedPawn_GetActorBlinkDelayMin, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetActorBlinkDelayMin::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetActorBlinkDuration
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_GetActorBlinkDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetActorBlinkDuration) == 0x000004, "Wrong alignment on VPairedPawn_GetActorBlinkDuration");
static_assert(sizeof(VPairedPawn_GetActorBlinkDuration) == 0x000004, "Wrong size on VPairedPawn_GetActorBlinkDuration");
static_assert(offsetof(VPairedPawn_GetActorBlinkDuration, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetActorBlinkDuration::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetAimingStartPosition
// 0x0018 (0x0018 - 0x0000)
struct VPairedPawn_GetAimingStartPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetAimingStartPosition) == 0x000008, "Wrong alignment on VPairedPawn_GetAimingStartPosition");
static_assert(sizeof(VPairedPawn_GetAimingStartPosition) == 0x000018, "Wrong size on VPairedPawn_GetAimingStartPosition");
static_assert(offsetof(VPairedPawn_GetAimingStartPosition, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetAimingStartPosition::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetAliveProfileName
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_GetAliveProfileName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetAliveProfileName) == 0x000004, "Wrong alignment on VPairedPawn_GetAliveProfileName");
static_assert(sizeof(VPairedPawn_GetAliveProfileName) == 0x000008, "Wrong size on VPairedPawn_GetAliveProfileName");
static_assert(offsetof(VPairedPawn_GetAliveProfileName, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetAliveProfileName::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetAllBufferedInputTags
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_GetAllBufferedInputTags final
{
public:
	TArray<struct FVBufferedInputTag>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetAllBufferedInputTags) == 0x000008, "Wrong alignment on VPairedPawn_GetAllBufferedInputTags");
static_assert(sizeof(VPairedPawn_GetAllBufferedInputTags) == 0x000010, "Wrong size on VPairedPawn_GetAllBufferedInputTags");
static_assert(offsetof(VPairedPawn_GetAllBufferedInputTags, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetAllBufferedInputTags::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetAllVisibleMeshComponents
// 0x0018 (0x0018 - 0x0000)
struct VPairedPawn_GetAllVisibleMeshComponents final
{
public:
	bool                                          bNeedToBeVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetAllVisibleMeshComponents) == 0x000008, "Wrong alignment on VPairedPawn_GetAllVisibleMeshComponents");
static_assert(sizeof(VPairedPawn_GetAllVisibleMeshComponents) == 0x000018, "Wrong size on VPairedPawn_GetAllVisibleMeshComponents");
static_assert(offsetof(VPairedPawn_GetAllVisibleMeshComponents, bNeedToBeVisible) == 0x000000, "Member 'VPairedPawn_GetAllVisibleMeshComponents::bNeedToBeVisible' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetAllVisibleMeshComponents, ReturnValue) == 0x000008, "Member 'VPairedPawn_GetAllVisibleMeshComponents::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetBaseSneakDamageMultiplierForCurrentWeapon
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon) == 0x000004, "Wrong alignment on VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon");
static_assert(sizeof(VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon) == 0x000004, "Wrong size on VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon");
static_assert(offsetof(VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetBaseSneakDamageMultiplierForCurrentWeapon::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetBodyMesh
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_GetBodyMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetBodyMesh) == 0x000008, "Wrong alignment on VPairedPawn_GetBodyMesh");
static_assert(sizeof(VPairedPawn_GetBodyMesh) == 0x000008, "Wrong size on VPairedPawn_GetBodyMesh");
static_assert(offsetof(VPairedPawn_GetBodyMesh, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetBodyMesh::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetCombatAimingDirectionVector
// 0x0018 (0x0018 - 0x0000)
struct VPairedPawn_GetCombatAimingDirectionVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetCombatAimingDirectionVector) == 0x000008, "Wrong alignment on VPairedPawn_GetCombatAimingDirectionVector");
static_assert(sizeof(VPairedPawn_GetCombatAimingDirectionVector) == 0x000018, "Wrong size on VPairedPawn_GetCombatAimingDirectionVector");
static_assert(offsetof(VPairedPawn_GetCombatAimingDirectionVector, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetCombatAimingDirectionVector::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetCurrentPhysicsAsset
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_GetCurrentPhysicsAsset final
{
public:
	class UPhysicsAsset*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetCurrentPhysicsAsset) == 0x000008, "Wrong alignment on VPairedPawn_GetCurrentPhysicsAsset");
static_assert(sizeof(VPairedPawn_GetCurrentPhysicsAsset) == 0x000008, "Wrong size on VPairedPawn_GetCurrentPhysicsAsset");
static_assert(offsetof(VPairedPawn_GetCurrentPhysicsAsset, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetCurrentPhysicsAsset::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetCurrentProcedureType
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_GetCurrentProcedureType final
{
public:
	EVOblivionAIProcedureType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetCurrentProcedureType) == 0x000001, "Wrong alignment on VPairedPawn_GetCurrentProcedureType");
static_assert(sizeof(VPairedPawn_GetCurrentProcedureType) == 0x000001, "Wrong size on VPairedPawn_GetCurrentProcedureType");
static_assert(offsetof(VPairedPawn_GetCurrentProcedureType, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetCurrentProcedureType::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetEquippedWeaponSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawn_GetEquippedWeaponSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetEquippedWeaponSpeed) == 0x000004, "Wrong alignment on VPairedPawn_GetEquippedWeaponSpeed");
static_assert(sizeof(VPairedPawn_GetEquippedWeaponSpeed) == 0x000004, "Wrong size on VPairedPawn_GetEquippedWeaponSpeed");
static_assert(offsetof(VPairedPawn_GetEquippedWeaponSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetEquippedWeaponSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetInteractionAimingDirectionVector
// 0x0018 (0x0018 - 0x0000)
struct VPairedPawn_GetInteractionAimingDirectionVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetInteractionAimingDirectionVector) == 0x000008, "Wrong alignment on VPairedPawn_GetInteractionAimingDirectionVector");
static_assert(sizeof(VPairedPawn_GetInteractionAimingDirectionVector) == 0x000018, "Wrong size on VPairedPawn_GetInteractionAimingDirectionVector");
static_assert(offsetof(VPairedPawn_GetInteractionAimingDirectionVector, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetInteractionAimingDirectionVector::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetIsStickyCollisionStateEnable
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_GetIsStickyCollisionStateEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetIsStickyCollisionStateEnable) == 0x000001, "Wrong alignment on VPairedPawn_GetIsStickyCollisionStateEnable");
static_assert(sizeof(VPairedPawn_GetIsStickyCollisionStateEnable) == 0x000001, "Wrong size on VPairedPawn_GetIsStickyCollisionStateEnable");
static_assert(offsetof(VPairedPawn_GetIsStickyCollisionStateEnable, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetIsStickyCollisionStateEnable::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetLastFakeRootUpdateVelocity
// 0x0018 (0x0018 - 0x0000)
struct VPairedPawn_GetLastFakeRootUpdateVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetLastFakeRootUpdateVelocity) == 0x000008, "Wrong alignment on VPairedPawn_GetLastFakeRootUpdateVelocity");
static_assert(sizeof(VPairedPawn_GetLastFakeRootUpdateVelocity) == 0x000018, "Wrong size on VPairedPawn_GetLastFakeRootUpdateVelocity");
static_assert(offsetof(VPairedPawn_GetLastFakeRootUpdateVelocity, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetLastFakeRootUpdateVelocity::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetLifeState
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_GetLifeState final
{
public:
	EVLifeState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetLifeState) == 0x000001, "Wrong alignment on VPairedPawn_GetLifeState");
static_assert(sizeof(VPairedPawn_GetLifeState) == 0x000001, "Wrong size on VPairedPawn_GetLifeState");
static_assert(offsetof(VPairedPawn_GetLifeState, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetLifeState::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetMeleeHitboxFromBase
// 0x00A0 (0x00A0 - 0x0000)
struct VPairedPawn_GetMeleeHitboxFromBase final
{
public:
	struct FBox                                   LocalSpaceBaseHitbox;                              // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StartPointOffset;                                  // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitboxCenter;                                   // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitboxHalfExtent;                               // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  OutHitboxQuat;                                     // 0x0080(0x0020)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetMeleeHitboxFromBase) == 0x000010, "Wrong alignment on VPairedPawn_GetMeleeHitboxFromBase");
static_assert(sizeof(VPairedPawn_GetMeleeHitboxFromBase) == 0x0000A0, "Wrong size on VPairedPawn_GetMeleeHitboxFromBase");
static_assert(offsetof(VPairedPawn_GetMeleeHitboxFromBase, LocalSpaceBaseHitbox) == 0x000000, "Member 'VPairedPawn_GetMeleeHitboxFromBase::LocalSpaceBaseHitbox' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetMeleeHitboxFromBase, StartPointOffset) == 0x000038, "Member 'VPairedPawn_GetMeleeHitboxFromBase::StartPointOffset' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetMeleeHitboxFromBase, OutHitboxCenter) == 0x000050, "Member 'VPairedPawn_GetMeleeHitboxFromBase::OutHitboxCenter' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetMeleeHitboxFromBase, OutHitboxHalfExtent) == 0x000068, "Member 'VPairedPawn_GetMeleeHitboxFromBase::OutHitboxHalfExtent' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetMeleeHitboxFromBase, OutHitboxQuat) == 0x000080, "Member 'VPairedPawn_GetMeleeHitboxFromBase::OutHitboxQuat' has a wrong offset!");

// Function Altar.VPairedPawn.GetOblivionAnimAction
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_GetOblivionAnimAction final
{
public:
	EVAnimAction                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetOblivionAnimAction) == 0x000001, "Wrong alignment on VPairedPawn_GetOblivionAnimAction");
static_assert(sizeof(VPairedPawn_GetOblivionAnimAction) == 0x000001, "Wrong size on VPairedPawn_GetOblivionAnimAction");
static_assert(offsetof(VPairedPawn_GetOblivionAnimAction, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetOblivionAnimAction::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetProjectileDirectionVector
// 0x0030 (0x0030 - 0x0000)
struct VPairedPawn_GetProjectileDirectionVector final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetProjectileDirectionVector) == 0x000008, "Wrong alignment on VPairedPawn_GetProjectileDirectionVector");
static_assert(sizeof(VPairedPawn_GetProjectileDirectionVector) == 0x000030, "Wrong size on VPairedPawn_GetProjectileDirectionVector");
static_assert(offsetof(VPairedPawn_GetProjectileDirectionVector, SpawnLocation) == 0x000000, "Member 'VPairedPawn_GetProjectileDirectionVector::SpawnLocation' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetProjectileDirectionVector, ReturnValue) == 0x000018, "Member 'VPairedPawn_GetProjectileDirectionVector::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetSpellProjectileSpawnLocation
// 0x0020 (0x0020 - 0x0000)
struct VPairedPawn_GetSpellProjectileSpawnLocation final
{
public:
	class FName                                   CastingSocketName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetSpellProjectileSpawnLocation) == 0x000008, "Wrong alignment on VPairedPawn_GetSpellProjectileSpawnLocation");
static_assert(sizeof(VPairedPawn_GetSpellProjectileSpawnLocation) == 0x000020, "Wrong size on VPairedPawn_GetSpellProjectileSpawnLocation");
static_assert(offsetof(VPairedPawn_GetSpellProjectileSpawnLocation, CastingSocketName) == 0x000000, "Member 'VPairedPawn_GetSpellProjectileSpawnLocation::CastingSocketName' has a wrong offset!");
static_assert(offsetof(VPairedPawn_GetSpellProjectileSpawnLocation, ReturnValue) == 0x000008, "Member 'VPairedPawn_GetSpellProjectileSpawnLocation::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.GetUnconsciousProfileName
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawn_GetUnconsciousProfileName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_GetUnconsciousProfileName) == 0x000004, "Wrong alignment on VPairedPawn_GetUnconsciousProfileName");
static_assert(sizeof(VPairedPawn_GetUnconsciousProfileName) == 0x000008, "Wrong size on VPairedPawn_GetUnconsciousProfileName");
static_assert(offsetof(VPairedPawn_GetUnconsciousProfileName, ReturnValue) == 0x000000, "Member 'VPairedPawn_GetUnconsciousProfileName::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.HasAllGameplayTags
// 0x0028 (0x0028 - 0x0000)
struct VPairedPawn_HasAllGameplayTags final
{
public:
	struct FGameplayTagContainer                  CheckTags;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_HasAllGameplayTags) == 0x000008, "Wrong alignment on VPairedPawn_HasAllGameplayTags");
static_assert(sizeof(VPairedPawn_HasAllGameplayTags) == 0x000028, "Wrong size on VPairedPawn_HasAllGameplayTags");
static_assert(offsetof(VPairedPawn_HasAllGameplayTags, CheckTags) == 0x000000, "Member 'VPairedPawn_HasAllGameplayTags::CheckTags' has a wrong offset!");
static_assert(offsetof(VPairedPawn_HasAllGameplayTags, ReturnValue) == 0x000020, "Member 'VPairedPawn_HasAllGameplayTags::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.HasAnyGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct VPairedPawn_HasAnyGameplayTag final
{
public:
	struct FGameplayTagContainer                  CheckTags;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_HasAnyGameplayTag) == 0x000008, "Wrong alignment on VPairedPawn_HasAnyGameplayTag");
static_assert(sizeof(VPairedPawn_HasAnyGameplayTag) == 0x000028, "Wrong size on VPairedPawn_HasAnyGameplayTag");
static_assert(offsetof(VPairedPawn_HasAnyGameplayTag, CheckTags) == 0x000000, "Member 'VPairedPawn_HasAnyGameplayTag::CheckTags' has a wrong offset!");
static_assert(offsetof(VPairedPawn_HasAnyGameplayTag, ReturnValue) == 0x000020, "Member 'VPairedPawn_HasAnyGameplayTag::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.HasGameplayTag
// 0x000C (0x000C - 0x0000)
struct VPairedPawn_HasGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_HasGameplayTag) == 0x000004, "Wrong alignment on VPairedPawn_HasGameplayTag");
static_assert(sizeof(VPairedPawn_HasGameplayTag) == 0x00000C, "Wrong size on VPairedPawn_HasGameplayTag");
static_assert(offsetof(VPairedPawn_HasGameplayTag, Tag) == 0x000000, "Member 'VPairedPawn_HasGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(VPairedPawn_HasGameplayTag, ReturnValue) == 0x000008, "Member 'VPairedPawn_HasGameplayTag::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.HasValidLookAtPoint
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_HasValidLookAtPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_HasValidLookAtPoint) == 0x000001, "Wrong alignment on VPairedPawn_HasValidLookAtPoint");
static_assert(sizeof(VPairedPawn_HasValidLookAtPoint) == 0x000001, "Wrong size on VPairedPawn_HasValidLookAtPoint");
static_assert(offsetof(VPairedPawn_HasValidLookAtPoint, ReturnValue) == 0x000000, "Member 'VPairedPawn_HasValidLookAtPoint::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsAliveFromResurrection
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsAliveFromResurrection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsAliveFromResurrection) == 0x000001, "Wrong alignment on VPairedPawn_IsAliveFromResurrection");
static_assert(sizeof(VPairedPawn_IsAliveFromResurrection) == 0x000001, "Wrong size on VPairedPawn_IsAliveFromResurrection");
static_assert(offsetof(VPairedPawn_IsAliveFromResurrection, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsAliveFromResurrection::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsAliveFromSpawn
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsAliveFromSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsAliveFromSpawn) == 0x000001, "Wrong alignment on VPairedPawn_IsAliveFromSpawn");
static_assert(sizeof(VPairedPawn_IsAliveFromSpawn) == 0x000001, "Wrong size on VPairedPawn_IsAliveFromSpawn");
static_assert(offsetof(VPairedPawn_IsAliveFromSpawn, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsAliveFromSpawn::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsAliveFromUnconscious
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsAliveFromUnconscious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsAliveFromUnconscious) == 0x000001, "Wrong alignment on VPairedPawn_IsAliveFromUnconscious");
static_assert(sizeof(VPairedPawn_IsAliveFromUnconscious) == 0x000001, "Wrong size on VPairedPawn_IsAliveFromUnconscious");
static_assert(offsetof(VPairedPawn_IsAliveFromUnconscious, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsAliveFromUnconscious::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsAttacking) == 0x000001, "Wrong alignment on VPairedPawn_IsAttacking");
static_assert(sizeof(VPairedPawn_IsAttacking) == 0x000001, "Wrong size on VPairedPawn_IsAttacking");
static_assert(offsetof(VPairedPawn_IsAttacking, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsAttacking::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsDead
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsDead) == 0x000001, "Wrong alignment on VPairedPawn_IsDead");
static_assert(sizeof(VPairedPawn_IsDead) == 0x000001, "Wrong size on VPairedPawn_IsDead");
static_assert(offsetof(VPairedPawn_IsDead, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsDead::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsDeadFromKilled
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsDeadFromKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsDeadFromKilled) == 0x000001, "Wrong alignment on VPairedPawn_IsDeadFromKilled");
static_assert(sizeof(VPairedPawn_IsDeadFromKilled) == 0x000001, "Wrong size on VPairedPawn_IsDeadFromKilled");
static_assert(offsetof(VPairedPawn_IsDeadFromKilled, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsDeadFromKilled::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsDeadFromSpawn
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsDeadFromSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsDeadFromSpawn) == 0x000001, "Wrong alignment on VPairedPawn_IsDeadFromSpawn");
static_assert(sizeof(VPairedPawn_IsDeadFromSpawn) == 0x000001, "Wrong size on VPairedPawn_IsDeadFromSpawn");
static_assert(offsetof(VPairedPawn_IsDeadFromSpawn, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsDeadFromSpawn::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsHorse
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsHorse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsHorse) == 0x000001, "Wrong alignment on VPairedPawn_IsHorse");
static_assert(sizeof(VPairedPawn_IsHorse) == 0x000001, "Wrong size on VPairedPawn_IsHorse");
static_assert(offsetof(VPairedPawn_IsHorse, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsHorse::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsMeleeObstructed
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawn_IsMeleeObstructed final
{
public:
	const class AVPairedPawn*                     Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_IsMeleeObstructed) == 0x000008, "Wrong alignment on VPairedPawn_IsMeleeObstructed");
static_assert(sizeof(VPairedPawn_IsMeleeObstructed) == 0x000010, "Wrong size on VPairedPawn_IsMeleeObstructed");
static_assert(offsetof(VPairedPawn_IsMeleeObstructed, Target) == 0x000000, "Member 'VPairedPawn_IsMeleeObstructed::Target' has a wrong offset!");
static_assert(offsetof(VPairedPawn_IsMeleeObstructed, ReturnValue) == 0x000008, "Member 'VPairedPawn_IsMeleeObstructed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsOverEncumbered
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsOverEncumbered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsOverEncumbered) == 0x000001, "Wrong alignment on VPairedPawn_IsOverEncumbered");
static_assert(sizeof(VPairedPawn_IsOverEncumbered) == 0x000001, "Wrong size on VPairedPawn_IsOverEncumbered");
static_assert(offsetof(VPairedPawn_IsOverEncumbered, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsOverEncumbered::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsPlayerCharacter
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsPlayerCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsPlayerCharacter) == 0x000001, "Wrong alignment on VPairedPawn_IsPlayerCharacter");
static_assert(sizeof(VPairedPawn_IsPlayerCharacter) == 0x000001, "Wrong size on VPairedPawn_IsPlayerCharacter");
static_assert(offsetof(VPairedPawn_IsPlayerCharacter, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsPlayerCharacter::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsPlayingAnimatedAction
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsPlayingAnimatedAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsPlayingAnimatedAction) == 0x000001, "Wrong alignment on VPairedPawn_IsPlayingAnimatedAction");
static_assert(sizeof(VPairedPawn_IsPlayingAnimatedAction) == 0x000001, "Wrong size on VPairedPawn_IsPlayingAnimatedAction");
static_assert(offsetof(VPairedPawn_IsPlayingAnimatedAction, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsPlayingAnimatedAction::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsRagdolling
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsRagdolling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsRagdolling) == 0x000001, "Wrong alignment on VPairedPawn_IsRagdolling");
static_assert(sizeof(VPairedPawn_IsRagdolling) == 0x000001, "Wrong size on VPairedPawn_IsRagdolling");
static_assert(offsetof(VPairedPawn_IsRagdolling, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsRagdolling::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsUnconscious
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsUnconscious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsUnconscious) == 0x000001, "Wrong alignment on VPairedPawn_IsUnconscious");
static_assert(sizeof(VPairedPawn_IsUnconscious) == 0x000001, "Wrong size on VPairedPawn_IsUnconscious");
static_assert(offsetof(VPairedPawn_IsUnconscious, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsUnconscious::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsUnderStatusEffect
// 0x000C (0x000C - 0x0000)
struct VPairedPawn_IsUnderStatusEffect final
{
public:
	class FName                                   StatusEffectName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawn_IsUnderStatusEffect) == 0x000004, "Wrong alignment on VPairedPawn_IsUnderStatusEffect");
static_assert(sizeof(VPairedPawn_IsUnderStatusEffect) == 0x00000C, "Wrong size on VPairedPawn_IsUnderStatusEffect");
static_assert(offsetof(VPairedPawn_IsUnderStatusEffect, StatusEffectName) == 0x000000, "Member 'VPairedPawn_IsUnderStatusEffect::StatusEffectName' has a wrong offset!");
static_assert(offsetof(VPairedPawn_IsUnderStatusEffect, ReturnValue) == 0x000008, "Member 'VPairedPawn_IsUnderStatusEffect::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsWeaponDrawn
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsWeaponDrawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsWeaponDrawn) == 0x000001, "Wrong alignment on VPairedPawn_IsWeaponDrawn");
static_assert(sizeof(VPairedPawn_IsWeaponDrawn) == 0x000001, "Wrong size on VPairedPawn_IsWeaponDrawn");
static_assert(offsetof(VPairedPawn_IsWeaponDrawn, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsWeaponDrawn::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.IsWeaponEquipped
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_IsWeaponEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_IsWeaponEquipped) == 0x000001, "Wrong alignment on VPairedPawn_IsWeaponEquipped");
static_assert(sizeof(VPairedPawn_IsWeaponEquipped) == 0x000001, "Wrong size on VPairedPawn_IsWeaponEquipped");
static_assert(offsetof(VPairedPawn_IsWeaponEquipped, ReturnValue) == 0x000000, "Member 'VPairedPawn_IsWeaponEquipped::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawn.OnChangeActionState
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_OnChangeActionState final
{
public:
	EVActionType                                  ActionState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_OnChangeActionState) == 0x000001, "Wrong alignment on VPairedPawn_OnChangeActionState");
static_assert(sizeof(VPairedPawn_OnChangeActionState) == 0x000001, "Wrong size on VPairedPawn_OnChangeActionState");
static_assert(offsetof(VPairedPawn_OnChangeActionState, ActionState) == 0x000000, "Member 'VPairedPawn_OnChangeActionState::ActionState' has a wrong offset!");

// Function Altar.VPairedPawn.SendPuppetAnimAction
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawn_SendPuppetAnimAction final
{
public:
	EVAnimAction                                  AnimationAction;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendPuppetAnimAction) == 0x000001, "Wrong alignment on VPairedPawn_SendPuppetAnimAction");
static_assert(sizeof(VPairedPawn_SendPuppetAnimAction) == 0x000001, "Wrong size on VPairedPawn_SendPuppetAnimAction");
static_assert(offsetof(VPairedPawn_SendPuppetAnimAction, AnimationAction) == 0x000000, "Member 'VPairedPawn_SendPuppetAnimAction::AnimationAction' has a wrong offset!");

// Function Altar.VPairedPawn.SendPuppetAnimGroup
// 0x0003 (0x0003 - 0x0000)
struct VPairedPawn_SendPuppetAnimGroup final
{
public:
	EVAnimGroupSection                            Section;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAnimGroupAction                             Action;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAnimGroup                                   AnimGroup;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawn_SendPuppetAnimGroup) == 0x000001, "Wrong alignment on VPairedPawn_SendPuppetAnimGroup");
static_assert(sizeof(VPairedPawn_SendPuppetAnimGroup) == 0x000003, "Wrong size on VPairedPawn_SendPuppetAnimGroup");
static_assert(offsetof(VPairedPawn_SendPuppetAnimGroup, Section) == 0x000000, "Member 'VPairedPawn_SendPuppetAnimGroup::Section' has a wrong offset!");
static_assert(offsetof(VPairedPawn_SendPuppetAnimGroup, Action) == 0x000001, "Member 'VPairedPawn_SendPuppetAnimGroup::Action' has a wrong offset!");
static_assert(offsetof(VPairedPawn_SendPuppetAnimGroup, AnimGroup) == 0x000002, "Member 'VPairedPawn_SendPuppetAnimGroup::AnimGroup' has a wrong offset!");

// Function Altar.VViewModelBase.GetGamertagText
// 0x0018 (0x0018 - 0x0000)
struct VViewModelBase_GetGamertagText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VViewModelBase_GetGamertagText) == 0x000008, "Wrong alignment on VViewModelBase_GetGamertagText");
static_assert(sizeof(VViewModelBase_GetGamertagText) == 0x000018, "Wrong size on VViewModelBase_GetGamertagText");
static_assert(offsetof(VViewModelBase_GetGamertagText, ReturnValue) == 0x000000, "Member 'VViewModelBase_GetGamertagText::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.ApplyBodyPartPropertiesToChildActor
// 0x0030 (0x0030 - 0x0000)
struct VPairedCharacter_ApplyBodyPartPropertiesToChildActor final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCharacterBodyPartProperties          Properties;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_ApplyBodyPartPropertiesToChildActor) == 0x000008, "Wrong alignment on VPairedCharacter_ApplyBodyPartPropertiesToChildActor");
static_assert(sizeof(VPairedCharacter_ApplyBodyPartPropertiesToChildActor) == 0x000030, "Wrong size on VPairedCharacter_ApplyBodyPartPropertiesToChildActor");
static_assert(offsetof(VPairedCharacter_ApplyBodyPartPropertiesToChildActor, Slot) == 0x000000, "Member 'VPairedCharacter_ApplyBodyPartPropertiesToChildActor::Slot' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_ApplyBodyPartPropertiesToChildActor, Properties) == 0x000008, "Member 'VPairedCharacter_ApplyBodyPartPropertiesToChildActor::Properties' has a wrong offset!");

// Function Altar.VPairedCharacter.FinishDockingToRequestedDockActor
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_FinishDockingToRequestedDockActor final
{
public:
	bool                                          bSnapTransform;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_FinishDockingToRequestedDockActor) == 0x000001, "Wrong alignment on VPairedCharacter_FinishDockingToRequestedDockActor");
static_assert(sizeof(VPairedCharacter_FinishDockingToRequestedDockActor) == 0x000001, "Wrong size on VPairedCharacter_FinishDockingToRequestedDockActor");
static_assert(offsetof(VPairedCharacter_FinishDockingToRequestedDockActor, bSnapTransform) == 0x000000, "Member 'VPairedCharacter_FinishDockingToRequestedDockActor::bSnapTransform' has a wrong offset!");

// Function Altar.VPairedCharacter.InitializeAppearanceFromForm
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_InitializeAppearanceFromForm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_InitializeAppearanceFromForm) == 0x000001, "Wrong alignment on VPairedCharacter_InitializeAppearanceFromForm");
static_assert(sizeof(VPairedCharacter_InitializeAppearanceFromForm) == 0x000001, "Wrong size on VPairedCharacter_InitializeAppearanceFromForm");
static_assert(offsetof(VPairedCharacter_InitializeAppearanceFromForm, ReturnValue) == 0x000000, "Member 'VPairedCharacter_InitializeAppearanceFromForm::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.OnBodyPartPropertiesChanged
// 0x0030 (0x0030 - 0x0000)
struct VPairedCharacter_OnBodyPartPropertiesChanged final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCharacterBodyPartProperties          Properties;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_OnBodyPartPropertiesChanged) == 0x000008, "Wrong alignment on VPairedCharacter_OnBodyPartPropertiesChanged");
static_assert(sizeof(VPairedCharacter_OnBodyPartPropertiesChanged) == 0x000030, "Wrong size on VPairedCharacter_OnBodyPartPropertiesChanged");
static_assert(offsetof(VPairedCharacter_OnBodyPartPropertiesChanged, Slot) == 0x000000, "Member 'VPairedCharacter_OnBodyPartPropertiesChanged::Slot' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_OnBodyPartPropertiesChanged, Properties) == 0x000008, "Member 'VPairedCharacter_OnBodyPartPropertiesChanged::Properties' has a wrong offset!");

// Function Altar.VPairedCharacter.OnFacialAnimationMontageDone
// 0x0010 (0x0010 - 0x0000)
struct VPairedCharacter_OnFacialAnimationMontageDone final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedCharacter_OnFacialAnimationMontageDone) == 0x000008, "Wrong alignment on VPairedCharacter_OnFacialAnimationMontageDone");
static_assert(sizeof(VPairedCharacter_OnFacialAnimationMontageDone) == 0x000010, "Wrong size on VPairedCharacter_OnFacialAnimationMontageDone");
static_assert(offsetof(VPairedCharacter_OnFacialAnimationMontageDone, Montage) == 0x000000, "Member 'VPairedCharacter_OnFacialAnimationMontageDone::Montage' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_OnFacialAnimationMontageDone, bInterrupted) == 0x000008, "Member 'VPairedCharacter_OnFacialAnimationMontageDone::bInterrupted' has a wrong offset!");

// Function Altar.VPairedCharacter.OnWeaponDrawnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_OnWeaponDrawnStateChanged final
{
public:
	bool                                          bIsWeaponDrawn;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_OnWeaponDrawnStateChanged) == 0x000001, "Wrong alignment on VPairedCharacter_OnWeaponDrawnStateChanged");
static_assert(sizeof(VPairedCharacter_OnWeaponDrawnStateChanged) == 0x000001, "Wrong size on VPairedCharacter_OnWeaponDrawnStateChanged");
static_assert(offsetof(VPairedCharacter_OnWeaponDrawnStateChanged, bIsWeaponDrawn) == 0x000000, "Member 'VPairedCharacter_OnWeaponDrawnStateChanged::bIsWeaponDrawn' has a wrong offset!");

// Function Altar.VPairedCharacter.RefreshAppearance
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_RefreshAppearance final
{
public:
	EVCharacterRefreshSelector                    Selector;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_RefreshAppearance) == 0x000001, "Wrong alignment on VPairedCharacter_RefreshAppearance");
static_assert(sizeof(VPairedCharacter_RefreshAppearance) == 0x000001, "Wrong size on VPairedCharacter_RefreshAppearance");
static_assert(offsetof(VPairedCharacter_RefreshAppearance, Selector) == 0x000000, "Member 'VPairedCharacter_RefreshAppearance::Selector' has a wrong offset!");

// Function Altar.VPairedCharacter.RefreshAppearanceAsync
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_RefreshAppearanceAsync final
{
public:
	EVCharacterRefreshSelector                    Selector;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_RefreshAppearanceAsync) == 0x000001, "Wrong alignment on VPairedCharacter_RefreshAppearanceAsync");
static_assert(sizeof(VPairedCharacter_RefreshAppearanceAsync) == 0x000001, "Wrong size on VPairedCharacter_RefreshAppearanceAsync");
static_assert(offsetof(VPairedCharacter_RefreshAppearanceAsync, Selector) == 0x000000, "Member 'VPairedCharacter_RefreshAppearanceAsync::Selector' has a wrong offset!");

// Function Altar.VPairedCharacter.SetBodySectionsOnMesh
// 0x0008 (0x0008 - 0x0000)
struct VPairedCharacter_SetBodySectionsOnMesh final
{
public:
	class USkeletalMeshComponent*                 Components;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_SetBodySectionsOnMesh) == 0x000008, "Wrong alignment on VPairedCharacter_SetBodySectionsOnMesh");
static_assert(sizeof(VPairedCharacter_SetBodySectionsOnMesh) == 0x000008, "Wrong size on VPairedCharacter_SetBodySectionsOnMesh");
static_assert(offsetof(VPairedCharacter_SetBodySectionsOnMesh, Components) == 0x000000, "Member 'VPairedCharacter_SetBodySectionsOnMesh::Components' has a wrong offset!");

// Function Altar.VPairedCharacter.SetRace
// 0x0008 (0x0008 - 0x0000)
struct VPairedCharacter_SetRace final
{
public:
	const class UTESRace*                         NewRace;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_SetRace) == 0x000008, "Wrong alignment on VPairedCharacter_SetRace");
static_assert(sizeof(VPairedCharacter_SetRace) == 0x000008, "Wrong size on VPairedCharacter_SetRace");
static_assert(offsetof(VPairedCharacter_SetRace, NewRace) == 0x000000, "Member 'VPairedCharacter_SetRace::NewRace' has a wrong offset!");

// Function Altar.VPairedCharacter.SetSex
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_SetSex final
{
public:
	ECharacterSex                                 NewSex;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_SetSex) == 0x000001, "Wrong alignment on VPairedCharacter_SetSex");
static_assert(sizeof(VPairedCharacter_SetSex) == 0x000001, "Wrong size on VPairedCharacter_SetSex");
static_assert(offsetof(VPairedCharacter_SetSex, NewSex) == 0x000000, "Member 'VPairedCharacter_SetSex::NewSex' has a wrong offset!");

// Function Altar.VPairedCharacter.SetVoiceType
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_SetVoiceType final
{
public:
	EVVoiceType                                   NewVoiceType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_SetVoiceType) == 0x000001, "Wrong alignment on VPairedCharacter_SetVoiceType");
static_assert(sizeof(VPairedCharacter_SetVoiceType) == 0x000001, "Wrong size on VPairedCharacter_SetVoiceType");
static_assert(offsetof(VPairedCharacter_SetVoiceType, NewVoiceType) == 0x000000, "Member 'VPairedCharacter_SetVoiceType::NewVoiceType' has a wrong offset!");

// Function Altar.VPairedCharacter.SnapToStandingPosition
// 0x0002 (0x0002 - 0x0000)
struct VPairedCharacter_SnapToStandingPosition final
{
public:
	bool                                          bUpdatePairedDockingState;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToMarker;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_SnapToStandingPosition) == 0x000001, "Wrong alignment on VPairedCharacter_SnapToStandingPosition");
static_assert(sizeof(VPairedCharacter_SnapToStandingPosition) == 0x000002, "Wrong size on VPairedCharacter_SnapToStandingPosition");
static_assert(offsetof(VPairedCharacter_SnapToStandingPosition, bUpdatePairedDockingState) == 0x000000, "Member 'VPairedCharacter_SnapToStandingPosition::bUpdatePairedDockingState' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_SnapToStandingPosition, bSnapToMarker) == 0x000001, "Member 'VPairedCharacter_SnapToStandingPosition::bSnapToMarker' has a wrong offset!");

// Function Altar.VPairedCharacter.WaitForRefreshAppearanceToComplete
// 0x0004 (0x0004 - 0x0000)
struct VPairedCharacter_WaitForRefreshAppearanceToComplete final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_WaitForRefreshAppearanceToComplete) == 0x000004, "Wrong alignment on VPairedCharacter_WaitForRefreshAppearanceToComplete");
static_assert(sizeof(VPairedCharacter_WaitForRefreshAppearanceToComplete) == 0x000004, "Wrong size on VPairedCharacter_WaitForRefreshAppearanceToComplete");
static_assert(offsetof(VPairedCharacter_WaitForRefreshAppearanceToComplete, Timeout) == 0x000000, "Member 'VPairedCharacter_WaitForRefreshAppearanceToComplete::Timeout' has a wrong offset!");

// Function Altar.VPairedCharacter.GetBloodColor
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_GetBloodColor final
{
public:
	EVBloodColor                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetBloodColor) == 0x000001, "Wrong alignment on VPairedCharacter_GetBloodColor");
static_assert(sizeof(VPairedCharacter_GetBloodColor) == 0x000001, "Wrong size on VPairedCharacter_GetBloodColor");
static_assert(offsetof(VPairedCharacter_GetBloodColor, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetBloodColor::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetBoneScale
// 0x000C (0x000C - 0x0000)
struct VPairedCharacter_GetBoneScale final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetBoneScale) == 0x000004, "Wrong alignment on VPairedCharacter_GetBoneScale");
static_assert(sizeof(VPairedCharacter_GetBoneScale) == 0x00000C, "Wrong size on VPairedCharacter_GetBoneScale");
static_assert(offsetof(VPairedCharacter_GetBoneScale, Name_0) == 0x000000, "Member 'VPairedCharacter_GetBoneScale::Name_0' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_GetBoneScale, ReturnValue) == 0x000008, "Member 'VPairedCharacter_GetBoneScale::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetBonesScale
// 0x0060 (0x0060 - 0x0000)
struct VPairedCharacter_GetBonesScale final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetBonesScale) == 0x000008, "Wrong alignment on VPairedCharacter_GetBonesScale");
static_assert(sizeof(VPairedCharacter_GetBonesScale) == 0x000060, "Wrong size on VPairedCharacter_GetBonesScale");
static_assert(offsetof(VPairedCharacter_GetBonesScale, Names) == 0x000000, "Member 'VPairedCharacter_GetBonesScale::Names' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_GetBonesScale, ReturnValue) == 0x000010, "Member 'VPairedCharacter_GetBonesScale::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetChildActorFromSlot
// 0x0010 (0x0010 - 0x0000)
struct VPairedCharacter_GetChildActorFromSlot final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetChildActorFromSlot) == 0x000008, "Wrong alignment on VPairedCharacter_GetChildActorFromSlot");
static_assert(sizeof(VPairedCharacter_GetChildActorFromSlot) == 0x000010, "Wrong size on VPairedCharacter_GetChildActorFromSlot");
static_assert(offsetof(VPairedCharacter_GetChildActorFromSlot, Slot) == 0x000000, "Member 'VPairedCharacter_GetChildActorFromSlot::Slot' has a wrong offset!");
static_assert(offsetof(VPairedCharacter_GetChildActorFromSlot, ReturnValue) == 0x000008, "Member 'VPairedCharacter_GetChildActorFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetHorse
// 0x0008 (0x0008 - 0x0000)
struct VPairedCharacter_GetHorse final
{
public:
	class AVPairedCreature*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetHorse) == 0x000008, "Wrong alignment on VPairedCharacter_GetHorse");
static_assert(sizeof(VPairedCharacter_GetHorse) == 0x000008, "Wrong size on VPairedCharacter_GetHorse");
static_assert(offsetof(VPairedCharacter_GetHorse, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetHorse::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetInitialEquipmentMap
// 0x0050 (0x0050 - 0x0000)
struct VPairedCharacter_GetInitialEquipmentMap final
{
public:
	TMap<EBipedModularBodySlot, class UTESForm*>  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetInitialEquipmentMap) == 0x000008, "Wrong alignment on VPairedCharacter_GetInitialEquipmentMap");
static_assert(sizeof(VPairedCharacter_GetInitialEquipmentMap) == 0x000050, "Wrong size on VPairedCharacter_GetInitialEquipmentMap");
static_assert(offsetof(VPairedCharacter_GetInitialEquipmentMap, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetInitialEquipmentMap::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetRace
// 0x0008 (0x0008 - 0x0000)
struct VPairedCharacter_GetRace final
{
public:
	class UTESRace*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetRace) == 0x000008, "Wrong alignment on VPairedCharacter_GetRace");
static_assert(sizeof(VPairedCharacter_GetRace) == 0x000008, "Wrong size on VPairedCharacter_GetRace");
static_assert(offsetof(VPairedCharacter_GetRace, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetRace::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetSex
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_GetSex final
{
public:
	ECharacterSex                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetSex) == 0x000001, "Wrong alignment on VPairedCharacter_GetSex");
static_assert(sizeof(VPairedCharacter_GetSex) == 0x000001, "Wrong size on VPairedCharacter_GetSex");
static_assert(offsetof(VPairedCharacter_GetSex, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetSex::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetUsedDockActor
// 0x0008 (0x0008 - 0x0000)
struct VPairedCharacter_GetUsedDockActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetUsedDockActor) == 0x000008, "Wrong alignment on VPairedCharacter_GetUsedDockActor");
static_assert(sizeof(VPairedCharacter_GetUsedDockActor) == 0x000008, "Wrong size on VPairedCharacter_GetUsedDockActor");
static_assert(offsetof(VPairedCharacter_GetUsedDockActor, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetUsedDockActor::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.GetVoiceType
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_GetVoiceType final
{
public:
	EVVoiceType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_GetVoiceType) == 0x000001, "Wrong alignment on VPairedCharacter_GetVoiceType");
static_assert(sizeof(VPairedCharacter_GetVoiceType) == 0x000001, "Wrong size on VPairedCharacter_GetVoiceType");
static_assert(offsetof(VPairedCharacter_GetVoiceType, ReturnValue) == 0x000000, "Member 'VPairedCharacter_GetVoiceType::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.IsDocked
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_IsDocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_IsDocked) == 0x000001, "Wrong alignment on VPairedCharacter_IsDocked");
static_assert(sizeof(VPairedCharacter_IsDocked) == 0x000001, "Wrong size on VPairedCharacter_IsDocked");
static_assert(offsetof(VPairedCharacter_IsDocked, ReturnValue) == 0x000000, "Member 'VPairedCharacter_IsDocked::ReturnValue' has a wrong offset!");

// Function Altar.VPairedCharacter.IsInDockingProcess
// 0x0001 (0x0001 - 0x0000)
struct VPairedCharacter_IsInDockingProcess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedCharacter_IsInDockingProcess) == 0x000001, "Wrong alignment on VPairedCharacter_IsInDockingProcess");
static_assert(sizeof(VPairedCharacter_IsInDockingProcess) == 0x000001, "Wrong size on VPairedCharacter_IsInDockingProcess");
static_assert(offsetof(VPairedCharacter_IsInDockingProcess, ReturnValue) == 0x000000, "Member 'VPairedCharacter_IsInDockingProcess::ReturnValue' has a wrong offset!");

// Function Altar.VModernMessageMenuSpecific.UpdateButtons
// 0x0010 (0x0010 - 0x0000)
struct VModernMessageMenuSpecific_UpdateButtons final
{
public:
	TArray<class FText>                           InNewButtonData;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMessageMenuSpecific_UpdateButtons) == 0x000008, "Wrong alignment on VModernMessageMenuSpecific_UpdateButtons");
static_assert(sizeof(VModernMessageMenuSpecific_UpdateButtons) == 0x000010, "Wrong size on VModernMessageMenuSpecific_UpdateButtons");
static_assert(offsetof(VModernMessageMenuSpecific_UpdateButtons, InNewButtonData) == 0x000000, "Member 'VModernMessageMenuSpecific_UpdateButtons::InNewButtonData' has a wrong offset!");

// Function Altar.VModernMessageMenuSpecific.UpdateMessage
// 0x0018 (0x0018 - 0x0000)
struct VModernMessageMenuSpecific_UpdateMessage final
{
public:
	class FText                                   InNewMessage;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMessageMenuSpecific_UpdateMessage) == 0x000008, "Wrong alignment on VModernMessageMenuSpecific_UpdateMessage");
static_assert(sizeof(VModernMessageMenuSpecific_UpdateMessage) == 0x000018, "Wrong size on VModernMessageMenuSpecific_UpdateMessage");
static_assert(offsetof(VModernMessageMenuSpecific_UpdateMessage, InNewMessage) == 0x000000, "Member 'VModernMessageMenuSpecific_UpdateMessage::InNewMessage' has a wrong offset!");

// Function Altar.VModernMessageMenuSpecific.UpdateTitle
// 0x0018 (0x0018 - 0x0000)
struct VModernMessageMenuSpecific_UpdateTitle final
{
public:
	class FText                                   InNewTitle;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMessageMenuSpecific_UpdateTitle) == 0x000008, "Wrong alignment on VModernMessageMenuSpecific_UpdateTitle");
static_assert(sizeof(VModernMessageMenuSpecific_UpdateTitle) == 0x000018, "Wrong size on VModernMessageMenuSpecific_UpdateTitle");
static_assert(offsetof(VModernMessageMenuSpecific_UpdateTitle, InNewTitle) == 0x000000, "Member 'VModernMessageMenuSpecific_UpdateTitle::InNewTitle' has a wrong offset!");

// Function Altar.VLocomotionCharacterAnimInstance.OnSpecialJumpStarted
// 0x0018 (0x0018 - 0x0000)
struct VLocomotionCharacterAnimInstance_OnSpecialJumpStarted final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionCharacterAnimInstance_OnSpecialJumpStarted) == 0x000008, "Wrong alignment on VLocomotionCharacterAnimInstance_OnSpecialJumpStarted");
static_assert(sizeof(VLocomotionCharacterAnimInstance_OnSpecialJumpStarted) == 0x000018, "Wrong size on VLocomotionCharacterAnimInstance_OnSpecialJumpStarted");
static_assert(offsetof(VLocomotionCharacterAnimInstance_OnSpecialJumpStarted, Velocity) == 0x000000, "Member 'VLocomotionCharacterAnimInstance_OnSpecialJumpStarted::Velocity' has a wrong offset!");

// Function Altar.VLocomotionCharacterAnimInstance.GetIsMovingBackward
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionCharacterAnimInstance_GetIsMovingBackward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionCharacterAnimInstance_GetIsMovingBackward) == 0x000001, "Wrong alignment on VLocomotionCharacterAnimInstance_GetIsMovingBackward");
static_assert(sizeof(VLocomotionCharacterAnimInstance_GetIsMovingBackward) == 0x000001, "Wrong size on VLocomotionCharacterAnimInstance_GetIsMovingBackward");
static_assert(offsetof(VLocomotionCharacterAnimInstance_GetIsMovingBackward, ReturnValue) == 0x000000, "Member 'VLocomotionCharacterAnimInstance_GetIsMovingBackward::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionCharacterAnimInstance.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionCharacterAnimInstance_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionCharacterAnimInstance_IsMoving) == 0x000001, "Wrong alignment on VLocomotionCharacterAnimInstance_IsMoving");
static_assert(sizeof(VLocomotionCharacterAnimInstance_IsMoving) == 0x000001, "Wrong size on VLocomotionCharacterAnimInstance_IsMoving");
static_assert(offsetof(VLocomotionCharacterAnimInstance_IsMoving, ReturnValue) == 0x000000, "Member 'VLocomotionCharacterAnimInstance_IsMoving::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionCharacterAnimInstance.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionCharacterAnimInstance_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionCharacterAnimInstance_IsSprinting) == 0x000001, "Wrong alignment on VLocomotionCharacterAnimInstance_IsSprinting");
static_assert(sizeof(VLocomotionCharacterAnimInstance_IsSprinting) == 0x000001, "Wrong size on VLocomotionCharacterAnimInstance_IsSprinting");
static_assert(offsetof(VLocomotionCharacterAnimInstance_IsSprinting, ReturnValue) == 0x000000, "Member 'VLocomotionCharacterAnimInstance_IsSprinting::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMagicMenuItem.SetProperties
// 0x0060 (0x0060 - 0x0000)
struct VLegacyMagicMenuItem_SetProperties final
{
public:
	struct FLegacyMagicMenuItemProperties         Value;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenuItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyMagicMenuItem_SetProperties");
static_assert(sizeof(VLegacyMagicMenuItem_SetProperties) == 0x000060, "Wrong size on VLegacyMagicMenuItem_SetProperties");
static_assert(offsetof(VLegacyMagicMenuItem_SetProperties, Value) == 0x000000, "Member 'VLegacyMagicMenuItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyMagicMenuItem.GetInventoryIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyMagicMenuItem_GetInventoryIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenuItem_GetInventoryIndex) == 0x000004, "Wrong alignment on VLegacyMagicMenuItem_GetInventoryIndex");
static_assert(sizeof(VLegacyMagicMenuItem_GetInventoryIndex) == 0x000004, "Wrong size on VLegacyMagicMenuItem_GetInventoryIndex");
static_assert(offsetof(VLegacyMagicMenuItem_GetInventoryIndex, ReturnValue) == 0x000000, "Member 'VLegacyMagicMenuItem_GetInventoryIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMagicMenuItem.GetProperties
// 0x0060 (0x0060 - 0x0000)
struct VLegacyMagicMenuItem_GetProperties final
{
public:
	struct FLegacyMagicMenuItemProperties         ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenuItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyMagicMenuItem_GetProperties");
static_assert(sizeof(VLegacyMagicMenuItem_GetProperties) == 0x000060, "Wrong size on VLegacyMagicMenuItem_GetProperties");
static_assert(offsetof(VLegacyMagicMenuItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyMagicMenuItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VPointLight.OnLightStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct VPointLight_OnLightStatusChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPointLight_OnLightStatusChanged) == 0x000001, "Wrong alignment on VPointLight_OnLightStatusChanged");
static_assert(sizeof(VPointLight_OnLightStatusChanged) == 0x000001, "Wrong size on VPointLight_OnLightStatusChanged");
static_assert(offsetof(VPointLight_OnLightStatusChanged, bEnabled) == 0x000000, "Member 'VPointLight_OnLightStatusChanged::bEnabled' has a wrong offset!");

// Function Altar.VStatic.OnMagicEffectOnMarker
// 0x0010 (0x0010 - 0x0000)
struct VStatic_OnMagicEffectOnMarker final
{
public:
	class FString                                 VFXName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatic_OnMagicEffectOnMarker) == 0x000008, "Wrong alignment on VStatic_OnMagicEffectOnMarker");
static_assert(sizeof(VStatic_OnMagicEffectOnMarker) == 0x000010, "Wrong size on VStatic_OnMagicEffectOnMarker");
static_assert(offsetof(VStatic_OnMagicEffectOnMarker, VFXName) == 0x000000, "Member 'VStatic_OnMagicEffectOnMarker::VFXName' has a wrong offset!");

// Function Altar.VAltarPlayerController.FindCameraTrackingTarget
// 0x0028 (0x0028 - 0x0000)
struct VAltarPlayerController_FindCameraTrackingTarget final
{
public:
	float                                         MaxAngleDegrees;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AVPairedPawn*>                   PotentialTargets;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AVPairedPawn*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_FindCameraTrackingTarget) == 0x000008, "Wrong alignment on VAltarPlayerController_FindCameraTrackingTarget");
static_assert(sizeof(VAltarPlayerController_FindCameraTrackingTarget) == 0x000028, "Wrong size on VAltarPlayerController_FindCameraTrackingTarget");
static_assert(offsetof(VAltarPlayerController_FindCameraTrackingTarget, MaxAngleDegrees) == 0x000000, "Member 'VAltarPlayerController_FindCameraTrackingTarget::MaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_FindCameraTrackingTarget, MinDistance) == 0x000004, "Member 'VAltarPlayerController_FindCameraTrackingTarget::MinDistance' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_FindCameraTrackingTarget, MaxDistance) == 0x000008, "Member 'VAltarPlayerController_FindCameraTrackingTarget::MaxDistance' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_FindCameraTrackingTarget, PotentialTargets) == 0x000010, "Member 'VAltarPlayerController_FindCameraTrackingTarget::PotentialTargets' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_FindCameraTrackingTarget, ReturnValue) == 0x000020, "Member 'VAltarPlayerController_FindCameraTrackingTarget::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerController.ForceAndLockPOV
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_ForceAndLockPOV final
{
public:
	EVPlayerPOVType                               TargetPOV;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_ForceAndLockPOV) == 0x000001, "Wrong alignment on VAltarPlayerController_ForceAndLockPOV");
static_assert(sizeof(VAltarPlayerController_ForceAndLockPOV) == 0x000001, "Wrong size on VAltarPlayerController_ForceAndLockPOV");
static_assert(offsetof(VAltarPlayerController_ForceAndLockPOV, TargetPOV) == 0x000000, "Member 'VAltarPlayerController_ForceAndLockPOV::TargetPOV' has a wrong offset!");

// Function Altar.VAltarPlayerController.OnConsoleActivationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_OnConsoleActivationStateChanged final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_OnConsoleActivationStateChanged) == 0x000001, "Wrong alignment on VAltarPlayerController_OnConsoleActivationStateChanged");
static_assert(sizeof(VAltarPlayerController_OnConsoleActivationStateChanged) == 0x000001, "Wrong size on VAltarPlayerController_OnConsoleActivationStateChanged");
static_assert(offsetof(VAltarPlayerController_OnConsoleActivationStateChanged, Activated) == 0x000000, "Member 'VAltarPlayerController_OnConsoleActivationStateChanged::Activated' has a wrong offset!");

// Function Altar.VAltarPlayerController.OnJumpPressed
// 0x0020 (0x0020 - 0x0000)
struct VAltarPlayerController_OnJumpPressed final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_OnJumpPressed) == 0x000008, "Wrong alignment on VAltarPlayerController_OnJumpPressed");
static_assert(sizeof(VAltarPlayerController_OnJumpPressed) == 0x000020, "Wrong size on VAltarPlayerController_OnJumpPressed");
static_assert(offsetof(VAltarPlayerController_OnJumpPressed, Value) == 0x000000, "Member 'VAltarPlayerController_OnJumpPressed::Value' has a wrong offset!");

// Function Altar.VAltarPlayerController.SetControllerDesiredRotationRate
// 0x0030 (0x0030 - 0x0000)
struct VAltarPlayerController_SetControllerDesiredRotationRate final
{
public:
	struct FRotator                               FirstPersonDesiredRotationRate;                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ThirdPersonDesiredRotationRate;                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_SetControllerDesiredRotationRate) == 0x000008, "Wrong alignment on VAltarPlayerController_SetControllerDesiredRotationRate");
static_assert(sizeof(VAltarPlayerController_SetControllerDesiredRotationRate) == 0x000030, "Wrong size on VAltarPlayerController_SetControllerDesiredRotationRate");
static_assert(offsetof(VAltarPlayerController_SetControllerDesiredRotationRate, FirstPersonDesiredRotationRate) == 0x000000, "Member 'VAltarPlayerController_SetControllerDesiredRotationRate::FirstPersonDesiredRotationRate' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_SetControllerDesiredRotationRate, ThirdPersonDesiredRotationRate) == 0x000018, "Member 'VAltarPlayerController_SetControllerDesiredRotationRate::ThirdPersonDesiredRotationRate' has a wrong offset!");

// Function Altar.VAltarPlayerController.SetIsNewGameLoadingFromMainMenu
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_SetIsNewGameLoadingFromMainMenu final
{
public:
	bool                                          bShouldBeNewGameLoadingFromMainMenu;               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_SetIsNewGameLoadingFromMainMenu) == 0x000001, "Wrong alignment on VAltarPlayerController_SetIsNewGameLoadingFromMainMenu");
static_assert(sizeof(VAltarPlayerController_SetIsNewGameLoadingFromMainMenu) == 0x000001, "Wrong size on VAltarPlayerController_SetIsNewGameLoadingFromMainMenu");
static_assert(offsetof(VAltarPlayerController_SetIsNewGameLoadingFromMainMenu, bShouldBeNewGameLoadingFromMainMenu) == 0x000000, "Member 'VAltarPlayerController_SetIsNewGameLoadingFromMainMenu::bShouldBeNewGameLoadingFromMainMenu' has a wrong offset!");

// Function Altar.VAltarPlayerController.StartAimingCrosshairAnimation
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_StartAimingCrosshairAnimation final
{
public:
	bool                                          bIsDrawing;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_StartAimingCrosshairAnimation) == 0x000001, "Wrong alignment on VAltarPlayerController_StartAimingCrosshairAnimation");
static_assert(sizeof(VAltarPlayerController_StartAimingCrosshairAnimation) == 0x000001, "Wrong size on VAltarPlayerController_StartAimingCrosshairAnimation");
static_assert(offsetof(VAltarPlayerController_StartAimingCrosshairAnimation, bIsDrawing) == 0x000000, "Member 'VAltarPlayerController_StartAimingCrosshairAnimation::bIsDrawing' has a wrong offset!");

// Function Altar.VAltarPlayerController.StartCameraTrackingOnPawn
// 0x0030 (0x0030 - 0x0000)
struct VAltarPlayerController_StartCameraTrackingOnPawn final
{
public:
	class AVPairedPawn*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampUpEndThreshold;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampDownStartThreshold;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RampUpSpeedMultiplierCurve;                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RampDownSpeedMultiplierCurve;                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllAxis;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarPlayerController_StartCameraTrackingOnPawn) == 0x000008, "Wrong alignment on VAltarPlayerController_StartCameraTrackingOnPawn");
static_assert(sizeof(VAltarPlayerController_StartCameraTrackingOnPawn) == 0x000030, "Wrong size on VAltarPlayerController_StartCameraTrackingOnPawn");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, Target) == 0x000000, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::Target' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, Duration) == 0x000008, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::Duration' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, SpeedMultiplier) == 0x00000C, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, RampUpEndThreshold) == 0x000010, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::RampUpEndThreshold' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, RampDownStartThreshold) == 0x000014, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::RampDownStartThreshold' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, RampUpSpeedMultiplierCurve) == 0x000018, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::RampUpSpeedMultiplierCurve' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, RampDownSpeedMultiplierCurve) == 0x000020, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::RampDownSpeedMultiplierCurve' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_StartCameraTrackingOnPawn, AllAxis) == 0x000028, "Member 'VAltarPlayerController_StartCameraTrackingOnPawn::AllAxis' has a wrong offset!");

// Function Altar.VAltarPlayerController.SwitchPOV
// 0x0002 (0x0002 - 0x0000)
struct VAltarPlayerController_SwitchPOV final
{
public:
	EVPlayerPOVType                               TargetPOV;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetToNewDefaultState;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_SwitchPOV) == 0x000001, "Wrong alignment on VAltarPlayerController_SwitchPOV");
static_assert(sizeof(VAltarPlayerController_SwitchPOV) == 0x000002, "Wrong size on VAltarPlayerController_SwitchPOV");
static_assert(offsetof(VAltarPlayerController_SwitchPOV, TargetPOV) == 0x000000, "Member 'VAltarPlayerController_SwitchPOV::TargetPOV' has a wrong offset!");
static_assert(offsetof(VAltarPlayerController_SwitchPOV, bSetToNewDefaultState) == 0x000001, "Member 'VAltarPlayerController_SwitchPOV::bSetToNewDefaultState' has a wrong offset!");

// Function Altar.VAltarPlayerController.ToggleShowFPSDebugInfo
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_ToggleShowFPSDebugInfo final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_ToggleShowFPSDebugInfo) == 0x000001, "Wrong alignment on VAltarPlayerController_ToggleShowFPSDebugInfo");
static_assert(sizeof(VAltarPlayerController_ToggleShowFPSDebugInfo) == 0x000001, "Wrong size on VAltarPlayerController_ToggleShowFPSDebugInfo");
static_assert(offsetof(VAltarPlayerController_ToggleShowFPSDebugInfo, bShow) == 0x000000, "Member 'VAltarPlayerController_ToggleShowFPSDebugInfo::bShow' has a wrong offset!");

// Function Altar.VAltarPlayerController.ToggleShowVRAMDebugInfo
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_ToggleShowVRAMDebugInfo final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_ToggleShowVRAMDebugInfo) == 0x000001, "Wrong alignment on VAltarPlayerController_ToggleShowVRAMDebugInfo");
static_assert(sizeof(VAltarPlayerController_ToggleShowVRAMDebugInfo) == 0x000001, "Wrong size on VAltarPlayerController_ToggleShowVRAMDebugInfo");
static_assert(offsetof(VAltarPlayerController_ToggleShowVRAMDebugInfo, bShow) == 0x000000, "Member 'VAltarPlayerController_ToggleShowVRAMDebugInfo::bShow' has a wrong offset!");

// Function Altar.VAltarPlayerController.GetDesiredFOVDialogue
// 0x0004 (0x0004 - 0x0000)
struct VAltarPlayerController_GetDesiredFOVDialogue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_GetDesiredFOVDialogue) == 0x000004, "Wrong alignment on VAltarPlayerController_GetDesiredFOVDialogue");
static_assert(sizeof(VAltarPlayerController_GetDesiredFOVDialogue) == 0x000004, "Wrong size on VAltarPlayerController_GetDesiredFOVDialogue");
static_assert(offsetof(VAltarPlayerController_GetDesiredFOVDialogue, ReturnValue) == 0x000000, "Member 'VAltarPlayerController_GetDesiredFOVDialogue::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerController.GetGameplayCamera
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerController_GetGameplayCamera final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_GetGameplayCamera) == 0x000008, "Wrong alignment on VAltarPlayerController_GetGameplayCamera");
static_assert(sizeof(VAltarPlayerController_GetGameplayCamera) == 0x000008, "Wrong size on VAltarPlayerController_GetGameplayCamera");
static_assert(offsetof(VAltarPlayerController_GetGameplayCamera, ReturnValue) == 0x000000, "Member 'VAltarPlayerController_GetGameplayCamera::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerController.GetLastInputRotation
// 0x0018 (0x0018 - 0x0000)
struct VAltarPlayerController_GetLastInputRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_GetLastInputRotation) == 0x000008, "Wrong alignment on VAltarPlayerController_GetLastInputRotation");
static_assert(sizeof(VAltarPlayerController_GetLastInputRotation) == 0x000018, "Wrong size on VAltarPlayerController_GetLastInputRotation");
static_assert(offsetof(VAltarPlayerController_GetLastInputRotation, ReturnValue) == 0x000000, "Member 'VAltarPlayerController_GetLastInputRotation::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerController.GetLookAtRotationDialogue
// 0x0018 (0x0018 - 0x0000)
struct VAltarPlayerController_GetLookAtRotationDialogue final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_GetLookAtRotationDialogue) == 0x000008, "Wrong alignment on VAltarPlayerController_GetLookAtRotationDialogue");
static_assert(sizeof(VAltarPlayerController_GetLookAtRotationDialogue) == 0x000018, "Wrong size on VAltarPlayerController_GetLookAtRotationDialogue");
static_assert(offsetof(VAltarPlayerController_GetLookAtRotationDialogue, ReturnValue) == 0x000000, "Member 'VAltarPlayerController_GetLookAtRotationDialogue::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerController.GetPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerController_GetPlayerCharacter final
{
public:
	class AVOblivionPlayerCharacter*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_GetPlayerCharacter) == 0x000008, "Wrong alignment on VAltarPlayerController_GetPlayerCharacter");
static_assert(sizeof(VAltarPlayerController_GetPlayerCharacter) == 0x000008, "Wrong size on VAltarPlayerController_GetPlayerCharacter");
static_assert(offsetof(VAltarPlayerController_GetPlayerCharacter, ReturnValue) == 0x000000, "Member 'VAltarPlayerController_GetPlayerCharacter::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerController.IsHorseRiding
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerController_IsHorseRiding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerController_IsHorseRiding) == 0x000001, "Wrong alignment on VAltarPlayerController_IsHorseRiding");
static_assert(sizeof(VAltarPlayerController_IsHorseRiding) == 0x000001, "Wrong size on VAltarPlayerController_IsHorseRiding");
static_assert(offsetof(VAltarPlayerController_IsHorseRiding, ReturnValue) == 0x000000, "Member 'VAltarPlayerController_IsHorseRiding::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.HandleDeviceConnectionChange
// 0x000C (0x000C - 0x0000)
struct VEnhancedAltarPlayerController_HandleDeviceConnectionChange final
{
public:
	EInputDeviceConnectionState                   NewConnectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformUserId                        PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_HandleDeviceConnectionChange) == 0x000004, "Wrong alignment on VEnhancedAltarPlayerController_HandleDeviceConnectionChange");
static_assert(sizeof(VEnhancedAltarPlayerController_HandleDeviceConnectionChange) == 0x00000C, "Wrong size on VEnhancedAltarPlayerController_HandleDeviceConnectionChange");
static_assert(offsetof(VEnhancedAltarPlayerController_HandleDeviceConnectionChange, NewConnectionState) == 0x000000, "Member 'VEnhancedAltarPlayerController_HandleDeviceConnectionChange::NewConnectionState' has a wrong offset!");
static_assert(offsetof(VEnhancedAltarPlayerController_HandleDeviceConnectionChange, PlatformUserId) == 0x000004, "Member 'VEnhancedAltarPlayerController_HandleDeviceConnectionChange::PlatformUserId' has a wrong offset!");
static_assert(offsetof(VEnhancedAltarPlayerController_HandleDeviceConnectionChange, InputDeviceId) == 0x000008, "Member 'VEnhancedAltarPlayerController_HandleDeviceConnectionChange::InputDeviceId' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.IsWalking
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedAltarPlayerController_IsWalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_IsWalking) == 0x000001, "Wrong alignment on VEnhancedAltarPlayerController_IsWalking");
static_assert(sizeof(VEnhancedAltarPlayerController_IsWalking) == 0x000001, "Wrong size on VEnhancedAltarPlayerController_IsWalking");
static_assert(offsetof(VEnhancedAltarPlayerController_IsWalking, ReturnValue) == 0x000000, "Member 'VEnhancedAltarPlayerController_IsWalking::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.LookUpInput
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_LookUpInput final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_LookUpInput) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_LookUpInput");
static_assert(sizeof(VEnhancedAltarPlayerController_LookUpInput) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_LookUpInput");
static_assert(offsetof(VEnhancedAltarPlayerController_LookUpInput, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_LookUpInput::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.MouseWheelUpInput
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_MouseWheelUpInput final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_MouseWheelUpInput) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_MouseWheelUpInput");
static_assert(sizeof(VEnhancedAltarPlayerController_MouseWheelUpInput) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_MouseWheelUpInput");
static_assert(offsetof(VEnhancedAltarPlayerController_MouseWheelUpInput, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_MouseWheelUpInput::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.MovementBackwardInput_Pressed
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_MovementBackwardInput_Pressed final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_MovementBackwardInput_Pressed) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_MovementBackwardInput_Pressed");
static_assert(sizeof(VEnhancedAltarPlayerController_MovementBackwardInput_Pressed) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_MovementBackwardInput_Pressed");
static_assert(offsetof(VEnhancedAltarPlayerController_MovementBackwardInput_Pressed, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_MovementBackwardInput_Pressed::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.MovementForwardInput_Pressed
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_MovementForwardInput_Pressed final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_MovementForwardInput_Pressed) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_MovementForwardInput_Pressed");
static_assert(sizeof(VEnhancedAltarPlayerController_MovementForwardInput_Pressed) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_MovementForwardInput_Pressed");
static_assert(offsetof(VEnhancedAltarPlayerController_MovementForwardInput_Pressed, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_MovementForwardInput_Pressed::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.MovementLeftInput_Pressed
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_MovementLeftInput_Pressed final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_MovementLeftInput_Pressed) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_MovementLeftInput_Pressed");
static_assert(sizeof(VEnhancedAltarPlayerController_MovementLeftInput_Pressed) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_MovementLeftInput_Pressed");
static_assert(offsetof(VEnhancedAltarPlayerController_MovementLeftInput_Pressed, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_MovementLeftInput_Pressed::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.MovementRightInput_Pressed
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_MovementRightInput_Pressed final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_MovementRightInput_Pressed) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_MovementRightInput_Pressed");
static_assert(sizeof(VEnhancedAltarPlayerController_MovementRightInput_Pressed) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_MovementRightInput_Pressed");
static_assert(offsetof(VEnhancedAltarPlayerController_MovementRightInput_Pressed, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_MovementRightInput_Pressed::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.SetBlockFlushPressedKeys
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedAltarPlayerController_SetBlockFlushPressedKeys final
{
public:
	bool                                          NewBlockFlushPressedKeys;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_SetBlockFlushPressedKeys) == 0x000001, "Wrong alignment on VEnhancedAltarPlayerController_SetBlockFlushPressedKeys");
static_assert(sizeof(VEnhancedAltarPlayerController_SetBlockFlushPressedKeys) == 0x000001, "Wrong size on VEnhancedAltarPlayerController_SetBlockFlushPressedKeys");
static_assert(offsetof(VEnhancedAltarPlayerController_SetBlockFlushPressedKeys, NewBlockFlushPressedKeys) == 0x000000, "Member 'VEnhancedAltarPlayerController_SetBlockFlushPressedKeys::NewBlockFlushPressedKeys' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.SwitchToUserInterfaceInputMapping
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping final
{
public:
	bool                                          bDoRemoveQuickKeysInputMapping;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping) == 0x000001, "Wrong alignment on VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping");
static_assert(sizeof(VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping) == 0x000001, "Wrong size on VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping");
static_assert(offsetof(VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping, bDoRemoveQuickKeysInputMapping) == 0x000000, "Member 'VEnhancedAltarPlayerController_SwitchToUserInterfaceInputMapping::bDoRemoveQuickKeysInputMapping' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.ToggleGallop
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_ToggleGallop final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_ToggleGallop) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_ToggleGallop");
static_assert(sizeof(VEnhancedAltarPlayerController_ToggleGallop) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_ToggleGallop");
static_assert(offsetof(VEnhancedAltarPlayerController_ToggleGallop, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_ToggleGallop::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.ToggleHorseWalk
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_ToggleHorseWalk final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_ToggleHorseWalk) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_ToggleHorseWalk");
static_assert(sizeof(VEnhancedAltarPlayerController_ToggleHorseWalk) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_ToggleHorseWalk");
static_assert(offsetof(VEnhancedAltarPlayerController_ToggleHorseWalk, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_ToggleHorseWalk::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.ToggleSneak
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_ToggleSneak final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_ToggleSneak) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_ToggleSneak");
static_assert(sizeof(VEnhancedAltarPlayerController_ToggleSneak) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_ToggleSneak");
static_assert(offsetof(VEnhancedAltarPlayerController_ToggleSneak, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_ToggleSneak::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.ToggleSprint
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_ToggleSprint final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_ToggleSprint) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_ToggleSprint");
static_assert(sizeof(VEnhancedAltarPlayerController_ToggleSprint) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_ToggleSprint");
static_assert(offsetof(VEnhancedAltarPlayerController_ToggleSprint, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_ToggleSprint::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.ToggleWalk
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_ToggleWalk final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_ToggleWalk) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_ToggleWalk");
static_assert(sizeof(VEnhancedAltarPlayerController_ToggleWalk) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_ToggleWalk");
static_assert(offsetof(VEnhancedAltarPlayerController_ToggleWalk, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_ToggleWalk::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.TurnInput
// 0x0020 (0x0020 - 0x0000)
struct VEnhancedAltarPlayerController_TurnInput final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_TurnInput) == 0x000008, "Wrong alignment on VEnhancedAltarPlayerController_TurnInput");
static_assert(sizeof(VEnhancedAltarPlayerController_TurnInput) == 0x000020, "Wrong size on VEnhancedAltarPlayerController_TurnInput");
static_assert(offsetof(VEnhancedAltarPlayerController_TurnInput, Value) == 0x000000, "Member 'VEnhancedAltarPlayerController_TurnInput::Value' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.GetWantsToGallop
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedAltarPlayerController_GetWantsToGallop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_GetWantsToGallop) == 0x000001, "Wrong alignment on VEnhancedAltarPlayerController_GetWantsToGallop");
static_assert(sizeof(VEnhancedAltarPlayerController_GetWantsToGallop) == 0x000001, "Wrong size on VEnhancedAltarPlayerController_GetWantsToGallop");
static_assert(offsetof(VEnhancedAltarPlayerController_GetWantsToGallop, ReturnValue) == 0x000000, "Member 'VEnhancedAltarPlayerController_GetWantsToGallop::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.GetWantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedAltarPlayerController_GetWantsToSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_GetWantsToSprint) == 0x000001, "Wrong alignment on VEnhancedAltarPlayerController_GetWantsToSprint");
static_assert(sizeof(VEnhancedAltarPlayerController_GetWantsToSprint) == 0x000001, "Wrong size on VEnhancedAltarPlayerController_GetWantsToSprint");
static_assert(offsetof(VEnhancedAltarPlayerController_GetWantsToSprint, ReturnValue) == 0x000000, "Member 'VEnhancedAltarPlayerController_GetWantsToSprint::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedAltarPlayerController.IsInGameConfiguration
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedAltarPlayerController_IsInGameConfiguration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedAltarPlayerController_IsInGameConfiguration) == 0x000001, "Wrong alignment on VEnhancedAltarPlayerController_IsInGameConfiguration");
static_assert(sizeof(VEnhancedAltarPlayerController_IsInGameConfiguration) == 0x000001, "Wrong size on VEnhancedAltarPlayerController_IsInGameConfiguration");
static_assert(offsetof(VEnhancedAltarPlayerController_IsInGameConfiguration, ReturnValue) == 0x000000, "Member 'VEnhancedAltarPlayerController_IsInGameConfiguration::ReturnValue' has a wrong offset!");

// Function Altar.VWeapon.OnAttachmentUpdate
// 0x0010 (0x0010 - 0x0000)
struct VWeapon_OnAttachmentUpdate final
{
public:
	class USkeletalMeshComponent*                 TargetSkeletalMeshComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrawn;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VWeapon_OnAttachmentUpdate) == 0x000008, "Wrong alignment on VWeapon_OnAttachmentUpdate");
static_assert(sizeof(VWeapon_OnAttachmentUpdate) == 0x000010, "Wrong size on VWeapon_OnAttachmentUpdate");
static_assert(offsetof(VWeapon_OnAttachmentUpdate, TargetSkeletalMeshComponent) == 0x000000, "Member 'VWeapon_OnAttachmentUpdate::TargetSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VWeapon_OnAttachmentUpdate, bIsDrawn) == 0x000008, "Member 'VWeapon_OnAttachmentUpdate::bIsDrawn' has a wrong offset!");

// Function Altar.VWeapon.GetDrawnAttachmentSocketName
// 0x0008 (0x0008 - 0x0000)
struct VWeapon_GetDrawnAttachmentSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeapon_GetDrawnAttachmentSocketName) == 0x000004, "Wrong alignment on VWeapon_GetDrawnAttachmentSocketName");
static_assert(sizeof(VWeapon_GetDrawnAttachmentSocketName) == 0x000008, "Wrong size on VWeapon_GetDrawnAttachmentSocketName");
static_assert(offsetof(VWeapon_GetDrawnAttachmentSocketName, ReturnValue) == 0x000000, "Member 'VWeapon_GetDrawnAttachmentSocketName::ReturnValue' has a wrong offset!");

// Function Altar.VWeapon.GetLocomotionMovesetTag
// 0x0008 (0x0008 - 0x0000)
struct VWeapon_GetLocomotionMovesetTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeapon_GetLocomotionMovesetTag) == 0x000004, "Wrong alignment on VWeapon_GetLocomotionMovesetTag");
static_assert(sizeof(VWeapon_GetLocomotionMovesetTag) == 0x000008, "Wrong size on VWeapon_GetLocomotionMovesetTag");
static_assert(offsetof(VWeapon_GetLocomotionMovesetTag, ReturnValue) == 0x000000, "Member 'VWeapon_GetLocomotionMovesetTag::ReturnValue' has a wrong offset!");

// Function Altar.VWeapon.GetSheathedAttachmentSocketName
// 0x0008 (0x0008 - 0x0000)
struct VWeapon_GetSheathedAttachmentSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeapon_GetSheathedAttachmentSocketName) == 0x000004, "Wrong alignment on VWeapon_GetSheathedAttachmentSocketName");
static_assert(sizeof(VWeapon_GetSheathedAttachmentSocketName) == 0x000008, "Wrong size on VWeapon_GetSheathedAttachmentSocketName");
static_assert(offsetof(VWeapon_GetSheathedAttachmentSocketName, ReturnValue) == 0x000000, "Member 'VWeapon_GetSheathedAttachmentSocketName::ReturnValue' has a wrong offset!");

// Function Altar.VWeapon.GetWeaponScalingAttribute
// 0x0001 (0x0001 - 0x0000)
struct VWeapon_GetWeaponScalingAttribute final
{
public:
	EVAttribute                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeapon_GetWeaponScalingAttribute) == 0x000001, "Wrong alignment on VWeapon_GetWeaponScalingAttribute");
static_assert(sizeof(VWeapon_GetWeaponScalingAttribute) == 0x000001, "Wrong size on VWeapon_GetWeaponScalingAttribute");
static_assert(offsetof(VWeapon_GetWeaponScalingAttribute, ReturnValue) == 0x000000, "Member 'VWeapon_GetWeaponScalingAttribute::ReturnValue' has a wrong offset!");

// Function Altar.VWeapon.GetWeaponTag
// 0x0008 (0x0008 - 0x0000)
struct VWeapon_GetWeaponTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeapon_GetWeaponTag) == 0x000004, "Wrong alignment on VWeapon_GetWeaponTag");
static_assert(sizeof(VWeapon_GetWeaponTag) == 0x000008, "Wrong size on VWeapon_GetWeaponTag");
static_assert(offsetof(VWeapon_GetWeaponTag, ReturnValue) == 0x000000, "Member 'VWeapon_GetWeaponTag::ReturnValue' has a wrong offset!");

// Function Altar.AltarCheatManager.AltarSpawn
// 0x0010 (0x0010 - 0x0000)
struct AltarCheatManager_AltarSpawn final
{
public:
	class FString                                 Race;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarCheatManager_AltarSpawn) == 0x000008, "Wrong alignment on AltarCheatManager_AltarSpawn");
static_assert(sizeof(AltarCheatManager_AltarSpawn) == 0x000010, "Wrong size on AltarCheatManager_AltarSpawn");
static_assert(offsetof(AltarCheatManager_AltarSpawn, Race) == 0x000000, "Member 'AltarCheatManager_AltarSpawn::Race' has a wrong offset!");

// Function Altar.AltarCheatManager.DebugMenuCommand
// 0x0010 (0x0010 - 0x0000)
struct AltarCheatManager_DebugMenuCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarCheatManager_DebugMenuCommand) == 0x000008, "Wrong alignment on AltarCheatManager_DebugMenuCommand");
static_assert(sizeof(AltarCheatManager_DebugMenuCommand) == 0x000010, "Wrong size on AltarCheatManager_DebugMenuCommand");
static_assert(offsetof(AltarCheatManager_DebugMenuCommand, Command) == 0x000000, "Member 'AltarCheatManager_DebugMenuCommand::Command' has a wrong offset!");

// Function Altar.AltarCheatManager.ObvConselect
// 0x0010 (0x0010 - 0x0000)
struct AltarCheatManager_ObvConselect final
{
public:
	class FString                                 Arg;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarCheatManager_ObvConselect) == 0x000008, "Wrong alignment on AltarCheatManager_ObvConselect");
static_assert(sizeof(AltarCheatManager_ObvConselect) == 0x000010, "Wrong size on AltarCheatManager_ObvConselect");
static_assert(offsetof(AltarCheatManager_ObvConselect, Arg) == 0x000000, "Member 'AltarCheatManager_ObvConselect::Arg' has a wrong offset!");

// Function Altar.AltarCheatManager.ObvConsole
// 0x0010 (0x0010 - 0x0000)
struct AltarCheatManager_ObvConsole final
{
public:
	class FString                                 Arg;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarCheatManager_ObvConsole) == 0x000008, "Wrong alignment on AltarCheatManager_ObvConsole");
static_assert(sizeof(AltarCheatManager_ObvConsole) == 0x000010, "Wrong size on AltarCheatManager_ObvConsole");
static_assert(offsetof(AltarCheatManager_ObvConsole, Arg) == 0x000000, "Member 'AltarCheatManager_ObvConsole::Arg' has a wrong offset!");

// Function Altar.AltarCheatManager.SendMultipleOblivionCommand
// 0x0010 (0x0010 - 0x0000)
struct AltarCheatManager_SendMultipleOblivionCommand final
{
public:
	TArray<class FString>                         CommandeLists;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarCheatManager_SendMultipleOblivionCommand) == 0x000008, "Wrong alignment on AltarCheatManager_SendMultipleOblivionCommand");
static_assert(sizeof(AltarCheatManager_SendMultipleOblivionCommand) == 0x000010, "Wrong size on AltarCheatManager_SendMultipleOblivionCommand");
static_assert(offsetof(AltarCheatManager_SendMultipleOblivionCommand, CommandeLists) == 0x000000, "Member 'AltarCheatManager_SendMultipleOblivionCommand::CommandeLists' has a wrong offset!");

// Function Altar.AltarCheatManager.IsInGodMode
// 0x0001 (0x0001 - 0x0000)
struct AltarCheatManager_IsInGodMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarCheatManager_IsInGodMode) == 0x000001, "Wrong alignment on AltarCheatManager_IsInGodMode");
static_assert(sizeof(AltarCheatManager_IsInGodMode) == 0x000001, "Wrong size on AltarCheatManager_IsInGodMode");
static_assert(offsetof(AltarCheatManager_IsInGodMode, ReturnValue) == 0x000000, "Member 'AltarCheatManager_IsInGodMode::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.Back
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingMenu_Back final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_Back) == 0x000001, "Wrong alignment on VModernOnboardingMenu_Back");
static_assert(sizeof(VModernOnboardingMenu_Back) == 0x000001, "Wrong size on VModernOnboardingMenu_Back");
static_assert(offsetof(VModernOnboardingMenu_Back, ReturnValue) == 0x000000, "Member 'VModernOnboardingMenu_Back::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.OnAnimationEnded
// 0x0010 (0x0010 - 0x0000)
struct VModernOnboardingMenu_OnAnimationEnded final
{
public:
	TScriptInterface<class IVOnboardingPageInterface> Caller;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_OnAnimationEnded) == 0x000008, "Wrong alignment on VModernOnboardingMenu_OnAnimationEnded");
static_assert(sizeof(VModernOnboardingMenu_OnAnimationEnded) == 0x000010, "Wrong size on VModernOnboardingMenu_OnAnimationEnded");
static_assert(offsetof(VModernOnboardingMenu_OnAnimationEnded, Caller) == 0x000000, "Member 'VModernOnboardingMenu_OnAnimationEnded::Caller' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.OnPageChanged
// 0x0004 (0x0004 - 0x0000)
struct VModernOnboardingMenu_OnPageChanged final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_OnPageChanged) == 0x000004, "Wrong alignment on VModernOnboardingMenu_OnPageChanged");
static_assert(sizeof(VModernOnboardingMenu_OnPageChanged) == 0x000004, "Wrong size on VModernOnboardingMenu_OnPageChanged");
static_assert(offsetof(VModernOnboardingMenu_OnPageChanged, NewIndex) == 0x000000, "Member 'VModernOnboardingMenu_OnPageChanged::NewIndex' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.OnRun
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingMenu_OnRun final
{
public:
	bool                                          Outcome;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_OnRun) == 0x000001, "Wrong alignment on VModernOnboardingMenu_OnRun");
static_assert(sizeof(VModernOnboardingMenu_OnRun) == 0x000001, "Wrong size on VModernOnboardingMenu_OnRun");
static_assert(offsetof(VModernOnboardingMenu_OnRun, Outcome) == 0x000000, "Member 'VModernOnboardingMenu_OnRun::Outcome' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.Skip
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingMenu_Skip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_Skip) == 0x000001, "Wrong alignment on VModernOnboardingMenu_Skip");
static_assert(sizeof(VModernOnboardingMenu_Skip) == 0x000001, "Wrong size on VModernOnboardingMenu_Skip");
static_assert(offsetof(VModernOnboardingMenu_Skip, ReturnValue) == 0x000000, "Member 'VModernOnboardingMenu_Skip::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.GetCurrentPage
// 0x0010 (0x0010 - 0x0000)
struct VModernOnboardingMenu_GetCurrentPage final
{
public:
	TScriptInterface<class IVOnboardingPageInterface> ReturnValue;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_GetCurrentPage) == 0x000008, "Wrong alignment on VModernOnboardingMenu_GetCurrentPage");
static_assert(sizeof(VModernOnboardingMenu_GetCurrentPage) == 0x000010, "Wrong size on VModernOnboardingMenu_GetCurrentPage");
static_assert(offsetof(VModernOnboardingMenu_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VModernOnboardingMenu_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.GetNextUnskipableIndex
// 0x0008 (0x0008 - 0x0000)
struct VModernOnboardingMenu_GetNextUnskipableIndex final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_GetNextUnskipableIndex) == 0x000004, "Wrong alignment on VModernOnboardingMenu_GetNextUnskipableIndex");
static_assert(sizeof(VModernOnboardingMenu_GetNextUnskipableIndex) == 0x000008, "Wrong size on VModernOnboardingMenu_GetNextUnskipableIndex");
static_assert(offsetof(VModernOnboardingMenu_GetNextUnskipableIndex, StartIndex) == 0x000000, "Member 'VModernOnboardingMenu_GetNextUnskipableIndex::StartIndex' has a wrong offset!");
static_assert(offsetof(VModernOnboardingMenu_GetNextUnskipableIndex, ReturnValue) == 0x000004, "Member 'VModernOnboardingMenu_GetNextUnskipableIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.GetOffsetedNextPage
// 0x0018 (0x0018 - 0x0000)
struct VModernOnboardingMenu_GetOffsetedNextPage final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IVOnboardingPageInterface> ReturnValue;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_GetOffsetedNextPage) == 0x000008, "Wrong alignment on VModernOnboardingMenu_GetOffsetedNextPage");
static_assert(sizeof(VModernOnboardingMenu_GetOffsetedNextPage) == 0x000018, "Wrong size on VModernOnboardingMenu_GetOffsetedNextPage");
static_assert(offsetof(VModernOnboardingMenu_GetOffsetedNextPage, Offset) == 0x000000, "Member 'VModernOnboardingMenu_GetOffsetedNextPage::Offset' has a wrong offset!");
static_assert(offsetof(VModernOnboardingMenu_GetOffsetedNextPage, ReturnValue) == 0x000008, "Member 'VModernOnboardingMenu_GetOffsetedNextPage::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.GetPage
// 0x0018 (0x0018 - 0x0000)
struct VModernOnboardingMenu_GetPage final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IVOnboardingPageInterface> ReturnValue;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_GetPage) == 0x000008, "Wrong alignment on VModernOnboardingMenu_GetPage");
static_assert(sizeof(VModernOnboardingMenu_GetPage) == 0x000018, "Wrong size on VModernOnboardingMenu_GetPage");
static_assert(offsetof(VModernOnboardingMenu_GetPage, Index_0) == 0x000000, "Member 'VModernOnboardingMenu_GetPage::Index_0' has a wrong offset!");
static_assert(offsetof(VModernOnboardingMenu_GetPage, ReturnValue) == 0x000008, "Member 'VModernOnboardingMenu_GetPage::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingMenu.IsOnboardingFinished
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingMenu_IsOnboardingFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingMenu_IsOnboardingFinished) == 0x000001, "Wrong alignment on VModernOnboardingMenu_IsOnboardingFinished");
static_assert(sizeof(VModernOnboardingMenu_IsOnboardingFinished) == 0x000001, "Wrong size on VModernOnboardingMenu_IsOnboardingFinished");
static_assert(offsetof(VModernOnboardingMenu_IsOnboardingFinished, ReturnValue) == 0x000000, "Member 'VModernOnboardingMenu_IsOnboardingFinished::ReturnValue' has a wrong offset!");

// Function Altar.VAIHelpersFunctionLibrary.SortActorsByGameTime
// 0x0020 (0x0020 - 0x0000)
struct VAIHelpersFunctionLibrary_SortActorsByGameTime final
{
public:
	TArray<class AActor*>                         InActors;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SortedActors;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIHelpersFunctionLibrary_SortActorsByGameTime) == 0x000008, "Wrong alignment on VAIHelpersFunctionLibrary_SortActorsByGameTime");
static_assert(sizeof(VAIHelpersFunctionLibrary_SortActorsByGameTime) == 0x000020, "Wrong size on VAIHelpersFunctionLibrary_SortActorsByGameTime");
static_assert(offsetof(VAIHelpersFunctionLibrary_SortActorsByGameTime, InActors) == 0x000000, "Member 'VAIHelpersFunctionLibrary_SortActorsByGameTime::InActors' has a wrong offset!");
static_assert(offsetof(VAIHelpersFunctionLibrary_SortActorsByGameTime, SortedActors) == 0x000010, "Member 'VAIHelpersFunctionLibrary_SortActorsByGameTime::SortedActors' has a wrong offset!");

// Function Altar.VLegacyStatsMenuSkillHeader.SetProperties
// 0x0018 (0x0018 - 0x0000)
struct VLegacyStatsMenuSkillHeader_SetProperties final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuSkillHeader_SetProperties) == 0x000008, "Wrong alignment on VLegacyStatsMenuSkillHeader_SetProperties");
static_assert(sizeof(VLegacyStatsMenuSkillHeader_SetProperties) == 0x000018, "Wrong size on VLegacyStatsMenuSkillHeader_SetProperties");
static_assert(offsetof(VLegacyStatsMenuSkillHeader_SetProperties, Value) == 0x000000, "Member 'VLegacyStatsMenuSkillHeader_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyStatsMenuSkillHeader.GetProperties
// 0x0018 (0x0018 - 0x0000)
struct VLegacyStatsMenuSkillHeader_GetProperties final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuSkillHeader_GetProperties) == 0x000008, "Wrong alignment on VLegacyStatsMenuSkillHeader_GetProperties");
static_assert(sizeof(VLegacyStatsMenuSkillHeader_GetProperties) == 0x000018, "Wrong size on VLegacyStatsMenuSkillHeader_GetProperties");
static_assert(offsetof(VLegacyStatsMenuSkillHeader_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenuSkillHeader_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct AltarGameUserSetting_GetInstance final
{
public:
	class UAltarGameUserSetting*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetInstance) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetInstance");
static_assert(sizeof(AltarGameUserSetting_GetInstance) == 0x000008, "Wrong size on AltarGameUserSetting_GetInstance");
static_assert(offsetof(AltarGameUserSetting_GetInstance, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_GetInstance::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.AddOrUpdateRebindToSave
// 0x0030 (0x0030 - 0x0000)
struct AltarGameUserSetting_AddOrUpdateRebindToSave final
{
public:
	class UInputMappingContext*                   MappingContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERebindSaveSlot                               Slot;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AltarGameUserSetting_AddOrUpdateRebindToSave) == 0x000008, "Wrong alignment on AltarGameUserSetting_AddOrUpdateRebindToSave");
static_assert(sizeof(AltarGameUserSetting_AddOrUpdateRebindToSave) == 0x000030, "Wrong size on AltarGameUserSetting_AddOrUpdateRebindToSave");
static_assert(offsetof(AltarGameUserSetting_AddOrUpdateRebindToSave, MappingContext) == 0x000000, "Member 'AltarGameUserSetting_AddOrUpdateRebindToSave::MappingContext' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_AddOrUpdateRebindToSave, InputAction) == 0x000008, "Member 'AltarGameUserSetting_AddOrUpdateRebindToSave::InputAction' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_AddOrUpdateRebindToSave, Key) == 0x000010, "Member 'AltarGameUserSetting_AddOrUpdateRebindToSave::Key' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_AddOrUpdateRebindToSave, Slot) == 0x000028, "Member 'AltarGameUserSetting_AddOrUpdateRebindToSave::Slot' has a wrong offset!");

// Function Altar.AltarGameUserSetting.AddOrUpdateSettingsToSave
// 0x0010 (0x0010 - 0x0000)
struct AltarGameUserSetting_AddOrUpdateSettingsToSave final
{
public:
	struct FModernSettingCommand                  Settings;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_AddOrUpdateSettingsToSave) == 0x000008, "Wrong alignment on AltarGameUserSetting_AddOrUpdateSettingsToSave");
static_assert(sizeof(AltarGameUserSetting_AddOrUpdateSettingsToSave) == 0x000010, "Wrong size on AltarGameUserSetting_AddOrUpdateSettingsToSave");
static_assert(offsetof(AltarGameUserSetting_AddOrUpdateSettingsToSave, Settings) == 0x000000, "Member 'AltarGameUserSetting_AddOrUpdateSettingsToSave::Settings' has a wrong offset!");

// Function Altar.AltarGameUserSetting.ApplyAltarCVARSettings
// 0x0001 (0x0001 - 0x0000)
struct AltarGameUserSetting_ApplyAltarCVARSettings final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_ApplyAltarCVARSettings) == 0x000001, "Wrong alignment on AltarGameUserSetting_ApplyAltarCVARSettings");
static_assert(sizeof(AltarGameUserSetting_ApplyAltarCVARSettings) == 0x000001, "Wrong size on AltarGameUserSetting_ApplyAltarCVARSettings");
static_assert(offsetof(AltarGameUserSetting_ApplyAltarCVARSettings, bForce) == 0x000000, "Member 'AltarGameUserSetting_ApplyAltarCVARSettings::bForce' has a wrong offset!");

// Function Altar.AltarGameUserSetting.DoAutoDetect
// 0x0001 (0x0001 - 0x0000)
struct AltarGameUserSetting_DoAutoDetect final
{
public:
	bool                                          bForceSync;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_DoAutoDetect) == 0x000001, "Wrong alignment on AltarGameUserSetting_DoAutoDetect");
static_assert(sizeof(AltarGameUserSetting_DoAutoDetect) == 0x000001, "Wrong size on AltarGameUserSetting_DoAutoDetect");
static_assert(offsetof(AltarGameUserSetting_DoAutoDetect, bForceSync) == 0x000000, "Member 'AltarGameUserSetting_DoAutoDetect::bForceSync' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetOrAddRebindFromSaved
// 0x0068 (0x0068 - 0x0000)
struct AltarGameUserSetting_GetOrAddRebindFromSaved final
{
public:
	class UInputMappingContext*                   MappingContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERebindSaveSlot                               Slot;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnhancedActionKeyMapping              ReturnValue;                                       // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetOrAddRebindFromSaved) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetOrAddRebindFromSaved");
static_assert(sizeof(AltarGameUserSetting_GetOrAddRebindFromSaved) == 0x000068, "Wrong size on AltarGameUserSetting_GetOrAddRebindFromSaved");
static_assert(offsetof(AltarGameUserSetting_GetOrAddRebindFromSaved, MappingContext) == 0x000000, "Member 'AltarGameUserSetting_GetOrAddRebindFromSaved::MappingContext' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetOrAddRebindFromSaved, InputAction) == 0x000008, "Member 'AltarGameUserSetting_GetOrAddRebindFromSaved::InputAction' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetOrAddRebindFromSaved, Slot) == 0x000010, "Member 'AltarGameUserSetting_GetOrAddRebindFromSaved::Slot' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetOrAddRebindFromSaved, ReturnValue) == 0x000018, "Member 'AltarGameUserSetting_GetOrAddRebindFromSaved::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetOrAddValueFromSavedSettings
// 0x0020 (0x0020 - 0x0000)
struct AltarGameUserSetting_GetOrAddValueFromSavedSettings final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetOrAddValueFromSavedSettings) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetOrAddValueFromSavedSettings");
static_assert(sizeof(AltarGameUserSetting_GetOrAddValueFromSavedSettings) == 0x000020, "Wrong size on AltarGameUserSetting_GetOrAddValueFromSavedSettings");
static_assert(offsetof(AltarGameUserSetting_GetOrAddValueFromSavedSettings, Command) == 0x000000, "Member 'AltarGameUserSetting_GetOrAddValueFromSavedSettings::Command' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetOrAddValueFromSavedSettings, ReturnValue) == 0x000010, "Member 'AltarGameUserSetting_GetOrAddValueFromSavedSettings::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetSavedKeyForBind
// 0x0030 (0x0030 - 0x0000)
struct AltarGameUserSetting_GetSavedKeyForBind final
{
public:
	class UInputMappingContext*                   MappingContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERebindSaveSlot                               Slot;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetSavedKeyForBind) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetSavedKeyForBind");
static_assert(sizeof(AltarGameUserSetting_GetSavedKeyForBind) == 0x000030, "Wrong size on AltarGameUserSetting_GetSavedKeyForBind");
static_assert(offsetof(AltarGameUserSetting_GetSavedKeyForBind, MappingContext) == 0x000000, "Member 'AltarGameUserSetting_GetSavedKeyForBind::MappingContext' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetSavedKeyForBind, InputAction) == 0x000008, "Member 'AltarGameUserSetting_GetSavedKeyForBind::InputAction' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetSavedKeyForBind, Slot) == 0x000010, "Member 'AltarGameUserSetting_GetSavedKeyForBind::Slot' has a wrong offset!");
static_assert(offsetof(AltarGameUserSetting_GetSavedKeyForBind, ReturnValue) == 0x000018, "Member 'AltarGameUserSetting_GetSavedKeyForBind::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetDefaultSavedRebind
// 0x0050 (0x0050 - 0x0000)
struct AltarGameUserSetting_GetDefaultSavedRebind final
{
public:
	TMap<class FString, struct FVAltarRebindMap>  ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetDefaultSavedRebind) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetDefaultSavedRebind");
static_assert(sizeof(AltarGameUserSetting_GetDefaultSavedRebind) == 0x000050, "Wrong size on AltarGameUserSetting_GetDefaultSavedRebind");
static_assert(offsetof(AltarGameUserSetting_GetDefaultSavedRebind, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_GetDefaultSavedRebind::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetDefaultSavedSettings
// 0x0050 (0x0050 - 0x0000)
struct AltarGameUserSetting_GetDefaultSavedSettings final
{
public:
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetDefaultSavedSettings) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetDefaultSavedSettings");
static_assert(sizeof(AltarGameUserSetting_GetDefaultSavedSettings) == 0x000050, "Wrong size on AltarGameUserSetting_GetDefaultSavedSettings");
static_assert(offsetof(AltarGameUserSetting_GetDefaultSavedSettings, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_GetDefaultSavedSettings::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetSavedSettings
// 0x0050 (0x0050 - 0x0000)
struct AltarGameUserSetting_GetSavedSettings final
{
public:
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetSavedSettings) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetSavedSettings");
static_assert(sizeof(AltarGameUserSetting_GetSavedSettings) == 0x000050, "Wrong size on AltarGameUserSetting_GetSavedSettings");
static_assert(offsetof(AltarGameUserSetting_GetSavedSettings, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_GetSavedSettings::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.GetSettingPageTable
// 0x0008 (0x0008 - 0x0000)
struct AltarGameUserSetting_GetSettingPageTable final
{
public:
	class UVModernSettingPageTable*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_GetSettingPageTable) == 0x000008, "Wrong alignment on AltarGameUserSetting_GetSettingPageTable");
static_assert(sizeof(AltarGameUserSetting_GetSettingPageTable) == 0x000008, "Wrong size on AltarGameUserSetting_GetSettingPageTable");
static_assert(offsetof(AltarGameUserSetting_GetSettingPageTable, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_GetSettingPageTable::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.IsEULAAccepted
// 0x0001 (0x0001 - 0x0000)
struct AltarGameUserSetting_IsEULAAccepted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_IsEULAAccepted) == 0x000001, "Wrong alignment on AltarGameUserSetting_IsEULAAccepted");
static_assert(sizeof(AltarGameUserSetting_IsEULAAccepted) == 0x000001, "Wrong size on AltarGameUserSetting_IsEULAAccepted");
static_assert(offsetof(AltarGameUserSetting_IsEULAAccepted, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_IsEULAAccepted::ReturnValue' has a wrong offset!");

// Function Altar.AltarGameUserSetting.IsOnboardingSettingsDone
// 0x0001 (0x0001 - 0x0000)
struct AltarGameUserSetting_IsOnboardingSettingsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AltarGameUserSetting_IsOnboardingSettingsDone) == 0x000001, "Wrong alignment on AltarGameUserSetting_IsOnboardingSettingsDone");
static_assert(sizeof(AltarGameUserSetting_IsOnboardingSettingsDone) == 0x000001, "Wrong size on AltarGameUserSetting_IsOnboardingSettingsDone");
static_assert(offsetof(AltarGameUserSetting_IsOnboardingSettingsDone, ReturnValue) == 0x000000, "Member 'AltarGameUserSetting_IsOnboardingSettingsDone::ReturnValue' has a wrong offset!");

// Function Altar.VModernScrollbar.OnPropertiesChanged
// 0x0010 (0x0010 - 0x0000)
struct VModernScrollbar_OnPropertiesChanged final
{
public:
	struct FModernScrollbarProperties             Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_OnPropertiesChanged) == 0x000004, "Wrong alignment on VModernScrollbar_OnPropertiesChanged");
static_assert(sizeof(VModernScrollbar_OnPropertiesChanged) == 0x000010, "Wrong size on VModernScrollbar_OnPropertiesChanged");
static_assert(offsetof(VModernScrollbar_OnPropertiesChanged, Values) == 0x000000, "Member 'VModernScrollbar_OnPropertiesChanged::Values' has a wrong offset!");

// Function Altar.VModernScrollbar.OnValueUpdated
// 0x0004 (0x0004 - 0x0000)
struct VModernScrollbar_OnValueUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_OnValueUpdated) == 0x000004, "Wrong alignment on VModernScrollbar_OnValueUpdated");
static_assert(sizeof(VModernScrollbar_OnValueUpdated) == 0x000004, "Wrong size on VModernScrollbar_OnValueUpdated");
static_assert(offsetof(VModernScrollbar_OnValueUpdated, Value) == 0x000000, "Member 'VModernScrollbar_OnValueUpdated::Value' has a wrong offset!");

// Function Altar.VModernScrollbar.SetProperties
// 0x0010 (0x0010 - 0x0000)
struct VModernScrollbar_SetProperties final
{
public:
	struct FModernScrollbarProperties             NewProperties;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_SetProperties) == 0x000004, "Wrong alignment on VModernScrollbar_SetProperties");
static_assert(sizeof(VModernScrollbar_SetProperties) == 0x000010, "Wrong size on VModernScrollbar_SetProperties");
static_assert(offsetof(VModernScrollbar_SetProperties, NewProperties) == 0x000000, "Member 'VModernScrollbar_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VModernScrollbar.SetValue
// 0x0004 (0x0004 - 0x0000)
struct VModernScrollbar_SetValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_SetValue) == 0x000004, "Wrong alignment on VModernScrollbar_SetValue");
static_assert(sizeof(VModernScrollbar_SetValue) == 0x000004, "Wrong size on VModernScrollbar_SetValue");
static_assert(offsetof(VModernScrollbar_SetValue, NewValue) == 0x000000, "Member 'VModernScrollbar_SetValue::NewValue' has a wrong offset!");

// Function Altar.VModernScrollbar.UpdateValueFromSlider
// 0x0004 (0x0004 - 0x0000)
struct VModernScrollbar_UpdateValueFromSlider final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_UpdateValueFromSlider) == 0x000004, "Wrong alignment on VModernScrollbar_UpdateValueFromSlider");
static_assert(sizeof(VModernScrollbar_UpdateValueFromSlider) == 0x000004, "Wrong size on VModernScrollbar_UpdateValueFromSlider");
static_assert(offsetof(VModernScrollbar_UpdateValueFromSlider, Value) == 0x000000, "Member 'VModernScrollbar_UpdateValueFromSlider::Value' has a wrong offset!");

// Function Altar.VModernScrollbar.GetHandle
// 0x0008 (0x0008 - 0x0000)
struct VModernScrollbar_GetHandle final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_GetHandle) == 0x000008, "Wrong alignment on VModernScrollbar_GetHandle");
static_assert(sizeof(VModernScrollbar_GetHandle) == 0x000008, "Wrong size on VModernScrollbar_GetHandle");
static_assert(offsetof(VModernScrollbar_GetHandle, ReturnValue) == 0x000000, "Member 'VModernScrollbar_GetHandle::ReturnValue' has a wrong offset!");

// Function Altar.VModernScrollbar.GetProperties
// 0x0010 (0x0010 - 0x0000)
struct VModernScrollbar_GetProperties final
{
public:
	struct FModernScrollbarProperties             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_GetProperties) == 0x000004, "Wrong alignment on VModernScrollbar_GetProperties");
static_assert(sizeof(VModernScrollbar_GetProperties) == 0x000010, "Wrong size on VModernScrollbar_GetProperties");
static_assert(offsetof(VModernScrollbar_GetProperties, ReturnValue) == 0x000000, "Member 'VModernScrollbar_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VModernScrollbar.GetSlider
// 0x0008 (0x0008 - 0x0000)
struct VModernScrollbar_GetSlider final
{
public:
	class UAnalogSlider*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollbar_GetSlider) == 0x000008, "Wrong alignment on VModernScrollbar_GetSlider");
static_assert(sizeof(VModernScrollbar_GetSlider) == 0x000008, "Wrong size on VModernScrollbar_GetSlider");
static_assert(offsetof(VModernScrollbar_GetSlider, ReturnValue) == 0x000000, "Member 'VModernScrollbar_GetSlider::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_SummonCreatureDefend.GetAccompanyProcedure
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure final
{
public:
	class UVAIProcedureExecution_ACCOMPANY*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure) == 0x000008, "Wrong alignment on VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure");
static_assert(sizeof(VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure) == 0x000008, "Wrong size on VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure");
static_assert(offsetof(VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_SummonCreatureDefend_GetAccompanyProcedure::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_SummonCreatureDefend.GetFollowProcedure
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure final
{
public:
	class UVAIProcedureExecution_FOLLOW*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure) == 0x000008, "Wrong alignment on VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure");
static_assert(sizeof(VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure) == 0x000008, "Wrong size on VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure");
static_assert(offsetof(VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_SummonCreatureDefend_GetFollowProcedure::ReturnValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.RegisterSendClickedButton
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_RegisterSendClickedButton final
{
public:
	ELegacyPauseButtonsIDs                        InButtonIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong alignment on VPauseMenuViewModel_RegisterSendClickedButton");
static_assert(sizeof(VPauseMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong size on VPauseMenuViewModel_RegisterSendClickedButton");
static_assert(offsetof(VPauseMenuViewModel_RegisterSendClickedButton, InButtonIndex) == 0x000000, "Member 'VPauseMenuViewModel_RegisterSendClickedButton::InButtonIndex' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.SetIsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_SetIsDisplayed final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_SetIsDisplayed) == 0x000001, "Wrong alignment on VPauseMenuViewModel_SetIsDisplayed");
static_assert(sizeof(VPauseMenuViewModel_SetIsDisplayed) == 0x000001, "Wrong size on VPauseMenuViewModel_SetIsDisplayed");
static_assert(offsetof(VPauseMenuViewModel_SetIsDisplayed, bNewValue) == 0x000000, "Member 'VPauseMenuViewModel_SetIsDisplayed::bNewValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.SetIsMenuClosing
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_SetIsMenuClosing final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_SetIsMenuClosing) == 0x000001, "Wrong alignment on VPauseMenuViewModel_SetIsMenuClosing");
static_assert(sizeof(VPauseMenuViewModel_SetIsMenuClosing) == 0x000001, "Wrong size on VPauseMenuViewModel_SetIsMenuClosing");
static_assert(offsetof(VPauseMenuViewModel_SetIsMenuClosing, bNewValue) == 0x000000, "Member 'VPauseMenuViewModel_SetIsMenuClosing::bNewValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.SetIsOpeningSaveLoadMenu
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_SetIsOpeningSaveLoadMenu final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_SetIsOpeningSaveLoadMenu) == 0x000001, "Wrong alignment on VPauseMenuViewModel_SetIsOpeningSaveLoadMenu");
static_assert(sizeof(VPauseMenuViewModel_SetIsOpeningSaveLoadMenu) == 0x000001, "Wrong size on VPauseMenuViewModel_SetIsOpeningSaveLoadMenu");
static_assert(offsetof(VPauseMenuViewModel_SetIsOpeningSaveLoadMenu, bNewValue) == 0x000000, "Member 'VPauseMenuViewModel_SetIsOpeningSaveLoadMenu::bNewValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.GetBuildInfo
// 0x0018 (0x0018 - 0x0000)
struct VPauseMenuViewModel_GetBuildInfo final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_GetBuildInfo) == 0x000008, "Wrong alignment on VPauseMenuViewModel_GetBuildInfo");
static_assert(sizeof(VPauseMenuViewModel_GetBuildInfo) == 0x000018, "Wrong size on VPauseMenuViewModel_GetBuildInfo");
static_assert(offsetof(VPauseMenuViewModel_GetBuildInfo, ReturnValue) == 0x000000, "Member 'VPauseMenuViewModel_GetBuildInfo::ReturnValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.GetIsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_GetIsDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_GetIsDisplayed) == 0x000001, "Wrong alignment on VPauseMenuViewModel_GetIsDisplayed");
static_assert(sizeof(VPauseMenuViewModel_GetIsDisplayed) == 0x000001, "Wrong size on VPauseMenuViewModel_GetIsDisplayed");
static_assert(offsetof(VPauseMenuViewModel_GetIsDisplayed, ReturnValue) == 0x000000, "Member 'VPauseMenuViewModel_GetIsDisplayed::ReturnValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.GetIsMenuClosing
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_GetIsMenuClosing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_GetIsMenuClosing) == 0x000001, "Wrong alignment on VPauseMenuViewModel_GetIsMenuClosing");
static_assert(sizeof(VPauseMenuViewModel_GetIsMenuClosing) == 0x000001, "Wrong size on VPauseMenuViewModel_GetIsMenuClosing");
static_assert(offsetof(VPauseMenuViewModel_GetIsMenuClosing, ReturnValue) == 0x000000, "Member 'VPauseMenuViewModel_GetIsMenuClosing::ReturnValue' has a wrong offset!");

// Function Altar.VPauseMenuViewModel.GetIsOpeningSaveLoadMenu
// 0x0001 (0x0001 - 0x0000)
struct VPauseMenuViewModel_GetIsOpeningSaveLoadMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPauseMenuViewModel_GetIsOpeningSaveLoadMenu) == 0x000001, "Wrong alignment on VPauseMenuViewModel_GetIsOpeningSaveLoadMenu");
static_assert(sizeof(VPauseMenuViewModel_GetIsOpeningSaveLoadMenu) == 0x000001, "Wrong size on VPauseMenuViewModel_GetIsOpeningSaveLoadMenu");
static_assert(offsetof(VPauseMenuViewModel_GetIsOpeningSaveLoadMenu, ReturnValue) == 0x000000, "Member 'VPauseMenuViewModel_GetIsOpeningSaveLoadMenu::ReturnValue' has a wrong offset!");

// Function Altar.AsyncAction_CreateWidgetAsync.CreateWidgetAsync
// 0x0048 (0x0048 - 0x0000)
struct AsyncAction_CreateWidgetAsync_CreateWidgetAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UserWidgetSoftClass;                               // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendInputUntilComplete;                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_CreateWidgetAsync*         ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync) == 0x000008, "Wrong alignment on AsyncAction_CreateWidgetAsync_CreateWidgetAsync");
static_assert(sizeof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync) == 0x000048, "Wrong size on AsyncAction_CreateWidgetAsync_CreateWidgetAsync");
static_assert(offsetof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync, WorldContextObject) == 0x000000, "Member 'AsyncAction_CreateWidgetAsync_CreateWidgetAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync, UserWidgetSoftClass) == 0x000008, "Member 'AsyncAction_CreateWidgetAsync_CreateWidgetAsync::UserWidgetSoftClass' has a wrong offset!");
static_assert(offsetof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync, OwningPlayer) == 0x000030, "Member 'AsyncAction_CreateWidgetAsync_CreateWidgetAsync::OwningPlayer' has a wrong offset!");
static_assert(offsetof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync, bSuspendInputUntilComplete) == 0x000038, "Member 'AsyncAction_CreateWidgetAsync_CreateWidgetAsync::bSuspendInputUntilComplete' has a wrong offset!");
static_assert(offsetof(AsyncAction_CreateWidgetAsync_CreateWidgetAsync, ReturnValue) == 0x000040, "Member 'AsyncAction_CreateWidgetAsync_CreateWidgetAsync::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.RegisterSendClickOnQuandrant
// 0x0004 (0x0004 - 0x0000)
struct VPersuasionMenuViewModel_RegisterSendClickOnQuandrant final
{
public:
	int32                                         NewQuadrantClickedID;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_RegisterSendClickOnQuandrant) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_RegisterSendClickOnQuandrant");
static_assert(sizeof(VPersuasionMenuViewModel_RegisterSendClickOnQuandrant) == 0x000004, "Wrong size on VPersuasionMenuViewModel_RegisterSendClickOnQuandrant");
static_assert(offsetof(VPersuasionMenuViewModel_RegisterSendClickOnQuandrant, NewQuadrantClickedID) == 0x000000, "Member 'VPersuasionMenuViewModel_RegisterSendClickOnQuandrant::NewQuadrantClickedID' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.RegisterSendQuadrantHovered
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_RegisterSendQuadrantHovered final
{
public:
	EReaction                                     ReactionValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_RegisterSendQuadrantHovered) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_RegisterSendQuadrantHovered");
static_assert(sizeof(VPersuasionMenuViewModel_RegisterSendQuadrantHovered) == 0x000001, "Wrong size on VPersuasionMenuViewModel_RegisterSendQuadrantHovered");
static_assert(offsetof(VPersuasionMenuViewModel_RegisterSendQuadrantHovered, ReactionValue) == 0x000000, "Member 'VPersuasionMenuViewModel_RegisterSendQuadrantHovered::ReactionValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetBribeData
// 0x0008 (0x0008 - 0x0000)
struct VPersuasionMenuViewModel_SetBribeData final
{
public:
	struct FBribeData                             NewBirbeData;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetBribeData) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_SetBribeData");
static_assert(sizeof(VPersuasionMenuViewModel_SetBribeData) == 0x000008, "Wrong size on VPersuasionMenuViewModel_SetBribeData");
static_assert(offsetof(VPersuasionMenuViewModel_SetBribeData, NewBirbeData) == 0x000000, "Member 'VPersuasionMenuViewModel_SetBribeData::NewBirbeData' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetCanBribe
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_SetCanBribe final
{
public:
	bool                                          bNewCanBribeValue;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetCanBribe) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_SetCanBribe");
static_assert(sizeof(VPersuasionMenuViewModel_SetCanBribe) == 0x000001, "Wrong size on VPersuasionMenuViewModel_SetCanBribe");
static_assert(offsetof(VPersuasionMenuViewModel_SetCanBribe, bNewCanBribeValue) == 0x000000, "Member 'VPersuasionMenuViewModel_SetCanBribe::bNewCanBribeValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetCanPersuade
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_SetCanPersuade final
{
public:
	bool                                          bCanPersuadeNewValue;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetCanPersuade) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_SetCanPersuade");
static_assert(sizeof(VPersuasionMenuViewModel_SetCanPersuade) == 0x000001, "Wrong size on VPersuasionMenuViewModel_SetCanPersuade");
static_assert(offsetof(VPersuasionMenuViewModel_SetCanPersuade, bCanPersuadeNewValue) == 0x000000, "Member 'VPersuasionMenuViewModel_SetCanPersuade::bCanPersuadeNewValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetCanRotateWheel
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_SetCanRotateWheel final
{
public:
	bool                                          bNewCanRotateWheelValue;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetCanRotateWheel) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_SetCanRotateWheel");
static_assert(sizeof(VPersuasionMenuViewModel_SetCanRotateWheel) == 0x000001, "Wrong size on VPersuasionMenuViewModel_SetCanRotateWheel");
static_assert(offsetof(VPersuasionMenuViewModel_SetCanRotateWheel, bNewCanRotateWheelValue) == 0x000000, "Member 'VPersuasionMenuViewModel_SetCanRotateWheel::bNewCanRotateWheelValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetDisposition
// 0x0008 (0x0008 - 0x0000)
struct VPersuasionMenuViewModel_SetDisposition final
{
public:
	struct FNpcDisposition                        NewDisposition;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetDisposition) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_SetDisposition");
static_assert(sizeof(VPersuasionMenuViewModel_SetDisposition) == 0x000008, "Wrong size on VPersuasionMenuViewModel_SetDisposition");
static_assert(offsetof(VPersuasionMenuViewModel_SetDisposition, NewDisposition) == 0x000000, "Member 'VPersuasionMenuViewModel_SetDisposition::NewDisposition' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetGamePlayState
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_SetGamePlayState final
{
public:
	EPersuasionMiniGamePlayState                  NewGamePlayState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetGamePlayState) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_SetGamePlayState");
static_assert(sizeof(VPersuasionMenuViewModel_SetGamePlayState) == 0x000001, "Wrong size on VPersuasionMenuViewModel_SetGamePlayState");
static_assert(offsetof(VPersuasionMenuViewModel_SetGamePlayState, NewGamePlayState) == 0x000000, "Member 'VPersuasionMenuViewModel_SetGamePlayState::NewGamePlayState' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetHasGameStarted
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_SetHasGameStarted final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetHasGameStarted) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_SetHasGameStarted");
static_assert(sizeof(VPersuasionMenuViewModel_SetHasGameStarted) == 0x000001, "Wrong size on VPersuasionMenuViewModel_SetHasGameStarted");
static_assert(offsetof(VPersuasionMenuViewModel_SetHasGameStarted, bNewValue) == 0x000000, "Member 'VPersuasionMenuViewModel_SetHasGameStarted::bNewValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetNPCName
// 0x0018 (0x0018 - 0x0000)
struct VPersuasionMenuViewModel_SetNPCName final
{
public:
	class FText                                   NewNpcName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetNPCName) == 0x000008, "Wrong alignment on VPersuasionMenuViewModel_SetNPCName");
static_assert(sizeof(VPersuasionMenuViewModel_SetNPCName) == 0x000018, "Wrong size on VPersuasionMenuViewModel_SetNPCName");
static_assert(offsetof(VPersuasionMenuViewModel_SetNPCName, NewNpcName) == 0x000000, "Member 'VPersuasionMenuViewModel_SetNPCName::NewNpcName' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VPersuasionMenuViewModel_SetPlayerGold final
{
public:
	int32                                         InNewPlayerGold;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetPlayerGold) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_SetPlayerGold");
static_assert(sizeof(VPersuasionMenuViewModel_SetPlayerGold) == 0x000004, "Wrong size on VPersuasionMenuViewModel_SetPlayerGold");
static_assert(offsetof(VPersuasionMenuViewModel_SetPlayerGold, InNewPlayerGold) == 0x000000, "Member 'VPersuasionMenuViewModel_SetPlayerGold::InNewPlayerGold' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.SetWheelInitializingData
// 0x0030 (0x0030 - 0x0000)
struct VPersuasionMenuViewModel_SetWheelInitializingData final
{
public:
	struct FWheelInitializingData                 NewWheelInitializingData;                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_SetWheelInitializingData) == 0x000008, "Wrong alignment on VPersuasionMenuViewModel_SetWheelInitializingData");
static_assert(sizeof(VPersuasionMenuViewModel_SetWheelInitializingData) == 0x000030, "Wrong size on VPersuasionMenuViewModel_SetWheelInitializingData");
static_assert(offsetof(VPersuasionMenuViewModel_SetWheelInitializingData, NewWheelInitializingData) == 0x000000, "Member 'VPersuasionMenuViewModel_SetWheelInitializingData::NewWheelInitializingData' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.CanBribe
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_CanBribe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_CanBribe) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_CanBribe");
static_assert(sizeof(VPersuasionMenuViewModel_CanBribe) == 0x000001, "Wrong size on VPersuasionMenuViewModel_CanBribe");
static_assert(offsetof(VPersuasionMenuViewModel_CanBribe, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_CanBribe::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.CanPersuade
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_CanPersuade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_CanPersuade) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_CanPersuade");
static_assert(sizeof(VPersuasionMenuViewModel_CanPersuade) == 0x000001, "Wrong size on VPersuasionMenuViewModel_CanPersuade");
static_assert(offsetof(VPersuasionMenuViewModel_CanPersuade, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_CanPersuade::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.CanRotateWheel
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_CanRotateWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_CanRotateWheel) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_CanRotateWheel");
static_assert(sizeof(VPersuasionMenuViewModel_CanRotateWheel) == 0x000001, "Wrong size on VPersuasionMenuViewModel_CanRotateWheel");
static_assert(offsetof(VPersuasionMenuViewModel_CanRotateWheel, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_CanRotateWheel::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GameHasStarted
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_GameHasStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GameHasStarted) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_GameHasStarted");
static_assert(sizeof(VPersuasionMenuViewModel_GameHasStarted) == 0x000001, "Wrong size on VPersuasionMenuViewModel_GameHasStarted");
static_assert(offsetof(VPersuasionMenuViewModel_GameHasStarted, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GameHasStarted::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GetBribeData
// 0x0008 (0x0008 - 0x0000)
struct VPersuasionMenuViewModel_GetBribeData final
{
public:
	struct FBribeData                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GetBribeData) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_GetBribeData");
static_assert(sizeof(VPersuasionMenuViewModel_GetBribeData) == 0x000008, "Wrong size on VPersuasionMenuViewModel_GetBribeData");
static_assert(offsetof(VPersuasionMenuViewModel_GetBribeData, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GetBribeData::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GetDisposition
// 0x0008 (0x0008 - 0x0000)
struct VPersuasionMenuViewModel_GetDisposition final
{
public:
	struct FNpcDisposition                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GetDisposition) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_GetDisposition");
static_assert(sizeof(VPersuasionMenuViewModel_GetDisposition) == 0x000008, "Wrong size on VPersuasionMenuViewModel_GetDisposition");
static_assert(offsetof(VPersuasionMenuViewModel_GetDisposition, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GetDisposition::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GetGamePlayState
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_GetGamePlayState final
{
public:
	EPersuasionMiniGamePlayState                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GetGamePlayState) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_GetGamePlayState");
static_assert(sizeof(VPersuasionMenuViewModel_GetGamePlayState) == 0x000001, "Wrong size on VPersuasionMenuViewModel_GetGamePlayState");
static_assert(offsetof(VPersuasionMenuViewModel_GetGamePlayState, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GetGamePlayState::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GetNPCName
// 0x0018 (0x0018 - 0x0000)
struct VPersuasionMenuViewModel_GetNPCName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GetNPCName) == 0x000008, "Wrong alignment on VPersuasionMenuViewModel_GetNPCName");
static_assert(sizeof(VPersuasionMenuViewModel_GetNPCName) == 0x000018, "Wrong size on VPersuasionMenuViewModel_GetNPCName");
static_assert(offsetof(VPersuasionMenuViewModel_GetNPCName, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GetNPCName::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VPersuasionMenuViewModel_GetPlayerGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GetPlayerGold) == 0x000004, "Wrong alignment on VPersuasionMenuViewModel_GetPlayerGold");
static_assert(sizeof(VPersuasionMenuViewModel_GetPlayerGold) == 0x000004, "Wrong size on VPersuasionMenuViewModel_GetPlayerGold");
static_assert(offsetof(VPersuasionMenuViewModel_GetPlayerGold, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GetPlayerGold::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.GetWheelInitializingData
// 0x0030 (0x0030 - 0x0000)
struct VPersuasionMenuViewModel_GetWheelInitializingData final
{
public:
	struct FWheelInitializingData                 ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_GetWheelInitializingData) == 0x000008, "Wrong alignment on VPersuasionMenuViewModel_GetWheelInitializingData");
static_assert(sizeof(VPersuasionMenuViewModel_GetWheelInitializingData) == 0x000030, "Wrong size on VPersuasionMenuViewModel_GetWheelInitializingData");
static_assert(offsetof(VPersuasionMenuViewModel_GetWheelInitializingData, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_GetWheelInitializingData::ReturnValue' has a wrong offset!");

// Function Altar.VPersuasionMenuViewModel.WasSpeakerAlreadyPersuaded
// 0x0001 (0x0001 - 0x0000)
struct VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded) == 0x000001, "Wrong alignment on VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded");
static_assert(sizeof(VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded) == 0x000001, "Wrong size on VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded");
static_assert(offsetof(VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded, ReturnValue) == 0x000000, "Member 'VPersuasionMenuViewModel_WasSpeakerAlreadyPersuaded::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_Pursue.GetFollowProcedure
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_Pursue_GetFollowProcedure final
{
public:
	class UVAIProcedureExecution_FOLLOW*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_Pursue_GetFollowProcedure) == 0x000008, "Wrong alignment on VAIProcedureExecution_Pursue_GetFollowProcedure");
static_assert(sizeof(VAIProcedureExecution_Pursue_GetFollowProcedure) == 0x000008, "Wrong size on VAIProcedureExecution_Pursue_GetFollowProcedure");
static_assert(offsetof(VAIProcedureExecution_Pursue_GetFollowProcedure, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_Pursue_GetFollowProcedure::ReturnValue' has a wrong offset!");

// Function Altar.VSwimLocomotionHorseRiderAnimInstance.SetSwimLayerData
// 0x0018 (0x0018 - 0x0000)
struct VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData final
{
public:
	struct FVHorseRiderLocomotionSwim             InSwimLayerData;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData) == 0x000008, "Wrong alignment on VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData");
static_assert(sizeof(VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData) == 0x000018, "Wrong size on VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData");
static_assert(offsetof(VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData, InSwimLayerData) == 0x000000, "Member 'VSwimLocomotionHorseRiderAnimInstance_SetSwimLayerData::InSwimLayerData' has a wrong offset!");

// Function Altar.AsyncAction_PushWidgetToLayer.PushDefaultMenuToLayer
// 0x0040 (0x0040 - 0x0000)
struct AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer final
{
public:
	TSoftClassPtr<class UClass>                   ParentMenuClass;                                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LayerName;                                         // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendInputUntilComplete;                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_PushWidgetToLayer*         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer) == 0x000008, "Wrong alignment on AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer");
static_assert(sizeof(AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer) == 0x000040, "Wrong size on AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer, ParentMenuClass) == 0x000000, "Member 'AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer::ParentMenuClass' has a wrong offset!");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer, LayerName) == 0x000028, "Member 'AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer::LayerName' has a wrong offset!");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer, bSuspendInputUntilComplete) == 0x000030, "Member 'AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer::bSuspendInputUntilComplete' has a wrong offset!");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer, ReturnValue) == 0x000038, "Member 'AsyncAction_PushWidgetToLayer_PushDefaultMenuToLayer::ReturnValue' has a wrong offset!");

// Function Altar.AsyncAction_PushWidgetToLayer.PushWidgetToLayer
// 0x0040 (0x0040 - 0x0000)
struct AsyncAction_PushWidgetToLayer_PushWidgetToLayer final
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LayerName;                                         // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendInputUntilComplete;                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_PushWidgetToLayer*         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_PushWidgetToLayer_PushWidgetToLayer) == 0x000008, "Wrong alignment on AsyncAction_PushWidgetToLayer_PushWidgetToLayer");
static_assert(sizeof(AsyncAction_PushWidgetToLayer_PushWidgetToLayer) == 0x000040, "Wrong size on AsyncAction_PushWidgetToLayer_PushWidgetToLayer");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushWidgetToLayer, WidgetClass) == 0x000000, "Member 'AsyncAction_PushWidgetToLayer_PushWidgetToLayer::WidgetClass' has a wrong offset!");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushWidgetToLayer, LayerName) == 0x000028, "Member 'AsyncAction_PushWidgetToLayer_PushWidgetToLayer::LayerName' has a wrong offset!");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushWidgetToLayer, bSuspendInputUntilComplete) == 0x000030, "Member 'AsyncAction_PushWidgetToLayer_PushWidgetToLayer::bSuspendInputUntilComplete' has a wrong offset!");
static_assert(offsetof(AsyncAction_PushWidgetToLayer_PushWidgetToLayer, ReturnValue) == 0x000038, "Member 'AsyncAction_PushWidgetToLayer_PushWidgetToLayer::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMenuBookLine.SetAlignement
// 0x0001 (0x0001 - 0x0000)
struct VLegacyMenuBookLine_SetAlignement final
{
public:
	ELegacyBookStylizedTextAlignment              Alignement;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMenuBookLine_SetAlignement) == 0x000001, "Wrong alignment on VLegacyMenuBookLine_SetAlignement");
static_assert(sizeof(VLegacyMenuBookLine_SetAlignement) == 0x000001, "Wrong size on VLegacyMenuBookLine_SetAlignement");
static_assert(offsetof(VLegacyMenuBookLine_SetAlignement, Alignement) == 0x000000, "Member 'VLegacyMenuBookLine_SetAlignement::Alignement' has a wrong offset!");

// Function Altar.VLegacyMenuBookLine.SetFontFamily
// 0x0010 (0x0010 - 0x0000)
struct VLegacyMenuBookLine_SetFontFamily final
{
public:
	class FString                                 FontValue;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMenuBookLine_SetFontFamily) == 0x000008, "Wrong alignment on VLegacyMenuBookLine_SetFontFamily");
static_assert(sizeof(VLegacyMenuBookLine_SetFontFamily) == 0x000010, "Wrong size on VLegacyMenuBookLine_SetFontFamily");
static_assert(offsetof(VLegacyMenuBookLine_SetFontFamily, FontValue) == 0x000000, "Member 'VLegacyMenuBookLine_SetFontFamily::FontValue' has a wrong offset!");

// Function Altar.VLegacyMenuBookLine.SetLineText
// 0x0060 (0x0060 - 0x0000)
struct VLegacyMenuBookLine_SetLineText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLegacyBookStylizedText                TextStyle;                                         // 0x0018(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForceLayoutPrepass;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMenuBookLine_SetLineText) == 0x000008, "Wrong alignment on VLegacyMenuBookLine_SetLineText");
static_assert(sizeof(VLegacyMenuBookLine_SetLineText) == 0x000060, "Wrong size on VLegacyMenuBookLine_SetLineText");
static_assert(offsetof(VLegacyMenuBookLine_SetLineText, Text) == 0x000000, "Member 'VLegacyMenuBookLine_SetLineText::Text' has a wrong offset!");
static_assert(offsetof(VLegacyMenuBookLine_SetLineText, TextStyle) == 0x000018, "Member 'VLegacyMenuBookLine_SetLineText::TextStyle' has a wrong offset!");
static_assert(offsetof(VLegacyMenuBookLine_SetLineText, bForceLayoutPrepass) == 0x000048, "Member 'VLegacyMenuBookLine_SetLineText::bForceLayoutPrepass' has a wrong offset!");
static_assert(offsetof(VLegacyMenuBookLine_SetLineText, ReturnValue) == 0x000050, "Member 'VLegacyMenuBookLine_SetLineText::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMenuBookLine.SetRichText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyMenuBookLine_SetRichText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMenuBookLine_SetRichText) == 0x000008, "Wrong alignment on VLegacyMenuBookLine_SetRichText");
static_assert(sizeof(VLegacyMenuBookLine_SetRichText) == 0x000018, "Wrong size on VLegacyMenuBookLine_SetRichText");
static_assert(offsetof(VLegacyMenuBookLine_SetRichText, InText) == 0x000000, "Member 'VLegacyMenuBookLine_SetRichText::InText' has a wrong offset!");

// Function Altar.VLegacyMenuBookLine.GetRichText
// 0x0010 (0x0010 - 0x0000)
struct VLegacyMenuBookLine_GetRichText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMenuBookLine_GetRichText) == 0x000008, "Wrong alignment on VLegacyMenuBookLine_GetRichText");
static_assert(sizeof(VLegacyMenuBookLine_GetRichText) == 0x000010, "Wrong size on VLegacyMenuBookLine_GetRichText");
static_assert(offsetof(VLegacyMenuBookLine_GetRichText, ReturnValue) == 0x000000, "Member 'VLegacyMenuBookLine_GetRichText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMenu.SetViewModelReference
// 0x0008 (0x0008 - 0x0000)
struct VAltarMenu_SetViewModelReference final
{
public:
	class UVViewModelBase*                        ViewModelRef;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMenu_SetViewModelReference) == 0x000008, "Wrong alignment on VAltarMenu_SetViewModelReference");
static_assert(sizeof(VAltarMenu_SetViewModelReference) == 0x000008, "Wrong size on VAltarMenu_SetViewModelReference");
static_assert(offsetof(VAltarMenu_SetViewModelReference, ViewModelRef) == 0x000000, "Member 'VAltarMenu_SetViewModelReference::ViewModelRef' has a wrong offset!");

// Function Altar.VAltarMenu.SetWidgetToFocusOnControllerDesactivate
// 0x0010 (0x0010 - 0x0000)
struct VAltarMenu_SetWidgetToFocusOnControllerDesactivate final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> Value;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMenu_SetWidgetToFocusOnControllerDesactivate) == 0x000008, "Wrong alignment on VAltarMenu_SetWidgetToFocusOnControllerDesactivate");
static_assert(sizeof(VAltarMenu_SetWidgetToFocusOnControllerDesactivate) == 0x000010, "Wrong size on VAltarMenu_SetWidgetToFocusOnControllerDesactivate");
static_assert(offsetof(VAltarMenu_SetWidgetToFocusOnControllerDesactivate, Value) == 0x000000, "Member 'VAltarMenu_SetWidgetToFocusOnControllerDesactivate::Value' has a wrong offset!");

// Function Altar.VAltarMenu.BP_OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct VAltarMenu_BP_OnInputMethodChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMenu_BP_OnInputMethodChanged) == 0x000001, "Wrong alignment on VAltarMenu_BP_OnInputMethodChanged");
static_assert(sizeof(VAltarMenu_BP_OnInputMethodChanged) == 0x000001, "Wrong size on VAltarMenu_BP_OnInputMethodChanged");
static_assert(offsetof(VAltarMenu_BP_OnInputMethodChanged, InputType) == 0x000000, "Member 'VAltarMenu_BP_OnInputMethodChanged::InputType' has a wrong offset!");

// Function Altar.VAltarMenu.GetWidgetToFocusOnControllerDesactivate
// 0x0010 (0x0010 - 0x0000)
struct VAltarMenu_GetWidgetToFocusOnControllerDesactivate final
{
public:
	TScriptInterface<class IVEnhancedInputNavigable> ReturnValue;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMenu_GetWidgetToFocusOnControllerDesactivate) == 0x000008, "Wrong alignment on VAltarMenu_GetWidgetToFocusOnControllerDesactivate");
static_assert(sizeof(VAltarMenu_GetWidgetToFocusOnControllerDesactivate) == 0x000010, "Wrong size on VAltarMenu_GetWidgetToFocusOnControllerDesactivate");
static_assert(offsetof(VAltarMenu_GetWidgetToFocusOnControllerDesactivate, ReturnValue) == 0x000000, "Member 'VAltarMenu_GetWidgetToFocusOnControllerDesactivate::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerSubMenuBase.FadeInOutMenu
// 0x0003 (0x0003 - 0x0000)
struct VLegacyPlayerSubMenuBase_FadeInOutMenu final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromLeft;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerSubMenuBase_FadeInOutMenu) == 0x000001, "Wrong alignment on VLegacyPlayerSubMenuBase_FadeInOutMenu");
static_assert(sizeof(VLegacyPlayerSubMenuBase_FadeInOutMenu) == 0x000003, "Wrong size on VLegacyPlayerSubMenuBase_FadeInOutMenu");
static_assert(offsetof(VLegacyPlayerSubMenuBase_FadeInOutMenu, bIsVisible) == 0x000000, "Member 'VLegacyPlayerSubMenuBase_FadeInOutMenu::bIsVisible' has a wrong offset!");
static_assert(offsetof(VLegacyPlayerSubMenuBase_FadeInOutMenu, bFromLeft) == 0x000001, "Member 'VLegacyPlayerSubMenuBase_FadeInOutMenu::bFromLeft' has a wrong offset!");
static_assert(offsetof(VLegacyPlayerSubMenuBase_FadeInOutMenu, bInstant) == 0x000002, "Member 'VLegacyPlayerSubMenuBase_FadeInOutMenu::bInstant' has a wrong offset!");

// Function Altar.VLegacyPlayerSubMenuBase.RouteBackEvent
// 0x0001 (0x0001 - 0x0000)
struct VLegacyPlayerSubMenuBase_RouteBackEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerSubMenuBase_RouteBackEvent) == 0x000001, "Wrong alignment on VLegacyPlayerSubMenuBase_RouteBackEvent");
static_assert(sizeof(VLegacyPlayerSubMenuBase_RouteBackEvent) == 0x000001, "Wrong size on VLegacyPlayerSubMenuBase_RouteBackEvent");
static_assert(offsetof(VLegacyPlayerSubMenuBase_RouteBackEvent, ReturnValue) == 0x000000, "Member 'VLegacyPlayerSubMenuBase_RouteBackEvent::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyInventoryMenu.GetMagicPopup
// 0x0008 (0x0008 - 0x0000)
struct VLegacyInventoryMenu_GetMagicPopup final
{
public:
	class UVLegacyMagicPopupMenu*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyInventoryMenu_GetMagicPopup) == 0x000008, "Wrong alignment on VLegacyInventoryMenu_GetMagicPopup");
static_assert(sizeof(VLegacyInventoryMenu_GetMagicPopup) == 0x000008, "Wrong size on VLegacyInventoryMenu_GetMagicPopup");
static_assert(offsetof(VLegacyInventoryMenu_GetMagicPopup, ReturnValue) == 0x000000, "Member 'VLegacyInventoryMenu_GetMagicPopup::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyInventoryMenu.GetQuickKeys
// 0x0008 (0x0008 - 0x0000)
struct VLegacyInventoryMenu_GetQuickKeys final
{
public:
	class UVLegacyQuickKeysMenu*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyInventoryMenu_GetQuickKeys) == 0x000008, "Wrong alignment on VLegacyInventoryMenu_GetQuickKeys");
static_assert(sizeof(VLegacyInventoryMenu_GetQuickKeys) == 0x000008, "Wrong size on VLegacyInventoryMenu_GetQuickKeys");
static_assert(offsetof(VLegacyInventoryMenu_GetQuickKeys, ReturnValue) == 0x000000, "Member 'VLegacyInventoryMenu_GetQuickKeys::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySpellPurchaseMenuItem.SetProperties
// 0x0050 (0x0050 - 0x0000)
struct VLegacySpellPurchaseMenuItem_SetProperties final
{
public:
	struct FLegacySpellPurchaseMenuItemProperties Value;                                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellPurchaseMenuItem_SetProperties) == 0x000008, "Wrong alignment on VLegacySpellPurchaseMenuItem_SetProperties");
static_assert(sizeof(VLegacySpellPurchaseMenuItem_SetProperties) == 0x000050, "Wrong size on VLegacySpellPurchaseMenuItem_SetProperties");
static_assert(offsetof(VLegacySpellPurchaseMenuItem_SetProperties, Value) == 0x000000, "Member 'VLegacySpellPurchaseMenuItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacySpellPurchaseMenuItem.GetListId
// 0x0004 (0x0004 - 0x0000)
struct VLegacySpellPurchaseMenuItem_GetListId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellPurchaseMenuItem_GetListId) == 0x000004, "Wrong alignment on VLegacySpellPurchaseMenuItem_GetListId");
static_assert(sizeof(VLegacySpellPurchaseMenuItem_GetListId) == 0x000004, "Wrong size on VLegacySpellPurchaseMenuItem_GetListId");
static_assert(offsetof(VLegacySpellPurchaseMenuItem_GetListId, ReturnValue) == 0x000000, "Member 'VLegacySpellPurchaseMenuItem_GetListId::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySpellPurchaseMenuItem.GetProperties
// 0x0050 (0x0050 - 0x0000)
struct VLegacySpellPurchaseMenuItem_GetProperties final
{
public:
	struct FLegacySpellPurchaseMenuItemProperties ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellPurchaseMenuItem_GetProperties) == 0x000008, "Wrong alignment on VLegacySpellPurchaseMenuItem_GetProperties");
static_assert(sizeof(VLegacySpellPurchaseMenuItem_GetProperties) == 0x000050, "Wrong size on VLegacySpellPurchaseMenuItem_GetProperties");
static_assert(offsetof(VLegacySpellPurchaseMenuItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacySpellPurchaseMenuItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VSimpleInAirCharacterAnimInstance.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct VSimpleInAirCharacterAnimInstance_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSimpleInAirCharacterAnimInstance_IsInAir) == 0x000001, "Wrong alignment on VSimpleInAirCharacterAnimInstance_IsInAir");
static_assert(sizeof(VSimpleInAirCharacterAnimInstance_IsInAir) == 0x000001, "Wrong size on VSimpleInAirCharacterAnimInstance_IsInAir");
static_assert(offsetof(VSimpleInAirCharacterAnimInstance_IsInAir, ReturnValue) == 0x000000, "Member 'VSimpleInAirCharacterAnimInstance_IsInAir::ReturnValue' has a wrong offset!");

// Function Altar.VSimpleInAirCharacterAnimInstance.IsLanding
// 0x0001 (0x0001 - 0x0000)
struct VSimpleInAirCharacterAnimInstance_IsLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSimpleInAirCharacterAnimInstance_IsLanding) == 0x000001, "Wrong alignment on VSimpleInAirCharacterAnimInstance_IsLanding");
static_assert(sizeof(VSimpleInAirCharacterAnimInstance_IsLanding) == 0x000001, "Wrong size on VSimpleInAirCharacterAnimInstance_IsLanding");
static_assert(offsetof(VSimpleInAirCharacterAnimInstance_IsLanding, ReturnValue) == 0x000000, "Member 'VSimpleInAirCharacterAnimInstance_IsLanding::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMagicMenuHeader.SetProperties
// 0x0020 (0x0020 - 0x0000)
struct VLegacyMagicMenuHeader_SetProperties final
{
public:
	struct FLegacyMagicMenuHeaderProperties       Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenuHeader_SetProperties) == 0x000008, "Wrong alignment on VLegacyMagicMenuHeader_SetProperties");
static_assert(sizeof(VLegacyMagicMenuHeader_SetProperties) == 0x000020, "Wrong size on VLegacyMagicMenuHeader_SetProperties");
static_assert(offsetof(VLegacyMagicMenuHeader_SetProperties, Value) == 0x000000, "Member 'VLegacyMagicMenuHeader_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyMagicMenuHeader.GetProperties
// 0x0020 (0x0020 - 0x0000)
struct VLegacyMagicMenuHeader_GetProperties final
{
public:
	struct FLegacyMagicMenuHeaderProperties       ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenuHeader_GetProperties) == 0x000008, "Wrong alignment on VLegacyMagicMenuHeader_GetProperties");
static_assert(sizeof(VLegacyMagicMenuHeader_GetProperties) == 0x000020, "Wrong size on VLegacyMagicMenuHeader_GetProperties");
static_assert(offsetof(VLegacyMagicMenuHeader_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyMagicMenuHeader_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VVFXBlueprint.OnChangeFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct VVFXBlueprint_OnChangeFirstPerson final
{
public:
	bool                                          bIsFirstPerson;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VVFXBlueprint_OnChangeFirstPerson) == 0x000001, "Wrong alignment on VVFXBlueprint_OnChangeFirstPerson");
static_assert(sizeof(VVFXBlueprint_OnChangeFirstPerson) == 0x000001, "Wrong size on VVFXBlueprint_OnChangeFirstPerson");
static_assert(offsetof(VVFXBlueprint_OnChangeFirstPerson, bIsFirstPerson) == 0x000000, "Member 'VVFXBlueprint_OnChangeFirstPerson::bIsFirstPerson' has a wrong offset!");

// Function Altar.VVFXBlueprint.OnPause
// 0x0001 (0x0001 - 0x0000)
struct VVFXBlueprint_OnPause final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VVFXBlueprint_OnPause) == 0x000001, "Wrong alignment on VVFXBlueprint_OnPause");
static_assert(sizeof(VVFXBlueprint_OnPause) == 0x000001, "Wrong size on VVFXBlueprint_OnPause");
static_assert(offsetof(VVFXBlueprint_OnPause, bIsPaused) == 0x000000, "Member 'VVFXBlueprint_OnPause::bIsPaused' has a wrong offset!");

// Function Altar.VVFXBlueprint.PauseThisVFX
// 0x0001 (0x0001 - 0x0000)
struct VVFXBlueprint_PauseThisVFX final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VVFXBlueprint_PauseThisVFX) == 0x000001, "Wrong alignment on VVFXBlueprint_PauseThisVFX");
static_assert(sizeof(VVFXBlueprint_PauseThisVFX) == 0x000001, "Wrong size on VVFXBlueprint_PauseThisVFX");
static_assert(offsetof(VVFXBlueprint_PauseThisVFX, bIsPaused) == 0x000000, "Member 'VVFXBlueprint_PauseThisVFX::bIsPaused' has a wrong offset!");

// Function Altar.VMagicSpellVFXBlueprint.OnStartPlay
// 0x0098 (0x0098 - 0x0000)
struct VMagicSpellVFXBlueprint_OnStartPlay final
{
public:
	struct FBlueprintParameters                   Parameters;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsTargetAnActor;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CasterActor;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVCastType                                    CastType;                                          // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Magnitude;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Area;                                              // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpactNormal;                                      // 0x0050(0x0018)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0068(0x0018)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVSpellLevel                                  Level;                                             // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTheEndOfTheEffect;                              // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMainEffect;                                     // 0x0082(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSecondEffect;                                   // 0x0083(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CollidedActor;                                     // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    CollidedComponent;                                 // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicSpellVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VMagicSpellVFXBlueprint_OnStartPlay");
static_assert(sizeof(VMagicSpellVFXBlueprint_OnStartPlay) == 0x000098, "Wrong size on VMagicSpellVFXBlueprint_OnStartPlay");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, Parameters) == 0x000000, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::Parameters' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, bIsTargetAnActor) == 0x000030, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::bIsTargetAnActor' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, CasterActor) == 0x000038, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::CasterActor' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, bDoesBeginInFirstPerson) == 0x000040, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, CastType) == 0x000041, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::CastType' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, Magnitude) == 0x000044, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::Magnitude' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, Area) == 0x000048, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::Area' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, Duration) == 0x00004C, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::Duration' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, ImpactNormal) == 0x000050, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::ImpactNormal' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, Normal) == 0x000068, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::Normal' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, Level) == 0x000080, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::Level' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, bIsTheEndOfTheEffect) == 0x000081, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::bIsTheEndOfTheEffect' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, bIsMainEffect) == 0x000082, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::bIsMainEffect' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, bIsSecondEffect) == 0x000083, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::bIsSecondEffect' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, CollidedActor) == 0x000088, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::CollidedActor' has a wrong offset!");
static_assert(offsetof(VMagicSpellVFXBlueprint_OnStartPlay, CollidedComponent) == 0x000090, "Member 'VMagicSpellVFXBlueprint_OnStartPlay::CollidedComponent' has a wrong offset!");

// Function Altar.VLegacyMainMenu.GetCurrentWorld
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMainMenu_GetCurrentWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMainMenu_GetCurrentWorld) == 0x000008, "Wrong alignment on VLegacyMainMenu_GetCurrentWorld");
static_assert(sizeof(VLegacyMainMenu_GetCurrentWorld) == 0x000008, "Wrong size on VLegacyMainMenu_GetCurrentWorld");
static_assert(offsetof(VLegacyMainMenu_GetCurrentWorld, ReturnValue) == 0x000000, "Member 'VLegacyMainMenu_GetCurrentWorld::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMainMenu.SetDebugMode
// 0x0001 (0x0001 - 0x0000)
struct VLegacyMainMenu_SetDebugMode final
{
public:
	bool                                          bInNewDebug;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMainMenu_SetDebugMode) == 0x000001, "Wrong alignment on VLegacyMainMenu_SetDebugMode");
static_assert(sizeof(VLegacyMainMenu_SetDebugMode) == 0x000001, "Wrong size on VLegacyMainMenu_SetDebugMode");
static_assert(offsetof(VLegacyMainMenu_SetDebugMode, bInNewDebug) == 0x000000, "Member 'VLegacyMainMenu_SetDebugMode::bInNewDebug' has a wrong offset!");

// Function Altar.VModernSigilStoneMenuItem.SetProperties
// 0x0040 (0x0040 - 0x0000)
struct VModernSigilStoneMenuItem_SetProperties final
{
public:
	struct FModernSigilStoneMenuItemProperties    Value;                                             // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSigilStoneMenuItem_SetProperties) == 0x000008, "Wrong alignment on VModernSigilStoneMenuItem_SetProperties");
static_assert(sizeof(VModernSigilStoneMenuItem_SetProperties) == 0x000040, "Wrong size on VModernSigilStoneMenuItem_SetProperties");
static_assert(offsetof(VModernSigilStoneMenuItem_SetProperties, Value) == 0x000000, "Member 'VModernSigilStoneMenuItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VModernSigilStoneMenuItem.GetItemIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernSigilStoneMenuItem_GetItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSigilStoneMenuItem_GetItemIndex) == 0x000004, "Wrong alignment on VModernSigilStoneMenuItem_GetItemIndex");
static_assert(sizeof(VModernSigilStoneMenuItem_GetItemIndex) == 0x000004, "Wrong size on VModernSigilStoneMenuItem_GetItemIndex");
static_assert(offsetof(VModernSigilStoneMenuItem_GetItemIndex, ReturnValue) == 0x000000, "Member 'VModernSigilStoneMenuItem_GetItemIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernSigilStoneMenuItem.GetProperties
// 0x0040 (0x0040 - 0x0000)
struct VModernSigilStoneMenuItem_GetProperties final
{
public:
	struct FModernSigilStoneMenuItemProperties    ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSigilStoneMenuItem_GetProperties) == 0x000008, "Wrong alignment on VModernSigilStoneMenuItem_GetProperties");
static_assert(sizeof(VModernSigilStoneMenuItem_GetProperties) == 0x000040, "Wrong size on VModernSigilStoneMenuItem_GetProperties");
static_assert(offsetof(VModernSigilStoneMenuItem_GetProperties, ReturnValue) == 0x000000, "Member 'VModernSigilStoneMenuItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyQuickKeysMenu.PressedButton
// 0x0004 (0x0004 - 0x0000)
struct VLegacyQuickKeysMenu_PressedButton final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyQuickKeysMenu_PressedButton) == 0x000004, "Wrong alignment on VLegacyQuickKeysMenu_PressedButton");
static_assert(sizeof(VLegacyQuickKeysMenu_PressedButton) == 0x000004, "Wrong size on VLegacyQuickKeysMenu_PressedButton");
static_assert(offsetof(VLegacyQuickKeysMenu_PressedButton, Index_0) == 0x000000, "Member 'VLegacyQuickKeysMenu_PressedButton::Index_0' has a wrong offset!");

// Function Altar.StateMachinePlayAnimatedAction.PlayAnimatedAction
// 0x0028 (0x0028 - 0x0000)
struct StateMachinePlayAnimatedAction_PlayAnimatedAction final
{
public:
	class AVPairedPawn*                           PairedPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActionTag;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVPawnAnimatedAction*                   Action;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredDuration;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationIndex;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStateMachinePlayAnimatedAction*        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachinePlayAnimatedAction_PlayAnimatedAction) == 0x000008, "Wrong alignment on StateMachinePlayAnimatedAction_PlayAnimatedAction");
static_assert(sizeof(StateMachinePlayAnimatedAction_PlayAnimatedAction) == 0x000028, "Wrong size on StateMachinePlayAnimatedAction_PlayAnimatedAction");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayAnimatedAction, PairedPawn) == 0x000000, "Member 'StateMachinePlayAnimatedAction_PlayAnimatedAction::PairedPawn' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayAnimatedAction, ActionTag) == 0x000008, "Member 'StateMachinePlayAnimatedAction_PlayAnimatedAction::ActionTag' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayAnimatedAction, Action) == 0x000010, "Member 'StateMachinePlayAnimatedAction_PlayAnimatedAction::Action' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayAnimatedAction, DesiredDuration) == 0x000018, "Member 'StateMachinePlayAnimatedAction_PlayAnimatedAction::DesiredDuration' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayAnimatedAction, AnimationIndex) == 0x00001C, "Member 'StateMachinePlayAnimatedAction_PlayAnimatedAction::AnimationIndex' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayAnimatedAction, ReturnValue) == 0x000020, "Member 'StateMachinePlayAnimatedAction_PlayAnimatedAction::ReturnValue' has a wrong offset!");

// Function Altar.StateMachinePlayAnimatedAction.PlayDefaultAnimatedAction
// 0x0018 (0x0018 - 0x0000)
struct StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction final
{
public:
	class AVPairedPawn*                           PairedPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVPawnAnimatedAction*                   Action;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStateMachinePlayAnimatedAction*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction) == 0x000008, "Wrong alignment on StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction");
static_assert(sizeof(StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction) == 0x000018, "Wrong size on StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction, PairedPawn) == 0x000000, "Member 'StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction::PairedPawn' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction, Action) == 0x000008, "Member 'StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction::Action' has a wrong offset!");
static_assert(offsetof(StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction, ReturnValue) == 0x000010, "Member 'StateMachinePlayAnimatedAction_PlayDefaultAnimatedAction::ReturnValue' has a wrong offset!");

// Function Altar.StateMachinePlayAnimatedAction.OnAnimatedActionEnded
// 0x0001 (0x0001 - 0x0000)
struct StateMachinePlayAnimatedAction_OnAnimatedActionEnded final
{
public:
	bool                                          bIsCanceled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachinePlayAnimatedAction_OnAnimatedActionEnded) == 0x000001, "Wrong alignment on StateMachinePlayAnimatedAction_OnAnimatedActionEnded");
static_assert(sizeof(StateMachinePlayAnimatedAction_OnAnimatedActionEnded) == 0x000001, "Wrong size on StateMachinePlayAnimatedAction_OnAnimatedActionEnded");
static_assert(offsetof(StateMachinePlayAnimatedAction_OnAnimatedActionEnded, bIsCanceled) == 0x000000, "Member 'StateMachinePlayAnimatedAction_OnAnimatedActionEnded::bIsCanceled' has a wrong offset!");

// Function Altar.VImpactSystemVFXBlueprint.OnStartPlay
// 0x0030 (0x0030 - 0x0000)
struct VImpactSystemVFXBlueprint_OnStartPlay final
{
public:
	struct FVector_NetQuantizeNormal              ImpactNormal;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceType                               HitSourceType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceMaterial                           HitSourceMaterial;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceWeaponType                         HitWeaponType;                                     // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UStaticMeshComponent*             WeaponMesh;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingWeapon;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VImpactSystemVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VImpactSystemVFXBlueprint_OnStartPlay");
static_assert(sizeof(VImpactSystemVFXBlueprint_OnStartPlay) == 0x000030, "Wrong size on VImpactSystemVFXBlueprint_OnStartPlay");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, ImpactNormal) == 0x000000, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::ImpactNormal' has a wrong offset!");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, HitSourceType) == 0x000018, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::HitSourceType' has a wrong offset!");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, HitSourceMaterial) == 0x000019, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::HitSourceMaterial' has a wrong offset!");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, bDoesBeginInFirstPerson) == 0x00001A, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, HitWeaponType) == 0x00001B, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::HitWeaponType' has a wrong offset!");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, WeaponMesh) == 0x000020, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::WeaponMesh' has a wrong offset!");
static_assert(offsetof(VImpactSystemVFXBlueprint_OnStartPlay, bIsUsingWeapon) == 0x000028, "Member 'VImpactSystemVFXBlueprint_OnStartPlay::bIsUsingWeapon' has a wrong offset!");

// Function Altar.VInventoryMenu.SetBlockBackAction
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenu_SetBlockBackAction final
{
public:
	bool                                          bNewBlockBackAction;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenu_SetBlockBackAction) == 0x000001, "Wrong alignment on VInventoryMenu_SetBlockBackAction");
static_assert(sizeof(VInventoryMenu_SetBlockBackAction) == 0x000001, "Wrong size on VInventoryMenu_SetBlockBackAction");
static_assert(offsetof(VInventoryMenu_SetBlockBackAction, bNewBlockBackAction) == 0x000000, "Member 'VInventoryMenu_SetBlockBackAction::bNewBlockBackAction' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuItemEffects.SetProperties
// 0x0020 (0x0020 - 0x0000)
struct VOriginalInventoryMenuItemEffects_SetProperties final
{
public:
	struct FOriginalInventoryMenuItemEffects      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuItemEffects_SetProperties) == 0x000008, "Wrong alignment on VOriginalInventoryMenuItemEffects_SetProperties");
static_assert(sizeof(VOriginalInventoryMenuItemEffects_SetProperties) == 0x000020, "Wrong size on VOriginalInventoryMenuItemEffects_SetProperties");
static_assert(offsetof(VOriginalInventoryMenuItemEffects_SetProperties, Value) == 0x000000, "Member 'VOriginalInventoryMenuItemEffects_SetProperties::Value' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuItemEffects.GetProperties
// 0x0020 (0x0020 - 0x0000)
struct VOriginalInventoryMenuItemEffects_GetProperties final
{
public:
	struct FOriginalInventoryMenuItemEffects      ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuItemEffects_GetProperties) == 0x000008, "Wrong alignment on VOriginalInventoryMenuItemEffects_GetProperties");
static_assert(sizeof(VOriginalInventoryMenuItemEffects_GetProperties) == 0x000020, "Wrong size on VOriginalInventoryMenuItemEffects_GetProperties");
static_assert(offsetof(VOriginalInventoryMenuItemEffects_GetProperties, ReturnValue) == 0x000000, "Member 'VOriginalInventoryMenuItemEffects_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLeftRightAttackAnimInstance.OnAttackLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VLeftRightAttackAnimInstance_OnAttackLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLeftRightAttackAnimInstance_OnAttackLeftEnter) == 0x000008, "Wrong alignment on VLeftRightAttackAnimInstance_OnAttackLeftEnter");
static_assert(sizeof(VLeftRightAttackAnimInstance_OnAttackLeftEnter) == 0x000020, "Wrong size on VLeftRightAttackAnimInstance_OnAttackLeftEnter");
static_assert(offsetof(VLeftRightAttackAnimInstance_OnAttackLeftEnter, Context) == 0x000000, "Member 'VLeftRightAttackAnimInstance_OnAttackLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VLeftRightAttackAnimInstance_OnAttackLeftEnter, Node) == 0x000010, "Member 'VLeftRightAttackAnimInstance_OnAttackLeftEnter::Node' has a wrong offset!");

// Function Altar.VLeftRightAttackAnimInstance.OnAttackRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VLeftRightAttackAnimInstance_OnAttackRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLeftRightAttackAnimInstance_OnAttackRightEnter) == 0x000008, "Wrong alignment on VLeftRightAttackAnimInstance_OnAttackRightEnter");
static_assert(sizeof(VLeftRightAttackAnimInstance_OnAttackRightEnter) == 0x000020, "Wrong size on VLeftRightAttackAnimInstance_OnAttackRightEnter");
static_assert(offsetof(VLeftRightAttackAnimInstance_OnAttackRightEnter, Context) == 0x000000, "Member 'VLeftRightAttackAnimInstance_OnAttackRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VLeftRightAttackAnimInstance_OnAttackRightEnter, Node) == 0x000010, "Member 'VLeftRightAttackAnimInstance_OnAttackRightEnter::Node' has a wrong offset!");

// Function Altar.VLegacyXboxFloatingHint.SetButtonIcon
// 0x0001 (0x0001 - 0x0000)
struct VLegacyXboxFloatingHint_SetButtonIcon final
{
public:
	ELegacyXboxFloatingHintButton                 Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXboxFloatingHint_SetButtonIcon) == 0x000001, "Wrong alignment on VLegacyXboxFloatingHint_SetButtonIcon");
static_assert(sizeof(VLegacyXboxFloatingHint_SetButtonIcon) == 0x000001, "Wrong size on VLegacyXboxFloatingHint_SetButtonIcon");
static_assert(offsetof(VLegacyXboxFloatingHint_SetButtonIcon, Value) == 0x000000, "Member 'VLegacyXboxFloatingHint_SetButtonIcon::Value' has a wrong offset!");

// Function Altar.VLegacyXboxFloatingHint.SetText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyXboxFloatingHint_SetText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXboxFloatingHint_SetText) == 0x000008, "Wrong alignment on VLegacyXboxFloatingHint_SetText");
static_assert(sizeof(VLegacyXboxFloatingHint_SetText) == 0x000018, "Wrong size on VLegacyXboxFloatingHint_SetText");
static_assert(offsetof(VLegacyXboxFloatingHint_SetText, Value) == 0x000000, "Member 'VLegacyXboxFloatingHint_SetText::Value' has a wrong offset!");

// Function Altar.VLegacyXboxFloatingHint.UpdateVisibility
// 0x0001 (0x0001 - 0x0000)
struct VLegacyXboxFloatingHint_UpdateVisibility final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXboxFloatingHint_UpdateVisibility) == 0x000001, "Wrong alignment on VLegacyXboxFloatingHint_UpdateVisibility");
static_assert(sizeof(VLegacyXboxFloatingHint_UpdateVisibility) == 0x000001, "Wrong size on VLegacyXboxFloatingHint_UpdateVisibility");
static_assert(offsetof(VLegacyXboxFloatingHint_UpdateVisibility, InputType) == 0x000000, "Member 'VLegacyXboxFloatingHint_UpdateVisibility::InputType' has a wrong offset!");

// Function Altar.VLegacyXboxFloatingHint.GetButtonIcon
// 0x0001 (0x0001 - 0x0000)
struct VLegacyXboxFloatingHint_GetButtonIcon final
{
public:
	ELegacyXboxFloatingHintButton                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXboxFloatingHint_GetButtonIcon) == 0x000001, "Wrong alignment on VLegacyXboxFloatingHint_GetButtonIcon");
static_assert(sizeof(VLegacyXboxFloatingHint_GetButtonIcon) == 0x000001, "Wrong size on VLegacyXboxFloatingHint_GetButtonIcon");
static_assert(offsetof(VLegacyXboxFloatingHint_GetButtonIcon, ReturnValue) == 0x000000, "Member 'VLegacyXboxFloatingHint_GetButtonIcon::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyXboxFloatingHint.GetCropForIcon
// 0x0004 (0x0004 - 0x0000)
struct VLegacyXboxFloatingHint_GetCropForIcon final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXboxFloatingHint_GetCropForIcon) == 0x000004, "Wrong alignment on VLegacyXboxFloatingHint_GetCropForIcon");
static_assert(sizeof(VLegacyXboxFloatingHint_GetCropForIcon) == 0x000004, "Wrong size on VLegacyXboxFloatingHint_GetCropForIcon");
static_assert(offsetof(VLegacyXboxFloatingHint_GetCropForIcon, ReturnValue) == 0x000000, "Member 'VLegacyXboxFloatingHint_GetCropForIcon::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyXboxFloatingHint.GetText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyXboxFloatingHint_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXboxFloatingHint_GetText) == 0x000008, "Wrong alignment on VLegacyXboxFloatingHint_GetText");
static_assert(sizeof(VLegacyXboxFloatingHint_GetText) == 0x000018, "Wrong size on VLegacyXboxFloatingHint_GetText");
static_assert(offsetof(VLegacyXboxFloatingHint_GetText, ReturnValue) == 0x000000, "Member 'VLegacyXboxFloatingHint_GetText::ReturnValue' has a wrong offset!");

// Function Altar.VLevelSelectDispatcher.StartPairedGame
// 0x0010 (0x0010 - 0x0000)
struct VLevelSelectDispatcher_StartPairedGame final
{
public:
	class AVLevelSelectDoor*                      Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelSelectDispatcher_StartPairedGame) == 0x000008, "Wrong alignment on VLevelSelectDispatcher_StartPairedGame");
static_assert(sizeof(VLevelSelectDispatcher_StartPairedGame) == 0x000010, "Wrong size on VLevelSelectDispatcher_StartPairedGame");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGame, Door) == 0x000000, "Member 'VLevelSelectDispatcher_StartPairedGame::Door' has a wrong offset!");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGame, ReturnValue) == 0x000008, "Member 'VLevelSelectDispatcher_StartPairedGame::ReturnValue' has a wrong offset!");

// Function Altar.VLevelSelectDispatcher.StartPairedGameManually
// 0x0038 (0x0038 - 0x0000)
struct VLevelSelectDispatcher_StartPairedGameManually final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartupCommand;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDebugGamemode;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelSelectDispatcher_StartPairedGameManually) == 0x000008, "Wrong alignment on VLevelSelectDispatcher_StartPairedGameManually");
static_assert(sizeof(VLevelSelectDispatcher_StartPairedGameManually) == 0x000038, "Wrong size on VLevelSelectDispatcher_StartPairedGameManually");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGameManually, WorldContext) == 0x000000, "Member 'VLevelSelectDispatcher_StartPairedGameManually::WorldContext' has a wrong offset!");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGameManually, LevelName) == 0x000008, "Member 'VLevelSelectDispatcher_StartPairedGameManually::LevelName' has a wrong offset!");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGameManually, StartupCommand) == 0x000018, "Member 'VLevelSelectDispatcher_StartPairedGameManually::StartupCommand' has a wrong offset!");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGameManually, bUseDebugGamemode) == 0x000028, "Member 'VLevelSelectDispatcher_StartPairedGameManually::bUseDebugGamemode' has a wrong offset!");
static_assert(offsetof(VLevelSelectDispatcher_StartPairedGameManually, ReturnValue) == 0x000030, "Member 'VLevelSelectDispatcher_StartPairedGameManually::ReturnValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.DisplayDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct DebugMenuWidget_DisplayDebugMenu final
{
public:
	class APlayerController*                      PlayerControllerDebug;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_DisplayDebugMenu) == 0x000008, "Wrong alignment on DebugMenuWidget_DisplayDebugMenu");
static_assert(sizeof(DebugMenuWidget_DisplayDebugMenu) == 0x000008, "Wrong size on DebugMenuWidget_DisplayDebugMenu");
static_assert(offsetof(DebugMenuWidget_DisplayDebugMenu, PlayerControllerDebug) == 0x000000, "Member 'DebugMenuWidget_DisplayDebugMenu::PlayerControllerDebug' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemLocationOffsetXChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemLocationOffsetXChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemLocationOffsetXChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemLocationOffsetXChanged");
static_assert(sizeof(DebugMenuWidget_OnItemLocationOffsetXChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemLocationOffsetXChanged");
static_assert(offsetof(DebugMenuWidget_OnItemLocationOffsetXChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemLocationOffsetXChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemLocationOffsetYChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemLocationOffsetYChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemLocationOffsetYChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemLocationOffsetYChanged");
static_assert(sizeof(DebugMenuWidget_OnItemLocationOffsetYChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemLocationOffsetYChanged");
static_assert(offsetof(DebugMenuWidget_OnItemLocationOffsetYChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemLocationOffsetYChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemLocationOffsetZChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemLocationOffsetZChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemLocationOffsetZChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemLocationOffsetZChanged");
static_assert(sizeof(DebugMenuWidget_OnItemLocationOffsetZChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemLocationOffsetZChanged");
static_assert(offsetof(DebugMenuWidget_OnItemLocationOffsetZChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemLocationOffsetZChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemRotationOffsetXChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemRotationOffsetXChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemRotationOffsetXChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemRotationOffsetXChanged");
static_assert(sizeof(DebugMenuWidget_OnItemRotationOffsetXChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemRotationOffsetXChanged");
static_assert(offsetof(DebugMenuWidget_OnItemRotationOffsetXChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemRotationOffsetXChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemRotationOffsetYChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemRotationOffsetYChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemRotationOffsetYChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemRotationOffsetYChanged");
static_assert(sizeof(DebugMenuWidget_OnItemRotationOffsetYChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemRotationOffsetYChanged");
static_assert(offsetof(DebugMenuWidget_OnItemRotationOffsetYChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemRotationOffsetYChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemRotationOffsetZChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemRotationOffsetZChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemRotationOffsetZChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemRotationOffsetZChanged");
static_assert(sizeof(DebugMenuWidget_OnItemRotationOffsetZChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemRotationOffsetZChanged");
static_assert(offsetof(DebugMenuWidget_OnItemRotationOffsetZChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemRotationOffsetZChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemScaleOffsetXChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemScaleOffsetXChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemScaleOffsetXChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemScaleOffsetXChanged");
static_assert(sizeof(DebugMenuWidget_OnItemScaleOffsetXChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemScaleOffsetXChanged");
static_assert(offsetof(DebugMenuWidget_OnItemScaleOffsetXChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemScaleOffsetXChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemScaleOffsetYChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemScaleOffsetYChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemScaleOffsetYChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemScaleOffsetYChanged");
static_assert(sizeof(DebugMenuWidget_OnItemScaleOffsetYChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemScaleOffsetYChanged");
static_assert(offsetof(DebugMenuWidget_OnItemScaleOffsetYChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemScaleOffsetYChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.OnItemScaleOffsetZChanged
// 0x0004 (0x0004 - 0x0000)
struct DebugMenuWidget_OnItemScaleOffsetZChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugMenuWidget_OnItemScaleOffsetZChanged) == 0x000004, "Wrong alignment on DebugMenuWidget_OnItemScaleOffsetZChanged");
static_assert(sizeof(DebugMenuWidget_OnItemScaleOffsetZChanged) == 0x000004, "Wrong size on DebugMenuWidget_OnItemScaleOffsetZChanged");
static_assert(offsetof(DebugMenuWidget_OnItemScaleOffsetZChanged, InNewValue) == 0x000000, "Member 'DebugMenuWidget_OnItemScaleOffsetZChanged::InNewValue' has a wrong offset!");

// Function Altar.DebugMenuWidget.PrintDamageLogToScreen
// 0x0018 (0x0018 - 0x0000)
struct DebugMenuWidget_PrintDamageLogToScreen final
{
public:
	class FString                                 DamageLogString;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackerDistFromPlayer;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuWidget_PrintDamageLogToScreen) == 0x000008, "Wrong alignment on DebugMenuWidget_PrintDamageLogToScreen");
static_assert(sizeof(DebugMenuWidget_PrintDamageLogToScreen) == 0x000018, "Wrong size on DebugMenuWidget_PrintDamageLogToScreen");
static_assert(offsetof(DebugMenuWidget_PrintDamageLogToScreen, DamageLogString) == 0x000000, "Member 'DebugMenuWidget_PrintDamageLogToScreen::DamageLogString' has a wrong offset!");
static_assert(offsetof(DebugMenuWidget_PrintDamageLogToScreen, AttackerDistFromPlayer) == 0x000010, "Member 'DebugMenuWidget_PrintDamageLogToScreen::AttackerDistFromPlayer' has a wrong offset!");

// Function Altar.DebugMenuWidget.RunDebugMenuCommand
// 0x0018 (0x0018 - 0x0000)
struct DebugMenuWidget_RunDebugMenuCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugMenuWidget_RunDebugMenuCommand) == 0x000008, "Wrong alignment on DebugMenuWidget_RunDebugMenuCommand");
static_assert(sizeof(DebugMenuWidget_RunDebugMenuCommand) == 0x000018, "Wrong size on DebugMenuWidget_RunDebugMenuCommand");
static_assert(offsetof(DebugMenuWidget_RunDebugMenuCommand, Command) == 0x000000, "Member 'DebugMenuWidget_RunDebugMenuCommand::Command' has a wrong offset!");
static_assert(offsetof(DebugMenuWidget_RunDebugMenuCommand, ReturnValue) == 0x000010, "Member 'DebugMenuWidget_RunDebugMenuCommand::ReturnValue' has a wrong offset!");

// Function Altar.DialogueSceneSubsystem.RemoveLightRigOnActor
// 0x0008 (0x0008 - 0x0000)
struct DialogueSceneSubsystem_RemoveLightRigOnActor final
{
public:
	class AVPairedCharacter*                      TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueSceneSubsystem_RemoveLightRigOnActor) == 0x000008, "Wrong alignment on DialogueSceneSubsystem_RemoveLightRigOnActor");
static_assert(sizeof(DialogueSceneSubsystem_RemoveLightRigOnActor) == 0x000008, "Wrong size on DialogueSceneSubsystem_RemoveLightRigOnActor");
static_assert(offsetof(DialogueSceneSubsystem_RemoveLightRigOnActor, TargetActor) == 0x000000, "Member 'DialogueSceneSubsystem_RemoveLightRigOnActor::TargetActor' has a wrong offset!");

// Function Altar.DialogueSceneSubsystem.SpawnLightRigOnActor
// 0x0010 (0x0010 - 0x0000)
struct DialogueSceneSubsystem_SpawnLightRigOnActor final
{
public:
	class AVPairedCharacter*                      TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVLightRig*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueSceneSubsystem_SpawnLightRigOnActor) == 0x000008, "Wrong alignment on DialogueSceneSubsystem_SpawnLightRigOnActor");
static_assert(sizeof(DialogueSceneSubsystem_SpawnLightRigOnActor) == 0x000010, "Wrong size on DialogueSceneSubsystem_SpawnLightRigOnActor");
static_assert(offsetof(DialogueSceneSubsystem_SpawnLightRigOnActor, TargetActor) == 0x000000, "Member 'DialogueSceneSubsystem_SpawnLightRigOnActor::TargetActor' has a wrong offset!");
static_assert(offsetof(DialogueSceneSubsystem_SpawnLightRigOnActor, ReturnValue) == 0x000008, "Member 'DialogueSceneSubsystem_SpawnLightRigOnActor::ReturnValue' has a wrong offset!");

// Function Altar.VDressingSwitcher.OnTargetDisabled
// 0x0001 (0x0001 - 0x0000)
struct VDressingSwitcher_OnTargetDisabled final
{
public:
	bool                                          bShouldBeDisabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDressingSwitcher_OnTargetDisabled) == 0x000001, "Wrong alignment on VDressingSwitcher_OnTargetDisabled");
static_assert(sizeof(VDressingSwitcher_OnTargetDisabled) == 0x000001, "Wrong size on VDressingSwitcher_OnTargetDisabled");
static_assert(offsetof(VDressingSwitcher_OnTargetDisabled, bShouldBeDisabled) == 0x000000, "Member 'VDressingSwitcher_OnTargetDisabled::bShouldBeDisabled' has a wrong offset!");

// Function Altar.VModernSettingWidget.ApplyNewValue
// 0x0008 (0x0008 - 0x0000)
struct VModernSettingWidget_ApplyNewValue final
{
public:
	float                                         WidgetValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesTriggerAutoRevert;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInit;                                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernSettingWidget_ApplyNewValue) == 0x000004, "Wrong alignment on VModernSettingWidget_ApplyNewValue");
static_assert(sizeof(VModernSettingWidget_ApplyNewValue) == 0x000008, "Wrong size on VModernSettingWidget_ApplyNewValue");
static_assert(offsetof(VModernSettingWidget_ApplyNewValue, WidgetValue) == 0x000000, "Member 'VModernSettingWidget_ApplyNewValue::WidgetValue' has a wrong offset!");
static_assert(offsetof(VModernSettingWidget_ApplyNewValue, bDoesTriggerAutoRevert) == 0x000004, "Member 'VModernSettingWidget_ApplyNewValue::bDoesTriggerAutoRevert' has a wrong offset!");
static_assert(offsetof(VModernSettingWidget_ApplyNewValue, bIsInit) == 0x000005, "Member 'VModernSettingWidget_ApplyNewValue::bIsInit' has a wrong offset!");

// Function Altar.VModernSettingWidget.GetIsPainted
// 0x0001 (0x0001 - 0x0000)
struct VModernSettingWidget_GetIsPainted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_GetIsPainted) == 0x000001, "Wrong alignment on VModernSettingWidget_GetIsPainted");
static_assert(sizeof(VModernSettingWidget_GetIsPainted) == 0x000001, "Wrong size on VModernSettingWidget_GetIsPainted");
static_assert(offsetof(VModernSettingWidget_GetIsPainted, ReturnValue) == 0x000000, "Member 'VModernSettingWidget_GetIsPainted::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingWidget.GetSettingRow
// 0x0138 (0x0138 - 0x0000)
struct VModernSettingWidget_GetSettingRow final
{
public:
	struct FModernSettingTableRow                 ReturnValue;                                       // 0x0000(0x0138)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_GetSettingRow) == 0x000008, "Wrong alignment on VModernSettingWidget_GetSettingRow");
static_assert(sizeof(VModernSettingWidget_GetSettingRow) == 0x000138, "Wrong size on VModernSettingWidget_GetSettingRow");
static_assert(offsetof(VModernSettingWidget_GetSettingRow, ReturnValue) == 0x000000, "Member 'VModernSettingWidget_GetSettingRow::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingWidget.OnReceiveBroadcastFromSettingSubsystem
// 0x0010 (0x0010 - 0x0000)
struct VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem final
{
public:
	class FString                                 NewCommand;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem) == 0x000008, "Wrong alignment on VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem");
static_assert(sizeof(VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem) == 0x000010, "Wrong size on VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem");
static_assert(offsetof(VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem, NewCommand) == 0x000000, "Member 'VModernSettingWidget_OnReceiveBroadcastFromSettingSubsystem::NewCommand' has a wrong offset!");

// Function Altar.VModernSettingWidget.OnRefreshWidgetRequested
// 0x0004 (0x0004 - 0x0000)
struct VModernSettingWidget_OnRefreshWidgetRequested final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_OnRefreshWidgetRequested) == 0x000004, "Wrong alignment on VModernSettingWidget_OnRefreshWidgetRequested");
static_assert(sizeof(VModernSettingWidget_OnRefreshWidgetRequested) == 0x000004, "Wrong size on VModernSettingWidget_OnRefreshWidgetRequested");
static_assert(offsetof(VModernSettingWidget_OnRefreshWidgetRequested, Value) == 0x000000, "Member 'VModernSettingWidget_OnRefreshWidgetRequested::Value' has a wrong offset!");

// Function Altar.VModernSettingWidget.OnSettingChanged
// 0x0138 (0x0138 - 0x0000)
struct VModernSettingWidget_OnSettingChanged final
{
public:
	struct FModernSettingTableRow                 NewSettingRow;                                     // 0x0000(0x0138)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_OnSettingChanged) == 0x000008, "Wrong alignment on VModernSettingWidget_OnSettingChanged");
static_assert(sizeof(VModernSettingWidget_OnSettingChanged) == 0x000138, "Wrong size on VModernSettingWidget_OnSettingChanged");
static_assert(offsetof(VModernSettingWidget_OnSettingChanged, NewSettingRow) == 0x000000, "Member 'VModernSettingWidget_OnSettingChanged::NewSettingRow' has a wrong offset!");

// Function Altar.VModernSettingWidget.OnUserInputDeviceConnectionChange
// 0x000C (0x000C - 0x0000)
struct VModernSettingWidget_OnUserInputDeviceConnectionChange final
{
public:
	EInputDeviceConnectionState                   NewConnectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformUserId                        PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_OnUserInputDeviceConnectionChange) == 0x000004, "Wrong alignment on VModernSettingWidget_OnUserInputDeviceConnectionChange");
static_assert(sizeof(VModernSettingWidget_OnUserInputDeviceConnectionChange) == 0x00000C, "Wrong size on VModernSettingWidget_OnUserInputDeviceConnectionChange");
static_assert(offsetof(VModernSettingWidget_OnUserInputDeviceConnectionChange, NewConnectionState) == 0x000000, "Member 'VModernSettingWidget_OnUserInputDeviceConnectionChange::NewConnectionState' has a wrong offset!");
static_assert(offsetof(VModernSettingWidget_OnUserInputDeviceConnectionChange, PlatformUserId) == 0x000004, "Member 'VModernSettingWidget_OnUserInputDeviceConnectionChange::PlatformUserId' has a wrong offset!");
static_assert(offsetof(VModernSettingWidget_OnUserInputDeviceConnectionChange, InputDeviceId) == 0x000008, "Member 'VModernSettingWidget_OnUserInputDeviceConnectionChange::InputDeviceId' has a wrong offset!");

// Function Altar.VModernSettingWidget.RequestChangeParentScrollState
// 0x0001 (0x0001 - 0x0000)
struct VModernSettingWidget_RequestChangeParentScrollState final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_RequestChangeParentScrollState) == 0x000001, "Wrong alignment on VModernSettingWidget_RequestChangeParentScrollState");
static_assert(sizeof(VModernSettingWidget_RequestChangeParentScrollState) == 0x000001, "Wrong size on VModernSettingWidget_RequestChangeParentScrollState");
static_assert(offsetof(VModernSettingWidget_RequestChangeParentScrollState, bNewState) == 0x000000, "Member 'VModernSettingWidget_RequestChangeParentScrollState::bNewState' has a wrong offset!");

// Function Altar.VModernSettingWidget.SetCurrentWidgetValue
// 0x0004 (0x0004 - 0x0000)
struct VModernSettingWidget_SetCurrentWidgetValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_SetCurrentWidgetValue) == 0x000004, "Wrong alignment on VModernSettingWidget_SetCurrentWidgetValue");
static_assert(sizeof(VModernSettingWidget_SetCurrentWidgetValue) == 0x000004, "Wrong size on VModernSettingWidget_SetCurrentWidgetValue");
static_assert(offsetof(VModernSettingWidget_SetCurrentWidgetValue, NewValue) == 0x000000, "Member 'VModernSettingWidget_SetCurrentWidgetValue::NewValue' has a wrong offset!");

// Function Altar.VModernSettingWidget.SetSettingRow
// 0x0138 (0x0138 - 0x0000)
struct VModernSettingWidget_SetSettingRow final
{
public:
	struct FModernSettingTableRow                 NewSettingRow;                                     // 0x0000(0x0138)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_SetSettingRow) == 0x000008, "Wrong alignment on VModernSettingWidget_SetSettingRow");
static_assert(sizeof(VModernSettingWidget_SetSettingRow) == 0x000138, "Wrong size on VModernSettingWidget_SetSettingRow");
static_assert(offsetof(VModernSettingWidget_SetSettingRow, NewSettingRow) == 0x000000, "Member 'VModernSettingWidget_SetSettingRow::NewSettingRow' has a wrong offset!");

// Function Altar.VModernSettingWidget.UpdateLockState
// 0x0001 (0x0001 - 0x0000)
struct VModernSettingWidget_UpdateLockState final
{
public:
	bool                                          bNewLockState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_UpdateLockState) == 0x000001, "Wrong alignment on VModernSettingWidget_UpdateLockState");
static_assert(sizeof(VModernSettingWidget_UpdateLockState) == 0x000001, "Wrong size on VModernSettingWidget_UpdateLockState");
static_assert(offsetof(VModernSettingWidget_UpdateLockState, bNewLockState) == 0x000000, "Member 'VModernSettingWidget_UpdateLockState::bNewLockState' has a wrong offset!");

// Function Altar.VModernSettingWidget.UpdateStepCommand
// 0x0018 (0x0018 - 0x0000)
struct VModernSettingWidget_UpdateStepCommand final
{
public:
	int32                                         StepIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModernSettingCommand                  NewCommand;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_UpdateStepCommand) == 0x000008, "Wrong alignment on VModernSettingWidget_UpdateStepCommand");
static_assert(sizeof(VModernSettingWidget_UpdateStepCommand) == 0x000018, "Wrong size on VModernSettingWidget_UpdateStepCommand");
static_assert(offsetof(VModernSettingWidget_UpdateStepCommand, StepIndex) == 0x000000, "Member 'VModernSettingWidget_UpdateStepCommand::StepIndex' has a wrong offset!");
static_assert(offsetof(VModernSettingWidget_UpdateStepCommand, NewCommand) == 0x000008, "Member 'VModernSettingWidget_UpdateStepCommand::NewCommand' has a wrong offset!");

// Function Altar.VModernSettingWidget.GetCurrentWidgetValue
// 0x0004 (0x0004 - 0x0000)
struct VModernSettingWidget_GetCurrentWidgetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_GetCurrentWidgetValue) == 0x000004, "Wrong alignment on VModernSettingWidget_GetCurrentWidgetValue");
static_assert(sizeof(VModernSettingWidget_GetCurrentWidgetValue) == 0x000004, "Wrong size on VModernSettingWidget_GetCurrentWidgetValue");
static_assert(offsetof(VModernSettingWidget_GetCurrentWidgetValue, ReturnValue) == 0x000000, "Member 'VModernSettingWidget_GetCurrentWidgetValue::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingWidget.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct VModernSettingWidget_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingWidget_IsLocked) == 0x000001, "Wrong alignment on VModernSettingWidget_IsLocked");
static_assert(sizeof(VModernSettingWidget_IsLocked) == 0x000001, "Wrong size on VModernSettingWidget_IsLocked");
static_assert(offsetof(VModernSettingWidget_IsLocked, ReturnValue) == 0x000000, "Member 'VModernSettingWidget_IsLocked::ReturnValue' has a wrong offset!");

// Function Altar.HelpMenuListEntryData.GetIsCategory
// 0x0001 (0x0001 - 0x0000)
struct HelpMenuListEntryData_GetIsCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HelpMenuListEntryData_GetIsCategory) == 0x000001, "Wrong alignment on HelpMenuListEntryData_GetIsCategory");
static_assert(sizeof(HelpMenuListEntryData_GetIsCategory) == 0x000001, "Wrong size on HelpMenuListEntryData_GetIsCategory");
static_assert(offsetof(HelpMenuListEntryData_GetIsCategory, ReturnValue) == 0x000000, "Member 'HelpMenuListEntryData_GetIsCategory::ReturnValue' has a wrong offset!");

// Function Altar.HelpMenuListEntryData.InitializeEntry
// 0x00C0 (0x00C0 - 0x0000)
struct HelpMenuListEntryData_InitializeEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModernHelpMenuEntry                   DataEntry;                                         // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HelpMenuListEntryData_InitializeEntry) == 0x000008, "Wrong alignment on HelpMenuListEntryData_InitializeEntry");
static_assert(sizeof(HelpMenuListEntryData_InitializeEntry) == 0x0000C0, "Wrong size on HelpMenuListEntryData_InitializeEntry");
static_assert(offsetof(HelpMenuListEntryData_InitializeEntry, ID) == 0x000000, "Member 'HelpMenuListEntryData_InitializeEntry::ID' has a wrong offset!");
static_assert(offsetof(HelpMenuListEntryData_InitializeEntry, DataEntry) == 0x000008, "Member 'HelpMenuListEntryData_InitializeEntry::DataEntry' has a wrong offset!");

// Function Altar.HelpMenuListEntryData.InitializeHeader
// 0x0028 (0x0028 - 0x0000)
struct HelpMenuListEntryData_InitializeHeader final
{
public:
	class FText                                   HeaderString;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             CategoryIcon;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsExpanded;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HelpMenuListEntryData_InitializeHeader) == 0x000008, "Wrong alignment on HelpMenuListEntryData_InitializeHeader");
static_assert(sizeof(HelpMenuListEntryData_InitializeHeader) == 0x000028, "Wrong size on HelpMenuListEntryData_InitializeHeader");
static_assert(offsetof(HelpMenuListEntryData_InitializeHeader, HeaderString) == 0x000000, "Member 'HelpMenuListEntryData_InitializeHeader::HeaderString' has a wrong offset!");
static_assert(offsetof(HelpMenuListEntryData_InitializeHeader, CategoryIcon) == 0x000018, "Member 'HelpMenuListEntryData_InitializeHeader::CategoryIcon' has a wrong offset!");
static_assert(offsetof(HelpMenuListEntryData_InitializeHeader, bInIsExpanded) == 0x000020, "Member 'HelpMenuListEntryData_InitializeHeader::bInIsExpanded' has a wrong offset!");

// Function Altar.VAltarImageCalibrationWidget.SetAndSaveBrightnessSetting
// 0x0004 (0x0004 - 0x0000)
struct VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting final
{
public:
	float                                         BrightnessValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting) == 0x000004, "Wrong alignment on VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting");
static_assert(sizeof(VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting) == 0x000004, "Wrong size on VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting");
static_assert(offsetof(VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting, BrightnessValue) == 0x000000, "Member 'VAltarImageCalibrationWidget_SetAndSaveBrightnessSetting::BrightnessValue' has a wrong offset!");

// Function Altar.VAltarImageCalibrationWidget.GetBrightnessSetting
// 0x0004 (0x0004 - 0x0000)
struct VAltarImageCalibrationWidget_GetBrightnessSetting final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarImageCalibrationWidget_GetBrightnessSetting) == 0x000004, "Wrong alignment on VAltarImageCalibrationWidget_GetBrightnessSetting");
static_assert(sizeof(VAltarImageCalibrationWidget_GetBrightnessSetting) == 0x000004, "Wrong size on VAltarImageCalibrationWidget_GetBrightnessSetting");
static_assert(offsetof(VAltarImageCalibrationWidget_GetBrightnessSetting, ReturnValue) == 0x000000, "Member 'VAltarImageCalibrationWidget_GetBrightnessSetting::ReturnValue' has a wrong offset!");

// Function Altar.VAltarImageCalibrationWidget.GetIsCalibratedSetting
// 0x0001 (0x0001 - 0x0000)
struct VAltarImageCalibrationWidget_GetIsCalibratedSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarImageCalibrationWidget_GetIsCalibratedSetting) == 0x000001, "Wrong alignment on VAltarImageCalibrationWidget_GetIsCalibratedSetting");
static_assert(sizeof(VAltarImageCalibrationWidget_GetIsCalibratedSetting) == 0x000001, "Wrong size on VAltarImageCalibrationWidget_GetIsCalibratedSetting");
static_assert(offsetof(VAltarImageCalibrationWidget_GetIsCalibratedSetting, ReturnValue) == 0x000000, "Member 'VAltarImageCalibrationWidget_GetIsCalibratedSetting::ReturnValue' has a wrong offset!");

// Function Altar.VModern_CharacCreationToggleItem.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModern_CharacCreationToggleItem_SetIsSelected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationToggleItem_SetIsSelected) == 0x000001, "Wrong alignment on VModern_CharacCreationToggleItem_SetIsSelected");
static_assert(sizeof(VModern_CharacCreationToggleItem_SetIsSelected) == 0x000001, "Wrong size on VModern_CharacCreationToggleItem_SetIsSelected");
static_assert(offsetof(VModern_CharacCreationToggleItem_SetIsSelected, Value) == 0x000000, "Member 'VModern_CharacCreationToggleItem_SetIsSelected::Value' has a wrong offset!");

// Function Altar.VModern_CharacCreationToggleItem.SetOption
// 0x00A8 (0x00A8 - 0x0000)
struct VModern_CharacCreationToggleItem_SetOption final
{
public:
	struct FVRaceSexMenuCustomisationOptions      Value;                                             // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationToggleItem_SetOption) == 0x000008, "Wrong alignment on VModern_CharacCreationToggleItem_SetOption");
static_assert(sizeof(VModern_CharacCreationToggleItem_SetOption) == 0x0000A8, "Wrong size on VModern_CharacCreationToggleItem_SetOption");
static_assert(offsetof(VModern_CharacCreationToggleItem_SetOption, Value) == 0x000000, "Member 'VModern_CharacCreationToggleItem_SetOption::Value' has a wrong offset!");

// Function Altar.VModern_CharacCreationToggleItem.SetOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct VModern_CharacCreationToggleItem_SetOptionIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationToggleItem_SetOptionIndex) == 0x000004, "Wrong alignment on VModern_CharacCreationToggleItem_SetOptionIndex");
static_assert(sizeof(VModern_CharacCreationToggleItem_SetOptionIndex) == 0x000004, "Wrong size on VModern_CharacCreationToggleItem_SetOptionIndex");
static_assert(offsetof(VModern_CharacCreationToggleItem_SetOptionIndex, Value) == 0x000000, "Member 'VModern_CharacCreationToggleItem_SetOptionIndex::Value' has a wrong offset!");

// Function Altar.VModern_CharacCreationToggleItem.GetOption
// 0x00A8 (0x00A8 - 0x0000)
struct VModern_CharacCreationToggleItem_GetOption final
{
public:
	struct FVRaceSexMenuCustomisationOptions      ReturnValue;                                       // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationToggleItem_GetOption) == 0x000008, "Wrong alignment on VModern_CharacCreationToggleItem_GetOption");
static_assert(sizeof(VModern_CharacCreationToggleItem_GetOption) == 0x0000A8, "Wrong size on VModern_CharacCreationToggleItem_GetOption");
static_assert(offsetof(VModern_CharacCreationToggleItem_GetOption, ReturnValue) == 0x000000, "Member 'VModern_CharacCreationToggleItem_GetOption::ReturnValue' has a wrong offset!");

// Function Altar.VModern_CharacCreationToggleItem.GetOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct VModern_CharacCreationToggleItem_GetOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationToggleItem_GetOptionIndex) == 0x000004, "Wrong alignment on VModern_CharacCreationToggleItem_GetOptionIndex");
static_assert(sizeof(VModern_CharacCreationToggleItem_GetOptionIndex) == 0x000004, "Wrong size on VModern_CharacCreationToggleItem_GetOptionIndex");
static_assert(offsetof(VModern_CharacCreationToggleItem_GetOptionIndex, ReturnValue) == 0x000000, "Member 'VModern_CharacCreationToggleItem_GetOptionIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModern_CharacCreationToggleItem.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModern_CharacCreationToggleItem_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationToggleItem_IsSelected) == 0x000001, "Wrong alignment on VModern_CharacCreationToggleItem_IsSelected");
static_assert(sizeof(VModern_CharacCreationToggleItem_IsSelected) == 0x000001, "Wrong size on VModern_CharacCreationToggleItem_IsSelected");
static_assert(offsetof(VModern_CharacCreationToggleItem_IsSelected, ReturnValue) == 0x000000, "Member 'VModern_CharacCreationToggleItem_IsSelected::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestItem.SetProperties
// 0x0098 (0x0098 - 0x0000)
struct VLegacyMapMenuQuestItem_SetProperties final
{
public:
	struct FLegacyMapMenuQuestProperties          Value;                                             // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyMapMenuQuestItem_SetProperties");
static_assert(sizeof(VLegacyMapMenuQuestItem_SetProperties) == 0x000098, "Wrong size on VLegacyMapMenuQuestItem_SetProperties");
static_assert(offsetof(VLegacyMapMenuQuestItem_SetProperties, Value) == 0x000000, "Member 'VLegacyMapMenuQuestItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestItem.GetProperties
// 0x0098 (0x0098 - 0x0000)
struct VLegacyMapMenuQuestItem_GetProperties final
{
public:
	struct FLegacyMapMenuQuestProperties          ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyMapMenuQuestItem_GetProperties");
static_assert(sizeof(VLegacyMapMenuQuestItem_GetProperties) == 0x000098, "Wrong size on VLegacyMapMenuQuestItem_GetProperties");
static_assert(offsetof(VLegacyMapMenuQuestItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyMapMenuQuestItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestItem.GetQuestId
// 0x0004 (0x0004 - 0x0000)
struct VLegacyMapMenuQuestItem_GetQuestId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestItem_GetQuestId) == 0x000004, "Wrong alignment on VLegacyMapMenuQuestItem_GetQuestId");
static_assert(sizeof(VLegacyMapMenuQuestItem_GetQuestId) == 0x000004, "Wrong size on VLegacyMapMenuQuestItem_GetQuestId");
static_assert(offsetof(VLegacyMapMenuQuestItem_GetQuestId, ReturnValue) == 0x000000, "Member 'VLegacyMapMenuQuestItem_GetQuestId::ReturnValue' has a wrong offset!");

// Function Altar.VPrepareAttackAnimInstance.OnPrepareAttackEnter
// 0x0020 (0x0020 - 0x0000)
struct VPrepareAttackAnimInstance_OnPrepareAttackEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPrepareAttackAnimInstance_OnPrepareAttackEnter) == 0x000008, "Wrong alignment on VPrepareAttackAnimInstance_OnPrepareAttackEnter");
static_assert(sizeof(VPrepareAttackAnimInstance_OnPrepareAttackEnter) == 0x000020, "Wrong size on VPrepareAttackAnimInstance_OnPrepareAttackEnter");
static_assert(offsetof(VPrepareAttackAnimInstance_OnPrepareAttackEnter, Context) == 0x000000, "Member 'VPrepareAttackAnimInstance_OnPrepareAttackEnter::Context' has a wrong offset!");
static_assert(offsetof(VPrepareAttackAnimInstance_OnPrepareAttackEnter, Node) == 0x000010, "Member 'VPrepareAttackAnimInstance_OnPrepareAttackEnter::Node' has a wrong offset!");

// Function Altar.VSkillItemObject.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VSkillItemObject_SetIsSelected final
{
public:
	bool                                          bNewSelectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillItemObject_SetIsSelected) == 0x000001, "Wrong alignment on VSkillItemObject_SetIsSelected");
static_assert(sizeof(VSkillItemObject_SetIsSelected) == 0x000001, "Wrong size on VSkillItemObject_SetIsSelected");
static_assert(offsetof(VSkillItemObject_SetIsSelected, bNewSelectionState) == 0x000000, "Member 'VSkillItemObject_SetIsSelected::bNewSelectionState' has a wrong offset!");

// Function Altar.VSkillItemObject.SetProperties
// 0x0078 (0x0078 - 0x0000)
struct VSkillItemObject_SetProperties final
{
public:
	struct FSkillsMenuItemProperties              NewProperties;                                     // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillItemObject_SetProperties) == 0x000008, "Wrong alignment on VSkillItemObject_SetProperties");
static_assert(sizeof(VSkillItemObject_SetProperties) == 0x000078, "Wrong size on VSkillItemObject_SetProperties");
static_assert(offsetof(VSkillItemObject_SetProperties, NewProperties) == 0x000000, "Member 'VSkillItemObject_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VSkillItemObject.GetProperties
// 0x0078 (0x0078 - 0x0000)
struct VSkillItemObject_GetProperties final
{
public:
	struct FSkillsMenuItemProperties              ReturnValue;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillItemObject_GetProperties) == 0x000008, "Wrong alignment on VSkillItemObject_GetProperties");
static_assert(sizeof(VSkillItemObject_GetProperties) == 0x000078, "Wrong size on VSkillItemObject_GetProperties");
static_assert(offsetof(VSkillItemObject_GetProperties, ReturnValue) == 0x000000, "Member 'VSkillItemObject_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VSkillItemObject.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct VSkillItemObject_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillItemObject_IsSelected) == 0x000001, "Wrong alignment on VSkillItemObject_IsSelected");
static_assert(sizeof(VSkillItemObject_IsSelected) == 0x000001, "Wrong size on VSkillItemObject_IsSelected");
static_assert(offsetof(VSkillItemObject_IsSelected, ReturnValue) == 0x000000, "Member 'VSkillItemObject_IsSelected::ReturnValue' has a wrong offset!");

// Function Altar.LightRigTriggerVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct LightRigTriggerVolume_OnBeginOverlap final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightRigTriggerVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on LightRigTriggerVolume_OnBeginOverlap");
static_assert(sizeof(LightRigTriggerVolume_OnBeginOverlap) == 0x000010, "Wrong size on LightRigTriggerVolume_OnBeginOverlap");
static_assert(offsetof(LightRigTriggerVolume_OnBeginOverlap, Actor) == 0x000000, "Member 'LightRigTriggerVolume_OnBeginOverlap::Actor' has a wrong offset!");
static_assert(offsetof(LightRigTriggerVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'LightRigTriggerVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function Altar.LightRigTriggerVolume.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct LightRigTriggerVolume_OnEndOverlap final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightRigTriggerVolume_OnEndOverlap) == 0x000008, "Wrong alignment on LightRigTriggerVolume_OnEndOverlap");
static_assert(sizeof(LightRigTriggerVolume_OnEndOverlap) == 0x000010, "Wrong size on LightRigTriggerVolume_OnEndOverlap");
static_assert(offsetof(LightRigTriggerVolume_OnEndOverlap, Actor) == 0x000000, "Member 'LightRigTriggerVolume_OnEndOverlap::Actor' has a wrong offset!");
static_assert(offsetof(LightRigTriggerVolume_OnEndOverlap, OtherActor) == 0x000008, "Member 'LightRigTriggerVolume_OnEndOverlap::OtherActor' has a wrong offset!");

// Function Altar.LocalMapManager.GetLocalMapCoordinates
// 0x0028 (0x0028 - 0x0000)
struct LocalMapManager_GetLocalMapCoordinates final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalMapManager_GetLocalMapCoordinates) == 0x000008, "Wrong alignment on LocalMapManager_GetLocalMapCoordinates");
static_assert(sizeof(LocalMapManager_GetLocalMapCoordinates) == 0x000028, "Wrong size on LocalMapManager_GetLocalMapCoordinates");
static_assert(offsetof(LocalMapManager_GetLocalMapCoordinates, WorldPosition) == 0x000000, "Member 'LocalMapManager_GetLocalMapCoordinates::WorldPosition' has a wrong offset!");
static_assert(offsetof(LocalMapManager_GetLocalMapCoordinates, ReturnValue) == 0x000018, "Member 'LocalMapManager_GetLocalMapCoordinates::ReturnValue' has a wrong offset!");

// Function Altar.LocalMapManager.LocalMapToUnrealWorld
// 0x0038 (0x0038 - 0x0000)
struct LocalMapManager_LocalMapToUnrealWorld final
{
public:
	struct FVector2D                              LocalMapPosition;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapSize;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalMapManager_LocalMapToUnrealWorld) == 0x000008, "Wrong alignment on LocalMapManager_LocalMapToUnrealWorld");
static_assert(sizeof(LocalMapManager_LocalMapToUnrealWorld) == 0x000038, "Wrong size on LocalMapManager_LocalMapToUnrealWorld");
static_assert(offsetof(LocalMapManager_LocalMapToUnrealWorld, LocalMapPosition) == 0x000000, "Member 'LocalMapManager_LocalMapToUnrealWorld::LocalMapPosition' has a wrong offset!");
static_assert(offsetof(LocalMapManager_LocalMapToUnrealWorld, MapSize) == 0x000010, "Member 'LocalMapManager_LocalMapToUnrealWorld::MapSize' has a wrong offset!");
static_assert(offsetof(LocalMapManager_LocalMapToUnrealWorld, ReturnValue) == 0x000020, "Member 'LocalMapManager_LocalMapToUnrealWorld::ReturnValue' has a wrong offset!");

// Function Altar.VMergedSkeletalMeshComponent.GetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct VMergedSkeletalMeshComponent_GetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMergedSkeletalMeshComponent_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on VMergedSkeletalMeshComponent_GetSkeletalMeshComponent");
static_assert(sizeof(VMergedSkeletalMeshComponent_GetSkeletalMeshComponent) == 0x000008, "Wrong size on VMergedSkeletalMeshComponent_GetSkeletalMeshComponent");
static_assert(offsetof(VMergedSkeletalMeshComponent_GetSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'VMergedSkeletalMeshComponent_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function Altar.VMergedSkeletalMeshComponent.SetMergedMesh
// 0x0018 (0x0018 - 0x0000)
struct VMergedSkeletalMeshComponent_SetMergedMesh final
{
public:
	class USkeletalMeshComponent*                 MasterPoseComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  SkeletalMeshes;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMergedSkeletalMeshComponent_SetMergedMesh) == 0x000008, "Wrong alignment on VMergedSkeletalMeshComponent_SetMergedMesh");
static_assert(sizeof(VMergedSkeletalMeshComponent_SetMergedMesh) == 0x000018, "Wrong size on VMergedSkeletalMeshComponent_SetMergedMesh");
static_assert(offsetof(VMergedSkeletalMeshComponent_SetMergedMesh, MasterPoseComponent) == 0x000000, "Member 'VMergedSkeletalMeshComponent_SetMergedMesh::MasterPoseComponent' has a wrong offset!");
static_assert(offsetof(VMergedSkeletalMeshComponent_SetMergedMesh, SkeletalMeshes) == 0x000008, "Member 'VMergedSkeletalMeshComponent_SetMergedMesh::SkeletalMeshes' has a wrong offset!");

// Function Altar.MeshMergeFunctionLibrary.MergeMeshes
// 0x0048 (0x0048 - 0x0000)
struct MeshMergeFunctionLibrary_MergeMeshes final
{
public:
	struct FSkeletalMeshMergeParams               Params_0;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshMergeFunctionLibrary_MergeMeshes) == 0x000008, "Wrong alignment on MeshMergeFunctionLibrary_MergeMeshes");
static_assert(sizeof(MeshMergeFunctionLibrary_MergeMeshes) == 0x000048, "Wrong size on MeshMergeFunctionLibrary_MergeMeshes");
static_assert(offsetof(MeshMergeFunctionLibrary_MergeMeshes, Params_0) == 0x000000, "Member 'MeshMergeFunctionLibrary_MergeMeshes::Params_0' has a wrong offset!");
static_assert(offsetof(MeshMergeFunctionLibrary_MergeMeshes, ReturnValue) == 0x000040, "Member 'MeshMergeFunctionLibrary_MergeMeshes::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyListViewBase.OnScrollOffsetOfEndChangedInternal
// 0x0004 (0x0004 - 0x0000)
struct VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal final
{
public:
	float                                         ScrollOffsetOfEnd;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal) == 0x000004, "Wrong alignment on VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal");
static_assert(sizeof(VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal) == 0x000004, "Wrong size on VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal");
static_assert(offsetof(VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal, ScrollOffsetOfEnd) == 0x000000, "Member 'VLegacyListViewBase_OnScrollOffsetOfEndChangedInternal::ScrollOffsetOfEnd' has a wrong offset!");

// Function Altar.VLegacyListViewBase.GetEntryFromItem
// 0x0010 (0x0010 - 0x0000)
struct VLegacyListViewBase_GetEntryFromItem final
{
public:
	const class UObject*                          Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyListViewBase_GetEntryFromItem) == 0x000008, "Wrong alignment on VLegacyListViewBase_GetEntryFromItem");
static_assert(sizeof(VLegacyListViewBase_GetEntryFromItem) == 0x000010, "Wrong size on VLegacyListViewBase_GetEntryFromItem");
static_assert(offsetof(VLegacyListViewBase_GetEntryFromItem, Item) == 0x000000, "Member 'VLegacyListViewBase_GetEntryFromItem::Item' has a wrong offset!");
static_assert(offsetof(VLegacyListViewBase_GetEntryFromItem, ReturnValue) == 0x000008, "Member 'VLegacyListViewBase_GetEntryFromItem::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyListViewBase.GetItemFromEntryWidget
// 0x0010 (0x0010 - 0x0000)
struct VLegacyListViewBase_GetItemFromEntryWidget final
{
public:
	const class UUserWidget*                      EntryWidget;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyListViewBase_GetItemFromEntryWidget) == 0x000008, "Wrong alignment on VLegacyListViewBase_GetItemFromEntryWidget");
static_assert(sizeof(VLegacyListViewBase_GetItemFromEntryWidget) == 0x000010, "Wrong size on VLegacyListViewBase_GetItemFromEntryWidget");
static_assert(offsetof(VLegacyListViewBase_GetItemFromEntryWidget, EntryWidget) == 0x000000, "Member 'VLegacyListViewBase_GetItemFromEntryWidget::EntryWidget' has a wrong offset!");
static_assert(offsetof(VLegacyListViewBase_GetItemFromEntryWidget, ReturnValue) == 0x000008, "Member 'VLegacyListViewBase_GetItemFromEntryWidget::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyListViewBase.GetItemIndexOfTopEntry
// 0x0004 (0x0004 - 0x0000)
struct VLegacyListViewBase_GetItemIndexOfTopEntry final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyListViewBase_GetItemIndexOfTopEntry) == 0x000004, "Wrong alignment on VLegacyListViewBase_GetItemIndexOfTopEntry");
static_assert(sizeof(VLegacyListViewBase_GetItemIndexOfTopEntry) == 0x000004, "Wrong size on VLegacyListViewBase_GetItemIndexOfTopEntry");
static_assert(offsetof(VLegacyListViewBase_GetItemIndexOfTopEntry, ReturnValue) == 0x000000, "Member 'VLegacyListViewBase_GetItemIndexOfTopEntry::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyListViewBase.GetScrollOffsetOfEnd
// 0x0004 (0x0004 - 0x0000)
struct VLegacyListViewBase_GetScrollOffsetOfEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyListViewBase_GetScrollOffsetOfEnd) == 0x000004, "Wrong alignment on VLegacyListViewBase_GetScrollOffsetOfEnd");
static_assert(sizeof(VLegacyListViewBase_GetScrollOffsetOfEnd) == 0x000004, "Wrong size on VLegacyListViewBase_GetScrollOffsetOfEnd");
static_assert(offsetof(VLegacyListViewBase_GetScrollOffsetOfEnd, ReturnValue) == 0x000000, "Member 'VLegacyListViewBase_GetScrollOffsetOfEnd::ReturnValue' has a wrong offset!");

// Function Altar.NavigationListview.NavigateToItemIndex
// 0x0018 (0x0018 - 0x0000)
struct NavigationListview_NavigateToItemIndex final
{
public:
	int32                                         SelectedChildIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INavigationUIElement>  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationListview_NavigateToItemIndex) == 0x000008, "Wrong alignment on NavigationListview_NavigateToItemIndex");
static_assert(sizeof(NavigationListview_NavigateToItemIndex) == 0x000018, "Wrong size on NavigationListview_NavigateToItemIndex");
static_assert(offsetof(NavigationListview_NavigateToItemIndex, SelectedChildIndex) == 0x000000, "Member 'NavigationListview_NavigateToItemIndex::SelectedChildIndex' has a wrong offset!");
static_assert(offsetof(NavigationListview_NavigateToItemIndex, ReturnValue) == 0x000008, "Member 'NavigationListview_NavigateToItemIndex::ReturnValue' has a wrong offset!");

// Function Altar.NavigationListview.OnEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct NavigationListview_OnEntryClicked final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationListview_OnEntryClicked) == 0x000008, "Wrong alignment on NavigationListview_OnEntryClicked");
static_assert(sizeof(NavigationListview_OnEntryClicked) == 0x000008, "Wrong size on NavigationListview_OnEntryClicked");
static_assert(offsetof(NavigationListview_OnEntryClicked, Item) == 0x000000, "Member 'NavigationListview_OnEntryClicked::Item' has a wrong offset!");

// Function Altar.NavigationListview.GetChildIndexFromWidget
// 0x0010 (0x0010 - 0x0000)
struct NavigationListview_GetChildIndexFromWidget final
{
public:
	class UWidget*                                NavigatableWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationListview_GetChildIndexFromWidget) == 0x000008, "Wrong alignment on NavigationListview_GetChildIndexFromWidget");
static_assert(sizeof(NavigationListview_GetChildIndexFromWidget) == 0x000010, "Wrong size on NavigationListview_GetChildIndexFromWidget");
static_assert(offsetof(NavigationListview_GetChildIndexFromWidget, NavigatableWidget) == 0x000000, "Member 'NavigationListview_GetChildIndexFromWidget::NavigatableWidget' has a wrong offset!");
static_assert(offsetof(NavigationListview_GetChildIndexFromWidget, ReturnValue) == 0x000008, "Member 'NavigationListview_GetChildIndexFromWidget::ReturnValue' has a wrong offset!");

// Function Altar.NavigationListviewEntry.SetItemObject
// 0x0008 (0x0008 - 0x0000)
struct NavigationListviewEntry_SetItemObject final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationListviewEntry_SetItemObject) == 0x000008, "Wrong alignment on NavigationListviewEntry_SetItemObject");
static_assert(sizeof(NavigationListviewEntry_SetItemObject) == 0x000008, "Wrong size on NavigationListviewEntry_SetItemObject");
static_assert(offsetof(NavigationListviewEntry_SetItemObject, Item) == 0x000000, "Member 'NavigationListviewEntry_SetItemObject::Item' has a wrong offset!");

// Function Altar.NavigationListviewEntry.IsListItemSelectable
// 0x0001 (0x0001 - 0x0000)
struct NavigationListviewEntry_IsListItemSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationListviewEntry_IsListItemSelectable) == 0x000001, "Wrong alignment on NavigationListviewEntry_IsListItemSelectable");
static_assert(sizeof(NavigationListviewEntry_IsListItemSelectable) == 0x000001, "Wrong size on NavigationListviewEntry_IsListItemSelectable");
static_assert(offsetof(NavigationListviewEntry_IsListItemSelectable, ReturnValue) == 0x000000, "Member 'NavigationListviewEntry_IsListItemSelectable::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUIElement.GetNavigationWidgetForAction
// 0x0018 (0x0018 - 0x0000)
struct NavigationUIElement_GetNavigationWidgetForAction final
{
public:
	ENavigationInputAction                        Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INavigationUIElement>  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUIElement_GetNavigationWidgetForAction) == 0x000008, "Wrong alignment on NavigationUIElement_GetNavigationWidgetForAction");
static_assert(sizeof(NavigationUIElement_GetNavigationWidgetForAction) == 0x000018, "Wrong size on NavigationUIElement_GetNavigationWidgetForAction");
static_assert(offsetof(NavigationUIElement_GetNavigationWidgetForAction, Action) == 0x000000, "Member 'NavigationUIElement_GetNavigationWidgetForAction::Action' has a wrong offset!");
static_assert(offsetof(NavigationUIElement_GetNavigationWidgetForAction, ReturnValue) == 0x000008, "Member 'NavigationUIElement_GetNavigationWidgetForAction::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUIElement.IsNavigatable
// 0x0001 (0x0001 - 0x0000)
struct NavigationUIElement_IsNavigatable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUIElement_IsNavigatable) == 0x000001, "Wrong alignment on NavigationUIElement_IsNavigatable");
static_assert(sizeof(NavigationUIElement_IsNavigatable) == 0x000001, "Wrong size on NavigationUIElement_IsNavigatable");
static_assert(offsetof(NavigationUIElement_IsNavigatable, ReturnValue) == 0x000000, "Member 'NavigationUIElement_IsNavigatable::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.NavigateTo
// 0x0010 (0x0010 - 0x0000)
struct NavigationUISubsystem_NavigateTo final
{
public:
	TScriptInterface<class INavigationUIElement>  DestinationElement;                                // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_NavigateTo) == 0x000008, "Wrong alignment on NavigationUISubsystem_NavigateTo");
static_assert(sizeof(NavigationUISubsystem_NavigateTo) == 0x000010, "Wrong size on NavigationUISubsystem_NavigateTo");
static_assert(offsetof(NavigationUISubsystem_NavigateTo, DestinationElement) == 0x000000, "Member 'NavigationUISubsystem_NavigateTo::DestinationElement' has a wrong offset!");

// Function Altar.NavigationUISubsystem.StartNavigation
// 0x0020 (0x0020 - 0x0000)
struct NavigationUISubsystem_StartNavigation final
{
public:
	TScriptInterface<class INavigationUIElement>  DefaultNavigationElement;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImmediatelyFocus;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAltarMenu*                            Menu;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_StartNavigation) == 0x000008, "Wrong alignment on NavigationUISubsystem_StartNavigation");
static_assert(sizeof(NavigationUISubsystem_StartNavigation) == 0x000020, "Wrong size on NavigationUISubsystem_StartNavigation");
static_assert(offsetof(NavigationUISubsystem_StartNavigation, DefaultNavigationElement) == 0x000000, "Member 'NavigationUISubsystem_StartNavigation::DefaultNavigationElement' has a wrong offset!");
static_assert(offsetof(NavigationUISubsystem_StartNavigation, ImmediatelyFocus) == 0x000010, "Member 'NavigationUISubsystem_StartNavigation::ImmediatelyFocus' has a wrong offset!");
static_assert(offsetof(NavigationUISubsystem_StartNavigation, Menu) == 0x000018, "Member 'NavigationUISubsystem_StartNavigation::Menu' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetCurrentInputType
// 0x0001 (0x0001 - 0x0000)
struct NavigationUISubsystem_GetCurrentInputType final
{
public:
	ECommonInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetCurrentInputType) == 0x000001, "Wrong alignment on NavigationUISubsystem_GetCurrentInputType");
static_assert(sizeof(NavigationUISubsystem_GetCurrentInputType) == 0x000001, "Wrong size on NavigationUISubsystem_GetCurrentInputType");
static_assert(offsetof(NavigationUISubsystem_GetCurrentInputType, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetCurrentInputType::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetCurrentNavigationWidget
// 0x0008 (0x0008 - 0x0000)
struct NavigationUISubsystem_GetCurrentNavigationWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetCurrentNavigationWidget) == 0x000008, "Wrong alignment on NavigationUISubsystem_GetCurrentNavigationWidget");
static_assert(sizeof(NavigationUISubsystem_GetCurrentNavigationWidget) == 0x000008, "Wrong size on NavigationUISubsystem_GetCurrentNavigationWidget");
static_assert(offsetof(NavigationUISubsystem_GetCurrentNavigationWidget, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetCurrentNavigationWidget::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetLastNavigationAction
// 0x0001 (0x0001 - 0x0000)
struct NavigationUISubsystem_GetLastNavigationAction final
{
public:
	ENavigationInputAction                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetLastNavigationAction) == 0x000001, "Wrong alignment on NavigationUISubsystem_GetLastNavigationAction");
static_assert(sizeof(NavigationUISubsystem_GetLastNavigationAction) == 0x000001, "Wrong size on NavigationUISubsystem_GetLastNavigationAction");
static_assert(offsetof(NavigationUISubsystem_GetLastNavigationAction, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetLastNavigationAction::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetLefthumbstickAxisValue_Y
// 0x0004 (0x0004 - 0x0000)
struct NavigationUISubsystem_GetLefthumbstickAxisValue_Y final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetLefthumbstickAxisValue_Y) == 0x000004, "Wrong alignment on NavigationUISubsystem_GetLefthumbstickAxisValue_Y");
static_assert(sizeof(NavigationUISubsystem_GetLefthumbstickAxisValue_Y) == 0x000004, "Wrong size on NavigationUISubsystem_GetLefthumbstickAxisValue_Y");
static_assert(offsetof(NavigationUISubsystem_GetLefthumbstickAxisValue_Y, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetLefthumbstickAxisValue_Y::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetLeftThumbstickAxisValue_X
// 0x0004 (0x0004 - 0x0000)
struct NavigationUISubsystem_GetLeftThumbstickAxisValue_X final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetLeftThumbstickAxisValue_X) == 0x000004, "Wrong alignment on NavigationUISubsystem_GetLeftThumbstickAxisValue_X");
static_assert(sizeof(NavigationUISubsystem_GetLeftThumbstickAxisValue_X) == 0x000004, "Wrong size on NavigationUISubsystem_GetLeftThumbstickAxisValue_X");
static_assert(offsetof(NavigationUISubsystem_GetLeftThumbstickAxisValue_X, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetLeftThumbstickAxisValue_X::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetRightThumbstickAxisValue_X
// 0x0004 (0x0004 - 0x0000)
struct NavigationUISubsystem_GetRightThumbstickAxisValue_X final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetRightThumbstickAxisValue_X) == 0x000004, "Wrong alignment on NavigationUISubsystem_GetRightThumbstickAxisValue_X");
static_assert(sizeof(NavigationUISubsystem_GetRightThumbstickAxisValue_X) == 0x000004, "Wrong size on NavigationUISubsystem_GetRightThumbstickAxisValue_X");
static_assert(offsetof(NavigationUISubsystem_GetRightThumbstickAxisValue_X, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetRightThumbstickAxisValue_X::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.GetRightThumbstickAxisValue_Y
// 0x0004 (0x0004 - 0x0000)
struct NavigationUISubsystem_GetRightThumbstickAxisValue_Y final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_GetRightThumbstickAxisValue_Y) == 0x000004, "Wrong alignment on NavigationUISubsystem_GetRightThumbstickAxisValue_Y");
static_assert(sizeof(NavigationUISubsystem_GetRightThumbstickAxisValue_Y) == 0x000004, "Wrong size on NavigationUISubsystem_GetRightThumbstickAxisValue_Y");
static_assert(offsetof(NavigationUISubsystem_GetRightThumbstickAxisValue_Y, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_GetRightThumbstickAxisValue_Y::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.IsGamepadActive
// 0x0001 (0x0001 - 0x0000)
struct NavigationUISubsystem_IsGamepadActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_IsGamepadActive) == 0x000001, "Wrong alignment on NavigationUISubsystem_IsGamepadActive");
static_assert(sizeof(NavigationUISubsystem_IsGamepadActive) == 0x000001, "Wrong size on NavigationUISubsystem_IsGamepadActive");
static_assert(offsetof(NavigationUISubsystem_IsGamepadActive, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_IsGamepadActive::ReturnValue' has a wrong offset!");

// Function Altar.NavigationUISubsystem.IsShiftKeyDown
// 0x0001 (0x0001 - 0x0000)
struct NavigationUISubsystem_IsShiftKeyDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationUISubsystem_IsShiftKeyDown) == 0x000001, "Wrong alignment on NavigationUISubsystem_IsShiftKeyDown");
static_assert(sizeof(NavigationUISubsystem_IsShiftKeyDown) == 0x000001, "Wrong size on NavigationUISubsystem_IsShiftKeyDown");
static_assert(offsetof(NavigationUISubsystem_IsShiftKeyDown, ReturnValue) == 0x000000, "Member 'NavigationUISubsystem_IsShiftKeyDown::ReturnValue' has a wrong offset!");

// Function Altar.NavMeshLandmarkMetaClustersSubsystem.OnLandmarkActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay) == 0x000008, "Wrong alignment on NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay");
static_assert(sizeof(NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay) == 0x000010, "Wrong size on NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay");
static_assert(offsetof(NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay, Actor) == 0x000000, "Member 'NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay, EndPlayReason) == 0x000008, "Member 'NavMeshLandmarkMetaClustersSubsystem_OnLandmarkActorEndPlay::EndPlayReason' has a wrong offset!");

// Function Altar.NavMeshLandmarkMetaClustersSubsystem.OnNavDataRegistered
// 0x0008 (0x0008 - 0x0000)
struct NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered final
{
public:
	const class ANavigationData*                  NavData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered) == 0x000008, "Wrong alignment on NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered");
static_assert(sizeof(NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered) == 0x000008, "Wrong size on NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered");
static_assert(offsetof(NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered, NavData) == 0x000000, "Member 'NavMeshLandmarkMetaClustersSubsystem_OnNavDataRegistered::NavData' has a wrong offset!");

// Function Altar.VLegacyStatsMenu.MoveToNextPage
// 0x0001 (0x0001 - 0x0000)
struct VLegacyStatsMenu_MoveToNextPage final
{
public:
	bool                                          Right;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenu_MoveToNextPage) == 0x000001, "Wrong alignment on VLegacyStatsMenu_MoveToNextPage");
static_assert(sizeof(VLegacyStatsMenu_MoveToNextPage) == 0x000001, "Wrong size on VLegacyStatsMenu_MoveToNextPage");
static_assert(offsetof(VLegacyStatsMenu_MoveToNextPage, Right) == 0x000000, "Member 'VLegacyStatsMenu_MoveToNextPage::Right' has a wrong offset!");

// Function Altar.VLegacyStatsMenu.GetPage1
// 0x0008 (0x0008 - 0x0000)
struct VLegacyStatsMenu_GetPage1 final
{
public:
	class UVLegacyStatsMenuPage1*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenu_GetPage1) == 0x000008, "Wrong alignment on VLegacyStatsMenu_GetPage1");
static_assert(sizeof(VLegacyStatsMenu_GetPage1) == 0x000008, "Wrong size on VLegacyStatsMenu_GetPage1");
static_assert(offsetof(VLegacyStatsMenu_GetPage1, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenu_GetPage1::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenu.GetPage2
// 0x0008 (0x0008 - 0x0000)
struct VLegacyStatsMenu_GetPage2 final
{
public:
	class UVLegacyStatsMenuPage2*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenu_GetPage2) == 0x000008, "Wrong alignment on VLegacyStatsMenu_GetPage2");
static_assert(sizeof(VLegacyStatsMenu_GetPage2) == 0x000008, "Wrong size on VLegacyStatsMenu_GetPage2");
static_assert(offsetof(VLegacyStatsMenu_GetPage2, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenu_GetPage2::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenu.GetPage3
// 0x0008 (0x0008 - 0x0000)
struct VLegacyStatsMenu_GetPage3 final
{
public:
	class UVLegacyStatsMenuPage3*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenu_GetPage3) == 0x000008, "Wrong alignment on VLegacyStatsMenu_GetPage3");
static_assert(sizeof(VLegacyStatsMenu_GetPage3) == 0x000008, "Wrong size on VLegacyStatsMenu_GetPage3");
static_assert(offsetof(VLegacyStatsMenu_GetPage3, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenu_GetPage3::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenu.GetPage4
// 0x0008 (0x0008 - 0x0000)
struct VLegacyStatsMenu_GetPage4 final
{
public:
	class UVLegacyStatsMenuPage4*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenu_GetPage4) == 0x000008, "Wrong alignment on VLegacyStatsMenu_GetPage4");
static_assert(sizeof(VLegacyStatsMenu_GetPage4) == 0x000008, "Wrong size on VLegacyStatsMenu_GetPage4");
static_assert(offsetof(VLegacyStatsMenu_GetPage4, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenu_GetPage4::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenu.GetPage5
// 0x0008 (0x0008 - 0x0000)
struct VLegacyStatsMenu_GetPage5 final
{
public:
	class UVLegacyStatsMenuPage5*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenu_GetPage5) == 0x000008, "Wrong alignment on VLegacyStatsMenu_GetPage5");
static_assert(sizeof(VLegacyStatsMenu_GetPage5) == 0x000008, "Wrong size on VLegacyStatsMenu_GetPage5");
static_assert(offsetof(VLegacyStatsMenu_GetPage5, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenu_GetPage5::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.RegisterSendClickOnItemHandler
// 0x0004 (0x0004 - 0x0000)
struct VInventoryMenuViewModel_RegisterSendClickOnItemHandler final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_RegisterSendClickOnItemHandler) == 0x000004, "Wrong alignment on VInventoryMenuViewModel_RegisterSendClickOnItemHandler");
static_assert(sizeof(VInventoryMenuViewModel_RegisterSendClickOnItemHandler) == 0x000004, "Wrong size on VInventoryMenuViewModel_RegisterSendClickOnItemHandler");
static_assert(offsetof(VInventoryMenuViewModel_RegisterSendClickOnItemHandler, ItemIndex) == 0x000000, "Member 'VInventoryMenuViewModel_RegisterSendClickOnItemHandler::ItemIndex' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.RegisterSendDropAllItemHandler
// 0x0008 (0x0008 - 0x0000)
struct VInventoryMenuViewModel_RegisterSendDropAllItemHandler final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_RegisterSendDropAllItemHandler) == 0x000004, "Wrong alignment on VInventoryMenuViewModel_RegisterSendDropAllItemHandler");
static_assert(sizeof(VInventoryMenuViewModel_RegisterSendDropAllItemHandler) == 0x000008, "Wrong size on VInventoryMenuViewModel_RegisterSendDropAllItemHandler");
static_assert(offsetof(VInventoryMenuViewModel_RegisterSendDropAllItemHandler, ItemIndex) == 0x000000, "Member 'VInventoryMenuViewModel_RegisterSendDropAllItemHandler::ItemIndex' has a wrong offset!");
static_assert(offsetof(VInventoryMenuViewModel_RegisterSendDropAllItemHandler, Count) == 0x000004, "Member 'VInventoryMenuViewModel_RegisterSendDropAllItemHandler::Count' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.RegisterSendDropAndHoldItemHandler
// 0x0004 (0x0004 - 0x0000)
struct VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler) == 0x000004, "Wrong alignment on VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler");
static_assert(sizeof(VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler) == 0x000004, "Wrong size on VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler");
static_assert(offsetof(VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler, ItemIndex) == 0x000000, "Member 'VInventoryMenuViewModel_RegisterSendDropAndHoldItemHandler::ItemIndex' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.RegisterSendDropItemHandler
// 0x0004 (0x0004 - 0x0000)
struct VInventoryMenuViewModel_RegisterSendDropItemHandler final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_RegisterSendDropItemHandler) == 0x000004, "Wrong alignment on VInventoryMenuViewModel_RegisterSendDropItemHandler");
static_assert(sizeof(VInventoryMenuViewModel_RegisterSendDropItemHandler) == 0x000004, "Wrong size on VInventoryMenuViewModel_RegisterSendDropItemHandler");
static_assert(offsetof(VInventoryMenuViewModel_RegisterSendDropItemHandler, ItemIndex) == 0x000000, "Member 'VInventoryMenuViewModel_RegisterSendDropItemHandler::ItemIndex' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.RegisterSendItemHoverHandler
// 0x0004 (0x0004 - 0x0000)
struct VInventoryMenuViewModel_RegisterSendItemHoverHandler final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_RegisterSendItemHoverHandler) == 0x000004, "Wrong alignment on VInventoryMenuViewModel_RegisterSendItemHoverHandler");
static_assert(sizeof(VInventoryMenuViewModel_RegisterSendItemHoverHandler) == 0x000004, "Wrong size on VInventoryMenuViewModel_RegisterSendItemHoverHandler");
static_assert(offsetof(VInventoryMenuViewModel_RegisterSendItemHoverHandler, ItemIndex) == 0x000000, "Member 'VInventoryMenuViewModel_RegisterSendItemHoverHandler::ItemIndex' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.ReplaceCurrentPageItemsInventory
// 0x0010 (0x0010 - 0x0000)
struct VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> NewPageInventory;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory) == 0x000008, "Wrong alignment on VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory");
static_assert(sizeof(VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory) == 0x000010, "Wrong size on VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory");
static_assert(offsetof(VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory, NewPageInventory) == 0x000000, "Member 'VInventoryMenuViewModel_ReplaceCurrentPageItemsInventory::NewPageInventory' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetBlockBackAction
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_SetBlockBackAction final
{
public:
	bool                                          bNewBlockBackAction;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetBlockBackAction) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_SetBlockBackAction");
static_assert(sizeof(VInventoryMenuViewModel_SetBlockBackAction) == 0x000001, "Wrong size on VInventoryMenuViewModel_SetBlockBackAction");
static_assert(offsetof(VInventoryMenuViewModel_SetBlockBackAction, bNewBlockBackAction) == 0x000000, "Member 'VInventoryMenuViewModel_SetBlockBackAction::bNewBlockBackAction' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetCurrentPageInventory
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_SetCurrentPageInventory final
{
public:
	ELegacyInventoryMenuPage                      NewPage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetCurrentPageInventory) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_SetCurrentPageInventory");
static_assert(sizeof(VInventoryMenuViewModel_SetCurrentPageInventory) == 0x000001, "Wrong size on VInventoryMenuViewModel_SetCurrentPageInventory");
static_assert(offsetof(VInventoryMenuViewModel_SetCurrentPageInventory, NewPage) == 0x000000, "Member 'VInventoryMenuViewModel_SetCurrentPageInventory::NewPage' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetExtraData
// 0x0028 (0x0028 - 0x0000)
struct VInventoryMenuViewModel_SetExtraData final
{
public:
	struct FLegacyInventoryMenuExtraData          NewExtraData;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetExtraData) == 0x000008, "Wrong alignment on VInventoryMenuViewModel_SetExtraData");
static_assert(sizeof(VInventoryMenuViewModel_SetExtraData) == 0x000028, "Wrong size on VInventoryMenuViewModel_SetExtraData");
static_assert(offsetof(VInventoryMenuViewModel_SetExtraData, NewExtraData) == 0x000000, "Member 'VInventoryMenuViewModel_SetExtraData::NewExtraData' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetInventory
// 0x0010 (0x0010 - 0x0000)
struct VInventoryMenuViewModel_SetInventory final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> InventoryItems;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetInventory) == 0x000008, "Wrong alignment on VInventoryMenuViewModel_SetInventory");
static_assert(sizeof(VInventoryMenuViewModel_SetInventory) == 0x000010, "Wrong size on VInventoryMenuViewModel_SetInventory");
static_assert(offsetof(VInventoryMenuViewModel_SetInventory, InventoryItems) == 0x000000, "Member 'VInventoryMenuViewModel_SetInventory::InventoryItems' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetIsListViewHovered
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_SetIsListViewHovered final
{
public:
	bool                                          bNewIsListViewHovered;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetIsListViewHovered) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_SetIsListViewHovered");
static_assert(sizeof(VInventoryMenuViewModel_SetIsListViewHovered) == 0x000001, "Wrong size on VInventoryMenuViewModel_SetIsListViewHovered");
static_assert(offsetof(VInventoryMenuViewModel_SetIsListViewHovered, bNewIsListViewHovered) == 0x000000, "Member 'VInventoryMenuViewModel_SetIsListViewHovered::bNewIsListViewHovered' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetIsSortReversedInventory
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_SetIsSortReversedInventory final
{
public:
	bool                                          bNewIsSortReversedInventory;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetIsSortReversedInventory) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_SetIsSortReversedInventory");
static_assert(sizeof(VInventoryMenuViewModel_SetIsSortReversedInventory) == 0x000001, "Wrong size on VInventoryMenuViewModel_SetIsSortReversedInventory");
static_assert(offsetof(VInventoryMenuViewModel_SetIsSortReversedInventory, bNewIsSortReversedInventory) == 0x000000, "Member 'VInventoryMenuViewModel_SetIsSortReversedInventory::bNewIsSortReversedInventory' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.SetSortTypeInventory
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_SetSortTypeInventory final
{
public:
	EOriginalInventoryMenuSortType                NewSortTypeInventory;                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_SetSortTypeInventory) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_SetSortTypeInventory");
static_assert(sizeof(VInventoryMenuViewModel_SetSortTypeInventory) == 0x000001, "Wrong size on VInventoryMenuViewModel_SetSortTypeInventory");
static_assert(offsetof(VInventoryMenuViewModel_SetSortTypeInventory, NewSortTypeInventory) == 0x000000, "Member 'VInventoryMenuViewModel_SetSortTypeInventory::NewSortTypeInventory' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetBlockBackAction
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_GetBlockBackAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetBlockBackAction) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_GetBlockBackAction");
static_assert(sizeof(VInventoryMenuViewModel_GetBlockBackAction) == 0x000001, "Wrong size on VInventoryMenuViewModel_GetBlockBackAction");
static_assert(offsetof(VInventoryMenuViewModel_GetBlockBackAction, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetBlockBackAction::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetCurrentPageInventory
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_GetCurrentPageInventory final
{
public:
	ELegacyInventoryMenuPage                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetCurrentPageInventory) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_GetCurrentPageInventory");
static_assert(sizeof(VInventoryMenuViewModel_GetCurrentPageInventory) == 0x000001, "Wrong size on VInventoryMenuViewModel_GetCurrentPageInventory");
static_assert(offsetof(VInventoryMenuViewModel_GetCurrentPageInventory, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetCurrentPageInventory::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetCurrentPageItemsInventory
// 0x0010 (0x0010 - 0x0000)
struct VInventoryMenuViewModel_GetCurrentPageItemsInventory final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> ReturnValue;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetCurrentPageItemsInventory) == 0x000008, "Wrong alignment on VInventoryMenuViewModel_GetCurrentPageItemsInventory");
static_assert(sizeof(VInventoryMenuViewModel_GetCurrentPageItemsInventory) == 0x000010, "Wrong size on VInventoryMenuViewModel_GetCurrentPageItemsInventory");
static_assert(offsetof(VInventoryMenuViewModel_GetCurrentPageItemsInventory, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetCurrentPageItemsInventory::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetExtraData
// 0x0028 (0x0028 - 0x0000)
struct VInventoryMenuViewModel_GetExtraData final
{
public:
	struct FLegacyInventoryMenuExtraData          ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetExtraData) == 0x000008, "Wrong alignment on VInventoryMenuViewModel_GetExtraData");
static_assert(sizeof(VInventoryMenuViewModel_GetExtraData) == 0x000028, "Wrong size on VInventoryMenuViewModel_GetExtraData");
static_assert(offsetof(VInventoryMenuViewModel_GetExtraData, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetExtraData::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetInventory
// 0x0010 (0x0010 - 0x0000)
struct VInventoryMenuViewModel_GetInventory final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> ReturnValue;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetInventory) == 0x000008, "Wrong alignment on VInventoryMenuViewModel_GetInventory");
static_assert(sizeof(VInventoryMenuViewModel_GetInventory) == 0x000010, "Wrong size on VInventoryMenuViewModel_GetInventory");
static_assert(offsetof(VInventoryMenuViewModel_GetInventory, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetInventory::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetIsListViewHovered
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_GetIsListViewHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetIsListViewHovered) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_GetIsListViewHovered");
static_assert(sizeof(VInventoryMenuViewModel_GetIsListViewHovered) == 0x000001, "Wrong size on VInventoryMenuViewModel_GetIsListViewHovered");
static_assert(offsetof(VInventoryMenuViewModel_GetIsListViewHovered, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetIsListViewHovered::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetIsSortReversedInventory
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_GetIsSortReversedInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetIsSortReversedInventory) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_GetIsSortReversedInventory");
static_assert(sizeof(VInventoryMenuViewModel_GetIsSortReversedInventory) == 0x000001, "Wrong size on VInventoryMenuViewModel_GetIsSortReversedInventory");
static_assert(offsetof(VInventoryMenuViewModel_GetIsSortReversedInventory, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetIsSortReversedInventory::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.GetSortTypeInventory
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_GetSortTypeInventory final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_GetSortTypeInventory) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_GetSortTypeInventory");
static_assert(sizeof(VInventoryMenuViewModel_GetSortTypeInventory) == 0x000001, "Wrong size on VInventoryMenuViewModel_GetSortTypeInventory");
static_assert(offsetof(VInventoryMenuViewModel_GetSortTypeInventory, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_GetSortTypeInventory::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryMenuViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VInventoryMenuViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VInventoryMenuViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VInventoryMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VInventoryMenuViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VInventoryMenuViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VInventoryMenuViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VDetectionLightingSettings.GetNumberOfLineTracesForTraceType
// 0x0008 (0x0008 - 0x0000)
struct VDetectionLightingSettings_GetNumberOfLineTracesForTraceType final
{
public:
	EVDetectionLightingObstructionTracesType      TraceType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDetectionLightingSettings_GetNumberOfLineTracesForTraceType) == 0x000004, "Wrong alignment on VDetectionLightingSettings_GetNumberOfLineTracesForTraceType");
static_assert(sizeof(VDetectionLightingSettings_GetNumberOfLineTracesForTraceType) == 0x000008, "Wrong size on VDetectionLightingSettings_GetNumberOfLineTracesForTraceType");
static_assert(offsetof(VDetectionLightingSettings_GetNumberOfLineTracesForTraceType, TraceType) == 0x000000, "Member 'VDetectionLightingSettings_GetNumberOfLineTracesForTraceType::TraceType' has a wrong offset!");
static_assert(offsetof(VDetectionLightingSettings_GetNumberOfLineTracesForTraceType, ReturnValue) == 0x000004, "Member 'VDetectionLightingSettings_GetNumberOfLineTracesForTraceType::ReturnValue' has a wrong offset!");

// Function Altar.VDetectionLightingSettings.GetNumberOfLineTracesForCurrentTraceType
// 0x0004 (0x0004 - 0x0000)
struct VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType) == 0x000004, "Wrong alignment on VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType");
static_assert(sizeof(VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType) == 0x000004, "Wrong size on VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType");
static_assert(offsetof(VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType, ReturnValue) == 0x000000, "Member 'VDetectionLightingSettings_GetNumberOfLineTracesForCurrentTraceType::ReturnValue' has a wrong offset!");

// Function Altar.VBaseStaffAttackAnimInstance.OnAttackEnter
// 0x0020 (0x0020 - 0x0000)
struct VBaseStaffAttackAnimInstance_OnAttackEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBaseStaffAttackAnimInstance_OnAttackEnter) == 0x000008, "Wrong alignment on VBaseStaffAttackAnimInstance_OnAttackEnter");
static_assert(sizeof(VBaseStaffAttackAnimInstance_OnAttackEnter) == 0x000020, "Wrong size on VBaseStaffAttackAnimInstance_OnAttackEnter");
static_assert(offsetof(VBaseStaffAttackAnimInstance_OnAttackEnter, Context) == 0x000000, "Member 'VBaseStaffAttackAnimInstance_OnAttackEnter::Context' has a wrong offset!");
static_assert(offsetof(VBaseStaffAttackAnimInstance_OnAttackEnter, Node) == 0x000010, "Member 'VBaseStaffAttackAnimInstance_OnAttackEnter::Node' has a wrong offset!");

// Function Altar.VBlinkCharacterAnimInstance.GetBlinkProgress
// 0x0004 (0x0004 - 0x0000)
struct VBlinkCharacterAnimInstance_GetBlinkProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlinkCharacterAnimInstance_GetBlinkProgress) == 0x000004, "Wrong alignment on VBlinkCharacterAnimInstance_GetBlinkProgress");
static_assert(sizeof(VBlinkCharacterAnimInstance_GetBlinkProgress) == 0x000004, "Wrong size on VBlinkCharacterAnimInstance_GetBlinkProgress");
static_assert(offsetof(VBlinkCharacterAnimInstance_GetBlinkProgress, ReturnValue) == 0x000000, "Member 'VBlinkCharacterAnimInstance_GetBlinkProgress::ReturnValue' has a wrong offset!");

// Function Altar.VBlinkCharacterAnimInstance.IsBlinking
// 0x0001 (0x0001 - 0x0000)
struct VBlinkCharacterAnimInstance_IsBlinking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlinkCharacterAnimInstance_IsBlinking) == 0x000001, "Wrong alignment on VBlinkCharacterAnimInstance_IsBlinking");
static_assert(sizeof(VBlinkCharacterAnimInstance_IsBlinking) == 0x000001, "Wrong size on VBlinkCharacterAnimInstance_IsBlinking");
static_assert(offsetof(VBlinkCharacterAnimInstance_IsBlinking, ReturnValue) == 0x000000, "Member 'VBlinkCharacterAnimInstance_IsBlinking::ReturnValue' has a wrong offset!");

// Function Altar.VBlinkCharacterAnimInstance.IsDead
// 0x0001 (0x0001 - 0x0000)
struct VBlinkCharacterAnimInstance_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlinkCharacterAnimInstance_IsDead) == 0x000001, "Wrong alignment on VBlinkCharacterAnimInstance_IsDead");
static_assert(sizeof(VBlinkCharacterAnimInstance_IsDead) == 0x000001, "Wrong size on VBlinkCharacterAnimInstance_IsDead");
static_assert(offsetof(VBlinkCharacterAnimInstance_IsDead, ReturnValue) == 0x000000, "Member 'VBlinkCharacterAnimInstance_IsDead::ReturnValue' has a wrong offset!");

// Function Altar.VBlinkCharacterAnimInstance.IsSleeping
// 0x0001 (0x0001 - 0x0000)
struct VBlinkCharacterAnimInstance_IsSleeping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlinkCharacterAnimInstance_IsSleeping) == 0x000001, "Wrong alignment on VBlinkCharacterAnimInstance_IsSleeping");
static_assert(sizeof(VBlinkCharacterAnimInstance_IsSleeping) == 0x000001, "Wrong size on VBlinkCharacterAnimInstance_IsSleeping");
static_assert(offsetof(VBlinkCharacterAnimInstance_IsSleeping, ReturnValue) == 0x000000, "Member 'VBlinkCharacterAnimInstance_IsSleeping::ReturnValue' has a wrong offset!");

// Function Altar.VBlinkCreatureCharacterAnimInstance.GetBlinkWeight
// 0x0004 (0x0004 - 0x0000)
struct VBlinkCreatureCharacterAnimInstance_GetBlinkWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlinkCreatureCharacterAnimInstance_GetBlinkWeight) == 0x000004, "Wrong alignment on VBlinkCreatureCharacterAnimInstance_GetBlinkWeight");
static_assert(sizeof(VBlinkCreatureCharacterAnimInstance_GetBlinkWeight) == 0x000004, "Wrong size on VBlinkCreatureCharacterAnimInstance_GetBlinkWeight");
static_assert(offsetof(VBlinkCreatureCharacterAnimInstance_GetBlinkWeight, ReturnValue) == 0x000000, "Member 'VBlinkCreatureCharacterAnimInstance_GetBlinkWeight::ReturnValue' has a wrong offset!");

// Function Altar.VTrailVFXBlueprint.OnStartPlay
// 0x0018 (0x0018 - 0x0000)
struct VTrailVFXBlueprint_OnStartPlay final
{
public:
	bool                                          bIsPowerAttack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingWeapon;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneNameUsedToAttack;                              // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneComponent*                  WeaponRootComp;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTrailVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VTrailVFXBlueprint_OnStartPlay");
static_assert(sizeof(VTrailVFXBlueprint_OnStartPlay) == 0x000018, "Wrong size on VTrailVFXBlueprint_OnStartPlay");
static_assert(offsetof(VTrailVFXBlueprint_OnStartPlay, bIsPowerAttack) == 0x000000, "Member 'VTrailVFXBlueprint_OnStartPlay::bIsPowerAttack' has a wrong offset!");
static_assert(offsetof(VTrailVFXBlueprint_OnStartPlay, bIsUsingWeapon) == 0x000001, "Member 'VTrailVFXBlueprint_OnStartPlay::bIsUsingWeapon' has a wrong offset!");
static_assert(offsetof(VTrailVFXBlueprint_OnStartPlay, BoneNameUsedToAttack) == 0x000004, "Member 'VTrailVFXBlueprint_OnStartPlay::BoneNameUsedToAttack' has a wrong offset!");
static_assert(offsetof(VTrailVFXBlueprint_OnStartPlay, WeaponRootComp) == 0x000010, "Member 'VTrailVFXBlueprint_OnStartPlay::WeaponRootComp' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.GetDebugInventoryItemLocationOffset
// 0x0018 (0x0018 - 0x0000)
struct VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset) == 0x000008, "Wrong alignment on VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset");
static_assert(sizeof(VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset) == 0x000018, "Wrong size on VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset");
static_assert(offsetof(VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset, ReturnValue) == 0x000000, "Member 'VAltarUIDebugSubsystem_GetDebugInventoryItemLocationOffset::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.GetDebugInventoryItemRotationOffset
// 0x0018 (0x0018 - 0x0000)
struct VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset) == 0x000008, "Wrong alignment on VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset");
static_assert(sizeof(VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset) == 0x000018, "Wrong size on VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset");
static_assert(offsetof(VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset, ReturnValue) == 0x000000, "Member 'VAltarUIDebugSubsystem_GetDebugInventoryItemRotationOffset::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.GetDebugInventoryItemScaleOffset
// 0x0018 (0x0018 - 0x0000)
struct VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset) == 0x000008, "Wrong alignment on VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset");
static_assert(sizeof(VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset) == 0x000018, "Wrong size on VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset");
static_assert(offsetof(VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset, ReturnValue) == 0x000000, "Member 'VAltarUIDebugSubsystem_GetDebugInventoryItemScaleOffset::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.GetInventoryDebugModeState
// 0x0001 (0x0001 - 0x0000)
struct VAltarUIDebugSubsystem_GetInventoryDebugModeState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_GetInventoryDebugModeState) == 0x000001, "Wrong alignment on VAltarUIDebugSubsystem_GetInventoryDebugModeState");
static_assert(sizeof(VAltarUIDebugSubsystem_GetInventoryDebugModeState) == 0x000001, "Wrong size on VAltarUIDebugSubsystem_GetInventoryDebugModeState");
static_assert(offsetof(VAltarUIDebugSubsystem_GetInventoryDebugModeState, ReturnValue) == 0x000000, "Member 'VAltarUIDebugSubsystem_GetInventoryDebugModeState::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.SetDebugInventoryItemLocationOffset
// 0x0018 (0x0018 - 0x0000)
struct VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset final
{
public:
	struct FVector                                InNewLocationOffset;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset) == 0x000008, "Wrong alignment on VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset");
static_assert(sizeof(VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset) == 0x000018, "Wrong size on VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset");
static_assert(offsetof(VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset, InNewLocationOffset) == 0x000000, "Member 'VAltarUIDebugSubsystem_SetDebugInventoryItemLocationOffset::InNewLocationOffset' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.SetDebugInventoryItemRotationOffset
// 0x0018 (0x0018 - 0x0000)
struct VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset final
{
public:
	struct FRotator                               InNewRotationOffset;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset) == 0x000008, "Wrong alignment on VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset");
static_assert(sizeof(VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset) == 0x000018, "Wrong size on VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset");
static_assert(offsetof(VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset, InNewRotationOffset) == 0x000000, "Member 'VAltarUIDebugSubsystem_SetDebugInventoryItemRotationOffset::InNewRotationOffset' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.SetDebugInventoryItemScaleOffset
// 0x0018 (0x0018 - 0x0000)
struct VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset final
{
public:
	struct FVector                                InNewScaleOffset;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset) == 0x000008, "Wrong alignment on VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset");
static_assert(sizeof(VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset) == 0x000018, "Wrong size on VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset");
static_assert(offsetof(VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset, InNewScaleOffset) == 0x000000, "Member 'VAltarUIDebugSubsystem_SetDebugInventoryItemScaleOffset::InNewScaleOffset' has a wrong offset!");

// Function Altar.VAltarUIDebugSubsystem.SetInventoryDebugModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled) == 0x000001, "Wrong alignment on VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled");
static_assert(sizeof(VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled) == 0x000001, "Wrong size on VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled");
static_assert(offsetof(VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled, bIsEnabled) == 0x000000, "Member 'VAltarUIDebugSubsystem_SetInventoryDebugModeEnabled::bIsEnabled' has a wrong offset!");

// Function Altar.VAnimNotifyState_SyncAnim.SyncAnimation
// 0x0010 (0x0010 - 0x0000)
struct VAnimNotifyState_SyncAnim_SyncAnimation final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAnimTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAnimNotifyState_SyncAnim_SyncAnimation) == 0x000008, "Wrong alignment on VAnimNotifyState_SyncAnim_SyncAnimation");
static_assert(sizeof(VAnimNotifyState_SyncAnim_SyncAnimation) == 0x000010, "Wrong size on VAnimNotifyState_SyncAnim_SyncAnimation");
static_assert(offsetof(VAnimNotifyState_SyncAnim_SyncAnimation, OwnerActor) == 0x000000, "Member 'VAnimNotifyState_SyncAnim_SyncAnimation::OwnerActor' has a wrong offset!");
static_assert(offsetof(VAnimNotifyState_SyncAnim_SyncAnimation, StartAnimTime) == 0x000008, "Member 'VAnimNotifyState_SyncAnim_SyncAnimation::StartAnimTime' has a wrong offset!");

// Function Altar.VTextEditMenuViewModel.RegisterSendClickedOkButton
// 0x0018 (0x0018 - 0x0000)
struct VTextEditMenuViewModel_RegisterSendClickedOkButton final
{
public:
	class FText                                   UpdatedText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTextEditMenuViewModel_RegisterSendClickedOkButton) == 0x000008, "Wrong alignment on VTextEditMenuViewModel_RegisterSendClickedOkButton");
static_assert(sizeof(VTextEditMenuViewModel_RegisterSendClickedOkButton) == 0x000018, "Wrong size on VTextEditMenuViewModel_RegisterSendClickedOkButton");
static_assert(offsetof(VTextEditMenuViewModel_RegisterSendClickedOkButton, UpdatedText) == 0x000000, "Member 'VTextEditMenuViewModel_RegisterSendClickedOkButton::UpdatedText' has a wrong offset!");

// Function Altar.VTextEditMenuViewModel.SetProperties
// 0x0030 (0x0030 - 0x0000)
struct VTextEditMenuViewModel_SetProperties final
{
public:
	struct FLegacyTextEditMenuProperties          Properties_0;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTextEditMenuViewModel_SetProperties) == 0x000008, "Wrong alignment on VTextEditMenuViewModel_SetProperties");
static_assert(sizeof(VTextEditMenuViewModel_SetProperties) == 0x000030, "Wrong size on VTextEditMenuViewModel_SetProperties");
static_assert(offsetof(VTextEditMenuViewModel_SetProperties, Properties_0) == 0x000000, "Member 'VTextEditMenuViewModel_SetProperties::Properties_0' has a wrong offset!");

// Function Altar.VTextEditMenuViewModel.GetProperties
// 0x0030 (0x0030 - 0x0000)
struct VTextEditMenuViewModel_GetProperties final
{
public:
	struct FLegacyTextEditMenuProperties          ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTextEditMenuViewModel_GetProperties) == 0x000008, "Wrong alignment on VTextEditMenuViewModel_GetProperties");
static_assert(sizeof(VTextEditMenuViewModel_GetProperties) == 0x000030, "Wrong size on VTextEditMenuViewModel_GetProperties");
static_assert(offsetof(VTextEditMenuViewModel_GetProperties, ReturnValue) == 0x000000, "Member 'VTextEditMenuViewModel_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VClairvoyanceVFXBlueprint.OnStartPlay
// 0x0008 (0x0008 - 0x0000)
struct VClairvoyanceVFXBlueprint_OnStartPlay final
{
public:
	class USplineComponent*                       SplineComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClairvoyanceVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VClairvoyanceVFXBlueprint_OnStartPlay");
static_assert(sizeof(VClairvoyanceVFXBlueprint_OnStartPlay) == 0x000008, "Wrong size on VClairvoyanceVFXBlueprint_OnStartPlay");
static_assert(offsetof(VClairvoyanceVFXBlueprint_OnStartPlay, SplineComp) == 0x000000, "Member 'VClairvoyanceVFXBlueprint_OnStartPlay::SplineComp' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.AddClassSkill
// 0x0020 (0x0020 - 0x0000)
struct VClassOverviewViewModel_AddClassSkill final
{
public:
	struct FSkillInformation                      SkillToAdd;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_AddClassSkill) == 0x000008, "Wrong alignment on VClassOverviewViewModel_AddClassSkill");
static_assert(sizeof(VClassOverviewViewModel_AddClassSkill) == 0x000020, "Wrong size on VClassOverviewViewModel_AddClassSkill");
static_assert(offsetof(VClassOverviewViewModel_AddClassSkill, SkillToAdd) == 0x000000, "Member 'VClassOverviewViewModel_AddClassSkill::SkillToAdd' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.RemoveClassSkill
// 0x0020 (0x0020 - 0x0000)
struct VClassOverviewViewModel_RemoveClassSkill final
{
public:
	struct FSkillInformation                      SkillToRemove;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_RemoveClassSkill) == 0x000008, "Wrong alignment on VClassOverviewViewModel_RemoveClassSkill");
static_assert(sizeof(VClassOverviewViewModel_RemoveClassSkill) == 0x000020, "Wrong size on VClassOverviewViewModel_RemoveClassSkill");
static_assert(offsetof(VClassOverviewViewModel_RemoveClassSkill, SkillToRemove) == 0x000000, "Member 'VClassOverviewViewModel_RemoveClassSkill::SkillToRemove' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetClassName
// 0x0018 (0x0018 - 0x0000)
struct VClassOverviewViewModel_SetClassName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetClassName) == 0x000008, "Wrong alignment on VClassOverviewViewModel_SetClassName");
static_assert(sizeof(VClassOverviewViewModel_SetClassName) == 0x000018, "Wrong size on VClassOverviewViewModel_SetClassName");
static_assert(offsetof(VClassOverviewViewModel_SetClassName, NewName) == 0x000000, "Member 'VClassOverviewViewModel_SetClassName::NewName' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetClassPicture
// 0x0008 (0x0008 - 0x0000)
struct VClassOverviewViewModel_SetClassPicture final
{
public:
	class UTexture2D*                             NewPicture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetClassPicture) == 0x000008, "Wrong alignment on VClassOverviewViewModel_SetClassPicture");
static_assert(sizeof(VClassOverviewViewModel_SetClassPicture) == 0x000008, "Wrong size on VClassOverviewViewModel_SetClassPicture");
static_assert(offsetof(VClassOverviewViewModel_SetClassPicture, NewPicture) == 0x000000, "Member 'VClassOverviewViewModel_SetClassPicture::NewPicture' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetClassProperties
// 0x00A0 (0x00A0 - 0x0000)
struct VClassOverviewViewModel_SetClassProperties final
{
public:
	struct FPlayerClassItemProperties             NewClassProperties;                                // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetClassProperties) == 0x000008, "Wrong alignment on VClassOverviewViewModel_SetClassProperties");
static_assert(sizeof(VClassOverviewViewModel_SetClassProperties) == 0x0000A0, "Wrong size on VClassOverviewViewModel_SetClassProperties");
static_assert(offsetof(VClassOverviewViewModel_SetClassProperties, NewClassProperties) == 0x000000, "Member 'VClassOverviewViewModel_SetClassProperties::NewClassProperties' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetClassSpecialisation
// 0x0018 (0x0018 - 0x0000)
struct VClassOverviewViewModel_SetClassSpecialisation final
{
public:
	class FText                                   NewSpecialisation;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetClassSpecialisation) == 0x000008, "Wrong alignment on VClassOverviewViewModel_SetClassSpecialisation");
static_assert(sizeof(VClassOverviewViewModel_SetClassSpecialisation) == 0x000018, "Wrong size on VClassOverviewViewModel_SetClassSpecialisation");
static_assert(offsetof(VClassOverviewViewModel_SetClassSpecialisation, NewSpecialisation) == 0x000000, "Member 'VClassOverviewViewModel_SetClassSpecialisation::NewSpecialisation' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetPrimaryAttribute
// 0x0018 (0x0018 - 0x0000)
struct VClassOverviewViewModel_SetPrimaryAttribute final
{
public:
	class FText                                   NewAttribute;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetPrimaryAttribute) == 0x000008, "Wrong alignment on VClassOverviewViewModel_SetPrimaryAttribute");
static_assert(sizeof(VClassOverviewViewModel_SetPrimaryAttribute) == 0x000018, "Wrong size on VClassOverviewViewModel_SetPrimaryAttribute");
static_assert(offsetof(VClassOverviewViewModel_SetPrimaryAttribute, NewAttribute) == 0x000000, "Member 'VClassOverviewViewModel_SetPrimaryAttribute::NewAttribute' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetSecondaryAttribute
// 0x0018 (0x0018 - 0x0000)
struct VClassOverviewViewModel_SetSecondaryAttribute final
{
public:
	class FText                                   NewAttribute;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetSecondaryAttribute) == 0x000008, "Wrong alignment on VClassOverviewViewModel_SetSecondaryAttribute");
static_assert(sizeof(VClassOverviewViewModel_SetSecondaryAttribute) == 0x000018, "Wrong size on VClassOverviewViewModel_SetSecondaryAttribute");
static_assert(offsetof(VClassOverviewViewModel_SetSecondaryAttribute, NewAttribute) == 0x000000, "Member 'VClassOverviewViewModel_SetSecondaryAttribute::NewAttribute' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.SetSpecializationEnum
// 0x0001 (0x0001 - 0x0000)
struct VClassOverviewViewModel_SetSpecializationEnum final
{
public:
	ESkillAndClassSpecialization                  NewSpecializationEnum;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_SetSpecializationEnum) == 0x000001, "Wrong alignment on VClassOverviewViewModel_SetSpecializationEnum");
static_assert(sizeof(VClassOverviewViewModel_SetSpecializationEnum) == 0x000001, "Wrong size on VClassOverviewViewModel_SetSpecializationEnum");
static_assert(offsetof(VClassOverviewViewModel_SetSpecializationEnum, NewSpecializationEnum) == 0x000000, "Member 'VClassOverviewViewModel_SetSpecializationEnum::NewSpecializationEnum' has a wrong offset!");

// Function Altar.VClassOverviewViewModel.GetClassProperties
// 0x00A0 (0x00A0 - 0x0000)
struct VClassOverviewViewModel_GetClassProperties final
{
public:
	struct FPlayerClassItemProperties             ReturnValue;                                       // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassOverviewViewModel_GetClassProperties) == 0x000008, "Wrong alignment on VClassOverviewViewModel_GetClassProperties");
static_assert(sizeof(VClassOverviewViewModel_GetClassProperties) == 0x0000A0, "Wrong size on VClassOverviewViewModel_GetClassProperties");
static_assert(offsetof(VClassOverviewViewModel_GetClassProperties, ReturnValue) == 0x000000, "Member 'VClassOverviewViewModel_GetClassProperties::ReturnValue' has a wrong offset!");

// Function Altar.VHitBoxComponent.AddTriggerTarget
// 0x0108 (0x0108 - 0x0000)
struct VHitBoxComponent_AddTriggerTarget final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnusedSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             EmptyHitResult;                                    // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHitBoxComponent_AddTriggerTarget) == 0x000008, "Wrong alignment on VHitBoxComponent_AddTriggerTarget");
static_assert(sizeof(VHitBoxComponent_AddTriggerTarget) == 0x000108, "Wrong size on VHitBoxComponent_AddTriggerTarget");
static_assert(offsetof(VHitBoxComponent_AddTriggerTarget, SourceComp) == 0x000000, "Member 'VHitBoxComponent_AddTriggerTarget::SourceComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_AddTriggerTarget, TargetActor) == 0x000008, "Member 'VHitBoxComponent_AddTriggerTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_AddTriggerTarget, TargetComp) == 0x000010, "Member 'VHitBoxComponent_AddTriggerTarget::TargetComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_AddTriggerTarget, UnusedOtherBox) == 0x000018, "Member 'VHitBoxComponent_AddTriggerTarget::UnusedOtherBox' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_AddTriggerTarget, UnusedSweep) == 0x00001C, "Member 'VHitBoxComponent_AddTriggerTarget::UnusedSweep' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_AddTriggerTarget, EmptyHitResult) == 0x000020, "Member 'VHitBoxComponent_AddTriggerTarget::EmptyHitResult' has a wrong offset!");

// Function Altar.VHitBoxComponent.OnOverlapTriggered
// 0x0108 (0x0108 - 0x0000)
struct VHitBoxComponent_OnOverlapTriggered final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnusedSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OverlapHitResult;                                  // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHitBoxComponent_OnOverlapTriggered) == 0x000008, "Wrong alignment on VHitBoxComponent_OnOverlapTriggered");
static_assert(sizeof(VHitBoxComponent_OnOverlapTriggered) == 0x000108, "Wrong size on VHitBoxComponent_OnOverlapTriggered");
static_assert(offsetof(VHitBoxComponent_OnOverlapTriggered, SourceComp) == 0x000000, "Member 'VHitBoxComponent_OnOverlapTriggered::SourceComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_OnOverlapTriggered, TargetActor) == 0x000008, "Member 'VHitBoxComponent_OnOverlapTriggered::TargetActor' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_OnOverlapTriggered, TargetComp) == 0x000010, "Member 'VHitBoxComponent_OnOverlapTriggered::TargetComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_OnOverlapTriggered, UnusedOtherBox) == 0x000018, "Member 'VHitBoxComponent_OnOverlapTriggered::UnusedOtherBox' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_OnOverlapTriggered, UnusedSweep) == 0x00001C, "Member 'VHitBoxComponent_OnOverlapTriggered::UnusedSweep' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_OnOverlapTriggered, OverlapHitResult) == 0x000020, "Member 'VHitBoxComponent_OnOverlapTriggered::OverlapHitResult' has a wrong offset!");

// Function Altar.VHitBoxComponent.RemoveTriggerTarget
// 0x0020 (0x0020 - 0x0000)
struct VHitBoxComponent_RemoveTriggerTarget final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitBoxComponent_RemoveTriggerTarget) == 0x000008, "Wrong alignment on VHitBoxComponent_RemoveTriggerTarget");
static_assert(sizeof(VHitBoxComponent_RemoveTriggerTarget) == 0x000020, "Wrong size on VHitBoxComponent_RemoveTriggerTarget");
static_assert(offsetof(VHitBoxComponent_RemoveTriggerTarget, SourceComp) == 0x000000, "Member 'VHitBoxComponent_RemoveTriggerTarget::SourceComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_RemoveTriggerTarget, TargetActor) == 0x000008, "Member 'VHitBoxComponent_RemoveTriggerTarget::TargetActor' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_RemoveTriggerTarget, TargetComp) == 0x000010, "Member 'VHitBoxComponent_RemoveTriggerTarget::TargetComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_RemoveTriggerTarget, UnusedOtherBox) == 0x000018, "Member 'VHitBoxComponent_RemoveTriggerTarget::UnusedOtherBox' has a wrong offset!");

// Function Altar.VHitBoxComponent.StartHit
// 0x0040 (0x0040 - 0x0000)
struct VHitBoxComponent_StartHit final
{
public:
	EVHitSourceType                               HitSourceTypeParam;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BlueprintClass;                                    // 0x0010(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverlaps;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitBoxComponent_StartHit) == 0x000008, "Wrong alignment on VHitBoxComponent_StartHit");
static_assert(sizeof(VHitBoxComponent_StartHit) == 0x000040, "Wrong size on VHitBoxComponent_StartHit");
static_assert(offsetof(VHitBoxComponent_StartHit, HitSourceTypeParam) == 0x000000, "Member 'VHitBoxComponent_StartHit::HitSourceTypeParam' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_StartHit, Attacker) == 0x000008, "Member 'VHitBoxComponent_StartHit::Attacker' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_StartHit, BlueprintClass) == 0x000010, "Member 'VHitBoxComponent_StartHit::BlueprintClass' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_StartHit, Duration) == 0x000038, "Member 'VHitBoxComponent_StartHit::Duration' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_StartHit, bUseOverlaps) == 0x00003C, "Member 'VHitBoxComponent_StartHit::bUseOverlaps' has a wrong offset!");

// Function Altar.VHitBoxComponent.TriggerImpactSystem
// 0x0040 (0x0040 - 0x0000)
struct VHitBoxComponent_TriggerImpactSystem final
{
public:
	const class UPhysicalMaterial*                PhysicalMaterial;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPoint;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitBoxComponent_TriggerImpactSystem) == 0x000008, "Wrong alignment on VHitBoxComponent_TriggerImpactSystem");
static_assert(sizeof(VHitBoxComponent_TriggerImpactSystem) == 0x000040, "Wrong size on VHitBoxComponent_TriggerImpactSystem");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystem, PhysicalMaterial) == 0x000000, "Member 'VHitBoxComponent_TriggerImpactSystem::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystem, ImpactPoint) == 0x000008, "Member 'VHitBoxComponent_TriggerImpactSystem::ImpactPoint' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystem, ImpactNormal) == 0x000020, "Member 'VHitBoxComponent_TriggerImpactSystem::ImpactNormal' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystem, ReturnValue) == 0x000038, "Member 'VHitBoxComponent_TriggerImpactSystem::ReturnValue' has a wrong offset!");

// Function Altar.VHitBoxComponent.TriggerImpactSystemFromHitResult
// 0x01E8 (0x01E8 - 0x0000)
struct VHitBoxComponent_TriggerImpactSystemFromHitResult final
{
public:
	struct FHitResult                             MaterialHitResult;                                 // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             LocationHitResult;                                 // 0x00E8(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVProjectilePenetrationSettings        OutProjectilePenetrationSettings;                  // 0x01D0(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01E4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitBoxComponent_TriggerImpactSystemFromHitResult) == 0x000008, "Wrong alignment on VHitBoxComponent_TriggerImpactSystemFromHitResult");
static_assert(sizeof(VHitBoxComponent_TriggerImpactSystemFromHitResult) == 0x0001E8, "Wrong size on VHitBoxComponent_TriggerImpactSystemFromHitResult");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromHitResult, MaterialHitResult) == 0x000000, "Member 'VHitBoxComponent_TriggerImpactSystemFromHitResult::MaterialHitResult' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromHitResult, LocationHitResult) == 0x0000E8, "Member 'VHitBoxComponent_TriggerImpactSystemFromHitResult::LocationHitResult' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromHitResult, OutProjectilePenetrationSettings) == 0x0001D0, "Member 'VHitBoxComponent_TriggerImpactSystemFromHitResult::OutProjectilePenetrationSettings' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromHitResult, ReturnValue) == 0x0001E4, "Member 'VHitBoxComponent_TriggerImpactSystemFromHitResult::ReturnValue' has a wrong offset!");

// Function Altar.VHitBoxComponent.TriggerImpactSystemFromRow
// 0x00E0 (0x00E0 - 0x0000)
struct VHitBoxComponent_TriggerImpactSystemFromRow final
{
public:
	struct FImpactSystemRowBase                   ChosenRow;                                         // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPoint;                                       // 0x00A8(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x00C0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitBoxComponent_TriggerImpactSystemFromRow) == 0x000008, "Wrong alignment on VHitBoxComponent_TriggerImpactSystemFromRow");
static_assert(sizeof(VHitBoxComponent_TriggerImpactSystemFromRow) == 0x0000E0, "Wrong size on VHitBoxComponent_TriggerImpactSystemFromRow");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromRow, ChosenRow) == 0x000000, "Member 'VHitBoxComponent_TriggerImpactSystemFromRow::ChosenRow' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromRow, ImpactPoint) == 0x0000A8, "Member 'VHitBoxComponent_TriggerImpactSystemFromRow::ImpactPoint' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromRow, ImpactNormal) == 0x0000C0, "Member 'VHitBoxComponent_TriggerImpactSystemFromRow::ImpactNormal' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerImpactSystemFromRow, ReturnValue) == 0x0000D8, "Member 'VHitBoxComponent_TriggerImpactSystemFromRow::ReturnValue' has a wrong offset!");

// Function Altar.VHitBoxComponent.TriggerTrapBegin
// 0x0108 (0x0108 - 0x0000)
struct VHitBoxComponent_TriggerTrapBegin final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnusedSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             EmptyHitResult;                                    // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHitBoxComponent_TriggerTrapBegin) == 0x000008, "Wrong alignment on VHitBoxComponent_TriggerTrapBegin");
static_assert(sizeof(VHitBoxComponent_TriggerTrapBegin) == 0x000108, "Wrong size on VHitBoxComponent_TriggerTrapBegin");
static_assert(offsetof(VHitBoxComponent_TriggerTrapBegin, SourceComp) == 0x000000, "Member 'VHitBoxComponent_TriggerTrapBegin::SourceComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapBegin, TargetActor) == 0x000008, "Member 'VHitBoxComponent_TriggerTrapBegin::TargetActor' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapBegin, TargetComp) == 0x000010, "Member 'VHitBoxComponent_TriggerTrapBegin::TargetComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapBegin, UnusedOtherBox) == 0x000018, "Member 'VHitBoxComponent_TriggerTrapBegin::UnusedOtherBox' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapBegin, UnusedSweep) == 0x00001C, "Member 'VHitBoxComponent_TriggerTrapBegin::UnusedSweep' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapBegin, EmptyHitResult) == 0x000020, "Member 'VHitBoxComponent_TriggerTrapBegin::EmptyHitResult' has a wrong offset!");

// Function Altar.VHitBoxComponent.TriggerTrapEnd
// 0x0020 (0x0020 - 0x0000)
struct VHitBoxComponent_TriggerTrapEnd final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitBoxComponent_TriggerTrapEnd) == 0x000008, "Wrong alignment on VHitBoxComponent_TriggerTrapEnd");
static_assert(sizeof(VHitBoxComponent_TriggerTrapEnd) == 0x000020, "Wrong size on VHitBoxComponent_TriggerTrapEnd");
static_assert(offsetof(VHitBoxComponent_TriggerTrapEnd, SourceComp) == 0x000000, "Member 'VHitBoxComponent_TriggerTrapEnd::SourceComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapEnd, TargetActor) == 0x000008, "Member 'VHitBoxComponent_TriggerTrapEnd::TargetActor' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapEnd, TargetComp) == 0x000010, "Member 'VHitBoxComponent_TriggerTrapEnd::TargetComp' has a wrong offset!");
static_assert(offsetof(VHitBoxComponent_TriggerTrapEnd, UnusedOtherBox) == 0x000018, "Member 'VHitBoxComponent_TriggerTrapEnd::UnusedOtherBox' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetActionProperties
// 0x0020 (0x0020 - 0x0000)
struct VHUDInfoViewModel_SetActionProperties final
{
public:
	struct FLegacyActionProperties                NewProperties;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetActionProperties) == 0x000008, "Wrong alignment on VHUDInfoViewModel_SetActionProperties");
static_assert(sizeof(VHUDInfoViewModel_SetActionProperties) == 0x000020, "Wrong size on VHUDInfoViewModel_SetActionProperties");
static_assert(offsetof(VHUDInfoViewModel_SetActionProperties, NewProperties) == 0x000000, "Member 'VHUDInfoViewModel_SetActionProperties::NewProperties' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetIconsProperties
// 0x0050 (0x0050 - 0x0000)
struct VHUDInfoViewModel_SetIconsProperties final
{
public:
	TMap<ELegacyHudInfoIcon, struct FLegacyIconProperties> NewProperties;                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetIconsProperties) == 0x000008, "Wrong alignment on VHUDInfoViewModel_SetIconsProperties");
static_assert(sizeof(VHUDInfoViewModel_SetIconsProperties) == 0x000050, "Wrong size on VHUDInfoViewModel_SetIconsProperties");
static_assert(offsetof(VHUDInfoViewModel_SetIconsProperties, NewProperties) == 0x000000, "Member 'VHUDInfoViewModel_SetIconsProperties::NewProperties' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetIsEmptyContainer
// 0x0001 (0x0001 - 0x0000)
struct VHUDInfoViewModel_SetIsEmptyContainer final
{
public:
	bool                                          bIsEmpty;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetIsEmptyContainer) == 0x000001, "Wrong alignment on VHUDInfoViewModel_SetIsEmptyContainer");
static_assert(sizeof(VHUDInfoViewModel_SetIsEmptyContainer) == 0x000001, "Wrong size on VHUDInfoViewModel_SetIsEmptyContainer");
static_assert(offsetof(VHUDInfoViewModel_SetIsEmptyContainer, bIsEmpty) == 0x000000, "Member 'VHUDInfoViewModel_SetIsEmptyContainer::bIsEmpty' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetIsTelekinesisActive
// 0x0001 (0x0001 - 0x0000)
struct VHUDInfoViewModel_SetIsTelekinesisActive final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetIsTelekinesisActive) == 0x000001, "Wrong alignment on VHUDInfoViewModel_SetIsTelekinesisActive");
static_assert(sizeof(VHUDInfoViewModel_SetIsTelekinesisActive) == 0x000001, "Wrong size on VHUDInfoViewModel_SetIsTelekinesisActive");
static_assert(offsetof(VHUDInfoViewModel_SetIsTelekinesisActive, bNewValue) == 0x000000, "Member 'VHUDInfoViewModel_SetIsTelekinesisActive::bNewValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetLastIconModifiedProperties
// 0x0028 (0x0028 - 0x0000)
struct VHUDInfoViewModel_SetLastIconModifiedProperties final
{
public:
	struct FLegacyIconProperties                  NewProperties;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetLastIconModifiedProperties) == 0x000008, "Wrong alignment on VHUDInfoViewModel_SetLastIconModifiedProperties");
static_assert(sizeof(VHUDInfoViewModel_SetLastIconModifiedProperties) == 0x000028, "Wrong size on VHUDInfoViewModel_SetLastIconModifiedProperties");
static_assert(offsetof(VHUDInfoViewModel_SetLastIconModifiedProperties, NewProperties) == 0x000000, "Member 'VHUDInfoViewModel_SetLastIconModifiedProperties::NewProperties' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetTargetedDoorDestinationName
// 0x0018 (0x0018 - 0x0000)
struct VHUDInfoViewModel_SetTargetedDoorDestinationName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetTargetedDoorDestinationName) == 0x000008, "Wrong alignment on VHUDInfoViewModel_SetTargetedDoorDestinationName");
static_assert(sizeof(VHUDInfoViewModel_SetTargetedDoorDestinationName) == 0x000018, "Wrong size on VHUDInfoViewModel_SetTargetedDoorDestinationName");
static_assert(offsetof(VHUDInfoViewModel_SetTargetedDoorDestinationName, NewName) == 0x000000, "Member 'VHUDInfoViewModel_SetTargetedDoorDestinationName::NewName' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.SetTargetedItemName
// 0x0018 (0x0018 - 0x0000)
struct VHUDInfoViewModel_SetTargetedItemName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_SetTargetedItemName) == 0x000008, "Wrong alignment on VHUDInfoViewModel_SetTargetedItemName");
static_assert(sizeof(VHUDInfoViewModel_SetTargetedItemName) == 0x000018, "Wrong size on VHUDInfoViewModel_SetTargetedItemName");
static_assert(offsetof(VHUDInfoViewModel_SetTargetedItemName, NewName) == 0x000000, "Member 'VHUDInfoViewModel_SetTargetedItemName::NewName' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetActionProperties
// 0x0020 (0x0020 - 0x0000)
struct VHUDInfoViewModel_GetActionProperties final
{
public:
	struct FLegacyActionProperties                ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetActionProperties) == 0x000008, "Wrong alignment on VHUDInfoViewModel_GetActionProperties");
static_assert(sizeof(VHUDInfoViewModel_GetActionProperties) == 0x000020, "Wrong size on VHUDInfoViewModel_GetActionProperties");
static_assert(offsetof(VHUDInfoViewModel_GetActionProperties, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetActionProperties::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetIconsProperties
// 0x0050 (0x0050 - 0x0000)
struct VHUDInfoViewModel_GetIconsProperties final
{
public:
	TMap<ELegacyHudInfoIcon, struct FLegacyIconProperties> ReturnValue;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetIconsProperties) == 0x000008, "Wrong alignment on VHUDInfoViewModel_GetIconsProperties");
static_assert(sizeof(VHUDInfoViewModel_GetIconsProperties) == 0x000050, "Wrong size on VHUDInfoViewModel_GetIconsProperties");
static_assert(offsetof(VHUDInfoViewModel_GetIconsProperties, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetIconsProperties::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetIsEmptyContainer
// 0x0001 (0x0001 - 0x0000)
struct VHUDInfoViewModel_GetIsEmptyContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetIsEmptyContainer) == 0x000001, "Wrong alignment on VHUDInfoViewModel_GetIsEmptyContainer");
static_assert(sizeof(VHUDInfoViewModel_GetIsEmptyContainer) == 0x000001, "Wrong size on VHUDInfoViewModel_GetIsEmptyContainer");
static_assert(offsetof(VHUDInfoViewModel_GetIsEmptyContainer, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetIsEmptyContainer::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetIsTelekinesisActive
// 0x0001 (0x0001 - 0x0000)
struct VHUDInfoViewModel_GetIsTelekinesisActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetIsTelekinesisActive) == 0x000001, "Wrong alignment on VHUDInfoViewModel_GetIsTelekinesisActive");
static_assert(sizeof(VHUDInfoViewModel_GetIsTelekinesisActive) == 0x000001, "Wrong size on VHUDInfoViewModel_GetIsTelekinesisActive");
static_assert(offsetof(VHUDInfoViewModel_GetIsTelekinesisActive, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetIsTelekinesisActive::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetLastIconModifiedProperties
// 0x0028 (0x0028 - 0x0000)
struct VHUDInfoViewModel_GetLastIconModifiedProperties final
{
public:
	struct FLegacyIconProperties                  ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetLastIconModifiedProperties) == 0x000008, "Wrong alignment on VHUDInfoViewModel_GetLastIconModifiedProperties");
static_assert(sizeof(VHUDInfoViewModel_GetLastIconModifiedProperties) == 0x000028, "Wrong size on VHUDInfoViewModel_GetLastIconModifiedProperties");
static_assert(offsetof(VHUDInfoViewModel_GetLastIconModifiedProperties, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetLastIconModifiedProperties::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetTargetedDoorDestinationName
// 0x0018 (0x0018 - 0x0000)
struct VHUDInfoViewModel_GetTargetedDoorDestinationName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetTargetedDoorDestinationName) == 0x000008, "Wrong alignment on VHUDInfoViewModel_GetTargetedDoorDestinationName");
static_assert(sizeof(VHUDInfoViewModel_GetTargetedDoorDestinationName) == 0x000018, "Wrong size on VHUDInfoViewModel_GetTargetedDoorDestinationName");
static_assert(offsetof(VHUDInfoViewModel_GetTargetedDoorDestinationName, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetTargetedDoorDestinationName::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.GetTargetedItemName
// 0x0018 (0x0018 - 0x0000)
struct VHUDInfoViewModel_GetTargetedItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_GetTargetedItemName) == 0x000008, "Wrong alignment on VHUDInfoViewModel_GetTargetedItemName");
static_assert(sizeof(VHUDInfoViewModel_GetTargetedItemName) == 0x000018, "Wrong size on VHUDInfoViewModel_GetTargetedItemName");
static_assert(offsetof(VHUDInfoViewModel_GetTargetedItemName, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_GetTargetedItemName::ReturnValue' has a wrong offset!");

// Function Altar.VHUDInfoViewModel.HasContent
// 0x0001 (0x0001 - 0x0000)
struct VHUDInfoViewModel_HasContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDInfoViewModel_HasContent) == 0x000001, "Wrong alignment on VHUDInfoViewModel_HasContent");
static_assert(sizeof(VHUDInfoViewModel_HasContent) == 0x000001, "Wrong size on VHUDInfoViewModel_HasContent");
static_assert(offsetof(VHUDInfoViewModel_HasContent, ReturnValue) == 0x000000, "Member 'VHUDInfoViewModel_HasContent::ReturnValue' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.AddNotification
// 0x0030 (0x0030 - 0x0000)
struct VHUDSubtitleViewModel_AddNotification final
{
public:
	struct FLegacyNotificationProperties          Properties;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_AddNotification) == 0x000008, "Wrong alignment on VHUDSubtitleViewModel_AddNotification");
static_assert(sizeof(VHUDSubtitleViewModel_AddNotification) == 0x000030, "Wrong size on VHUDSubtitleViewModel_AddNotification");
static_assert(offsetof(VHUDSubtitleViewModel_AddNotification, Properties) == 0x000000, "Member 'VHUDSubtitleViewModel_AddNotification::Properties' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.SetNotification
// 0x0030 (0x0030 - 0x0000)
struct VHUDSubtitleViewModel_SetNotification final
{
public:
	struct FLegacyNotificationProperties          NewProperties;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_SetNotification) == 0x000008, "Wrong alignment on VHUDSubtitleViewModel_SetNotification");
static_assert(sizeof(VHUDSubtitleViewModel_SetNotification) == 0x000030, "Wrong size on VHUDSubtitleViewModel_SetNotification");
static_assert(offsetof(VHUDSubtitleViewModel_SetNotification, NewProperties) == 0x000000, "Member 'VHUDSubtitleViewModel_SetNotification::NewProperties' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.SetNotificationVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDSubtitleViewModel_SetNotificationVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_SetNotificationVisibility) == 0x000001, "Wrong alignment on VHUDSubtitleViewModel_SetNotificationVisibility");
static_assert(sizeof(VHUDSubtitleViewModel_SetNotificationVisibility) == 0x000001, "Wrong size on VHUDSubtitleViewModel_SetNotificationVisibility");
static_assert(offsetof(VHUDSubtitleViewModel_SetNotificationVisibility, bNewVisibility) == 0x000000, "Member 'VHUDSubtitleViewModel_SetNotificationVisibility::bNewVisibility' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct VHUDSubtitleViewModel_SetSubtitle final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_SetSubtitle) == 0x000008, "Wrong alignment on VHUDSubtitleViewModel_SetSubtitle");
static_assert(sizeof(VHUDSubtitleViewModel_SetSubtitle) == 0x000018, "Wrong size on VHUDSubtitleViewModel_SetSubtitle");
static_assert(offsetof(VHUDSubtitleViewModel_SetSubtitle, NewText) == 0x000000, "Member 'VHUDSubtitleViewModel_SetSubtitle::NewText' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.SetSubtitleVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDSubtitleViewModel_SetSubtitleVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_SetSubtitleVisibility) == 0x000001, "Wrong alignment on VHUDSubtitleViewModel_SetSubtitleVisibility");
static_assert(sizeof(VHUDSubtitleViewModel_SetSubtitleVisibility) == 0x000001, "Wrong size on VHUDSubtitleViewModel_SetSubtitleVisibility");
static_assert(offsetof(VHUDSubtitleViewModel_SetSubtitleVisibility, bNewVisibility) == 0x000000, "Member 'VHUDSubtitleViewModel_SetSubtitleVisibility::bNewVisibility' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.GetNotification
// 0x0030 (0x0030 - 0x0000)
struct VHUDSubtitleViewModel_GetNotification final
{
public:
	struct FLegacyNotificationProperties          ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_GetNotification) == 0x000008, "Wrong alignment on VHUDSubtitleViewModel_GetNotification");
static_assert(sizeof(VHUDSubtitleViewModel_GetNotification) == 0x000030, "Wrong size on VHUDSubtitleViewModel_GetNotification");
static_assert(offsetof(VHUDSubtitleViewModel_GetNotification, ReturnValue) == 0x000000, "Member 'VHUDSubtitleViewModel_GetNotification::ReturnValue' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.GetNotificationVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDSubtitleViewModel_GetNotificationVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_GetNotificationVisibility) == 0x000001, "Wrong alignment on VHUDSubtitleViewModel_GetNotificationVisibility");
static_assert(sizeof(VHUDSubtitleViewModel_GetNotificationVisibility) == 0x000001, "Wrong size on VHUDSubtitleViewModel_GetNotificationVisibility");
static_assert(offsetof(VHUDSubtitleViewModel_GetNotificationVisibility, ReturnValue) == 0x000000, "Member 'VHUDSubtitleViewModel_GetNotificationVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.GetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct VHUDSubtitleViewModel_GetSubtitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_GetSubtitle) == 0x000008, "Wrong alignment on VHUDSubtitleViewModel_GetSubtitle");
static_assert(sizeof(VHUDSubtitleViewModel_GetSubtitle) == 0x000018, "Wrong size on VHUDSubtitleViewModel_GetSubtitle");
static_assert(offsetof(VHUDSubtitleViewModel_GetSubtitle, ReturnValue) == 0x000000, "Member 'VHUDSubtitleViewModel_GetSubtitle::ReturnValue' has a wrong offset!");

// Function Altar.VHUDSubtitleViewModel.GetSubtitleVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDSubtitleViewModel_GetSubtitleVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDSubtitleViewModel_GetSubtitleVisibility) == 0x000001, "Wrong alignment on VHUDSubtitleViewModel_GetSubtitleVisibility");
static_assert(sizeof(VHUDSubtitleViewModel_GetSubtitleVisibility) == 0x000001, "Wrong size on VHUDSubtitleViewModel_GetSubtitleVisibility");
static_assert(offsetof(VHUDSubtitleViewModel_GetSubtitleVisibility, ReturnValue) == 0x000000, "Member 'VHUDSubtitleViewModel_GetSubtitleVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VAltarNavigableSlider.HandleOnValueChanged
// 0x0004 (0x0004 - 0x0000)
struct VAltarNavigableSlider_HandleOnValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableSlider_HandleOnValueChanged) == 0x000004, "Wrong alignment on VAltarNavigableSlider_HandleOnValueChanged");
static_assert(sizeof(VAltarNavigableSlider_HandleOnValueChanged) == 0x000004, "Wrong size on VAltarNavigableSlider_HandleOnValueChanged");
static_assert(offsetof(VAltarNavigableSlider_HandleOnValueChanged, NewValue) == 0x000000, "Member 'VAltarNavigableSlider_HandleOnValueChanged::NewValue' has a wrong offset!");

// Function Altar.VAltarNavigableSlider.InitializeSlider
// 0x0010 (0x0010 - 0x0000)
struct VAltarNavigableSlider_InitializeSlider final
{
public:
	float                                         MinValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableSlider_InitializeSlider) == 0x000004, "Wrong alignment on VAltarNavigableSlider_InitializeSlider");
static_assert(sizeof(VAltarNavigableSlider_InitializeSlider) == 0x000010, "Wrong size on VAltarNavigableSlider_InitializeSlider");
static_assert(offsetof(VAltarNavigableSlider_InitializeSlider, MinValue) == 0x000000, "Member 'VAltarNavigableSlider_InitializeSlider::MinValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableSlider_InitializeSlider, MaxValue) == 0x000004, "Member 'VAltarNavigableSlider_InitializeSlider::MaxValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableSlider_InitializeSlider, StepSize) == 0x000008, "Member 'VAltarNavigableSlider_InitializeSlider::StepSize' has a wrong offset!");
static_assert(offsetof(VAltarNavigableSlider_InitializeSlider, StartupValue) == 0x00000C, "Member 'VAltarNavigableSlider_InitializeSlider::StartupValue' has a wrong offset!");

// Function Altar.VAltarNavigableSlider.SetValue
// 0x0004 (0x0004 - 0x0000)
struct VAltarNavigableSlider_SetValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableSlider_SetValue) == 0x000004, "Wrong alignment on VAltarNavigableSlider_SetValue");
static_assert(sizeof(VAltarNavigableSlider_SetValue) == 0x000004, "Wrong size on VAltarNavigableSlider_SetValue");
static_assert(offsetof(VAltarNavigableSlider_SetValue, Value) == 0x000000, "Member 'VAltarNavigableSlider_SetValue::Value' has a wrong offset!");

// Function Altar.VDotedAltarNavigableSlider.OnDotCreated
// 0x0008 (0x0008 - 0x0000)
struct VDotedAltarNavigableSlider_OnDotCreated final
{
public:
	class UUserWidget*                            NewDot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDotedAltarNavigableSlider_OnDotCreated) == 0x000008, "Wrong alignment on VDotedAltarNavigableSlider_OnDotCreated");
static_assert(sizeof(VDotedAltarNavigableSlider_OnDotCreated) == 0x000008, "Wrong size on VDotedAltarNavigableSlider_OnDotCreated");
static_assert(offsetof(VDotedAltarNavigableSlider_OnDotCreated, NewDot) == 0x000000, "Member 'VDotedAltarNavigableSlider_OnDotCreated::NewDot' has a wrong offset!");

// Function Altar.VShowroomSubsystem.CalculateSpawnLocation
// 0x0018 (0x0018 - 0x0000)
struct VShowroomSubsystem_CalculateSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_CalculateSpawnLocation) == 0x000008, "Wrong alignment on VShowroomSubsystem_CalculateSpawnLocation");
static_assert(sizeof(VShowroomSubsystem_CalculateSpawnLocation) == 0x000018, "Wrong size on VShowroomSubsystem_CalculateSpawnLocation");
static_assert(offsetof(VShowroomSubsystem_CalculateSpawnLocation, ReturnValue) == 0x000000, "Member 'VShowroomSubsystem_CalculateSpawnLocation::ReturnValue' has a wrong offset!");

// Function Altar.VShowroomSubsystem.HideDefaultBackgroundScene
// 0x0001 (0x0001 - 0x0000)
struct VShowroomSubsystem_HideDefaultBackgroundScene final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_HideDefaultBackgroundScene) == 0x000001, "Wrong alignment on VShowroomSubsystem_HideDefaultBackgroundScene");
static_assert(sizeof(VShowroomSubsystem_HideDefaultBackgroundScene) == 0x000001, "Wrong size on VShowroomSubsystem_HideDefaultBackgroundScene");
static_assert(offsetof(VShowroomSubsystem_HideDefaultBackgroundScene, bHidden) == 0x000000, "Member 'VShowroomSubsystem_HideDefaultBackgroundScene::bHidden' has a wrong offset!");

// Function Altar.VShowroomSubsystem.RemoveCharacterBodyPart
// 0x0001 (0x0001 - 0x0000)
struct VShowroomSubsystem_RemoveCharacterBodyPart final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_RemoveCharacterBodyPart) == 0x000001, "Wrong alignment on VShowroomSubsystem_RemoveCharacterBodyPart");
static_assert(sizeof(VShowroomSubsystem_RemoveCharacterBodyPart) == 0x000001, "Wrong size on VShowroomSubsystem_RemoveCharacterBodyPart");
static_assert(offsetof(VShowroomSubsystem_RemoveCharacterBodyPart, Slot) == 0x000000, "Member 'VShowroomSubsystem_RemoveCharacterBodyPart::Slot' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetActorAnimation
// 0x0018 (0x0018 - 0x0000)
struct VShowroomSubsystem_SetActorAnimation final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimationPath;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetActorAnimation) == 0x000008, "Wrong alignment on VShowroomSubsystem_SetActorAnimation");
static_assert(sizeof(VShowroomSubsystem_SetActorAnimation) == 0x000018, "Wrong size on VShowroomSubsystem_SetActorAnimation");
static_assert(offsetof(VShowroomSubsystem_SetActorAnimation, SpawnedActor) == 0x000000, "Member 'VShowroomSubsystem_SetActorAnimation::SpawnedActor' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SetActorAnimation, AnimationPath) == 0x000008, "Member 'VShowroomSubsystem_SetActorAnimation::AnimationPath' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetBackgroundHDRI
// 0x0010 (0x0010 - 0x0000)
struct VShowroomSubsystem_SetBackgroundHDRI final
{
public:
	class FString                                 HDRITexturePath;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetBackgroundHDRI) == 0x000008, "Wrong alignment on VShowroomSubsystem_SetBackgroundHDRI");
static_assert(sizeof(VShowroomSubsystem_SetBackgroundHDRI) == 0x000010, "Wrong size on VShowroomSubsystem_SetBackgroundHDRI");
static_assert(offsetof(VShowroomSubsystem_SetBackgroundHDRI, HDRITexturePath) == 0x000000, "Member 'VShowroomSubsystem_SetBackgroundHDRI::HDRITexturePath' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetCharacterBodyPart
// 0x0018 (0x0018 - 0x0000)
struct VShowroomSubsystem_SetCharacterBodyPart final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FormPath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetCharacterBodyPart) == 0x000008, "Wrong alignment on VShowroomSubsystem_SetCharacterBodyPart");
static_assert(sizeof(VShowroomSubsystem_SetCharacterBodyPart) == 0x000018, "Wrong size on VShowroomSubsystem_SetCharacterBodyPart");
static_assert(offsetof(VShowroomSubsystem_SetCharacterBodyPart, Slot) == 0x000000, "Member 'VShowroomSubsystem_SetCharacterBodyPart::Slot' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SetCharacterBodyPart, FormPath) == 0x000008, "Member 'VShowroomSubsystem_SetCharacterBodyPart::FormPath' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetCharacterRace
// 0x0010 (0x0010 - 0x0000)
struct VShowroomSubsystem_SetCharacterRace final
{
public:
	class FString                                 RaceFormPath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetCharacterRace) == 0x000008, "Wrong alignment on VShowroomSubsystem_SetCharacterRace");
static_assert(sizeof(VShowroomSubsystem_SetCharacterRace) == 0x000010, "Wrong size on VShowroomSubsystem_SetCharacterRace");
static_assert(offsetof(VShowroomSubsystem_SetCharacterRace, RaceFormPath) == 0x000000, "Member 'VShowroomSubsystem_SetCharacterRace::RaceFormPath' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetCharacterSex
// 0x0001 (0x0001 - 0x0000)
struct VShowroomSubsystem_SetCharacterSex final
{
public:
	bool                                          bIsMale;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetCharacterSex) == 0x000001, "Wrong alignment on VShowroomSubsystem_SetCharacterSex");
static_assert(sizeof(VShowroomSubsystem_SetCharacterSex) == 0x000001, "Wrong size on VShowroomSubsystem_SetCharacterSex");
static_assert(offsetof(VShowroomSubsystem_SetCharacterSex, bIsMale) == 0x000000, "Member 'VShowroomSubsystem_SetCharacterSex::bIsMale' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetHDRIRotation
// 0x0004 (0x0004 - 0x0000)
struct VShowroomSubsystem_SetHDRIRotation final
{
public:
	float                                         Rotation;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetHDRIRotation) == 0x000004, "Wrong alignment on VShowroomSubsystem_SetHDRIRotation");
static_assert(sizeof(VShowroomSubsystem_SetHDRIRotation) == 0x000004, "Wrong size on VShowroomSubsystem_SetHDRIRotation");
static_assert(offsetof(VShowroomSubsystem_SetHDRIRotation, Rotation) == 0x000000, "Member 'VShowroomSubsystem_SetHDRIRotation::Rotation' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetLightsHidden
// 0x0001 (0x0001 - 0x0000)
struct VShowroomSubsystem_SetLightsHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetLightsHidden) == 0x000001, "Wrong alignment on VShowroomSubsystem_SetLightsHidden");
static_assert(sizeof(VShowroomSubsystem_SetLightsHidden) == 0x000001, "Wrong size on VShowroomSubsystem_SetLightsHidden");
static_assert(offsetof(VShowroomSubsystem_SetLightsHidden, bHidden) == 0x000000, "Member 'VShowroomSubsystem_SetLightsHidden::bHidden' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetPropsHidden
// 0x0001 (0x0001 - 0x0000)
struct VShowroomSubsystem_SetPropsHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetPropsHidden) == 0x000001, "Wrong alignment on VShowroomSubsystem_SetPropsHidden");
static_assert(sizeof(VShowroomSubsystem_SetPropsHidden) == 0x000001, "Wrong size on VShowroomSubsystem_SetPropsHidden");
static_assert(offsetof(VShowroomSubsystem_SetPropsHidden, bHidden) == 0x000000, "Member 'VShowroomSubsystem_SetPropsHidden::bHidden' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SetSkylightIntensity
// 0x0004 (0x0004 - 0x0000)
struct VShowroomSubsystem_SetSkylightIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SetSkylightIntensity) == 0x000004, "Wrong alignment on VShowroomSubsystem_SetSkylightIntensity");
static_assert(sizeof(VShowroomSubsystem_SetSkylightIntensity) == 0x000004, "Wrong size on VShowroomSubsystem_SetSkylightIntensity");
static_assert(offsetof(VShowroomSubsystem_SetSkylightIntensity, Intensity) == 0x000000, "Member 'VShowroomSubsystem_SetSkylightIntensity::Intensity' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SpawnActorsByAssetsPath
// 0x0068 (0x0068 - 0x0000)
struct VShowroomSubsystem_SpawnActorsByAssetsPath final
{
public:
	TArray<class FString>                         InPaths;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                CenterPoint;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemainNotSpawned;                                 // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutPaths;                                          // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SpawnActorsByAssetsPath) == 0x000008, "Wrong alignment on VShowroomSubsystem_SpawnActorsByAssetsPath");
static_assert(sizeof(VShowroomSubsystem_SpawnActorsByAssetsPath) == 0x000068, "Wrong size on VShowroomSubsystem_SpawnActorsByAssetsPath");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, InPaths) == 0x000000, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::InPaths' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, CenterPoint) == 0x000010, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::CenterPoint' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, BoxExtent) == 0x000028, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::BoxExtent' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, Offset) == 0x000040, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::Offset' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, bRemainNotSpawned) == 0x000044, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::bRemainNotSpawned' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, OutPaths) == 0x000048, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::OutPaths' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnActorsByAssetsPath, ReturnValue) == 0x000058, "Member 'VShowroomSubsystem_SpawnActorsByAssetsPath::ReturnValue' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SpawnAnimatedActor
// 0x0020 (0x0020 - 0x0000)
struct VShowroomSubsystem_SpawnAnimatedActor final
{
public:
	class FString                                 BlueprintPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimationPath;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SpawnAnimatedActor) == 0x000008, "Wrong alignment on VShowroomSubsystem_SpawnAnimatedActor");
static_assert(sizeof(VShowroomSubsystem_SpawnAnimatedActor) == 0x000020, "Wrong size on VShowroomSubsystem_SpawnAnimatedActor");
static_assert(offsetof(VShowroomSubsystem_SpawnAnimatedActor, BlueprintPath) == 0x000000, "Member 'VShowroomSubsystem_SpawnAnimatedActor::BlueprintPath' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnAnimatedActor, AnimationPath) == 0x000010, "Member 'VShowroomSubsystem_SpawnAnimatedActor::AnimationPath' has a wrong offset!");

// Function Altar.VShowroomSubsystem.SpawnBlueprintActor
// 0x0018 (0x0018 - 0x0000)
struct VShowroomSubsystem_SpawnBlueprintActor final
{
public:
	class FString                                 BlueprintPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_SpawnBlueprintActor) == 0x000008, "Wrong alignment on VShowroomSubsystem_SpawnBlueprintActor");
static_assert(sizeof(VShowroomSubsystem_SpawnBlueprintActor) == 0x000018, "Wrong size on VShowroomSubsystem_SpawnBlueprintActor");
static_assert(offsetof(VShowroomSubsystem_SpawnBlueprintActor, BlueprintPath) == 0x000000, "Member 'VShowroomSubsystem_SpawnBlueprintActor::BlueprintPath' has a wrong offset!");
static_assert(offsetof(VShowroomSubsystem_SpawnBlueprintActor, ReturnValue) == 0x000010, "Member 'VShowroomSubsystem_SpawnBlueprintActor::ReturnValue' has a wrong offset!");

// Function Altar.VShowroomSubsystem.GetShowroomCharacter
// 0x0008 (0x0008 - 0x0000)
struct VShowroomSubsystem_GetShowroomCharacter final
{
public:
	class AVPairedCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_GetShowroomCharacter) == 0x000008, "Wrong alignment on VShowroomSubsystem_GetShowroomCharacter");
static_assert(sizeof(VShowroomSubsystem_GetShowroomCharacter) == 0x000008, "Wrong size on VShowroomSubsystem_GetShowroomCharacter");
static_assert(offsetof(VShowroomSubsystem_GetShowroomCharacter, ReturnValue) == 0x000000, "Member 'VShowroomSubsystem_GetShowroomCharacter::ReturnValue' has a wrong offset!");

// Function Altar.VShowroomSubsystem.GetTargetPoint
// 0x0008 (0x0008 - 0x0000)
struct VShowroomSubsystem_GetTargetPoint final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShowroomSubsystem_GetTargetPoint) == 0x000008, "Wrong alignment on VShowroomSubsystem_GetTargetPoint");
static_assert(sizeof(VShowroomSubsystem_GetTargetPoint) == 0x000008, "Wrong size on VShowroomSubsystem_GetTargetPoint");
static_assert(offsetof(VShowroomSubsystem_GetTargetPoint, ReturnValue) == 0x000000, "Member 'VShowroomSubsystem_GetTargetPoint::ReturnValue' has a wrong offset!");

// Function Altar.VSpellCastMultiAnimInstance.OnCastSelfLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastMultiAnimInstance_OnCastSelfLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastMultiAnimInstance_OnCastSelfLeftEnter) == 0x000008, "Wrong alignment on VSpellCastMultiAnimInstance_OnCastSelfLeftEnter");
static_assert(sizeof(VSpellCastMultiAnimInstance_OnCastSelfLeftEnter) == 0x000020, "Wrong size on VSpellCastMultiAnimInstance_OnCastSelfLeftEnter");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastSelfLeftEnter, Context) == 0x000000, "Member 'VSpellCastMultiAnimInstance_OnCastSelfLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastSelfLeftEnter, Node) == 0x000010, "Member 'VSpellCastMultiAnimInstance_OnCastSelfLeftEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastMultiAnimInstance.OnCastSelfRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastMultiAnimInstance_OnCastSelfRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastMultiAnimInstance_OnCastSelfRightEnter) == 0x000008, "Wrong alignment on VSpellCastMultiAnimInstance_OnCastSelfRightEnter");
static_assert(sizeof(VSpellCastMultiAnimInstance_OnCastSelfRightEnter) == 0x000020, "Wrong size on VSpellCastMultiAnimInstance_OnCastSelfRightEnter");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastSelfRightEnter, Context) == 0x000000, "Member 'VSpellCastMultiAnimInstance_OnCastSelfRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastSelfRightEnter, Node) == 0x000010, "Member 'VSpellCastMultiAnimInstance_OnCastSelfRightEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastMultiAnimInstance.OnCastTargeRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastMultiAnimInstance_OnCastTargeRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastMultiAnimInstance_OnCastTargeRightEnter) == 0x000008, "Wrong alignment on VSpellCastMultiAnimInstance_OnCastTargeRightEnter");
static_assert(sizeof(VSpellCastMultiAnimInstance_OnCastTargeRightEnter) == 0x000020, "Wrong size on VSpellCastMultiAnimInstance_OnCastTargeRightEnter");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTargeRightEnter, Context) == 0x000000, "Member 'VSpellCastMultiAnimInstance_OnCastTargeRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTargeRightEnter, Node) == 0x000010, "Member 'VSpellCastMultiAnimInstance_OnCastTargeRightEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastMultiAnimInstance.OnCastTargetLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastMultiAnimInstance_OnCastTargetLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastMultiAnimInstance_OnCastTargetLeftEnter) == 0x000008, "Wrong alignment on VSpellCastMultiAnimInstance_OnCastTargetLeftEnter");
static_assert(sizeof(VSpellCastMultiAnimInstance_OnCastTargetLeftEnter) == 0x000020, "Wrong size on VSpellCastMultiAnimInstance_OnCastTargetLeftEnter");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTargetLeftEnter, Context) == 0x000000, "Member 'VSpellCastMultiAnimInstance_OnCastTargetLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTargetLeftEnter, Node) == 0x000010, "Member 'VSpellCastMultiAnimInstance_OnCastTargetLeftEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastMultiAnimInstance.OnCastTouchLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastMultiAnimInstance_OnCastTouchLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastMultiAnimInstance_OnCastTouchLeftEnter) == 0x000008, "Wrong alignment on VSpellCastMultiAnimInstance_OnCastTouchLeftEnter");
static_assert(sizeof(VSpellCastMultiAnimInstance_OnCastTouchLeftEnter) == 0x000020, "Wrong size on VSpellCastMultiAnimInstance_OnCastTouchLeftEnter");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTouchLeftEnter, Context) == 0x000000, "Member 'VSpellCastMultiAnimInstance_OnCastTouchLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTouchLeftEnter, Node) == 0x000010, "Member 'VSpellCastMultiAnimInstance_OnCastTouchLeftEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastMultiAnimInstance.OnCastTouchRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastMultiAnimInstance_OnCastTouchRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastMultiAnimInstance_OnCastTouchRightEnter) == 0x000008, "Wrong alignment on VSpellCastMultiAnimInstance_OnCastTouchRightEnter");
static_assert(sizeof(VSpellCastMultiAnimInstance_OnCastTouchRightEnter) == 0x000020, "Wrong size on VSpellCastMultiAnimInstance_OnCastTouchRightEnter");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTouchRightEnter, Context) == 0x000000, "Member 'VSpellCastMultiAnimInstance_OnCastTouchRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastMultiAnimInstance_OnCastTouchRightEnter, Node) == 0x000010, "Member 'VSpellCastMultiAnimInstance_OnCastTouchRightEnter::Node' has a wrong offset!");

// Function Altar.VModernEnchantmentItem.SetProperties
// 0x0050 (0x0050 - 0x0000)
struct VModernEnchantmentItem_SetProperties final
{
public:
	struct FVModernEnchantmentItemProperties      Value;                                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernEnchantmentItem_SetProperties) == 0x000008, "Wrong alignment on VModernEnchantmentItem_SetProperties");
static_assert(sizeof(VModernEnchantmentItem_SetProperties) == 0x000050, "Wrong size on VModernEnchantmentItem_SetProperties");
static_assert(offsetof(VModernEnchantmentItem_SetProperties, Value) == 0x000000, "Member 'VModernEnchantmentItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VModernEnchantmentItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernEnchantmentItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernEnchantmentItem_GetIndex) == 0x000004, "Wrong alignment on VModernEnchantmentItem_GetIndex");
static_assert(sizeof(VModernEnchantmentItem_GetIndex) == 0x000004, "Wrong size on VModernEnchantmentItem_GetIndex");
static_assert(offsetof(VModernEnchantmentItem_GetIndex, ReturnValue) == 0x000000, "Member 'VModernEnchantmentItem_GetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernEnchantmentItem.GetProperties
// 0x0050 (0x0050 - 0x0000)
struct VModernEnchantmentItem_GetProperties final
{
public:
	struct FVModernEnchantmentItemProperties      ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernEnchantmentItem_GetProperties) == 0x000008, "Wrong alignment on VModernEnchantmentItem_GetProperties");
static_assert(sizeof(VModernEnchantmentItem_GetProperties) == 0x000050, "Wrong size on VModernEnchantmentItem_GetProperties");
static_assert(offsetof(VModernEnchantmentItem_GetProperties, ReturnValue) == 0x000000, "Member 'VModernEnchantmentItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.ApplySenescenceLevel
// 0x0018 (0x0018 - 0x0000)
struct VCharacterAppearancePairingComponent_ApplySenescenceLevel final
{
public:
	const class USkeletalMeshComponent*           SkeletalMesh;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UVSenescenceLevel*                Level;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVSenescenceModifiers                         Modifiers;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_ApplySenescenceLevel) == 0x000008, "Wrong alignment on VCharacterAppearancePairingComponent_ApplySenescenceLevel");
static_assert(sizeof(VCharacterAppearancePairingComponent_ApplySenescenceLevel) == 0x000018, "Wrong size on VCharacterAppearancePairingComponent_ApplySenescenceLevel");
static_assert(offsetof(VCharacterAppearancePairingComponent_ApplySenescenceLevel, SkeletalMesh) == 0x000000, "Member 'VCharacterAppearancePairingComponent_ApplySenescenceLevel::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(VCharacterAppearancePairingComponent_ApplySenescenceLevel, Level) == 0x000008, "Member 'VCharacterAppearancePairingComponent_ApplySenescenceLevel::Level' has a wrong offset!");
static_assert(offsetof(VCharacterAppearancePairingComponent_ApplySenescenceLevel, Modifiers) == 0x000010, "Member 'VCharacterAppearancePairingComponent_ApplySenescenceLevel::Modifiers' has a wrong offset!");
static_assert(offsetof(VCharacterAppearancePairingComponent_ApplySenescenceLevel, MaterialIndex) == 0x000014, "Member 'VCharacterAppearancePairingComponent_ApplySenescenceLevel::MaterialIndex' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.AddNewDisease
// 0x0008 (0x0008 - 0x0000)
struct VCharacterAppearancePairingComponent_AddNewDisease final
{
public:
	const class UTESMagicItemForm*                NewDiseaseForm;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_AddNewDisease) == 0x000008, "Wrong alignment on VCharacterAppearancePairingComponent_AddNewDisease");
static_assert(sizeof(VCharacterAppearancePairingComponent_AddNewDisease) == 0x000008, "Wrong size on VCharacterAppearancePairingComponent_AddNewDisease");
static_assert(offsetof(VCharacterAppearancePairingComponent_AddNewDisease, NewDiseaseForm) == 0x000000, "Member 'VCharacterAppearancePairingComponent_AddNewDisease::NewDiseaseForm' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.ReapplyPhenotypeData
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAppearancePairingComponent_ReapplyPhenotypeData final
{
public:
	EVCharacterPhenotypeDataFilter                Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_ReapplyPhenotypeData) == 0x000001, "Wrong alignment on VCharacterAppearancePairingComponent_ReapplyPhenotypeData");
static_assert(sizeof(VCharacterAppearancePairingComponent_ReapplyPhenotypeData) == 0x000001, "Wrong size on VCharacterAppearancePairingComponent_ReapplyPhenotypeData");
static_assert(offsetof(VCharacterAppearancePairingComponent_ReapplyPhenotypeData, Filter) == 0x000000, "Member 'VCharacterAppearancePairingComponent_ReapplyPhenotypeData::Filter' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.RemoveDisease
// 0x0008 (0x0008 - 0x0000)
struct VCharacterAppearancePairingComponent_RemoveDisease final
{
public:
	const class UTESMagicItemForm*                NewDiseaseForm;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_RemoveDisease) == 0x000008, "Wrong alignment on VCharacterAppearancePairingComponent_RemoveDisease");
static_assert(sizeof(VCharacterAppearancePairingComponent_RemoveDisease) == 0x000008, "Wrong size on VCharacterAppearancePairingComponent_RemoveDisease");
static_assert(offsetof(VCharacterAppearancePairingComponent_RemoveDisease, NewDiseaseForm) == 0x000000, "Member 'VCharacterAppearancePairingComponent_RemoveDisease::NewDiseaseForm' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.SetVampireLevel
// 0x0004 (0x0004 - 0x0000)
struct VCharacterAppearancePairingComponent_SetVampireLevel final
{
public:
	int32                                         NewVampireLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_SetVampireLevel) == 0x000004, "Wrong alignment on VCharacterAppearancePairingComponent_SetVampireLevel");
static_assert(sizeof(VCharacterAppearancePairingComponent_SetVampireLevel) == 0x000004, "Wrong size on VCharacterAppearancePairingComponent_SetVampireLevel");
static_assert(offsetof(VCharacterAppearancePairingComponent_SetVampireLevel, NewVampireLevel) == 0x000000, "Member 'VCharacterAppearancePairingComponent_SetVampireLevel::NewVampireLevel' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.GetSenescenceModifier
// 0x0004 (0x0004 - 0x0000)
struct VCharacterAppearancePairingComponent_GetSenescenceModifier final
{
public:
	EVSenescenceModifiers                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_GetSenescenceModifier) == 0x000004, "Wrong alignment on VCharacterAppearancePairingComponent_GetSenescenceModifier");
static_assert(sizeof(VCharacterAppearancePairingComponent_GetSenescenceModifier) == 0x000004, "Wrong size on VCharacterAppearancePairingComponent_GetSenescenceModifier");
static_assert(offsetof(VCharacterAppearancePairingComponent_GetSenescenceModifier, ReturnValue) == 0x000000, "Member 'VCharacterAppearancePairingComponent_GetSenescenceModifier::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.GetVampireLevel
// 0x0004 (0x0004 - 0x0000)
struct VCharacterAppearancePairingComponent_GetVampireLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_GetVampireLevel) == 0x000004, "Wrong alignment on VCharacterAppearancePairingComponent_GetVampireLevel");
static_assert(sizeof(VCharacterAppearancePairingComponent_GetVampireLevel) == 0x000004, "Wrong size on VCharacterAppearancePairingComponent_GetVampireLevel");
static_assert(offsetof(VCharacterAppearancePairingComponent_GetVampireLevel, ReturnValue) == 0x000000, "Member 'VCharacterAppearancePairingComponent_GetVampireLevel::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.IsAVampire
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAppearancePairingComponent_IsAVampire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_IsAVampire) == 0x000001, "Wrong alignment on VCharacterAppearancePairingComponent_IsAVampire");
static_assert(sizeof(VCharacterAppearancePairingComponent_IsAVampire) == 0x000001, "Wrong size on VCharacterAppearancePairingComponent_IsAVampire");
static_assert(offsetof(VCharacterAppearancePairingComponent_IsAVampire, ReturnValue) == 0x000000, "Member 'VCharacterAppearancePairingComponent_IsAVampire::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.IsDiseaseActive
// 0x0010 (0x0010 - 0x0000)
struct VCharacterAppearancePairingComponent_IsDiseaseActive final
{
public:
	const class UTESMagicItemForm*                NewDiseaseForm;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCharacterAppearancePairingComponent_IsDiseaseActive) == 0x000008, "Wrong alignment on VCharacterAppearancePairingComponent_IsDiseaseActive");
static_assert(sizeof(VCharacterAppearancePairingComponent_IsDiseaseActive) == 0x000010, "Wrong size on VCharacterAppearancePairingComponent_IsDiseaseActive");
static_assert(offsetof(VCharacterAppearancePairingComponent_IsDiseaseActive, NewDiseaseForm) == 0x000000, "Member 'VCharacterAppearancePairingComponent_IsDiseaseActive::NewDiseaseForm' has a wrong offset!");
static_assert(offsetof(VCharacterAppearancePairingComponent_IsDiseaseActive, ReturnValue) == 0x000008, "Member 'VCharacterAppearancePairingComponent_IsDiseaseActive::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAppearancePairingComponent.IsSick
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAppearancePairingComponent_IsSick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAppearancePairingComponent_IsSick) == 0x000001, "Wrong alignment on VCharacterAppearancePairingComponent_IsSick");
static_assert(sizeof(VCharacterAppearancePairingComponent_IsSick) == 0x000001, "Wrong size on VCharacterAppearancePairingComponent_IsSick");
static_assert(offsetof(VCharacterAppearancePairingComponent_IsSick, ReturnValue) == 0x000000, "Member 'VCharacterAppearancePairingComponent_IsSick::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterHairPieceBase.ConstructComponent
// 0x0020 (0x0020 - 0x0000)
struct VCharacterHairPieceBase_ConstructComponent final
{
public:
	class USkeletalMeshComponent*                 FaceMeshComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVCharacterPhenotypeData*               Phenotype;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterHairPieceBaseConstructResult ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterHairPieceBase_ConstructComponent) == 0x000008, "Wrong alignment on VCharacterHairPieceBase_ConstructComponent");
static_assert(sizeof(VCharacterHairPieceBase_ConstructComponent) == 0x000020, "Wrong size on VCharacterHairPieceBase_ConstructComponent");
static_assert(offsetof(VCharacterHairPieceBase_ConstructComponent, FaceMeshComponent) == 0x000000, "Member 'VCharacterHairPieceBase_ConstructComponent::FaceMeshComponent' has a wrong offset!");
static_assert(offsetof(VCharacterHairPieceBase_ConstructComponent, Phenotype) == 0x000008, "Member 'VCharacterHairPieceBase_ConstructComponent::Phenotype' has a wrong offset!");
static_assert(offsetof(VCharacterHairPieceBase_ConstructComponent, ReturnValue) == 0x000010, "Member 'VCharacterHairPieceBase_ConstructComponent::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterHairPieceBase.GetFacialHairType
// 0x0001 (0x0001 - 0x0000)
struct VCharacterHairPieceBase_GetFacialHairType final
{
public:
	EVFacialHairType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterHairPieceBase_GetFacialHairType) == 0x000001, "Wrong alignment on VCharacterHairPieceBase_GetFacialHairType");
static_assert(sizeof(VCharacterHairPieceBase_GetFacialHairType) == 0x000001, "Wrong size on VCharacterHairPieceBase_GetFacialHairType");
static_assert(offsetof(VCharacterHairPieceBase_GetFacialHairType, ReturnValue) == 0x000000, "Member 'VCharacterHairPieceBase_GetFacialHairType::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.RegisterSendClickedOnRepair
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_RegisterSendClickedOnRepair final
{
public:
	int32                                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_RegisterSendClickedOnRepair) == 0x000004, "Wrong alignment on VRepairMenuViewModel_RegisterSendClickedOnRepair");
static_assert(sizeof(VRepairMenuViewModel_RegisterSendClickedOnRepair) == 0x000004, "Wrong size on VRepairMenuViewModel_RegisterSendClickedOnRepair");
static_assert(offsetof(VRepairMenuViewModel_RegisterSendClickedOnRepair, Item) == 0x000000, "Member 'VRepairMenuViewModel_RegisterSendClickedOnRepair::Item' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.RegisterSendHoverItem
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_RegisterSendHoverItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_RegisterSendHoverItem) == 0x000004, "Wrong alignment on VRepairMenuViewModel_RegisterSendHoverItem");
static_assert(sizeof(VRepairMenuViewModel_RegisterSendHoverItem) == 0x000004, "Wrong size on VRepairMenuViewModel_RegisterSendHoverItem");
static_assert(offsetof(VRepairMenuViewModel_RegisterSendHoverItem, ItemIndex) == 0x000000, "Member 'VRepairMenuViewModel_RegisterSendHoverItem::ItemIndex' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetAmountHammer
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_SetAmountHammer final
{
public:
	struct FLegacyRepairAmount                    NewValue;                                          // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetAmountHammer) == 0x000004, "Wrong alignment on VRepairMenuViewModel_SetAmountHammer");
static_assert(sizeof(VRepairMenuViewModel_SetAmountHammer) == 0x000004, "Wrong size on VRepairMenuViewModel_SetAmountHammer");
static_assert(offsetof(VRepairMenuViewModel_SetAmountHammer, NewValue) == 0x000000, "Member 'VRepairMenuViewModel_SetAmountHammer::NewValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetAmountMerchantGold
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_SetAmountMerchantGold final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetAmountMerchantGold) == 0x000004, "Wrong alignment on VRepairMenuViewModel_SetAmountMerchantGold");
static_assert(sizeof(VRepairMenuViewModel_SetAmountMerchantGold) == 0x000004, "Wrong size on VRepairMenuViewModel_SetAmountMerchantGold");
static_assert(offsetof(VRepairMenuViewModel_SetAmountMerchantGold, NewValue) == 0x000000, "Member 'VRepairMenuViewModel_SetAmountMerchantGold::NewValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetAmountPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_SetAmountPlayerGold final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetAmountPlayerGold) == 0x000004, "Wrong alignment on VRepairMenuViewModel_SetAmountPlayerGold");
static_assert(sizeof(VRepairMenuViewModel_SetAmountPlayerGold) == 0x000004, "Wrong size on VRepairMenuViewModel_SetAmountPlayerGold");
static_assert(offsetof(VRepairMenuViewModel_SetAmountPlayerGold, NewValue) == 0x000000, "Member 'VRepairMenuViewModel_SetAmountPlayerGold::NewValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetFilterButtonName
// 0x0018 (0x0018 - 0x0000)
struct VRepairMenuViewModel_SetFilterButtonName final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetFilterButtonName) == 0x000008, "Wrong alignment on VRepairMenuViewModel_SetFilterButtonName");
static_assert(sizeof(VRepairMenuViewModel_SetFilterButtonName) == 0x000018, "Wrong size on VRepairMenuViewModel_SetFilterButtonName");
static_assert(offsetof(VRepairMenuViewModel_SetFilterButtonName, NewText) == 0x000000, "Member 'VRepairMenuViewModel_SetFilterButtonName::NewText' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetFilterButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetFilterButtonVisible final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetFilterButtonVisible) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetFilterButtonVisible");
static_assert(sizeof(VRepairMenuViewModel_SetFilterButtonVisible) == 0x000001, "Wrong size on VRepairMenuViewModel_SetFilterButtonVisible");
static_assert(offsetof(VRepairMenuViewModel_SetFilterButtonVisible, bIsVisible) == 0x000000, "Member 'VRepairMenuViewModel_SetFilterButtonVisible::bIsVisible' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetHammerBreakChance
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_SetHammerBreakChance final
{
public:
	float                                         BreakChanceValue;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetHammerBreakChance) == 0x000004, "Wrong alignment on VRepairMenuViewModel_SetHammerBreakChance");
static_assert(sizeof(VRepairMenuViewModel_SetHammerBreakChance) == 0x000004, "Wrong size on VRepairMenuViewModel_SetHammerBreakChance");
static_assert(offsetof(VRepairMenuViewModel_SetHammerBreakChance, BreakChanceValue) == 0x000000, "Member 'VRepairMenuViewModel_SetHammerBreakChance::BreakChanceValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetIsAtLeastExpert
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetIsAtLeastExpert final
{
public:
	bool                                          bNewIsAtLeastExpert;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetIsAtLeastExpert) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetIsAtLeastExpert");
static_assert(sizeof(VRepairMenuViewModel_SetIsAtLeastExpert) == 0x000001, "Wrong size on VRepairMenuViewModel_SetIsAtLeastExpert");
static_assert(offsetof(VRepairMenuViewModel_SetIsAtLeastExpert, bNewIsAtLeastExpert) == 0x000000, "Member 'VRepairMenuViewModel_SetIsAtLeastExpert::bNewIsAtLeastExpert' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetIsOpenedFromQuickWheel
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetIsOpenedFromQuickWheel final
{
public:
	bool                                          bNewIsOpenedFromQuickWheel;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetIsOpenedFromQuickWheel) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetIsOpenedFromQuickWheel");
static_assert(sizeof(VRepairMenuViewModel_SetIsOpenedFromQuickWheel) == 0x000001, "Wrong size on VRepairMenuViewModel_SetIsOpenedFromQuickWheel");
static_assert(offsetof(VRepairMenuViewModel_SetIsOpenedFromQuickWheel, bNewIsOpenedFromQuickWheel) == 0x000000, "Member 'VRepairMenuViewModel_SetIsOpenedFromQuickWheel::bNewIsOpenedFromQuickWheel' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          bNewIsSortReversed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VRepairMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VRepairMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VRepairMenuViewModel_SetIsSortReversed, bNewIsSortReversed) == 0x000000, "Member 'VRepairMenuViewModel_SetIsSortReversed::bNewIsSortReversed' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetMerchantData
// 0x0020 (0x0020 - 0x0000)
struct VRepairMenuViewModel_SetMerchantData final
{
public:
	struct FModernRepairMenuCharacterData         NewMerchantData;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetMerchantData) == 0x000008, "Wrong alignment on VRepairMenuViewModel_SetMerchantData");
static_assert(sizeof(VRepairMenuViewModel_SetMerchantData) == 0x000020, "Wrong size on VRepairMenuViewModel_SetMerchantData");
static_assert(offsetof(VRepairMenuViewModel_SetMerchantData, NewMerchantData) == 0x000000, "Member 'VRepairMenuViewModel_SetMerchantData::NewMerchantData' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct VRepairMenuViewModel_SetPlayerData final
{
public:
	struct FModernRepairMenuCharacterData         NewPlayerData;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetPlayerData) == 0x000008, "Wrong alignment on VRepairMenuViewModel_SetPlayerData");
static_assert(sizeof(VRepairMenuViewModel_SetPlayerData) == 0x000020, "Wrong size on VRepairMenuViewModel_SetPlayerData");
static_assert(offsetof(VRepairMenuViewModel_SetPlayerData, NewPlayerData) == 0x000000, "Member 'VRepairMenuViewModel_SetPlayerData::NewPlayerData' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetRemoveButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetRemoveButtonVisible final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetRemoveButtonVisible) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetRemoveButtonVisible");
static_assert(sizeof(VRepairMenuViewModel_SetRemoveButtonVisible) == 0x000001, "Wrong size on VRepairMenuViewModel_SetRemoveButtonVisible");
static_assert(offsetof(VRepairMenuViewModel_SetRemoveButtonVisible, bIsVisible) == 0x000000, "Member 'VRepairMenuViewModel_SetRemoveButtonVisible::bIsVisible' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetRepairAllAmount
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_SetRepairAllAmount final
{
public:
	struct FLegacyRepairAmount                    NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetRepairAllAmount) == 0x000004, "Wrong alignment on VRepairMenuViewModel_SetRepairAllAmount");
static_assert(sizeof(VRepairMenuViewModel_SetRepairAllAmount) == 0x000004, "Wrong size on VRepairMenuViewModel_SetRepairAllAmount");
static_assert(offsetof(VRepairMenuViewModel_SetRepairAllAmount, NewValue) == 0x000000, "Member 'VRepairMenuViewModel_SetRepairAllAmount::NewValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetRepairAllButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetRepairAllButtonEnable final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetRepairAllButtonEnable) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetRepairAllButtonEnable");
static_assert(sizeof(VRepairMenuViewModel_SetRepairAllButtonEnable) == 0x000001, "Wrong size on VRepairMenuViewModel_SetRepairAllButtonEnable");
static_assert(offsetof(VRepairMenuViewModel_SetRepairAllButtonEnable, bIsEnable) == 0x000000, "Member 'VRepairMenuViewModel_SetRepairAllButtonEnable::bIsEnable' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetRepairAllButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetRepairAllButtonVisible final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetRepairAllButtonVisible) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetRepairAllButtonVisible");
static_assert(sizeof(VRepairMenuViewModel_SetRepairAllButtonVisible) == 0x000001, "Wrong size on VRepairMenuViewModel_SetRepairAllButtonVisible");
static_assert(offsetof(VRepairMenuViewModel_SetRepairAllButtonVisible, bIsVisible) == 0x000000, "Member 'VRepairMenuViewModel_SetRepairAllButtonVisible::bIsVisible' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetRepairList
// 0x0010 (0x0010 - 0x0000)
struct VRepairMenuViewModel_SetRepairList final
{
public:
	TArray<struct FLegacyRepairItemProperties>    NewProperties;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetRepairList) == 0x000008, "Wrong alignment on VRepairMenuViewModel_SetRepairList");
static_assert(sizeof(VRepairMenuViewModel_SetRepairList) == 0x000010, "Wrong size on VRepairMenuViewModel_SetRepairList");
static_assert(offsetof(VRepairMenuViewModel_SetRepairList, NewProperties) == 0x000000, "Member 'VRepairMenuViewModel_SetRepairList::NewProperties' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetSortType final
{
public:
	EOriginalInventoryMenuSortType                NewSortType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetSortType");
static_assert(sizeof(VRepairMenuViewModel_SetSortType) == 0x000001, "Wrong size on VRepairMenuViewModel_SetSortType");
static_assert(offsetof(VRepairMenuViewModel_SetSortType, NewSortType) == 0x000000, "Member 'VRepairMenuViewModel_SetSortType::NewSortType' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.SetTypeMenu
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_SetTypeMenu final
{
public:
	ELegacyRepairMenuType                         NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_SetTypeMenu) == 0x000001, "Wrong alignment on VRepairMenuViewModel_SetTypeMenu");
static_assert(sizeof(VRepairMenuViewModel_SetTypeMenu) == 0x000001, "Wrong size on VRepairMenuViewModel_SetTypeMenu");
static_assert(offsetof(VRepairMenuViewModel_SetTypeMenu, NewType) == 0x000000, "Member 'VRepairMenuViewModel_SetTypeMenu::NewType' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetAmountHammer
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_GetAmountHammer final
{
public:
	struct FLegacyRepairAmount                    ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetAmountHammer) == 0x000004, "Wrong alignment on VRepairMenuViewModel_GetAmountHammer");
static_assert(sizeof(VRepairMenuViewModel_GetAmountHammer) == 0x000004, "Wrong size on VRepairMenuViewModel_GetAmountHammer");
static_assert(offsetof(VRepairMenuViewModel_GetAmountHammer, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetAmountHammer::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetFilterButtonName
// 0x0018 (0x0018 - 0x0000)
struct VRepairMenuViewModel_GetFilterButtonName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetFilterButtonName) == 0x000008, "Wrong alignment on VRepairMenuViewModel_GetFilterButtonName");
static_assert(sizeof(VRepairMenuViewModel_GetFilterButtonName) == 0x000018, "Wrong size on VRepairMenuViewModel_GetFilterButtonName");
static_assert(offsetof(VRepairMenuViewModel_GetFilterButtonName, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetFilterButtonName::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetFilterButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_GetFilterButtonVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetFilterButtonVisible) == 0x000001, "Wrong alignment on VRepairMenuViewModel_GetFilterButtonVisible");
static_assert(sizeof(VRepairMenuViewModel_GetFilterButtonVisible) == 0x000001, "Wrong size on VRepairMenuViewModel_GetFilterButtonVisible");
static_assert(offsetof(VRepairMenuViewModel_GetFilterButtonVisible, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetFilterButtonVisible::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetHammerBreakChance
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_GetHammerBreakChance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetHammerBreakChance) == 0x000004, "Wrong alignment on VRepairMenuViewModel_GetHammerBreakChance");
static_assert(sizeof(VRepairMenuViewModel_GetHammerBreakChance) == 0x000004, "Wrong size on VRepairMenuViewModel_GetHammerBreakChance");
static_assert(offsetof(VRepairMenuViewModel_GetHammerBreakChance, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetHammerBreakChance::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetMerchantData
// 0x0020 (0x0020 - 0x0000)
struct VRepairMenuViewModel_GetMerchantData final
{
public:
	struct FModernRepairMenuCharacterData         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetMerchantData) == 0x000008, "Wrong alignment on VRepairMenuViewModel_GetMerchantData");
static_assert(sizeof(VRepairMenuViewModel_GetMerchantData) == 0x000020, "Wrong size on VRepairMenuViewModel_GetMerchantData");
static_assert(offsetof(VRepairMenuViewModel_GetMerchantData, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetMerchantData::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct VRepairMenuViewModel_GetPlayerData final
{
public:
	struct FModernRepairMenuCharacterData         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetPlayerData) == 0x000008, "Wrong alignment on VRepairMenuViewModel_GetPlayerData");
static_assert(sizeof(VRepairMenuViewModel_GetPlayerData) == 0x000020, "Wrong size on VRepairMenuViewModel_GetPlayerData");
static_assert(offsetof(VRepairMenuViewModel_GetPlayerData, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetPlayerData::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetRemoveButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_GetRemoveButtonVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetRemoveButtonVisible) == 0x000001, "Wrong alignment on VRepairMenuViewModel_GetRemoveButtonVisible");
static_assert(sizeof(VRepairMenuViewModel_GetRemoveButtonVisible) == 0x000001, "Wrong size on VRepairMenuViewModel_GetRemoveButtonVisible");
static_assert(offsetof(VRepairMenuViewModel_GetRemoveButtonVisible, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetRemoveButtonVisible::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetRepairAllAmount
// 0x0004 (0x0004 - 0x0000)
struct VRepairMenuViewModel_GetRepairAllAmount final
{
public:
	struct FLegacyRepairAmount                    ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetRepairAllAmount) == 0x000004, "Wrong alignment on VRepairMenuViewModel_GetRepairAllAmount");
static_assert(sizeof(VRepairMenuViewModel_GetRepairAllAmount) == 0x000004, "Wrong size on VRepairMenuViewModel_GetRepairAllAmount");
static_assert(offsetof(VRepairMenuViewModel_GetRepairAllAmount, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetRepairAllAmount::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetRepairAllButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_GetRepairAllButtonEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetRepairAllButtonEnable) == 0x000001, "Wrong alignment on VRepairMenuViewModel_GetRepairAllButtonEnable");
static_assert(sizeof(VRepairMenuViewModel_GetRepairAllButtonEnable) == 0x000001, "Wrong size on VRepairMenuViewModel_GetRepairAllButtonEnable");
static_assert(offsetof(VRepairMenuViewModel_GetRepairAllButtonEnable, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetRepairAllButtonEnable::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetRepairAllButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_GetRepairAllButtonVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetRepairAllButtonVisible) == 0x000001, "Wrong alignment on VRepairMenuViewModel_GetRepairAllButtonVisible");
static_assert(sizeof(VRepairMenuViewModel_GetRepairAllButtonVisible) == 0x000001, "Wrong size on VRepairMenuViewModel_GetRepairAllButtonVisible");
static_assert(offsetof(VRepairMenuViewModel_GetRepairAllButtonVisible, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetRepairAllButtonVisible::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetRepairList
// 0x0010 (0x0010 - 0x0000)
struct VRepairMenuViewModel_GetRepairList final
{
public:
	TArray<struct FLegacyRepairItemProperties>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetRepairList) == 0x000008, "Wrong alignment on VRepairMenuViewModel_GetRepairList");
static_assert(sizeof(VRepairMenuViewModel_GetRepairList) == 0x000010, "Wrong size on VRepairMenuViewModel_GetRepairList");
static_assert(offsetof(VRepairMenuViewModel_GetRepairList, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetRepairList::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_GetSortType final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VRepairMenuViewModel_GetSortType");
static_assert(sizeof(VRepairMenuViewModel_GetSortType) == 0x000001, "Wrong size on VRepairMenuViewModel_GetSortType");
static_assert(offsetof(VRepairMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.GetTypeMenu
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_GetTypeMenu final
{
public:
	ELegacyRepairMenuType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_GetTypeMenu) == 0x000001, "Wrong alignment on VRepairMenuViewModel_GetTypeMenu");
static_assert(sizeof(VRepairMenuViewModel_GetTypeMenu) == 0x000001, "Wrong size on VRepairMenuViewModel_GetTypeMenu");
static_assert(offsetof(VRepairMenuViewModel_GetTypeMenu, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_GetTypeMenu::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.IsAtLeastExpert
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_IsAtLeastExpert final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_IsAtLeastExpert) == 0x000001, "Wrong alignment on VRepairMenuViewModel_IsAtLeastExpert");
static_assert(sizeof(VRepairMenuViewModel_IsAtLeastExpert) == 0x000001, "Wrong size on VRepairMenuViewModel_IsAtLeastExpert");
static_assert(offsetof(VRepairMenuViewModel_IsAtLeastExpert, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_IsAtLeastExpert::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.IsOpenedFromQuickWheel
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_IsOpenedFromQuickWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_IsOpenedFromQuickWheel) == 0x000001, "Wrong alignment on VRepairMenuViewModel_IsOpenedFromQuickWheel");
static_assert(sizeof(VRepairMenuViewModel_IsOpenedFromQuickWheel) == 0x000001, "Wrong size on VRepairMenuViewModel_IsOpenedFromQuickWheel");
static_assert(offsetof(VRepairMenuViewModel_IsOpenedFromQuickWheel, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_IsOpenedFromQuickWheel::ReturnValue' has a wrong offset!");

// Function Altar.VRepairMenuViewModel.IsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VRepairMenuViewModel_IsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRepairMenuViewModel_IsSortReversed) == 0x000001, "Wrong alignment on VRepairMenuViewModel_IsSortReversed");
static_assert(sizeof(VRepairMenuViewModel_IsSortReversed) == 0x000001, "Wrong size on VRepairMenuViewModel_IsSortReversed");
static_assert(offsetof(VRepairMenuViewModel_IsSortReversed, ReturnValue) == 0x000000, "Member 'VRepairMenuViewModel_IsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.RegisterSendClickedButton
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_RegisterSendClickedButton final
{
public:
	ELegacyGameplayMenuIDs                        InButtonIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_RegisterSendClickedButton");
static_assert(sizeof(VGameplayMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong size on VGameplayMenuViewModel_RegisterSendClickedButton");
static_assert(offsetof(VGameplayMenuViewModel_RegisterSendClickedButton, InButtonIndex) == 0x000000, "Member 'VGameplayMenuViewModel_RegisterSendClickedButton::InButtonIndex' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetCrosshair
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_SetCrosshair final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetCrosshair) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_SetCrosshair");
static_assert(sizeof(VGameplayMenuViewModel_SetCrosshair) == 0x000001, "Wrong size on VGameplayMenuViewModel_SetCrosshair");
static_assert(offsetof(VGameplayMenuViewModel_SetCrosshair, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetCrosshair::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetDialogSubtitles
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_SetDialogSubtitles final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetDialogSubtitles) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_SetDialogSubtitles");
static_assert(sizeof(VGameplayMenuViewModel_SetDialogSubtitles) == 0x000001, "Wrong size on VGameplayMenuViewModel_SetDialogSubtitles");
static_assert(offsetof(VGameplayMenuViewModel_SetDialogSubtitles, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetDialogSubtitles::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetDifficulty
// 0x0004 (0x0004 - 0x0000)
struct VGameplayMenuViewModel_SetDifficulty final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetDifficulty) == 0x000004, "Wrong alignment on VGameplayMenuViewModel_SetDifficulty");
static_assert(sizeof(VGameplayMenuViewModel_SetDifficulty) == 0x000004, "Wrong size on VGameplayMenuViewModel_SetDifficulty");
static_assert(offsetof(VGameplayMenuViewModel_SetDifficulty, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetDifficulty::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetGeneralSubtitles
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_SetGeneralSubtitles final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetGeneralSubtitles) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_SetGeneralSubtitles");
static_assert(sizeof(VGameplayMenuViewModel_SetGeneralSubtitles) == 0x000001, "Wrong size on VGameplayMenuViewModel_SetGeneralSubtitles");
static_assert(offsetof(VGameplayMenuViewModel_SetGeneralSubtitles, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetGeneralSubtitles::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetSaveOnRest
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_SetSaveOnRest final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetSaveOnRest) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_SetSaveOnRest");
static_assert(sizeof(VGameplayMenuViewModel_SetSaveOnRest) == 0x000001, "Wrong size on VGameplayMenuViewModel_SetSaveOnRest");
static_assert(offsetof(VGameplayMenuViewModel_SetSaveOnRest, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetSaveOnRest::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetSaveOnTravel
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_SetSaveOnTravel final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetSaveOnTravel) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_SetSaveOnTravel");
static_assert(sizeof(VGameplayMenuViewModel_SetSaveOnTravel) == 0x000001, "Wrong size on VGameplayMenuViewModel_SetSaveOnTravel");
static_assert(offsetof(VGameplayMenuViewModel_SetSaveOnTravel, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetSaveOnTravel::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.SetSaveOnWait
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_SetSaveOnWait final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_SetSaveOnWait) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_SetSaveOnWait");
static_assert(sizeof(VGameplayMenuViewModel_SetSaveOnWait) == 0x000001, "Wrong size on VGameplayMenuViewModel_SetSaveOnWait");
static_assert(offsetof(VGameplayMenuViewModel_SetSaveOnWait, Value) == 0x000000, "Member 'VGameplayMenuViewModel_SetSaveOnWait::Value' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetCrosshair
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_GetCrosshair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetCrosshair) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_GetCrosshair");
static_assert(sizeof(VGameplayMenuViewModel_GetCrosshair) == 0x000001, "Wrong size on VGameplayMenuViewModel_GetCrosshair");
static_assert(offsetof(VGameplayMenuViewModel_GetCrosshair, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetCrosshair::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetDialogSubtitles
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_GetDialogSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetDialogSubtitles) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_GetDialogSubtitles");
static_assert(sizeof(VGameplayMenuViewModel_GetDialogSubtitles) == 0x000001, "Wrong size on VGameplayMenuViewModel_GetDialogSubtitles");
static_assert(offsetof(VGameplayMenuViewModel_GetDialogSubtitles, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetDialogSubtitles::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetDifficulty
// 0x0004 (0x0004 - 0x0000)
struct VGameplayMenuViewModel_GetDifficulty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetDifficulty) == 0x000004, "Wrong alignment on VGameplayMenuViewModel_GetDifficulty");
static_assert(sizeof(VGameplayMenuViewModel_GetDifficulty) == 0x000004, "Wrong size on VGameplayMenuViewModel_GetDifficulty");
static_assert(offsetof(VGameplayMenuViewModel_GetDifficulty, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetDifficulty::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetGeneralSubtitles
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_GetGeneralSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetGeneralSubtitles) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_GetGeneralSubtitles");
static_assert(sizeof(VGameplayMenuViewModel_GetGeneralSubtitles) == 0x000001, "Wrong size on VGameplayMenuViewModel_GetGeneralSubtitles");
static_assert(offsetof(VGameplayMenuViewModel_GetGeneralSubtitles, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetGeneralSubtitles::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetSaveOnRest
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_GetSaveOnRest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetSaveOnRest) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_GetSaveOnRest");
static_assert(sizeof(VGameplayMenuViewModel_GetSaveOnRest) == 0x000001, "Wrong size on VGameplayMenuViewModel_GetSaveOnRest");
static_assert(offsetof(VGameplayMenuViewModel_GetSaveOnRest, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetSaveOnRest::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetSaveOnTravel
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_GetSaveOnTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetSaveOnTravel) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_GetSaveOnTravel");
static_assert(sizeof(VGameplayMenuViewModel_GetSaveOnTravel) == 0x000001, "Wrong size on VGameplayMenuViewModel_GetSaveOnTravel");
static_assert(offsetof(VGameplayMenuViewModel_GetSaveOnTravel, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetSaveOnTravel::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayMenuViewModel.GetSaveOnWait
// 0x0001 (0x0001 - 0x0000)
struct VGameplayMenuViewModel_GetSaveOnWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayMenuViewModel_GetSaveOnWait) == 0x000001, "Wrong alignment on VGameplayMenuViewModel_GetSaveOnWait");
static_assert(sizeof(VGameplayMenuViewModel_GetSaveOnWait) == 0x000001, "Wrong size on VGameplayMenuViewModel_GetSaveOnWait");
static_assert(offsetof(VGameplayMenuViewModel_GetSaveOnWait, ReturnValue) == 0x000000, "Member 'VGameplayMenuViewModel_GetSaveOnWait::ReturnValue' has a wrong offset!");

// Function Altar.VStatusEffectVFXBlueprint.OnChangePerfomances
// 0x0002 (0x0002 - 0x0000)
struct VStatusEffectVFXBlueprint_OnChangePerfomances final
{
public:
	bool                                          bIsTheOnlyVFX;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMainEffect;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatusEffectVFXBlueprint_OnChangePerfomances) == 0x000001, "Wrong alignment on VStatusEffectVFXBlueprint_OnChangePerfomances");
static_assert(sizeof(VStatusEffectVFXBlueprint_OnChangePerfomances) == 0x000002, "Wrong size on VStatusEffectVFXBlueprint_OnChangePerfomances");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnChangePerfomances, bIsTheOnlyVFX) == 0x000000, "Member 'VStatusEffectVFXBlueprint_OnChangePerfomances::bIsTheOnlyVFX' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnChangePerfomances, bIsMainEffect) == 0x000001, "Member 'VStatusEffectVFXBlueprint_OnChangePerfomances::bIsMainEffect' has a wrong offset!");

// Function Altar.VStatusEffectVFXBlueprint.OnStartPlayBody
// 0x0018 (0x0018 - 0x0000)
struct VStatusEffectVFXBlueprint_OnStartPlayBody final
{
public:
	bool                                          bDoesBeginInFirstPerson;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VFXColors;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatusEffectVFXBlueprint_OnStartPlayBody) == 0x000008, "Wrong alignment on VStatusEffectVFXBlueprint_OnStartPlayBody");
static_assert(sizeof(VStatusEffectVFXBlueprint_OnStartPlayBody) == 0x000018, "Wrong size on VStatusEffectVFXBlueprint_OnStartPlayBody");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayBody, bDoesBeginInFirstPerson) == 0x000000, "Member 'VStatusEffectVFXBlueprint_OnStartPlayBody::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayBody, Value) == 0x000004, "Member 'VStatusEffectVFXBlueprint_OnStartPlayBody::Value' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayBody, VFXColors) == 0x000008, "Member 'VStatusEffectVFXBlueprint_OnStartPlayBody::VFXColors' has a wrong offset!");

// Function Altar.VStatusEffectVFXBlueprint.OnStartPlaySkeletal
// 0x0028 (0x0028 - 0x0000)
struct VStatusEffectVFXBlueprint_OnStartPlaySkeletal final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VFXColors;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginAsTheOnlyVFX;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnchant;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMainEffect;                                     // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInInventory;                                    // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal) == 0x000008, "Wrong alignment on VStatusEffectVFXBlueprint_OnStartPlaySkeletal");
static_assert(sizeof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal) == 0x000028, "Wrong size on VStatusEffectVFXBlueprint_OnStartPlaySkeletal");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, SkeletalMeshComponent) == 0x000000, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, bDoesBeginInFirstPerson) == 0x000008, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, Value) == 0x00000C, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::Value' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, VFXColors) == 0x000010, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::VFXColors' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, bDoesBeginAsTheOnlyVFX) == 0x000020, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::bDoesBeginAsTheOnlyVFX' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, bIsEnchant) == 0x000021, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::bIsEnchant' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, bIsMainEffect) == 0x000022, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::bIsMainEffect' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlaySkeletal, bIsInInventory) == 0x000023, "Member 'VStatusEffectVFXBlueprint_OnStartPlaySkeletal::bIsInInventory' has a wrong offset!");

// Function Altar.VStatusEffectVFXBlueprint.OnStartPlayStatic
// 0x0028 (0x0028 - 0x0000)
struct VStatusEffectVFXBlueprint_OnStartPlayStatic final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VFXColors;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginAsTheOnlyVFX;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnchant;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMainEffect;                                     // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInInventory;                                    // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VStatusEffectVFXBlueprint_OnStartPlayStatic) == 0x000008, "Wrong alignment on VStatusEffectVFXBlueprint_OnStartPlayStatic");
static_assert(sizeof(VStatusEffectVFXBlueprint_OnStartPlayStatic) == 0x000028, "Wrong size on VStatusEffectVFXBlueprint_OnStartPlayStatic");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, StaticMeshComponent) == 0x000000, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, bDoesBeginInFirstPerson) == 0x000008, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, Value) == 0x00000C, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::Value' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, VFXColors) == 0x000010, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::VFXColors' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, bDoesBeginAsTheOnlyVFX) == 0x000020, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::bDoesBeginAsTheOnlyVFX' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, bIsEnchant) == 0x000021, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::bIsEnchant' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, bIsMainEffect) == 0x000022, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::bIsMainEffect' has a wrong offset!");
static_assert(offsetof(VStatusEffectVFXBlueprint_OnStartPlayStatic, bIsInInventory) == 0x000023, "Member 'VStatusEffectVFXBlueprint_OnStartPlayStatic::bIsInInventory' has a wrong offset!");

// Function Altar.OblivionActorFactory.InitializeActor
// 0x0020 (0x0020 - 0x0000)
struct OblivionActorFactory_InitializeActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTESForm*                               InObject;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultObject;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberToSpawn;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OblivionActorFactory_InitializeActor) == 0x000008, "Wrong alignment on OblivionActorFactory_InitializeActor");
static_assert(sizeof(OblivionActorFactory_InitializeActor) == 0x000020, "Wrong size on OblivionActorFactory_InitializeActor");
static_assert(offsetof(OblivionActorFactory_InitializeActor, Actor) == 0x000000, "Member 'OblivionActorFactory_InitializeActor::Actor' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_InitializeActor, InObject) == 0x000008, "Member 'OblivionActorFactory_InitializeActor::InObject' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_InitializeActor, bIsDefaultObject) == 0x000010, "Member 'OblivionActorFactory_InitializeActor::bIsDefaultObject' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_InitializeActor, NumberToSpawn) == 0x000014, "Member 'OblivionActorFactory_InitializeActor::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_InitializeActor, ReturnValue) == 0x000018, "Member 'OblivionActorFactory_InitializeActor::ReturnValue' has a wrong offset!");

// Function Altar.OblivionActorFactory.SpawnActorFromFormAtLocationInBlueprint
// 0x0050 (0x0050 - 0x0000)
struct OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTESForm*                               InObject;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefScale;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint) == 0x000008, "Wrong alignment on OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint");
static_assert(sizeof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint) == 0x000050, "Wrong size on OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint");
static_assert(offsetof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint, WorldContextObject) == 0x000000, "Member 'OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint, InObject) == 0x000008, "Member 'OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint::InObject' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint, Translation) == 0x000010, "Member 'OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint::Translation' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint, RefScale) == 0x000028, "Member 'OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint::RefScale' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint, Rotation) == 0x000030, "Member 'OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint::Rotation' has a wrong offset!");
static_assert(offsetof(OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint, ReturnValue) == 0x000048, "Member 'OblivionActorFactory_SpawnActorFromFormAtLocationInBlueprint::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetGoldCost
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetGoldCost final
{
public:
	int32                                         NewGoldCost;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetGoldCost) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_SetGoldCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetGoldCost) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_SetGoldCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetGoldCost, NewGoldCost) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetGoldCost::NewGoldCost' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetGoldCostIsExceedingPlayerGold
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold, NewValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetGoldCostIsExceedingPlayerGold::NewValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetGoldCostVisibility
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetGoldCostVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetGoldCostVisibility) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetGoldCostVisibility");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetGoldCostVisibility) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetGoldCostVisibility");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetGoldCostVisibility, NewVisibility) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetGoldCostVisibility::NewVisibility' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetIsConstantEffect
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetIsConstantEffect final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetIsConstantEffect) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetIsConstantEffect");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetIsConstantEffect) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetIsConstantEffect");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetIsConstantEffect, NewValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetIsConstantEffect::NewValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetIsExceedingMaxMagickaCost
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost, NewValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetIsExceedingMaxMagickaCost::NewValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetMagickaCost
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetMagickaCost final
{
public:
	int32                                         NewMagickaCost;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetMagickaCost) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_SetMagickaCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetMagickaCost) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_SetMagickaCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetMagickaCost, NewMagickaCost) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetMagickaCost::NewMagickaCost' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetMagickaCostVisibility
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetMagickaCostVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetMagickaCostVisibility) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetMagickaCostVisibility");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetMagickaCostVisibility) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetMagickaCostVisibility");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetMagickaCostVisibility, NewVisibility) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetMagickaCostVisibility::NewVisibility' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetMaxMagickaCost
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetMaxMagickaCost final
{
public:
	int32                                         NewMaxMagickaCost;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetMaxMagickaCost) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_SetMaxMagickaCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetMaxMagickaCost) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_SetMaxMagickaCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetMaxMagickaCost, NewMaxMagickaCost) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetMaxMagickaCost::NewMaxMagickaCost' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetMaxUsage
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetMaxUsage final
{
public:
	int32                                         NewMaxUsage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetMaxUsage) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_SetMaxUsage");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetMaxUsage) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_SetMaxUsage");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetMaxUsage, NewMaxUsage) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetMaxUsage::NewMaxUsage' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetMaxUsageVisibility
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetMaxUsageVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetMaxUsageVisibility) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetMaxUsageVisibility");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetMaxUsageVisibility) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetMaxUsageVisibility");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetMaxUsageVisibility, NewVisibility) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetMaxUsageVisibility::NewVisibility' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetPlayerGold final
{
public:
	int32                                         NewPlayerGold;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetPlayerGold) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_SetPlayerGold");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetPlayerGold) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_SetPlayerGold");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetPlayerGold, NewPlayerGold) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetPlayerGold::NewPlayerGold' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.SetPlayerGoldVisibility
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility");
static_assert(sizeof(VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility");
static_assert(offsetof(VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility, NewVisibility) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_SetPlayerGoldVisibility::NewVisibility' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GetGoldCost
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_GetGoldCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GetGoldCost) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_GetGoldCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GetGoldCost) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_GetGoldCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GetGoldCost, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GetGoldCost::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GetMagickaCost
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_GetMagickaCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GetMagickaCost) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_GetMagickaCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GetMagickaCost) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_GetMagickaCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GetMagickaCost, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GetMagickaCost::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GetMaxMagickaCost
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_GetMaxMagickaCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GetMaxMagickaCost) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_GetMaxMagickaCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GetMaxMagickaCost) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_GetMaxMagickaCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GetMaxMagickaCost, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GetMaxMagickaCost::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GetMaxUsage
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_GetMaxUsage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GetMaxUsage) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_GetMaxUsage");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GetMaxUsage) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_GetMaxUsage");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GetMaxUsage, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GetMaxUsage::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VSpellMakingEnchantingViewModel_GetPlayerGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GetPlayerGold) == 0x000004, "Wrong alignment on VSpellMakingEnchantingViewModel_GetPlayerGold");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GetPlayerGold) == 0x000004, "Wrong size on VSpellMakingEnchantingViewModel_GetPlayerGold");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GetPlayerGold, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GetPlayerGold::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GoldCostIsExceedingPlayerGold
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GoldCostIsExceedingPlayerGold::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.GoldCostIsVisibile
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_GoldCostIsVisibile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_GoldCostIsVisibile) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_GoldCostIsVisibile");
static_assert(sizeof(VSpellMakingEnchantingViewModel_GoldCostIsVisibile) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_GoldCostIsVisibile");
static_assert(offsetof(VSpellMakingEnchantingViewModel_GoldCostIsVisibile, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_GoldCostIsVisibile::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.IsConstantEffect
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_IsConstantEffect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_IsConstantEffect) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_IsConstantEffect");
static_assert(sizeof(VSpellMakingEnchantingViewModel_IsConstantEffect) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_IsConstantEffect");
static_assert(offsetof(VSpellMakingEnchantingViewModel_IsConstantEffect, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_IsConstantEffect::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.IsExceedingMaxMagickaCost
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost");
static_assert(sizeof(VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost");
static_assert(offsetof(VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_IsExceedingMaxMagickaCost::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.MagickaCostIsVisibile
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_MagickaCostIsVisibile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_MagickaCostIsVisibile) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_MagickaCostIsVisibile");
static_assert(sizeof(VSpellMakingEnchantingViewModel_MagickaCostIsVisibile) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_MagickaCostIsVisibile");
static_assert(offsetof(VSpellMakingEnchantingViewModel_MagickaCostIsVisibile, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_MagickaCostIsVisibile::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.MaxUsageIsVisibile
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_MaxUsageIsVisibile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_MaxUsageIsVisibile) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_MaxUsageIsVisibile");
static_assert(sizeof(VSpellMakingEnchantingViewModel_MaxUsageIsVisibile) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_MaxUsageIsVisibile");
static_assert(offsetof(VSpellMakingEnchantingViewModel_MaxUsageIsVisibile, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_MaxUsageIsVisibile::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingEnchantingViewModel.PlayerGoldIsVisibile
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile) == 0x000001, "Wrong alignment on VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile");
static_assert(sizeof(VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile) == 0x000001, "Wrong size on VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile");
static_assert(offsetof(VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile, ReturnValue) == 0x000000, "Member 'VSpellMakingEnchantingViewModel_PlayerGoldIsVisibile::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionBar.GetAcceptedActionWidget
// 0x0008 (0x0008 - 0x0000)
struct VAltarBoundActionBar_GetAcceptedActionWidget final
{
public:
	class UVAltarBoundActionButton*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionBar_GetAcceptedActionWidget) == 0x000008, "Wrong alignment on VAltarBoundActionBar_GetAcceptedActionWidget");
static_assert(sizeof(VAltarBoundActionBar_GetAcceptedActionWidget) == 0x000008, "Wrong size on VAltarBoundActionBar_GetAcceptedActionWidget");
static_assert(offsetof(VAltarBoundActionBar_GetAcceptedActionWidget, ReturnValue) == 0x000000, "Member 'VAltarBoundActionBar_GetAcceptedActionWidget::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionBar.GetActionWidget
// 0x0010 (0x0010 - 0x0000)
struct VAltarBoundActionBar_GetActionWidget final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UVAltarBoundActionButton*         ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionBar_GetActionWidget) == 0x000008, "Wrong alignment on VAltarBoundActionBar_GetActionWidget");
static_assert(sizeof(VAltarBoundActionBar_GetActionWidget) == 0x000010, "Wrong size on VAltarBoundActionBar_GetActionWidget");
static_assert(offsetof(VAltarBoundActionBar_GetActionWidget, InputAction) == 0x000000, "Member 'VAltarBoundActionBar_GetActionWidget::InputAction' has a wrong offset!");
static_assert(offsetof(VAltarBoundActionBar_GetActionWidget, ReturnValue) == 0x000008, "Member 'VAltarBoundActionBar_GetActionWidget::ReturnValue' has a wrong offset!");

// Function Altar.StainedGlassCapturer.FindOrthoWidthForBox
// 0x0038 (0x0038 - 0x0000)
struct StainedGlassCapturer_FindOrthoWidthForBox final
{
public:
	struct FVector                                Extents;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StainedGlassCapturer_FindOrthoWidthForBox) == 0x000008, "Wrong alignment on StainedGlassCapturer_FindOrthoWidthForBox");
static_assert(sizeof(StainedGlassCapturer_FindOrthoWidthForBox) == 0x000038, "Wrong size on StainedGlassCapturer_FindOrthoWidthForBox");
static_assert(offsetof(StainedGlassCapturer_FindOrthoWidthForBox, Extents) == 0x000000, "Member 'StainedGlassCapturer_FindOrthoWidthForBox::Extents' has a wrong offset!");
static_assert(offsetof(StainedGlassCapturer_FindOrthoWidthForBox, Rotator) == 0x000018, "Member 'StainedGlassCapturer_FindOrthoWidthForBox::Rotator' has a wrong offset!");
static_assert(offsetof(StainedGlassCapturer_FindOrthoWidthForBox, Offset) == 0x000030, "Member 'StainedGlassCapturer_FindOrthoWidthForBox::Offset' has a wrong offset!");
static_assert(offsetof(StainedGlassCapturer_FindOrthoWidthForBox, ReturnValue) == 0x000034, "Member 'StainedGlassCapturer_FindOrthoWidthForBox::ReturnValue' has a wrong offset!");

// Function Altar.VAltarAchievementBlueprintLibrary.TriggerAchievement
// 0x0001 (0x0001 - 0x0000)
struct VAltarAchievementBlueprintLibrary_TriggerAchievement final
{
public:
	EVAltarAchievement                            Achievement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarAchievementBlueprintLibrary_TriggerAchievement) == 0x000001, "Wrong alignment on VAltarAchievementBlueprintLibrary_TriggerAchievement");
static_assert(sizeof(VAltarAchievementBlueprintLibrary_TriggerAchievement) == 0x000001, "Wrong size on VAltarAchievementBlueprintLibrary_TriggerAchievement");
static_assert(offsetof(VAltarAchievementBlueprintLibrary_TriggerAchievement, Achievement) == 0x000000, "Member 'VAltarAchievementBlueprintLibrary_TriggerAchievement::Achievement' has a wrong offset!");

// Function Altar.VAltarAchievementBlueprintLibrary.UndoAchievement
// 0x0001 (0x0001 - 0x0000)
struct VAltarAchievementBlueprintLibrary_UndoAchievement final
{
public:
	EVAltarAchievement                            Achievement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarAchievementBlueprintLibrary_UndoAchievement) == 0x000001, "Wrong alignment on VAltarAchievementBlueprintLibrary_UndoAchievement");
static_assert(sizeof(VAltarAchievementBlueprintLibrary_UndoAchievement) == 0x000001, "Wrong size on VAltarAchievementBlueprintLibrary_UndoAchievement");
static_assert(offsetof(VAltarAchievementBlueprintLibrary_UndoAchievement, Achievement) == 0x000000, "Member 'VAltarAchievementBlueprintLibrary_UndoAchievement::Achievement' has a wrong offset!");

// Function Altar.VAltarButtonImagePaddingCorrection.OnCorrectionDataUpdated
// 0x03C0 (0x03C0 - 0x0000)
struct VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated final
{
public:
	struct FButtonCorrectionData                  Value;                                             // 0x0000(0x03C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated) == 0x000010, "Wrong alignment on VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated");
static_assert(sizeof(VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated) == 0x0003C0, "Wrong size on VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated");
static_assert(offsetof(VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated, Value) == 0x000000, "Member 'VAltarButtonImagePaddingCorrection_OnCorrectionDataUpdated::Value' has a wrong offset!");

// Function Altar.VAltarButtonImagePaddingCorrection.SetCorrectionData
// 0x03C0 (0x03C0 - 0x0000)
struct VAltarButtonImagePaddingCorrection_SetCorrectionData final
{
public:
	struct FButtonCorrectionData                  Value;                                             // 0x0000(0x03C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButtonImagePaddingCorrection_SetCorrectionData) == 0x000010, "Wrong alignment on VAltarButtonImagePaddingCorrection_SetCorrectionData");
static_assert(sizeof(VAltarButtonImagePaddingCorrection_SetCorrectionData) == 0x0003C0, "Wrong size on VAltarButtonImagePaddingCorrection_SetCorrectionData");
static_assert(offsetof(VAltarButtonImagePaddingCorrection_SetCorrectionData, Value) == 0x000000, "Member 'VAltarButtonImagePaddingCorrection_SetCorrectionData::Value' has a wrong offset!");

// Function Altar.VAltarButtonImagePaddingCorrection.GetCorrectionData
// 0x03C0 (0x03C0 - 0x0000)
struct VAltarButtonImagePaddingCorrection_GetCorrectionData final
{
public:
	struct FButtonCorrectionData                  ReturnValue;                                       // 0x0000(0x03C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButtonImagePaddingCorrection_GetCorrectionData) == 0x000010, "Wrong alignment on VAltarButtonImagePaddingCorrection_GetCorrectionData");
static_assert(sizeof(VAltarButtonImagePaddingCorrection_GetCorrectionData) == 0x0003C0, "Wrong size on VAltarButtonImagePaddingCorrection_GetCorrectionData");
static_assert(offsetof(VAltarButtonImagePaddingCorrection_GetCorrectionData, ReturnValue) == 0x000000, "Member 'VAltarButtonImagePaddingCorrection_GetCorrectionData::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBlueprintFunctionLibrary.GetGPUBrand
// 0x0001 (0x0001 - 0x0000)
struct VAltarBlueprintFunctionLibrary_GetGPUBrand final
{
public:
	EGPUType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBlueprintFunctionLibrary_GetGPUBrand) == 0x000001, "Wrong alignment on VAltarBlueprintFunctionLibrary_GetGPUBrand");
static_assert(sizeof(VAltarBlueprintFunctionLibrary_GetGPUBrand) == 0x000001, "Wrong size on VAltarBlueprintFunctionLibrary_GetGPUBrand");
static_assert(offsetof(VAltarBlueprintFunctionLibrary_GetGPUBrand, ReturnValue) == 0x000000, "Member 'VAltarBlueprintFunctionLibrary_GetGPUBrand::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBlueprintFunctionLibrary.GetUsedVRAMMB
// 0x0008 (0x0008 - 0x0000)
struct VAltarBlueprintFunctionLibrary_GetUsedVRAMMB final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Used;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBlueprintFunctionLibrary_GetUsedVRAMMB) == 0x000004, "Wrong alignment on VAltarBlueprintFunctionLibrary_GetUsedVRAMMB");
static_assert(sizeof(VAltarBlueprintFunctionLibrary_GetUsedVRAMMB) == 0x000008, "Wrong size on VAltarBlueprintFunctionLibrary_GetUsedVRAMMB");
static_assert(offsetof(VAltarBlueprintFunctionLibrary_GetUsedVRAMMB, Total) == 0x000000, "Member 'VAltarBlueprintFunctionLibrary_GetUsedVRAMMB::Total' has a wrong offset!");
static_assert(offsetof(VAltarBlueprintFunctionLibrary_GetUsedVRAMMB, Used) == 0x000004, "Member 'VAltarBlueprintFunctionLibrary_GetUsedVRAMMB::Used' has a wrong offset!");

// Function Altar.VAltarBlueprintFunctionLibrary.IsGameRunningOnSSD
// 0x0001 (0x0001 - 0x0000)
struct VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD) == 0x000001, "Wrong alignment on VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD");
static_assert(sizeof(VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD) == 0x000001, "Wrong size on VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD");
static_assert(offsetof(VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD, ReturnValue) == 0x000000, "Member 'VAltarBlueprintFunctionLibrary_IsGameRunningOnSSD::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBlueprintFunctionLibrary.IsHardwareAcceleratedGPUSchedulingEnabled_BP
// 0x0001 (0x0001 - 0x0000)
struct VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP final
{
public:
	EExecBranch                                   OutExecPin;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP) == 0x000001, "Wrong alignment on VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP");
static_assert(sizeof(VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP) == 0x000001, "Wrong size on VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP");
static_assert(offsetof(VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP, OutExecPin) == 0x000000, "Member 'VAltarBlueprintFunctionLibrary_IsHardwareAcceleratedGPUSchedulingEnabled_BP::OutExecPin' has a wrong offset!");

// Function Altar.TESAmmo.GetProjectileStaticMesh
// 0x0028 (0x0028 - 0x0000)
struct TESAmmo_GetProjectileStaticMesh final
{
public:
	TSoftObjectPtr<class UStaticMesh>             ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESAmmo_GetProjectileStaticMesh) == 0x000008, "Wrong alignment on TESAmmo_GetProjectileStaticMesh");
static_assert(sizeof(TESAmmo_GetProjectileStaticMesh) == 0x000028, "Wrong size on TESAmmo_GetProjectileStaticMesh");
static_assert(offsetof(TESAmmo_GetProjectileStaticMesh, ReturnValue) == 0x000000, "Member 'TESAmmo_GetProjectileStaticMesh::ReturnValue' has a wrong offset!");

// Function Altar.TESAmmo.GetQuiverStaticMesh
// 0x0028 (0x0028 - 0x0000)
struct TESAmmo_GetQuiverStaticMesh final
{
public:
	TSoftObjectPtr<class UStaticMesh>             ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESAmmo_GetQuiverStaticMesh) == 0x000008, "Wrong alignment on TESAmmo_GetQuiverStaticMesh");
static_assert(sizeof(TESAmmo_GetQuiverStaticMesh) == 0x000028, "Wrong size on TESAmmo_GetQuiverStaticMesh");
static_assert(offsetof(TESAmmo_GetQuiverStaticMesh, ReturnValue) == 0x000000, "Member 'TESAmmo_GetQuiverStaticMesh::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_Wander.OnSpecialIdleAnimationStarted
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted final
{
public:
	class UAnimSequenceBase*                      AnimAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted) == 0x000008, "Wrong alignment on VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted");
static_assert(sizeof(VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted) == 0x000008, "Wrong size on VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted");
static_assert(offsetof(VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted, AnimAsset) == 0x000000, "Member 'VAIProcedureExecution_Wander_OnSpecialIdleAnimationStarted::AnimAsset' has a wrong offset!");

// Function Altar.TESCell.GetDataX
// 0x0004 (0x0004 - 0x0000)
struct TESCell_GetDataX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESCell_GetDataX) == 0x000004, "Wrong alignment on TESCell_GetDataX");
static_assert(sizeof(TESCell_GetDataX) == 0x000004, "Wrong size on TESCell_GetDataX");
static_assert(offsetof(TESCell_GetDataX, ReturnValue) == 0x000000, "Member 'TESCell_GetDataX::ReturnValue' has a wrong offset!");

// Function Altar.TESCell.GetDataY
// 0x0004 (0x0004 - 0x0000)
struct TESCell_GetDataY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESCell_GetDataY) == 0x000004, "Wrong alignment on TESCell_GetDataY");
static_assert(sizeof(TESCell_GetDataY) == 0x000004, "Wrong size on TESCell_GetDataY");
static_assert(offsetof(TESCell_GetDataY, ReturnValue) == 0x000000, "Member 'TESCell_GetDataY::ReturnValue' has a wrong offset!");

// Function Altar.TESCell.GetLandscape
// 0x0008 (0x0008 - 0x0000)
struct TESCell_GetLandscape final
{
public:
	class UTESLandscape*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESCell_GetLandscape) == 0x000008, "Wrong alignment on TESCell_GetLandscape");
static_assert(sizeof(TESCell_GetLandscape) == 0x000008, "Wrong size on TESCell_GetLandscape");
static_assert(offsetof(TESCell_GetLandscape, ReturnValue) == 0x000000, "Member 'TESCell_GetLandscape::ReturnValue' has a wrong offset!");

// Function Altar.TESCell.HasWater
// 0x0001 (0x0001 - 0x0000)
struct TESCell_HasWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESCell_HasWater) == 0x000001, "Wrong alignment on TESCell_HasWater");
static_assert(sizeof(TESCell_HasWater) == 0x000001, "Wrong size on TESCell_HasWater");
static_assert(offsetof(TESCell_HasWater, ReturnValue) == 0x000000, "Member 'TESCell_HasWater::ReturnValue' has a wrong offset!");

// Function Altar.TESCell.IsInterior
// 0x0001 (0x0001 - 0x0000)
struct TESCell_IsInterior final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESCell_IsInterior) == 0x000001, "Wrong alignment on TESCell_IsInterior");
static_assert(sizeof(TESCell_IsInterior) == 0x000001, "Wrong size on TESCell_IsInterior");
static_assert(offsetof(TESCell_IsInterior, ReturnValue) == 0x000000, "Member 'TESCell_IsInterior::ReturnValue' has a wrong offset!");

// Function Altar.TESCell.IsPersistent
// 0x0001 (0x0001 - 0x0000)
struct TESCell_IsPersistent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESCell_IsPersistent) == 0x000001, "Wrong alignment on TESCell_IsPersistent");
static_assert(sizeof(TESCell_IsPersistent) == 0x000001, "Wrong size on TESCell_IsPersistent");
static_assert(offsetof(TESCell_IsPersistent, ReturnValue) == 0x000000, "Member 'TESCell_IsPersistent::ReturnValue' has a wrong offset!");

// Function Altar.TESEffectSetting.GetAssociatedItemID
// 0x0008 (0x0008 - 0x0000)
struct TESEffectSetting_GetAssociatedItemID final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESEffectSetting_GetAssociatedItemID) == 0x000008, "Wrong alignment on TESEffectSetting_GetAssociatedItemID");
static_assert(sizeof(TESEffectSetting_GetAssociatedItemID) == 0x000008, "Wrong size on TESEffectSetting_GetAssociatedItemID");
static_assert(offsetof(TESEffectSetting_GetAssociatedItemID, ReturnValue) == 0x000000, "Member 'TESEffectSetting_GetAssociatedItemID::ReturnValue' has a wrong offset!");

// Function Altar.TESEffectSetting.GetEffectShaderID
// 0x0008 (0x0008 - 0x0000)
struct TESEffectSetting_GetEffectShaderID final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESEffectSetting_GetEffectShaderID) == 0x000008, "Wrong alignment on TESEffectSetting_GetEffectShaderID");
static_assert(sizeof(TESEffectSetting_GetEffectShaderID) == 0x000008, "Wrong size on TESEffectSetting_GetEffectShaderID");
static_assert(offsetof(TESEffectSetting_GetEffectShaderID, ReturnValue) == 0x000000, "Member 'TESEffectSetting_GetEffectShaderID::ReturnValue' has a wrong offset!");

// Function Altar.TESEffectSetting.GetEnchantEffectID
// 0x0008 (0x0008 - 0x0000)
struct TESEffectSetting_GetEnchantEffectID final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESEffectSetting_GetEnchantEffectID) == 0x000008, "Wrong alignment on TESEffectSetting_GetEnchantEffectID");
static_assert(sizeof(TESEffectSetting_GetEnchantEffectID) == 0x000008, "Wrong size on TESEffectSetting_GetEnchantEffectID");
static_assert(offsetof(TESEffectSetting_GetEnchantEffectID, ReturnValue) == 0x000000, "Member 'TESEffectSetting_GetEnchantEffectID::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedAddedEffect
// 0x0008 (0x0008 - 0x0000)
struct VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantToDelete;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect) == 0x000004, "Wrong alignment on VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect");
static_assert(sizeof(VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect) == 0x000008, "Wrong size on VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect");
static_assert(offsetof(VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect, Index_0) == 0x000000, "Member 'VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect::Index_0' has a wrong offset!");
static_assert(offsetof(VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect, bWantToDelete) == 0x000004, "Member 'VSpellMakingMenuViewModel_RegisterSendClickedAddedEffect::bWantToDelete' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedCreate
// 0x0018 (0x0018 - 0x0000)
struct VSpellMakingMenuViewModel_RegisterSendClickedCreate final
{
public:
	class FText                                   NewSpellName;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_RegisterSendClickedCreate) == 0x000008, "Wrong alignment on VSpellMakingMenuViewModel_RegisterSendClickedCreate");
static_assert(sizeof(VSpellMakingMenuViewModel_RegisterSendClickedCreate) == 0x000018, "Wrong size on VSpellMakingMenuViewModel_RegisterSendClickedCreate");
static_assert(offsetof(VSpellMakingMenuViewModel_RegisterSendClickedCreate, NewSpellName) == 0x000000, "Member 'VSpellMakingMenuViewModel_RegisterSendClickedCreate::NewSpellName' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.RegisterSendClickedKnownEffect
// 0x0008 (0x0008 - 0x0000)
struct VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantToDelete;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect) == 0x000004, "Wrong alignment on VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect");
static_assert(sizeof(VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect) == 0x000008, "Wrong size on VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect");
static_assert(offsetof(VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect, Index_0) == 0x000000, "Member 'VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect::Index_0' has a wrong offset!");
static_assert(offsetof(VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect, bWantToDelete) == 0x000004, "Member 'VSpellMakingMenuViewModel_RegisterSendClickedKnownEffect::bWantToDelete' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          bNewIsSortReversed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VSpellMakingMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VSpellMakingMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VSpellMakingMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VSpellMakingMenuViewModel_SetIsSortReversed, bNewIsSortReversed) == 0x000000, "Member 'VSpellMakingMenuViewModel_SetIsSortReversed::bNewIsSortReversed' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.SetKnownEffectsItems
// 0x0010 (0x0010 - 0x0000)
struct VSpellMakingMenuViewModel_SetKnownEffectsItems final
{
public:
	TArray<struct FLegacyEffectsItemProperties>   Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_SetKnownEffectsItems) == 0x000008, "Wrong alignment on VSpellMakingMenuViewModel_SetKnownEffectsItems");
static_assert(sizeof(VSpellMakingMenuViewModel_SetKnownEffectsItems) == 0x000010, "Wrong size on VSpellMakingMenuViewModel_SetKnownEffectsItems");
static_assert(offsetof(VSpellMakingMenuViewModel_SetKnownEffectsItems, Value) == 0x000000, "Member 'VSpellMakingMenuViewModel_SetKnownEffectsItems::Value' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.SetRequiredEffectsText
// 0x0018 (0x0018 - 0x0000)
struct VSpellMakingMenuViewModel_SetRequiredEffectsText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_SetRequiredEffectsText) == 0x000008, "Wrong alignment on VSpellMakingMenuViewModel_SetRequiredEffectsText");
static_assert(sizeof(VSpellMakingMenuViewModel_SetRequiredEffectsText) == 0x000018, "Wrong size on VSpellMakingMenuViewModel_SetRequiredEffectsText");
static_assert(offsetof(VSpellMakingMenuViewModel_SetRequiredEffectsText, Value) == 0x000000, "Member 'VSpellMakingMenuViewModel_SetRequiredEffectsText::Value' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.SetRequiredEffectVisibility
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingMenuViewModel_SetRequiredEffectVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_SetRequiredEffectVisibility) == 0x000001, "Wrong alignment on VSpellMakingMenuViewModel_SetRequiredEffectVisibility");
static_assert(sizeof(VSpellMakingMenuViewModel_SetRequiredEffectVisibility) == 0x000001, "Wrong size on VSpellMakingMenuViewModel_SetRequiredEffectVisibility");
static_assert(offsetof(VSpellMakingMenuViewModel_SetRequiredEffectVisibility, bNewVisibility) == 0x000000, "Member 'VSpellMakingMenuViewModel_SetRequiredEffectVisibility::bNewVisibility' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingMenuViewModel_SetSortType final
{
public:
	EOriginalInventoryMenuSortType                NewSortType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VSpellMakingMenuViewModel_SetSortType");
static_assert(sizeof(VSpellMakingMenuViewModel_SetSortType) == 0x000001, "Wrong size on VSpellMakingMenuViewModel_SetSortType");
static_assert(offsetof(VSpellMakingMenuViewModel_SetSortType, NewSortType) == 0x000000, "Member 'VSpellMakingMenuViewModel_SetSortType::NewSortType' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.SetSpellMakingCost
// 0x000C (0x000C - 0x0000)
struct VSpellMakingMenuViewModel_SetSpellMakingCost final
{
public:
	struct FLegacySpellMakingCost                 Value;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_SetSpellMakingCost) == 0x000004, "Wrong alignment on VSpellMakingMenuViewModel_SetSpellMakingCost");
static_assert(sizeof(VSpellMakingMenuViewModel_SetSpellMakingCost) == 0x00000C, "Wrong size on VSpellMakingMenuViewModel_SetSpellMakingCost");
static_assert(offsetof(VSpellMakingMenuViewModel_SetSpellMakingCost, Value) == 0x000000, "Member 'VSpellMakingMenuViewModel_SetSpellMakingCost::Value' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.GetKnownEffectsItems
// 0x0010 (0x0010 - 0x0000)
struct VSpellMakingMenuViewModel_GetKnownEffectsItems final
{
public:
	TArray<struct FLegacyEffectsItemProperties>   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_GetKnownEffectsItems) == 0x000008, "Wrong alignment on VSpellMakingMenuViewModel_GetKnownEffectsItems");
static_assert(sizeof(VSpellMakingMenuViewModel_GetKnownEffectsItems) == 0x000010, "Wrong size on VSpellMakingMenuViewModel_GetKnownEffectsItems");
static_assert(offsetof(VSpellMakingMenuViewModel_GetKnownEffectsItems, ReturnValue) == 0x000000, "Member 'VSpellMakingMenuViewModel_GetKnownEffectsItems::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.GetRequiredEffectsText
// 0x0018 (0x0018 - 0x0000)
struct VSpellMakingMenuViewModel_GetRequiredEffectsText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_GetRequiredEffectsText) == 0x000008, "Wrong alignment on VSpellMakingMenuViewModel_GetRequiredEffectsText");
static_assert(sizeof(VSpellMakingMenuViewModel_GetRequiredEffectsText) == 0x000018, "Wrong size on VSpellMakingMenuViewModel_GetRequiredEffectsText");
static_assert(offsetof(VSpellMakingMenuViewModel_GetRequiredEffectsText, ReturnValue) == 0x000000, "Member 'VSpellMakingMenuViewModel_GetRequiredEffectsText::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingMenuViewModel_GetSortType final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VSpellMakingMenuViewModel_GetSortType");
static_assert(sizeof(VSpellMakingMenuViewModel_GetSortType) == 0x000001, "Wrong size on VSpellMakingMenuViewModel_GetSortType");
static_assert(offsetof(VSpellMakingMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VSpellMakingMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.GetSpellMakingCost
// 0x000C (0x000C - 0x0000)
struct VSpellMakingMenuViewModel_GetSpellMakingCost final
{
public:
	struct FLegacySpellMakingCost                 ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_GetSpellMakingCost) == 0x000004, "Wrong alignment on VSpellMakingMenuViewModel_GetSpellMakingCost");
static_assert(sizeof(VSpellMakingMenuViewModel_GetSpellMakingCost) == 0x00000C, "Wrong size on VSpellMakingMenuViewModel_GetSpellMakingCost");
static_assert(offsetof(VSpellMakingMenuViewModel_GetSpellMakingCost, ReturnValue) == 0x000000, "Member 'VSpellMakingMenuViewModel_GetSpellMakingCost::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.IsRequiredEffectVisible
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingMenuViewModel_IsRequiredEffectVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_IsRequiredEffectVisible) == 0x000001, "Wrong alignment on VSpellMakingMenuViewModel_IsRequiredEffectVisible");
static_assert(sizeof(VSpellMakingMenuViewModel_IsRequiredEffectVisible) == 0x000001, "Wrong size on VSpellMakingMenuViewModel_IsRequiredEffectVisible");
static_assert(offsetof(VSpellMakingMenuViewModel_IsRequiredEffectVisible, ReturnValue) == 0x000000, "Member 'VSpellMakingMenuViewModel_IsRequiredEffectVisible::ReturnValue' has a wrong offset!");

// Function Altar.VSpellMakingMenuViewModel.IsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VSpellMakingMenuViewModel_IsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellMakingMenuViewModel_IsSortReversed) == 0x000001, "Wrong alignment on VSpellMakingMenuViewModel_IsSortReversed");
static_assert(sizeof(VSpellMakingMenuViewModel_IsSortReversed) == 0x000001, "Wrong size on VSpellMakingMenuViewModel_IsSortReversed");
static_assert(offsetof(VSpellMakingMenuViewModel_IsSortReversed, ReturnValue) == 0x000000, "Member 'VSpellMakingMenuViewModel_IsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VAltarAkComponent.BPF_HasActiveEvents
// 0x0001 (0x0001 - 0x0000)
struct VAltarAkComponent_BPF_HasActiveEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarAkComponent_BPF_HasActiveEvents) == 0x000001, "Wrong alignment on VAltarAkComponent_BPF_HasActiveEvents");
static_assert(sizeof(VAltarAkComponent_BPF_HasActiveEvents) == 0x000001, "Wrong size on VAltarAkComponent_BPF_HasActiveEvents");
static_assert(offsetof(VAltarAkComponent_BPF_HasActiveEvents, ReturnValue) == 0x000000, "Member 'VAltarAkComponent_BPF_HasActiveEvents::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEntitlementBlueprintLibrary.HasDeluxeEntitlement
// 0x0001 (0x0001 - 0x0000)
struct VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement) == 0x000001, "Wrong alignment on VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement");
static_assert(sizeof(VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement) == 0x000001, "Wrong size on VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement");
static_assert(offsetof(VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement, ReturnValue) == 0x000000, "Member 'VAltarEntitlementBlueprintLibrary_HasDeluxeEntitlement::ReturnValue' has a wrong offset!");

// Function Altar.VAltarButton.ChangeInputMethod
// 0x0001 (0x0001 - 0x0000)
struct VAltarButton_ChangeInputMethod final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_ChangeInputMethod) == 0x000001, "Wrong alignment on VAltarButton_ChangeInputMethod");
static_assert(sizeof(VAltarButton_ChangeInputMethod) == 0x000001, "Wrong size on VAltarButton_ChangeInputMethod");
static_assert(offsetof(VAltarButton_ChangeInputMethod, InputType) == 0x000000, "Member 'VAltarButton_ChangeInputMethod::InputType' has a wrong offset!");

// Function Altar.VAltarButton.OnButtonTextUpdated
// 0x0018 (0x0018 - 0x0000)
struct VAltarButton_OnButtonTextUpdated final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_OnButtonTextUpdated) == 0x000008, "Wrong alignment on VAltarButton_OnButtonTextUpdated");
static_assert(sizeof(VAltarButton_OnButtonTextUpdated) == 0x000018, "Wrong size on VAltarButton_OnButtonTextUpdated");
static_assert(offsetof(VAltarButton_OnButtonTextUpdated, Value) == 0x000000, "Member 'VAltarButton_OnButtonTextUpdated::Value' has a wrong offset!");

// Function Altar.VAltarButton.OnControllerActiveUpdated
// 0x0001 (0x0001 - 0x0000)
struct VAltarButton_OnControllerActiveUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_OnControllerActiveUpdated) == 0x000001, "Wrong alignment on VAltarButton_OnControllerActiveUpdated");
static_assert(sizeof(VAltarButton_OnControllerActiveUpdated) == 0x000001, "Wrong size on VAltarButton_OnControllerActiveUpdated");
static_assert(offsetof(VAltarButton_OnControllerActiveUpdated, Value) == 0x000000, "Member 'VAltarButton_OnControllerActiveUpdated::Value' has a wrong offset!");

// Function Altar.VAltarButton.SetButtonText
// 0x0018 (0x0018 - 0x0000)
struct VAltarButton_SetButtonText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_SetButtonText) == 0x000008, "Wrong alignment on VAltarButton_SetButtonText");
static_assert(sizeof(VAltarButton_SetButtonText) == 0x000018, "Wrong size on VAltarButton_SetButtonText");
static_assert(offsetof(VAltarButton_SetButtonText, Value) == 0x000000, "Member 'VAltarButton_SetButtonText::Value' has a wrong offset!");

// Function Altar.VAltarButton.SetControllerActive
// 0x0001 (0x0001 - 0x0000)
struct VAltarButton_SetControllerActive final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_SetControllerActive) == 0x000001, "Wrong alignment on VAltarButton_SetControllerActive");
static_assert(sizeof(VAltarButton_SetControllerActive) == 0x000001, "Wrong size on VAltarButton_SetControllerActive");
static_assert(offsetof(VAltarButton_SetControllerActive, Value) == 0x000000, "Member 'VAltarButton_SetControllerActive::Value' has a wrong offset!");

// Function Altar.VAltarButton.GetButtonText
// 0x0018 (0x0018 - 0x0000)
struct VAltarButton_GetButtonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_GetButtonText) == 0x000008, "Wrong alignment on VAltarButton_GetButtonText");
static_assert(sizeof(VAltarButton_GetButtonText) == 0x000018, "Wrong size on VAltarButton_GetButtonText");
static_assert(offsetof(VAltarButton_GetButtonText, ReturnValue) == 0x000000, "Member 'VAltarButton_GetButtonText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarButton.GetControllerActive
// 0x0001 (0x0001 - 0x0000)
struct VAltarButton_GetControllerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_GetControllerActive) == 0x000001, "Wrong alignment on VAltarButton_GetControllerActive");
static_assert(sizeof(VAltarButton_GetControllerActive) == 0x000001, "Wrong size on VAltarButton_GetControllerActive");
static_assert(offsetof(VAltarButton_GetControllerActive, ReturnValue) == 0x000000, "Member 'VAltarButton_GetControllerActive::ReturnValue' has a wrong offset!");

// Function Altar.VAltarButton.GetControllerButtonIconCropX
// 0x0004 (0x0004 - 0x0000)
struct VAltarButton_GetControllerButtonIconCropX final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarButton_GetControllerButtonIconCropX) == 0x000004, "Wrong alignment on VAltarButton_GetControllerButtonIconCropX");
static_assert(sizeof(VAltarButton_GetControllerButtonIconCropX) == 0x000004, "Wrong size on VAltarButton_GetControllerButtonIconCropX");
static_assert(offsetof(VAltarButton_GetControllerButtonIconCropX, ReturnValue) == 0x000000, "Member 'VAltarButton_GetControllerButtonIconCropX::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySaveLoadMenuItem.SetSlotName
// 0x0010 (0x0010 - 0x0000)
struct VLegacySaveLoadMenuItem_SetSlotName final
{
public:
	class FString                                 NewSlotName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySaveLoadMenuItem_SetSlotName) == 0x000008, "Wrong alignment on VLegacySaveLoadMenuItem_SetSlotName");
static_assert(sizeof(VLegacySaveLoadMenuItem_SetSlotName) == 0x000010, "Wrong size on VLegacySaveLoadMenuItem_SetSlotName");
static_assert(offsetof(VLegacySaveLoadMenuItem_SetSlotName, NewSlotName) == 0x000000, "Member 'VLegacySaveLoadMenuItem_SetSlotName::NewSlotName' has a wrong offset!");

// Function Altar.VLegacySaveLoadMenuItem.SetText
// 0x0018 (0x0018 - 0x0000)
struct VLegacySaveLoadMenuItem_SetText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySaveLoadMenuItem_SetText) == 0x000008, "Wrong alignment on VLegacySaveLoadMenuItem_SetText");
static_assert(sizeof(VLegacySaveLoadMenuItem_SetText) == 0x000018, "Wrong size on VLegacySaveLoadMenuItem_SetText");
static_assert(offsetof(VLegacySaveLoadMenuItem_SetText, Value) == 0x000000, "Member 'VLegacySaveLoadMenuItem_SetText::Value' has a wrong offset!");

// Function Altar.VLegacySaveLoadMenuItem.GetSlotName
// 0x0010 (0x0010 - 0x0000)
struct VLegacySaveLoadMenuItem_GetSlotName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySaveLoadMenuItem_GetSlotName) == 0x000008, "Wrong alignment on VLegacySaveLoadMenuItem_GetSlotName");
static_assert(sizeof(VLegacySaveLoadMenuItem_GetSlotName) == 0x000010, "Wrong size on VLegacySaveLoadMenuItem_GetSlotName");
static_assert(offsetof(VLegacySaveLoadMenuItem_GetSlotName, ReturnValue) == 0x000000, "Member 'VLegacySaveLoadMenuItem_GetSlotName::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySaveLoadMenuItem.GetText
// 0x0018 (0x0018 - 0x0000)
struct VLegacySaveLoadMenuItem_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySaveLoadMenuItem_GetText) == 0x000008, "Wrong alignment on VLegacySaveLoadMenuItem_GetText");
static_assert(sizeof(VLegacySaveLoadMenuItem_GetText) == 0x000018, "Wrong size on VLegacySaveLoadMenuItem_GetText");
static_assert(offsetof(VLegacySaveLoadMenuItem_GetText, ReturnValue) == 0x000000, "Member 'VLegacySaveLoadMenuItem_GetText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarNavigableScrollBox.OnScrollbarValueChanged
// 0x0004 (0x0004 - 0x0000)
struct VAltarNavigableScrollBox_OnScrollbarValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableScrollBox_OnScrollbarValueChanged) == 0x000004, "Wrong alignment on VAltarNavigableScrollBox_OnScrollbarValueChanged");
static_assert(sizeof(VAltarNavigableScrollBox_OnScrollbarValueChanged) == 0x000004, "Wrong size on VAltarNavigableScrollBox_OnScrollbarValueChanged");
static_assert(offsetof(VAltarNavigableScrollBox_OnScrollbarValueChanged, NewValue) == 0x000000, "Member 'VAltarNavigableScrollBox_OnScrollbarValueChanged::NewValue' has a wrong offset!");

// Function Altar.VAltarNavigableScrollBox.OnScrollBoxValuesChanged
// 0x0010 (0x0010 - 0x0000)
struct VAltarNavigableScrollBox_OnScrollBoxValuesChanged final
{
public:
	float                                         MinScrollbarValue;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScrollbarValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScrollbarValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThumbFractionSize;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableScrollBox_OnScrollBoxValuesChanged) == 0x000004, "Wrong alignment on VAltarNavigableScrollBox_OnScrollBoxValuesChanged");
static_assert(sizeof(VAltarNavigableScrollBox_OnScrollBoxValuesChanged) == 0x000010, "Wrong size on VAltarNavigableScrollBox_OnScrollBoxValuesChanged");
static_assert(offsetof(VAltarNavigableScrollBox_OnScrollBoxValuesChanged, MinScrollbarValue) == 0x000000, "Member 'VAltarNavigableScrollBox_OnScrollBoxValuesChanged::MinScrollbarValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableScrollBox_OnScrollBoxValuesChanged, MaxScrollbarValue) == 0x000004, "Member 'VAltarNavigableScrollBox_OnScrollBoxValuesChanged::MaxScrollbarValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableScrollBox_OnScrollBoxValuesChanged, CurrentScrollbarValue) == 0x000008, "Member 'VAltarNavigableScrollBox_OnScrollBoxValuesChanged::CurrentScrollbarValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableScrollBox_OnScrollBoxValuesChanged, ThumbFractionSize) == 0x00000C, "Member 'VAltarNavigableScrollBox_OnScrollBoxValuesChanged::ThumbFractionSize' has a wrong offset!");

// Function Altar.VAltarNavigableScrollBox.OnUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct VAltarNavigableScrollBox_OnUserScrolled final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableScrollBox_OnUserScrolled) == 0x000004, "Wrong alignment on VAltarNavigableScrollBox_OnUserScrolled");
static_assert(sizeof(VAltarNavigableScrollBox_OnUserScrolled) == 0x000004, "Wrong size on VAltarNavigableScrollBox_OnUserScrolled");
static_assert(offsetof(VAltarNavigableScrollBox_OnUserScrolled, NewValue) == 0x000000, "Member 'VAltarNavigableScrollBox_OnUserScrolled::NewValue' has a wrong offset!");

// Function Altar.VAltarNavigableScrollBox.UpdateLockState
// 0x0001 (0x0001 - 0x0000)
struct VAltarNavigableScrollBox_UpdateLockState final
{
public:
	bool                                          bNewLockState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableScrollBox_UpdateLockState) == 0x000001, "Wrong alignment on VAltarNavigableScrollBox_UpdateLockState");
static_assert(sizeof(VAltarNavigableScrollBox_UpdateLockState) == 0x000001, "Wrong size on VAltarNavigableScrollBox_UpdateLockState");
static_assert(offsetof(VAltarNavigableScrollBox_UpdateLockState, bNewLockState) == 0x000000, "Member 'VAltarNavigableScrollBox_UpdateLockState::bNewLockState' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.Internal_OnVideoOpenned
// 0x0010 (0x0010 - 0x0000)
struct VAltarMediaPlayer_Internal_OnVideoOpenned final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_Internal_OnVideoOpenned) == 0x000008, "Wrong alignment on VAltarMediaPlayer_Internal_OnVideoOpenned");
static_assert(sizeof(VAltarMediaPlayer_Internal_OnVideoOpenned) == 0x000010, "Wrong size on VAltarMediaPlayer_Internal_OnVideoOpenned");
static_assert(offsetof(VAltarMediaPlayer_Internal_OnVideoOpenned, OpenedUrl) == 0x000000, "Member 'VAltarMediaPlayer_Internal_OnVideoOpenned::OpenedUrl' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.IsOpenned
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_IsOpenned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_IsOpenned) == 0x000001, "Wrong alignment on VAltarMediaPlayer_IsOpenned");
static_assert(sizeof(VAltarMediaPlayer_IsOpenned) == 0x000001, "Wrong size on VAltarMediaPlayer_IsOpenned");
static_assert(offsetof(VAltarMediaPlayer_IsOpenned, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_IsOpenned::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_IsPlaying) == 0x000001, "Wrong alignment on VAltarMediaPlayer_IsPlaying");
static_assert(sizeof(VAltarMediaPlayer_IsPlaying) == 0x000001, "Wrong size on VAltarMediaPlayer_IsPlaying");
static_assert(offsetof(VAltarMediaPlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.Open
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_Open final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_Open) == 0x000001, "Wrong alignment on VAltarMediaPlayer_Open");
static_assert(sizeof(VAltarMediaPlayer_Open) == 0x000001, "Wrong size on VAltarMediaPlayer_Open");
static_assert(offsetof(VAltarMediaPlayer_Open, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_Open::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.Pause
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_Pause) == 0x000001, "Wrong alignment on VAltarMediaPlayer_Pause");
static_assert(sizeof(VAltarMediaPlayer_Pause) == 0x000001, "Wrong size on VAltarMediaPlayer_Pause");
static_assert(offsetof(VAltarMediaPlayer_Pause, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_Pause::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.Play
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_Play final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_Play) == 0x000001, "Wrong alignment on VAltarMediaPlayer_Play");
static_assert(sizeof(VAltarMediaPlayer_Play) == 0x000001, "Wrong size on VAltarMediaPlayer_Play");
static_assert(offsetof(VAltarMediaPlayer_Play, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_Play::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.PlayFromStart
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_PlayFromStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_PlayFromStart) == 0x000001, "Wrong alignment on VAltarMediaPlayer_PlayFromStart");
static_assert(sizeof(VAltarMediaPlayer_PlayFromStart) == 0x000001, "Wrong size on VAltarMediaPlayer_PlayFromStart");
static_assert(offsetof(VAltarMediaPlayer_PlayFromStart, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_PlayFromStart::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.PlayFromTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct VAltarMediaPlayer_PlayFromTimeStamp final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarMediaPlayer_PlayFromTimeStamp) == 0x000004, "Wrong alignment on VAltarMediaPlayer_PlayFromTimeStamp");
static_assert(sizeof(VAltarMediaPlayer_PlayFromTimeStamp) == 0x000008, "Wrong size on VAltarMediaPlayer_PlayFromTimeStamp");
static_assert(offsetof(VAltarMediaPlayer_PlayFromTimeStamp, Timestamp) == 0x000000, "Member 'VAltarMediaPlayer_PlayFromTimeStamp::Timestamp' has a wrong offset!");
static_assert(offsetof(VAltarMediaPlayer_PlayFromTimeStamp, ReturnValue) == 0x000004, "Member 'VAltarMediaPlayer_PlayFromTimeStamp::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.Prepare
// 0x0001 (0x0001 - 0x0000)
struct VAltarMediaPlayer_Prepare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMediaPlayer_Prepare) == 0x000001, "Wrong alignment on VAltarMediaPlayer_Prepare");
static_assert(sizeof(VAltarMediaPlayer_Prepare) == 0x000001, "Wrong size on VAltarMediaPlayer_Prepare");
static_assert(offsetof(VAltarMediaPlayer_Prepare, ReturnValue) == 0x000000, "Member 'VAltarMediaPlayer_Prepare::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMediaPlayer.Seek
// 0x0008 (0x0008 - 0x0000)
struct VAltarMediaPlayer_Seek final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarMediaPlayer_Seek) == 0x000004, "Wrong alignment on VAltarMediaPlayer_Seek");
static_assert(sizeof(VAltarMediaPlayer_Seek) == 0x000008, "Wrong size on VAltarMediaPlayer_Seek");
static_assert(offsetof(VAltarMediaPlayer_Seek, Timestamp) == 0x000000, "Member 'VAltarMediaPlayer_Seek::Timestamp' has a wrong offset!");
static_assert(offsetof(VAltarMediaPlayer_Seek, ReturnValue) == 0x000004, "Member 'VAltarMediaPlayer_Seek::ReturnValue' has a wrong offset!");

// Function Altar.VEquipUnequipCharacterAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VEquipUnequipCharacterAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VEquipUnequipCharacterAnimInstance_IsSneaking");
static_assert(sizeof(VEquipUnequipCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong size on VEquipUnequipCharacterAnimInstance_IsSneaking");
static_assert(offsetof(VEquipUnequipCharacterAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VEquipUnequipCharacterAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VEquipUnequipCharacterAnimInstance.IsStanding
// 0x0001 (0x0001 - 0x0000)
struct VEquipUnequipCharacterAnimInstance_IsStanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipCharacterAnimInstance_IsStanding) == 0x000001, "Wrong alignment on VEquipUnequipCharacterAnimInstance_IsStanding");
static_assert(sizeof(VEquipUnequipCharacterAnimInstance_IsStanding) == 0x000001, "Wrong size on VEquipUnequipCharacterAnimInstance_IsStanding");
static_assert(offsetof(VEquipUnequipCharacterAnimInstance_IsStanding, ReturnValue) == 0x000000, "Member 'VEquipUnequipCharacterAnimInstance_IsStanding::ReturnValue' has a wrong offset!");

// Function Altar.VEquipUnequipSSSwimSingle.OnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipSSSwimSingle_OnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipSSSwimSingle_OnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipSSSwimSingle_OnEquipEnter");
static_assert(sizeof(VEquipUnequipSSSwimSingle_OnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipSSSwimSingle_OnEquipEnter");
static_assert(offsetof(VEquipUnequipSSSwimSingle_OnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipSSSwimSingle_OnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipSSSwimSingle_OnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipSSSwimSingle_OnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipSSSwimSingle.OnUnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipSSSwimSingle_OnUnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipSSSwimSingle_OnUnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipSSSwimSingle_OnUnEquipEnter");
static_assert(sizeof(VEquipUnequipSSSwimSingle_OnUnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipSSSwimSingle_OnUnEquipEnter");
static_assert(offsetof(VEquipUnequipSSSwimSingle_OnUnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipSSSwimSingle_OnUnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipSSSwimSingle_OnUnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipSSSwimSingle_OnUnEquipEnter::Node' has a wrong offset!");

// Function Altar.TESLandscape.CreateHeightmapData
// 0x0014 (0x0014 - 0x0000)
struct TESLandscape_CreateHeightmapData final
{
public:
	bool                                          bFlipYAxis;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepSouthWestVertices;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZScaleMinHeight;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZScaleMaxHeight;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSpaceOffsetY;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TESLandscape_CreateHeightmapData) == 0x000004, "Wrong alignment on TESLandscape_CreateHeightmapData");
static_assert(sizeof(TESLandscape_CreateHeightmapData) == 0x000014, "Wrong size on TESLandscape_CreateHeightmapData");
static_assert(offsetof(TESLandscape_CreateHeightmapData, bFlipYAxis) == 0x000000, "Member 'TESLandscape_CreateHeightmapData::bFlipYAxis' has a wrong offset!");
static_assert(offsetof(TESLandscape_CreateHeightmapData, bKeepSouthWestVertices) == 0x000001, "Member 'TESLandscape_CreateHeightmapData::bKeepSouthWestVertices' has a wrong offset!");
static_assert(offsetof(TESLandscape_CreateHeightmapData, ZScaleMinHeight) == 0x000004, "Member 'TESLandscape_CreateHeightmapData::ZScaleMinHeight' has a wrong offset!");
static_assert(offsetof(TESLandscape_CreateHeightmapData, ZScaleMaxHeight) == 0x000008, "Member 'TESLandscape_CreateHeightmapData::ZScaleMaxHeight' has a wrong offset!");
static_assert(offsetof(TESLandscape_CreateHeightmapData, WorldSpaceOffsetY) == 0x00000C, "Member 'TESLandscape_CreateHeightmapData::WorldSpaceOffsetY' has a wrong offset!");
static_assert(offsetof(TESLandscape_CreateHeightmapData, ReturnValue) == 0x000010, "Member 'TESLandscape_CreateHeightmapData::ReturnValue' has a wrong offset!");

// Function Altar.TESLandscape.GetHeightmapTexture
// 0x0010 (0x0010 - 0x0000)
struct TESLandscape_GetHeightmapTexture final
{
public:
	bool                                          bFlipYAxis;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESLandscape_GetHeightmapTexture) == 0x000008, "Wrong alignment on TESLandscape_GetHeightmapTexture");
static_assert(sizeof(TESLandscape_GetHeightmapTexture) == 0x000010, "Wrong size on TESLandscape_GetHeightmapTexture");
static_assert(offsetof(TESLandscape_GetHeightmapTexture, bFlipYAxis) == 0x000000, "Member 'TESLandscape_GetHeightmapTexture::bFlipYAxis' has a wrong offset!");
static_assert(offsetof(TESLandscape_GetHeightmapTexture, ReturnValue) == 0x000008, "Member 'TESLandscape_GetHeightmapTexture::ReturnValue' has a wrong offset!");

// Function Altar.TESLandscape.GetLandBaseTexture
// 0x0008 (0x0008 - 0x0000)
struct TESLandscape_GetLandBaseTexture final
{
public:
	class UTESLandTexture*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESLandscape_GetLandBaseTexture) == 0x000008, "Wrong alignment on TESLandscape_GetLandBaseTexture");
static_assert(sizeof(TESLandscape_GetLandBaseTexture) == 0x000008, "Wrong size on TESLandscape_GetLandBaseTexture");
static_assert(offsetof(TESLandscape_GetLandBaseTexture, ReturnValue) == 0x000000, "Member 'TESLandscape_GetLandBaseTexture::ReturnValue' has a wrong offset!");

// Function Altar.VAltarOnlineStoreBlueprintLibrary.GetDeluxeStoreId
// 0x0010 (0x0010 - 0x0000)
struct VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId) == 0x000008, "Wrong alignment on VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId");
static_assert(sizeof(VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId) == 0x000010, "Wrong size on VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId");
static_assert(offsetof(VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId, ReturnValue) == 0x000000, "Member 'VAltarOnlineStoreBlueprintLibrary_GetDeluxeStoreId::ReturnValue' has a wrong offset!");

// Function Altar.VAltarOnlineStoreBlueprintLibrary.OpenStoreForId
// 0x0010 (0x0010 - 0x0000)
struct VAltarOnlineStoreBlueprintLibrary_OpenStoreForId final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarOnlineStoreBlueprintLibrary_OpenStoreForId) == 0x000008, "Wrong alignment on VAltarOnlineStoreBlueprintLibrary_OpenStoreForId");
static_assert(sizeof(VAltarOnlineStoreBlueprintLibrary_OpenStoreForId) == 0x000010, "Wrong size on VAltarOnlineStoreBlueprintLibrary_OpenStoreForId");
static_assert(offsetof(VAltarOnlineStoreBlueprintLibrary_OpenStoreForId, ProductId) == 0x000000, "Member 'VAltarOnlineStoreBlueprintLibrary_OpenStoreForId::ProductId' has a wrong offset!");

// Function Altar.VAltarNavigableInputKeySelector.AddNewlyReboundKeyToInputSystem
// 0x0018 (0x0018 - 0x0000)
struct VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem final
{
public:
	struct FKey                                   NewlyReboundKey;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem) == 0x000008, "Wrong alignment on VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem");
static_assert(sizeof(VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem) == 0x000018, "Wrong size on VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem");
static_assert(offsetof(VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem, NewlyReboundKey) == 0x000000, "Member 'VAltarNavigableInputKeySelector_AddNewlyReboundKeyToInputSystem::NewlyReboundKey' has a wrong offset!");

// Function Altar.VAltarNavigableInputKeySelector.GetHintKeyText
// 0x0030 (0x0030 - 0x0000)
struct VAltarNavigableInputKeySelector_GetHintKeyText final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableInputKeySelector_GetHintKeyText) == 0x000008, "Wrong alignment on VAltarNavigableInputKeySelector_GetHintKeyText");
static_assert(sizeof(VAltarNavigableInputKeySelector_GetHintKeyText) == 0x000030, "Wrong size on VAltarNavigableInputKeySelector_GetHintKeyText");
static_assert(offsetof(VAltarNavigableInputKeySelector_GetHintKeyText, InKey) == 0x000000, "Member 'VAltarNavigableInputKeySelector_GetHintKeyText::InKey' has a wrong offset!");
static_assert(offsetof(VAltarNavigableInputKeySelector_GetHintKeyText, ReturnValue) == 0x000018, "Member 'VAltarNavigableInputKeySelector_GetHintKeyText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshIconImageBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush final
{
public:
	struct FSlateBrush                            NewBrush;                                          // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush) == 0x000010, "Wrong alignment on VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush");
static_assert(sizeof(VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush) == 0x0000D0, "Wrong size on VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush");
static_assert(offsetof(VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush, NewBrush) == 0x000000, "Member 'VAltarNavigableInputKeySelector_RequestRefreshIconImageBrush::NewBrush' has a wrong offset!");

// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshIconImageVisibility
// 0x0001 (0x0001 - 0x0000)
struct VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility) == 0x000001, "Wrong alignment on VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility");
static_assert(sizeof(VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility) == 0x000001, "Wrong size on VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility");
static_assert(offsetof(VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility, NewVisibility) == 0x000000, "Member 'VAltarNavigableInputKeySelector_RequestRefreshIconImageVisibility::NewVisibility' has a wrong offset!");

// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshLabelText
// 0x0018 (0x0018 - 0x0000)
struct VAltarNavigableInputKeySelector_RequestRefreshLabelText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableInputKeySelector_RequestRefreshLabelText) == 0x000008, "Wrong alignment on VAltarNavigableInputKeySelector_RequestRefreshLabelText");
static_assert(sizeof(VAltarNavigableInputKeySelector_RequestRefreshLabelText) == 0x000018, "Wrong size on VAltarNavigableInputKeySelector_RequestRefreshLabelText");
static_assert(offsetof(VAltarNavigableInputKeySelector_RequestRefreshLabelText, NewText) == 0x000000, "Member 'VAltarNavigableInputKeySelector_RequestRefreshLabelText::NewText' has a wrong offset!");

// Function Altar.VAltarNavigableInputKeySelector.RequestRefreshLabelVisibility
// 0x0001 (0x0001 - 0x0000)
struct VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility) == 0x000001, "Wrong alignment on VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility");
static_assert(sizeof(VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility) == 0x000001, "Wrong size on VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility");
static_assert(offsetof(VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility, NewVisibility) == 0x000000, "Member 'VAltarNavigableInputKeySelector_RequestRefreshLabelVisibility::NewVisibility' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.ChangeCameraTags
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerCameraManager_ChangeCameraTags final
{
public:
	struct FGameplayTag                           NewCameraTags;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_ChangeCameraTags) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_ChangeCameraTags");
static_assert(sizeof(VAltarPlayerCameraManager_ChangeCameraTags) == 0x000008, "Wrong size on VAltarPlayerCameraManager_ChangeCameraTags");
static_assert(offsetof(VAltarPlayerCameraManager_ChangeCameraTags, NewCameraTags) == 0x000000, "Member 'VAltarPlayerCameraManager_ChangeCameraTags::NewCameraTags' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.ForceSetDialogueFOV
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerCameraManager_ForceSetDialogueFOV final
{
public:
	float                                         DesiredFOV;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInPersuasion;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarPlayerCameraManager_ForceSetDialogueFOV) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_ForceSetDialogueFOV");
static_assert(sizeof(VAltarPlayerCameraManager_ForceSetDialogueFOV) == 0x000008, "Wrong size on VAltarPlayerCameraManager_ForceSetDialogueFOV");
static_assert(offsetof(VAltarPlayerCameraManager_ForceSetDialogueFOV, DesiredFOV) == 0x000000, "Member 'VAltarPlayerCameraManager_ForceSetDialogueFOV::DesiredFOV' has a wrong offset!");
static_assert(offsetof(VAltarPlayerCameraManager_ForceSetDialogueFOV, bIsInPersuasion) == 0x000004, "Member 'VAltarPlayerCameraManager_ForceSetDialogueFOV::bIsInPersuasion' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.OnCameraTagsChanged
// 0x0040 (0x0040 - 0x0000)
struct VAltarPlayerCameraManager_OnCameraTagsChanged final
{
public:
	struct FGameplayTagContainer                  CurrentTags;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PreviousTags;                                      // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_OnCameraTagsChanged) == 0x000008, "Wrong alignment on VAltarPlayerCameraManager_OnCameraTagsChanged");
static_assert(sizeof(VAltarPlayerCameraManager_OnCameraTagsChanged) == 0x000040, "Wrong size on VAltarPlayerCameraManager_OnCameraTagsChanged");
static_assert(offsetof(VAltarPlayerCameraManager_OnCameraTagsChanged, CurrentTags) == 0x000000, "Member 'VAltarPlayerCameraManager_OnCameraTagsChanged::CurrentTags' has a wrong offset!");
static_assert(offsetof(VAltarPlayerCameraManager_OnCameraTagsChanged, PreviousTags) == 0x000020, "Member 'VAltarPlayerCameraManager_OnCameraTagsChanged::PreviousTags' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.OverrideTransitionDuration
// 0x0004 (0x0004 - 0x0000)
struct VAltarPlayerCameraManager_OverrideTransitionDuration final
{
public:
	float                                         NewOverrideDuration;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_OverrideTransitionDuration) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_OverrideTransitionDuration");
static_assert(sizeof(VAltarPlayerCameraManager_OverrideTransitionDuration) == 0x000004, "Wrong size on VAltarPlayerCameraManager_OverrideTransitionDuration");
static_assert(offsetof(VAltarPlayerCameraManager_OverrideTransitionDuration, NewOverrideDuration) == 0x000000, "Member 'VAltarPlayerCameraManager_OverrideTransitionDuration::NewOverrideDuration' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.OverrideTransitionEaseCurve
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerCameraManager_OverrideTransitionEaseCurve final
{
public:
	class UCurveFloat*                            NewOverrideCurve;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_OverrideTransitionEaseCurve) == 0x000008, "Wrong alignment on VAltarPlayerCameraManager_OverrideTransitionEaseCurve");
static_assert(sizeof(VAltarPlayerCameraManager_OverrideTransitionEaseCurve) == 0x000008, "Wrong size on VAltarPlayerCameraManager_OverrideTransitionEaseCurve");
static_assert(offsetof(VAltarPlayerCameraManager_OverrideTransitionEaseCurve, NewOverrideCurve) == 0x000000, "Member 'VAltarPlayerCameraManager_OverrideTransitionEaseCurve::NewOverrideCurve' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.SetCurrentCameraSetting
// 0x0240 (0x0240 - 0x0000)
struct VAltarPlayerCameraManager_SetCurrentCameraSetting final
{
public:
	struct FVCameraSettings                       CameraSettingsRow;                                 // 0x0000(0x0240)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_SetCurrentCameraSetting) == 0x000008, "Wrong alignment on VAltarPlayerCameraManager_SetCurrentCameraSetting");
static_assert(sizeof(VAltarPlayerCameraManager_SetCurrentCameraSetting) == 0x000240, "Wrong size on VAltarPlayerCameraManager_SetCurrentCameraSetting");
static_assert(offsetof(VAltarPlayerCameraManager_SetCurrentCameraSetting, CameraSettingsRow) == 0x000000, "Member 'VAltarPlayerCameraManager_SetCurrentCameraSetting::CameraSettingsRow' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.SetDesiredOverridePitchAngle
// 0x0004 (0x0004 - 0x0000)
struct VAltarPlayerCameraManager_SetDesiredOverridePitchAngle final
{
public:
	float                                         desiredAngle;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_SetDesiredOverridePitchAngle) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_SetDesiredOverridePitchAngle");
static_assert(sizeof(VAltarPlayerCameraManager_SetDesiredOverridePitchAngle) == 0x000004, "Wrong size on VAltarPlayerCameraManager_SetDesiredOverridePitchAngle");
static_assert(offsetof(VAltarPlayerCameraManager_SetDesiredOverridePitchAngle, desiredAngle) == 0x000000, "Member 'VAltarPlayerCameraManager_SetDesiredOverridePitchAngle::desiredAngle' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.TakeControlOfCameraPitch
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerCameraManager_TakeControlOfCameraPitch final
{
public:
	bool                                          bShouldTakeControl;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_TakeControlOfCameraPitch) == 0x000001, "Wrong alignment on VAltarPlayerCameraManager_TakeControlOfCameraPitch");
static_assert(sizeof(VAltarPlayerCameraManager_TakeControlOfCameraPitch) == 0x000001, "Wrong size on VAltarPlayerCameraManager_TakeControlOfCameraPitch");
static_assert(offsetof(VAltarPlayerCameraManager_TakeControlOfCameraPitch, bShouldTakeControl) == 0x000000, "Member 'VAltarPlayerCameraManager_TakeControlOfCameraPitch::bShouldTakeControl' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.UpdateCamera
// 0x0004 (0x0004 - 0x0000)
struct VAltarPlayerCameraManager_UpdateCamera final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_UpdateCamera) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_UpdateCamera");
static_assert(sizeof(VAltarPlayerCameraManager_UpdateCamera) == 0x000004, "Wrong size on VAltarPlayerCameraManager_UpdateCamera");
static_assert(offsetof(VAltarPlayerCameraManager_UpdateCamera, DeltaTime) == 0x000000, "Member 'VAltarPlayerCameraManager_UpdateCamera::DeltaTime' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.UpdateDialogueCamera
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerCameraManager_UpdateDialogueCamera final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInPersuasion;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarPlayerCameraManager_UpdateDialogueCamera) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_UpdateDialogueCamera");
static_assert(sizeof(VAltarPlayerCameraManager_UpdateDialogueCamera) == 0x000008, "Wrong size on VAltarPlayerCameraManager_UpdateDialogueCamera");
static_assert(offsetof(VAltarPlayerCameraManager_UpdateDialogueCamera, DeltaTime) == 0x000000, "Member 'VAltarPlayerCameraManager_UpdateDialogueCamera::DeltaTime' has a wrong offset!");
static_assert(offsetof(VAltarPlayerCameraManager_UpdateDialogueCamera, bIsInPersuasion) == 0x000004, "Member 'VAltarPlayerCameraManager_UpdateDialogueCamera::bIsInPersuasion' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.CanEnterInVanityCamera
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerCameraManager_CanEnterInVanityCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_CanEnterInVanityCamera) == 0x000001, "Wrong alignment on VAltarPlayerCameraManager_CanEnterInVanityCamera");
static_assert(sizeof(VAltarPlayerCameraManager_CanEnterInVanityCamera) == 0x000001, "Wrong size on VAltarPlayerCameraManager_CanEnterInVanityCamera");
static_assert(offsetof(VAltarPlayerCameraManager_CanEnterInVanityCamera, ReturnValue) == 0x000000, "Member 'VAltarPlayerCameraManager_CanEnterInVanityCamera::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.GetCurrentCameraTag
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerCameraManager_GetCurrentCameraTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_GetCurrentCameraTag) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_GetCurrentCameraTag");
static_assert(sizeof(VAltarPlayerCameraManager_GetCurrentCameraTag) == 0x000008, "Wrong size on VAltarPlayerCameraManager_GetCurrentCameraTag");
static_assert(offsetof(VAltarPlayerCameraManager_GetCurrentCameraTag, ReturnValue) == 0x000000, "Member 'VAltarPlayerCameraManager_GetCurrentCameraTag::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.GetLastCameraTag
// 0x0008 (0x0008 - 0x0000)
struct VAltarPlayerCameraManager_GetLastCameraTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_GetLastCameraTag) == 0x000004, "Wrong alignment on VAltarPlayerCameraManager_GetLastCameraTag");
static_assert(sizeof(VAltarPlayerCameraManager_GetLastCameraTag) == 0x000008, "Wrong size on VAltarPlayerCameraManager_GetLastCameraTag");
static_assert(offsetof(VAltarPlayerCameraManager_GetLastCameraTag, ReturnValue) == 0x000000, "Member 'VAltarPlayerCameraManager_GetLastCameraTag::ReturnValue' has a wrong offset!");

// Function Altar.VAltarPlayerCameraManager.HasTagsToEnterVanityCamera
// 0x0001 (0x0001 - 0x0000)
struct VAltarPlayerCameraManager_HasTagsToEnterVanityCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarPlayerCameraManager_HasTagsToEnterVanityCamera) == 0x000001, "Wrong alignment on VAltarPlayerCameraManager_HasTagsToEnterVanityCamera");
static_assert(sizeof(VAltarPlayerCameraManager_HasTagsToEnterVanityCamera) == 0x000001, "Wrong size on VAltarPlayerCameraManager_HasTagsToEnterVanityCamera");
static_assert(offsetof(VAltarPlayerCameraManager_HasTagsToEnterVanityCamera, ReturnValue) == 0x000000, "Member 'VAltarPlayerCameraManager_HasTagsToEnterVanityCamera::ReturnValue' has a wrong offset!");

// Function Altar.VUIStateSubsystem.AddOrRemoveHUDVisibilityFlag
// 0x0003 (0x0003 - 0x0000)
struct VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag final
{
public:
	EHUDVisibility                                Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdd;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag) == 0x000001, "Wrong alignment on VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag");
static_assert(sizeof(VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag) == 0x000003, "Wrong size on VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag");
static_assert(offsetof(VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag, Flag) == 0x000000, "Member 'VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag::Flag' has a wrong offset!");
static_assert(offsetof(VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag, bAdd) == 0x000001, "Member 'VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag::bAdd' has a wrong offset!");
static_assert(offsetof(VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag, ReturnValue) == 0x000002, "Member 'VUIStateSubsystem_AddOrRemoveHUDVisibilityFlag::ReturnValue' has a wrong offset!");

// Function Altar.VUIStateSubsystem.GetGlobalVisibility
// 0x0001 (0x0001 - 0x0000)
struct VUIStateSubsystem_GetGlobalVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUIStateSubsystem_GetGlobalVisibility) == 0x000001, "Wrong alignment on VUIStateSubsystem_GetGlobalVisibility");
static_assert(sizeof(VUIStateSubsystem_GetGlobalVisibility) == 0x000001, "Wrong size on VUIStateSubsystem_GetGlobalVisibility");
static_assert(offsetof(VUIStateSubsystem_GetGlobalVisibility, ReturnValue) == 0x000000, "Member 'VUIStateSubsystem_GetGlobalVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VUIStateSubsystem.GetHUDVisibilityMask
// 0x0001 (0x0001 - 0x0000)
struct VUIStateSubsystem_GetHUDVisibilityMask final
{
public:
	EHUDVisibility                                ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUIStateSubsystem_GetHUDVisibilityMask) == 0x000001, "Wrong alignment on VUIStateSubsystem_GetHUDVisibilityMask");
static_assert(sizeof(VUIStateSubsystem_GetHUDVisibilityMask) == 0x000001, "Wrong size on VUIStateSubsystem_GetHUDVisibilityMask");
static_assert(offsetof(VUIStateSubsystem_GetHUDVisibilityMask, ReturnValue) == 0x000000, "Member 'VUIStateSubsystem_GetHUDVisibilityMask::ReturnValue' has a wrong offset!");

// Function Altar.VUIStateSubsystem.HUDVisibilityContains
// 0x0002 (0x0002 - 0x0000)
struct VUIStateSubsystem_HUDVisibilityContains final
{
public:
	EHUDVisibility                                Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUIStateSubsystem_HUDVisibilityContains) == 0x000001, "Wrong alignment on VUIStateSubsystem_HUDVisibilityContains");
static_assert(sizeof(VUIStateSubsystem_HUDVisibilityContains) == 0x000002, "Wrong size on VUIStateSubsystem_HUDVisibilityContains");
static_assert(offsetof(VUIStateSubsystem_HUDVisibilityContains, Flag) == 0x000000, "Member 'VUIStateSubsystem_HUDVisibilityContains::Flag' has a wrong offset!");
static_assert(offsetof(VUIStateSubsystem_HUDVisibilityContains, ReturnValue) == 0x000001, "Member 'VUIStateSubsystem_HUDVisibilityContains::ReturnValue' has a wrong offset!");

// Function Altar.VUIStateSubsystem.SetGlobalVisibility
// 0x0002 (0x0002 - 0x0000)
struct VUIStateSubsystem_SetGlobalVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUIStateSubsystem_SetGlobalVisibility) == 0x000001, "Wrong alignment on VUIStateSubsystem_SetGlobalVisibility");
static_assert(sizeof(VUIStateSubsystem_SetGlobalVisibility) == 0x000002, "Wrong size on VUIStateSubsystem_SetGlobalVisibility");
static_assert(offsetof(VUIStateSubsystem_SetGlobalVisibility, bVisible) == 0x000000, "Member 'VUIStateSubsystem_SetGlobalVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(VUIStateSubsystem_SetGlobalVisibility, ReturnValue) == 0x000001, "Member 'VUIStateSubsystem_SetGlobalVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.ApplyDeviceProperty
// 0x0008 (0x0008 - 0x0000)
struct VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty final
{
public:
	TSubclassOf<class UInputDeviceProperty>       DeviceProp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty) == 0x000008, "Wrong alignment on VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty");
static_assert(sizeof(VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty) == 0x000008, "Wrong size on VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty");
static_assert(offsetof(VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty, DeviceProp) == 0x000000, "Member 'VAltarHapticFeedbacksBlueprintLibrary_ApplyDeviceProperty::DeviceProp' has a wrong offset!");

// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.IsDevicePropertyActive
// 0x0010 (0x0010 - 0x0000)
struct VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive final
{
public:
	TSubclassOf<class UInputDeviceProperty>       DeviceProp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive) == 0x000008, "Wrong alignment on VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive");
static_assert(sizeof(VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive) == 0x000010, "Wrong size on VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive");
static_assert(offsetof(VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive, DeviceProp) == 0x000000, "Member 'VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive::DeviceProp' has a wrong offset!");
static_assert(offsetof(VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive, ReturnValue) == 0x000008, "Member 'VAltarHapticFeedbacksBlueprintLibrary_IsDevicePropertyActive::ReturnValue' has a wrong offset!");

// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.OnFreezeHandleHaptics
// 0x0001 (0x0001 - 0x0000)
struct VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics final
{
public:
	bool                                          bIsFreezing;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics) == 0x000001, "Wrong alignment on VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics");
static_assert(sizeof(VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics) == 0x000001, "Wrong size on VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics");
static_assert(offsetof(VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics, bIsFreezing) == 0x000000, "Member 'VAltarHapticFeedbacksBlueprintLibrary_OnFreezeHandleHaptics::bIsFreezing' has a wrong offset!");

// Function Altar.VAltarHapticFeedbacksBlueprintLibrary.RemoveDeviceProperty
// 0x0008 (0x0008 - 0x0000)
struct VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty final
{
public:
	TSubclassOf<class UInputDeviceProperty>       DeviceProp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty) == 0x000008, "Wrong alignment on VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty");
static_assert(sizeof(VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty) == 0x000008, "Wrong size on VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty");
static_assert(offsetof(VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty, DeviceProp) == 0x000000, "Member 'VAltarHapticFeedbacksBlueprintLibrary_RemoveDeviceProperty::DeviceProp' has a wrong offset!");

// Function Altar.VAIProcedureExecution_TRAVEL.GetAcceptanceRadius
// 0x0004 (0x0004 - 0x0000)
struct VAIProcedureExecution_TRAVEL_GetAcceptanceRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_TRAVEL_GetAcceptanceRadius) == 0x000004, "Wrong alignment on VAIProcedureExecution_TRAVEL_GetAcceptanceRadius");
static_assert(sizeof(VAIProcedureExecution_TRAVEL_GetAcceptanceRadius) == 0x000004, "Wrong size on VAIProcedureExecution_TRAVEL_GetAcceptanceRadius");
static_assert(offsetof(VAIProcedureExecution_TRAVEL_GetAcceptanceRadius, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_TRAVEL_GetAcceptanceRadius::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyIngredientItem.SetProperties
// 0x0040 (0x0040 - 0x0000)
struct VLegacyIngredientItem_SetProperties final
{
public:
	struct FLegacyIngredientItemProperties        Value;                                             // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyIngredientItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyIngredientItem_SetProperties");
static_assert(sizeof(VLegacyIngredientItem_SetProperties) == 0x000040, "Wrong size on VLegacyIngredientItem_SetProperties");
static_assert(offsetof(VLegacyIngredientItem_SetProperties, Value) == 0x000000, "Member 'VLegacyIngredientItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyIngredientItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyIngredientItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyIngredientItem_GetIndex) == 0x000004, "Wrong alignment on VLegacyIngredientItem_GetIndex");
static_assert(sizeof(VLegacyIngredientItem_GetIndex) == 0x000004, "Wrong size on VLegacyIngredientItem_GetIndex");
static_assert(offsetof(VLegacyIngredientItem_GetIndex, ReturnValue) == 0x000000, "Member 'VLegacyIngredientItem_GetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyIngredientItem.GetProperties
// 0x0040 (0x0040 - 0x0000)
struct VLegacyIngredientItem_GetProperties final
{
public:
	struct FLegacyIngredientItemProperties        ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyIngredientItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyIngredientItem_GetProperties");
static_assert(sizeof(VLegacyIngredientItem_GetProperties) == 0x000040, "Wrong size on VLegacyIngredientItem_GetProperties");
static_assert(offsetof(VLegacyIngredientItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyIngredientItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.ActionStateStartBehavior.StartBehaviorFromTag
// 0x0020 (0x0020 - 0x0000)
struct ActionStateStartBehavior_StartBehaviorFromTag final
{
public:
	struct FGameplayTag                           BehaviorTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActorBehaviorBase*                    StartedBehavior;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAltarActionState*                     OuterState;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionStateStartBehavior*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionStateStartBehavior_StartBehaviorFromTag) == 0x000008, "Wrong alignment on ActionStateStartBehavior_StartBehaviorFromTag");
static_assert(sizeof(ActionStateStartBehavior_StartBehaviorFromTag) == 0x000020, "Wrong size on ActionStateStartBehavior_StartBehaviorFromTag");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTag, BehaviorTag) == 0x000000, "Member 'ActionStateStartBehavior_StartBehaviorFromTag::BehaviorTag' has a wrong offset!");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTag, StartedBehavior) == 0x000008, "Member 'ActionStateStartBehavior_StartBehaviorFromTag::StartedBehavior' has a wrong offset!");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTag, OuterState) == 0x000010, "Member 'ActionStateStartBehavior_StartBehaviorFromTag::OuterState' has a wrong offset!");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTag, ReturnValue) == 0x000018, "Member 'ActionStateStartBehavior_StartBehaviorFromTag::ReturnValue' has a wrong offset!");

// Function Altar.ActionStateStartBehavior.StartBehaviorFromTemplate
// 0x0020 (0x0020 - 0x0000)
struct ActionStateStartBehavior_StartBehaviorFromTemplate final
{
public:
	class UVActorBehaviorBase*                    BehaviorTemplate;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActorBehaviorBase*                    StartedBehavior;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAltarActionState*                     OuterState;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionStateStartBehavior*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionStateStartBehavior_StartBehaviorFromTemplate) == 0x000008, "Wrong alignment on ActionStateStartBehavior_StartBehaviorFromTemplate");
static_assert(sizeof(ActionStateStartBehavior_StartBehaviorFromTemplate) == 0x000020, "Wrong size on ActionStateStartBehavior_StartBehaviorFromTemplate");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTemplate, BehaviorTemplate) == 0x000000, "Member 'ActionStateStartBehavior_StartBehaviorFromTemplate::BehaviorTemplate' has a wrong offset!");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTemplate, StartedBehavior) == 0x000008, "Member 'ActionStateStartBehavior_StartBehaviorFromTemplate::StartedBehavior' has a wrong offset!");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTemplate, OuterState) == 0x000010, "Member 'ActionStateStartBehavior_StartBehaviorFromTemplate::OuterState' has a wrong offset!");
static_assert(offsetof(ActionStateStartBehavior_StartBehaviorFromTemplate, ReturnValue) == 0x000018, "Member 'ActionStateStartBehavior_StartBehaviorFromTemplate::ReturnValue' has a wrong offset!");

// Function Altar.ActionStateStartBehavior.OnBehaviorEnded
// 0x0001 (0x0001 - 0x0000)
struct ActionStateStartBehavior_OnBehaviorEnded final
{
public:
	bool                                          bIsCanceled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionStateStartBehavior_OnBehaviorEnded) == 0x000001, "Wrong alignment on ActionStateStartBehavior_OnBehaviorEnded");
static_assert(sizeof(ActionStateStartBehavior_OnBehaviorEnded) == 0x000001, "Wrong size on ActionStateStartBehavior_OnBehaviorEnded");
static_assert(offsetof(ActionStateStartBehavior_OnBehaviorEnded, bIsCanceled) == 0x000000, "Member 'ActionStateStartBehavior_OnBehaviorEnded::bIsCanceled' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.Internal_OnVideoOpenned
// 0x0010 (0x0010 - 0x0000)
struct VAltarBinkMediaPlayer_Internal_OnVideoOpenned final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_Internal_OnVideoOpenned) == 0x000008, "Wrong alignment on VAltarBinkMediaPlayer_Internal_OnVideoOpenned");
static_assert(sizeof(VAltarBinkMediaPlayer_Internal_OnVideoOpenned) == 0x000010, "Wrong size on VAltarBinkMediaPlayer_Internal_OnVideoOpenned");
static_assert(offsetof(VAltarBinkMediaPlayer_Internal_OnVideoOpenned, OpenedUrl) == 0x000000, "Member 'VAltarBinkMediaPlayer_Internal_OnVideoOpenned::OpenedUrl' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.OnStartNextSubtitle
// 0x0018 (0x0018 - 0x0000)
struct VAltarBinkMediaPlayer_OnStartNextSubtitle final
{
public:
	class FText                                   SubtitleText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_OnStartNextSubtitle) == 0x000008, "Wrong alignment on VAltarBinkMediaPlayer_OnStartNextSubtitle");
static_assert(sizeof(VAltarBinkMediaPlayer_OnStartNextSubtitle) == 0x000018, "Wrong size on VAltarBinkMediaPlayer_OnStartNextSubtitle");
static_assert(offsetof(VAltarBinkMediaPlayer_OnStartNextSubtitle, SubtitleText) == 0x000000, "Member 'VAltarBinkMediaPlayer_OnStartNextSubtitle::SubtitleText' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.Open
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_Open final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_Open) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_Open");
static_assert(sizeof(VAltarBinkMediaPlayer_Open) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_Open");
static_assert(offsetof(VAltarBinkMediaPlayer_Open, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_Open::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.OpenUrl
// 0x0018 (0x0018 - 0x0000)
struct VAltarBinkMediaPlayer_OpenUrl final
{
public:
	class FString                                 NewUrl;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarBinkMediaPlayer_OpenUrl) == 0x000008, "Wrong alignment on VAltarBinkMediaPlayer_OpenUrl");
static_assert(sizeof(VAltarBinkMediaPlayer_OpenUrl) == 0x000018, "Wrong size on VAltarBinkMediaPlayer_OpenUrl");
static_assert(offsetof(VAltarBinkMediaPlayer_OpenUrl, NewUrl) == 0x000000, "Member 'VAltarBinkMediaPlayer_OpenUrl::NewUrl' has a wrong offset!");
static_assert(offsetof(VAltarBinkMediaPlayer_OpenUrl, ReturnValue) == 0x000010, "Member 'VAltarBinkMediaPlayer_OpenUrl::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.Pause
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_Pause) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_Pause");
static_assert(sizeof(VAltarBinkMediaPlayer_Pause) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_Pause");
static_assert(offsetof(VAltarBinkMediaPlayer_Pause, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_Pause::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.Play
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_Play final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_Play) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_Play");
static_assert(sizeof(VAltarBinkMediaPlayer_Play) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_Play");
static_assert(offsetof(VAltarBinkMediaPlayer_Play, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_Play::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.PlayFromStart
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_PlayFromStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_PlayFromStart) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_PlayFromStart");
static_assert(sizeof(VAltarBinkMediaPlayer_PlayFromStart) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_PlayFromStart");
static_assert(offsetof(VAltarBinkMediaPlayer_PlayFromStart, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_PlayFromStart::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.PlayFromTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct VAltarBinkMediaPlayer_PlayFromTimeStamp final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarBinkMediaPlayer_PlayFromTimeStamp) == 0x000004, "Wrong alignment on VAltarBinkMediaPlayer_PlayFromTimeStamp");
static_assert(sizeof(VAltarBinkMediaPlayer_PlayFromTimeStamp) == 0x000008, "Wrong size on VAltarBinkMediaPlayer_PlayFromTimeStamp");
static_assert(offsetof(VAltarBinkMediaPlayer_PlayFromTimeStamp, Timestamp) == 0x000000, "Member 'VAltarBinkMediaPlayer_PlayFromTimeStamp::Timestamp' has a wrong offset!");
static_assert(offsetof(VAltarBinkMediaPlayer_PlayFromTimeStamp, ReturnValue) == 0x000004, "Member 'VAltarBinkMediaPlayer_PlayFromTimeStamp::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.Prepare
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_Prepare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_Prepare) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_Prepare");
static_assert(sizeof(VAltarBinkMediaPlayer_Prepare) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_Prepare");
static_assert(offsetof(VAltarBinkMediaPlayer_Prepare, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_Prepare::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.Seek
// 0x0008 (0x0008 - 0x0000)
struct VAltarBinkMediaPlayer_Seek final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarBinkMediaPlayer_Seek) == 0x000004, "Wrong alignment on VAltarBinkMediaPlayer_Seek");
static_assert(sizeof(VAltarBinkMediaPlayer_Seek) == 0x000008, "Wrong size on VAltarBinkMediaPlayer_Seek");
static_assert(offsetof(VAltarBinkMediaPlayer_Seek, Timestamp) == 0x000000, "Member 'VAltarBinkMediaPlayer_Seek::Timestamp' has a wrong offset!");
static_assert(offsetof(VAltarBinkMediaPlayer_Seek, ReturnValue) == 0x000004, "Member 'VAltarBinkMediaPlayer_Seek::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.GetCurrentPath
// 0x0010 (0x0010 - 0x0000)
struct VAltarBinkMediaPlayer_GetCurrentPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_GetCurrentPath) == 0x000008, "Wrong alignment on VAltarBinkMediaPlayer_GetCurrentPath");
static_assert(sizeof(VAltarBinkMediaPlayer_GetCurrentPath) == 0x000010, "Wrong size on VAltarBinkMediaPlayer_GetCurrentPath");
static_assert(offsetof(VAltarBinkMediaPlayer_GetCurrentPath, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_GetCurrentPath::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.HaveReachedFadeOutTimer
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_HaveReachedFadeOutTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_HaveReachedFadeOutTimer) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_HaveReachedFadeOutTimer");
static_assert(sizeof(VAltarBinkMediaPlayer_HaveReachedFadeOutTimer) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_HaveReachedFadeOutTimer");
static_assert(offsetof(VAltarBinkMediaPlayer_HaveReachedFadeOutTimer, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_HaveReachedFadeOutTimer::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.HaveReachedNextEndTimer
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_HaveReachedNextEndTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_HaveReachedNextEndTimer) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_HaveReachedNextEndTimer");
static_assert(sizeof(VAltarBinkMediaPlayer_HaveReachedNextEndTimer) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_HaveReachedNextEndTimer");
static_assert(offsetof(VAltarBinkMediaPlayer_HaveReachedNextEndTimer, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_HaveReachedNextEndTimer::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.HaveReachedNextStartTimer
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_HaveReachedNextStartTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_HaveReachedNextStartTimer) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_HaveReachedNextStartTimer");
static_assert(sizeof(VAltarBinkMediaPlayer_HaveReachedNextStartTimer) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_HaveReachedNextStartTimer");
static_assert(offsetof(VAltarBinkMediaPlayer_HaveReachedNextStartTimer, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_HaveReachedNextStartTimer::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.IsOpened
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_IsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_IsOpened) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_IsOpened");
static_assert(sizeof(VAltarBinkMediaPlayer_IsOpened) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_IsOpened");
static_assert(offsetof(VAltarBinkMediaPlayer_IsOpened, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_IsOpened::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBinkMediaPlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct VAltarBinkMediaPlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBinkMediaPlayer_IsPlaying) == 0x000001, "Wrong alignment on VAltarBinkMediaPlayer_IsPlaying");
static_assert(sizeof(VAltarBinkMediaPlayer_IsPlaying) == 0x000001, "Wrong size on VAltarBinkMediaPlayer_IsPlaying");
static_assert(offsetof(VAltarBinkMediaPlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'VAltarBinkMediaPlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function Altar.VLRPrepareAttackAnimInstance.OnPrepareAttackEnter
// 0x0020 (0x0020 - 0x0000)
struct VLRPrepareAttackAnimInstance_OnPrepareAttackEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLRPrepareAttackAnimInstance_OnPrepareAttackEnter) == 0x000008, "Wrong alignment on VLRPrepareAttackAnimInstance_OnPrepareAttackEnter");
static_assert(sizeof(VLRPrepareAttackAnimInstance_OnPrepareAttackEnter) == 0x000020, "Wrong size on VLRPrepareAttackAnimInstance_OnPrepareAttackEnter");
static_assert(offsetof(VLRPrepareAttackAnimInstance_OnPrepareAttackEnter, Context) == 0x000000, "Member 'VLRPrepareAttackAnimInstance_OnPrepareAttackEnter::Context' has a wrong offset!");
static_assert(offsetof(VLRPrepareAttackAnimInstance_OnPrepareAttackEnter, Node) == 0x000010, "Member 'VLRPrepareAttackAnimInstance_OnPrepareAttackEnter::Node' has a wrong offset!");

// Function Altar.TESRace.GetRaceBodyBySex
// 0x0100 (0x0100 - 0x0000)
struct TESRace_GetRaceBodyBySex final
{
public:
	ECharacterSex                                 Sex;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BodyIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRaceBody                              ReturnValue;                                       // 0x0008(0x00F8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESRace_GetRaceBodyBySex) == 0x000008, "Wrong alignment on TESRace_GetRaceBodyBySex");
static_assert(sizeof(TESRace_GetRaceBodyBySex) == 0x000100, "Wrong size on TESRace_GetRaceBodyBySex");
static_assert(offsetof(TESRace_GetRaceBodyBySex, Sex) == 0x000000, "Member 'TESRace_GetRaceBodyBySex::Sex' has a wrong offset!");
static_assert(offsetof(TESRace_GetRaceBodyBySex, BodyIndex) == 0x000004, "Member 'TESRace_GetRaceBodyBySex::BodyIndex' has a wrong offset!");
static_assert(offsetof(TESRace_GetRaceBodyBySex, ReturnValue) == 0x000008, "Member 'TESRace_GetRaceBodyBySex::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIHelper.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct VAltarUIHelper_CopyToClipboard final
{
public:
	class FString                                 InTextToCopy;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_CopyToClipboard) == 0x000008, "Wrong alignment on VAltarUIHelper_CopyToClipboard");
static_assert(sizeof(VAltarUIHelper_CopyToClipboard) == 0x000010, "Wrong size on VAltarUIHelper_CopyToClipboard");
static_assert(offsetof(VAltarUIHelper_CopyToClipboard, InTextToCopy) == 0x000000, "Member 'VAltarUIHelper_CopyToClipboard::InTextToCopy' has a wrong offset!");

// Function Altar.VAltarUIHelper.DeprojectActorViewScreenPointToWorld
// 0x0050 (0x0050 - 0x0000)
struct VAltarUIHelper_DeprojectActorViewScreenPointToWorld final
{
public:
	class UCameraComponent*                       InCameraComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld) == 0x000008, "Wrong alignment on VAltarUIHelper_DeprojectActorViewScreenPointToWorld");
static_assert(sizeof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld) == 0x000050, "Wrong size on VAltarUIHelper_DeprojectActorViewScreenPointToWorld");
static_assert(offsetof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld, InCameraComponent) == 0x000000, "Member 'VAltarUIHelper_DeprojectActorViewScreenPointToWorld::InCameraComponent' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld, ScreenPosition) == 0x000008, "Member 'VAltarUIHelper_DeprojectActorViewScreenPointToWorld::ScreenPosition' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld, WorldPosition) == 0x000018, "Member 'VAltarUIHelper_DeprojectActorViewScreenPointToWorld::WorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld, WorldDirection) == 0x000030, "Member 'VAltarUIHelper_DeprojectActorViewScreenPointToWorld::WorldDirection' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_DeprojectActorViewScreenPointToWorld, ReturnValue) == 0x000048, "Member 'VAltarUIHelper_DeprojectActorViewScreenPointToWorld::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIHelper.DisplayCreditsWidget
// 0x000C (0x000C - 0x0000)
struct VAltarUIHelper_DisplayCreditsWidget final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreditMenuName;                                    // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_DisplayCreditsWidget) == 0x000004, "Wrong alignment on VAltarUIHelper_DisplayCreditsWidget");
static_assert(sizeof(VAltarUIHelper_DisplayCreditsWidget) == 0x00000C, "Wrong size on VAltarUIHelper_DisplayCreditsWidget");
static_assert(offsetof(VAltarUIHelper_DisplayCreditsWidget, bNewVisibility) == 0x000000, "Member 'VAltarUIHelper_DisplayCreditsWidget::bNewVisibility' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_DisplayCreditsWidget, CreditMenuName) == 0x000004, "Member 'VAltarUIHelper_DisplayCreditsWidget::CreditMenuName' has a wrong offset!");

// Function Altar.VAltarUIHelper.FindComponentByName
// 0x0020 (0x0020 - 0x0000)
struct VAltarUIHelper_FindComponentByName final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_FindComponentByName) == 0x000008, "Wrong alignment on VAltarUIHelper_FindComponentByName");
static_assert(sizeof(VAltarUIHelper_FindComponentByName) == 0x000020, "Wrong size on VAltarUIHelper_FindComponentByName");
static_assert(offsetof(VAltarUIHelper_FindComponentByName, InActor) == 0x000000, "Member 'VAltarUIHelper_FindComponentByName::InActor' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_FindComponentByName, ComponentClass) == 0x000008, "Member 'VAltarUIHelper_FindComponentByName::ComponentClass' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_FindComponentByName, InName) == 0x000010, "Member 'VAltarUIHelper_FindComponentByName::InName' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_FindComponentByName, ReturnValue) == 0x000018, "Member 'VAltarUIHelper_FindComponentByName::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIHelper.GetActorBoundsRestricted
// 0x0068 (0x0068 - 0x0000)
struct VAltarUIHelper_GetActorBoundsRestricted final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         ExcludedClasses;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedActorComponentNames;                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bOnlyCollidingComponents;                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutOrigin;                                         // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBoxExtent;                                      // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFromChildActors;                           // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarUIHelper_GetActorBoundsRestricted) == 0x000008, "Wrong alignment on VAltarUIHelper_GetActorBoundsRestricted");
static_assert(sizeof(VAltarUIHelper_GetActorBoundsRestricted) == 0x000068, "Wrong size on VAltarUIHelper_GetActorBoundsRestricted");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, InActor) == 0x000000, "Member 'VAltarUIHelper_GetActorBoundsRestricted::InActor' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, ExcludedClasses) == 0x000008, "Member 'VAltarUIHelper_GetActorBoundsRestricted::ExcludedClasses' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, ExcludedActorComponentNames) == 0x000018, "Member 'VAltarUIHelper_GetActorBoundsRestricted::ExcludedActorComponentNames' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, bOnlyCollidingComponents) == 0x000028, "Member 'VAltarUIHelper_GetActorBoundsRestricted::bOnlyCollidingComponents' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, OutOrigin) == 0x000030, "Member 'VAltarUIHelper_GetActorBoundsRestricted::OutOrigin' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, OutBoxExtent) == 0x000048, "Member 'VAltarUIHelper_GetActorBoundsRestricted::OutBoxExtent' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetActorBoundsRestricted, bIncludeFromChildActors) == 0x000060, "Member 'VAltarUIHelper_GetActorBoundsRestricted::bIncludeFromChildActors' has a wrong offset!");

// Function Altar.VAltarUIHelper.GetGreatestCommonDivisor
// 0x000C (0x000C - 0x0000)
struct VAltarUIHelper_GetGreatestCommonDivisor final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_GetGreatestCommonDivisor) == 0x000004, "Wrong alignment on VAltarUIHelper_GetGreatestCommonDivisor");
static_assert(sizeof(VAltarUIHelper_GetGreatestCommonDivisor) == 0x00000C, "Wrong size on VAltarUIHelper_GetGreatestCommonDivisor");
static_assert(offsetof(VAltarUIHelper_GetGreatestCommonDivisor, A) == 0x000000, "Member 'VAltarUIHelper_GetGreatestCommonDivisor::A' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetGreatestCommonDivisor, B) == 0x000004, "Member 'VAltarUIHelper_GetGreatestCommonDivisor::B' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_GetGreatestCommonDivisor, ReturnValue) == 0x000008, "Member 'VAltarUIHelper_GetGreatestCommonDivisor::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIHelper.IsBox2DInsideBox2D
// 0x0058 (0x0058 - 0x0000)
struct VAltarUIHelper_IsBox2DInsideBox2D final
{
public:
	struct FBox2D                                 InBox;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 InEnclosingBox;                                    // 0x0028(0x0028)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarUIHelper_IsBox2DInsideBox2D) == 0x000008, "Wrong alignment on VAltarUIHelper_IsBox2DInsideBox2D");
static_assert(sizeof(VAltarUIHelper_IsBox2DInsideBox2D) == 0x000058, "Wrong size on VAltarUIHelper_IsBox2DInsideBox2D");
static_assert(offsetof(VAltarUIHelper_IsBox2DInsideBox2D, InBox) == 0x000000, "Member 'VAltarUIHelper_IsBox2DInsideBox2D::InBox' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_IsBox2DInsideBox2D, InEnclosingBox) == 0x000028, "Member 'VAltarUIHelper_IsBox2DInsideBox2D::InEnclosingBox' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_IsBox2DInsideBox2D, ReturnValue) == 0x000050, "Member 'VAltarUIHelper_IsBox2DInsideBox2D::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIHelper.IsPointInsideBox2D
// 0x0040 (0x0040 - 0x0000)
struct VAltarUIHelper_IsPointInsideBox2D final
{
public:
	struct FBox2D                                 InBox;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InPointToCheck;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarUIHelper_IsPointInsideBox2D) == 0x000008, "Wrong alignment on VAltarUIHelper_IsPointInsideBox2D");
static_assert(sizeof(VAltarUIHelper_IsPointInsideBox2D) == 0x000040, "Wrong size on VAltarUIHelper_IsPointInsideBox2D");
static_assert(offsetof(VAltarUIHelper_IsPointInsideBox2D, InBox) == 0x000000, "Member 'VAltarUIHelper_IsPointInsideBox2D::InBox' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_IsPointInsideBox2D, InPointToCheck) == 0x000028, "Member 'VAltarUIHelper_IsPointInsideBox2D::InPointToCheck' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_IsPointInsideBox2D, ReturnValue) == 0x000038, "Member 'VAltarUIHelper_IsPointInsideBox2D::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUIHelper.MarkActorComponentRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct VAltarUIHelper_MarkActorComponentRenderStateDirty final
{
public:
	class UActorComponent*                        InActorComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_MarkActorComponentRenderStateDirty) == 0x000008, "Wrong alignment on VAltarUIHelper_MarkActorComponentRenderStateDirty");
static_assert(sizeof(VAltarUIHelper_MarkActorComponentRenderStateDirty) == 0x000008, "Wrong size on VAltarUIHelper_MarkActorComponentRenderStateDirty");
static_assert(offsetof(VAltarUIHelper_MarkActorComponentRenderStateDirty, InActorComponent) == 0x000000, "Member 'VAltarUIHelper_MarkActorComponentRenderStateDirty::InActorComponent' has a wrong offset!");

// Function Altar.VAltarUIHelper.SetSceneComponentHiddenInGameRestricted
// 0x0020 (0x0020 - 0x0000)
struct VAltarUIHelper_SetSceneComponentHiddenInGameRestricted final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewHidden;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ExcludedClasses;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_SetSceneComponentHiddenInGameRestricted) == 0x000008, "Wrong alignment on VAltarUIHelper_SetSceneComponentHiddenInGameRestricted");
static_assert(sizeof(VAltarUIHelper_SetSceneComponentHiddenInGameRestricted) == 0x000020, "Wrong size on VAltarUIHelper_SetSceneComponentHiddenInGameRestricted");
static_assert(offsetof(VAltarUIHelper_SetSceneComponentHiddenInGameRestricted, InSceneComponent) == 0x000000, "Member 'VAltarUIHelper_SetSceneComponentHiddenInGameRestricted::InSceneComponent' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_SetSceneComponentHiddenInGameRestricted, bNewHidden) == 0x000008, "Member 'VAltarUIHelper_SetSceneComponentHiddenInGameRestricted::bNewHidden' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_SetSceneComponentHiddenInGameRestricted, bPropagateToChildren) == 0x000009, "Member 'VAltarUIHelper_SetSceneComponentHiddenInGameRestricted::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_SetSceneComponentHiddenInGameRestricted, ExcludedClasses) == 0x000010, "Member 'VAltarUIHelper_SetSceneComponentHiddenInGameRestricted::ExcludedClasses' has a wrong offset!");

// Function Altar.VAltarUIHelper.SetVisibilityRestricted
// 0x0020 (0x0020 - 0x0000)
struct VAltarUIHelper_SetVisibilityRestricted final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisibility;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ExcludedClasses;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUIHelper_SetVisibilityRestricted) == 0x000008, "Wrong alignment on VAltarUIHelper_SetVisibilityRestricted");
static_assert(sizeof(VAltarUIHelper_SetVisibilityRestricted) == 0x000020, "Wrong size on VAltarUIHelper_SetVisibilityRestricted");
static_assert(offsetof(VAltarUIHelper_SetVisibilityRestricted, InSceneComponent) == 0x000000, "Member 'VAltarUIHelper_SetVisibilityRestricted::InSceneComponent' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_SetVisibilityRestricted, bNewVisibility) == 0x000008, "Member 'VAltarUIHelper_SetVisibilityRestricted::bNewVisibility' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_SetVisibilityRestricted, bPropagateToChildren) == 0x000009, "Member 'VAltarUIHelper_SetVisibilityRestricted::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(VAltarUIHelper_SetVisibilityRestricted, ExcludedClasses) == 0x000010, "Member 'VAltarUIHelper_SetVisibilityRestricted::ExcludedClasses' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.CallTextureEffectBroadcastStartOnQuiver
// 0x0010 (0x0010 - 0x0000)
struct VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver final
{
public:
	class AVQuiver*                               Quiver;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver");
static_assert(sizeof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver) == 0x000010, "Wrong size on VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver");
static_assert(offsetof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver, Quiver) == 0x000000, "Member 'VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver::Quiver' has a wrong offset!");
static_assert(offsetof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver, bEquipping) == 0x000008, "Member 'VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnQuiver::bEquipping' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.CallTextureEffectBroadcastStartOnShield
// 0x0010 (0x0010 - 0x0000)
struct VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield final
{
public:
	class AVShield*                               Shield;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield");
static_assert(sizeof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield) == 0x000010, "Wrong size on VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield");
static_assert(offsetof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield, Shield) == 0x000000, "Member 'VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield::Shield' has a wrong offset!");
static_assert(offsetof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield, bEquipping) == 0x000008, "Member 'VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnShield::bEquipping' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.CallTextureEffectBroadcastStartOnWeapon
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon final
{
public:
	class AVWeapon*                               Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon");
static_assert(sizeof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon) == 0x000008, "Wrong size on VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon");
static_assert(offsetof(VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon, Weapon) == 0x000000, "Member 'VWeaponsPairingComponent_CallTextureEffectBroadcastStartOnWeapon::Weapon' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.SetArrowMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_SetArrowMeshComponent final
{
public:
	class UStaticMeshComponent*                   NewArrowMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_SetArrowMeshComponent) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_SetArrowMeshComponent");
static_assert(sizeof(VWeaponsPairingComponent_SetArrowMeshComponent) == 0x000008, "Wrong size on VWeaponsPairingComponent_SetArrowMeshComponent");
static_assert(offsetof(VWeaponsPairingComponent_SetArrowMeshComponent, NewArrowMeshComponent) == 0x000000, "Member 'VWeaponsPairingComponent_SetArrowMeshComponent::NewArrowMeshComponent' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.SetWeaponDrawn
// 0x0001 (0x0001 - 0x0000)
struct VWeaponsPairingComponent_SetWeaponDrawn final
{
public:
	bool                                          bIsDrawn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_SetWeaponDrawn) == 0x000001, "Wrong alignment on VWeaponsPairingComponent_SetWeaponDrawn");
static_assert(sizeof(VWeaponsPairingComponent_SetWeaponDrawn) == 0x000001, "Wrong size on VWeaponsPairingComponent_SetWeaponDrawn");
static_assert(offsetof(VWeaponsPairingComponent_SetWeaponDrawn, bIsDrawn) == 0x000000, "Member 'VWeaponsPairingComponent_SetWeaponDrawn::bIsDrawn' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetAttachedArrowLocation
// 0x0060 (0x0060 - 0x0000)
struct VWeaponsPairingComponent_GetAttachedArrowLocation final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetAttachedArrowLocation) == 0x000010, "Wrong alignment on VWeaponsPairingComponent_GetAttachedArrowLocation");
static_assert(sizeof(VWeaponsPairingComponent_GetAttachedArrowLocation) == 0x000060, "Wrong size on VWeaponsPairingComponent_GetAttachedArrowLocation");
static_assert(offsetof(VWeaponsPairingComponent_GetAttachedArrowLocation, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetAttachedArrowLocation::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedQuiverActor
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedQuiverActor final
{
public:
	class AVQuiver*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedQuiverActor) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedQuiverActor");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedQuiverActor) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedQuiverActor");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedQuiverActor, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedQuiverActor::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedQuiverForm
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedQuiverForm final
{
public:
	class UTESAmmo*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedQuiverForm) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedQuiverForm");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedQuiverForm) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedQuiverForm");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedQuiverForm, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedQuiverForm::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedShieldActor
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedShieldActor final
{
public:
	class AVShield*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedShieldActor) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedShieldActor");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedShieldActor) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedShieldActor");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedShieldActor, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedShieldActor::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedShieldForm
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedShieldForm final
{
public:
	class UTESObjectARMO*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedShieldForm) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedShieldForm");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedShieldForm) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedShieldForm");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedShieldForm, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedShieldForm::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedTorchActor
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedTorchActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedTorchActor) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedTorchActor");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedTorchActor) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedTorchActor");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedTorchActor, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedTorchActor::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedWeaponActor
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedWeaponActor final
{
public:
	class AVWeapon*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedWeaponActor) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedWeaponActor");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedWeaponActor) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedWeaponActor");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedWeaponActor, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedWeaponActor::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedWeaponForm
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedWeaponForm final
{
public:
	class UTESObjectWEAP*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedWeaponForm) == 0x000008, "Wrong alignment on VWeaponsPairingComponent_GetEquippedWeaponForm");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedWeaponForm) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedWeaponForm");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedWeaponForm, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedWeaponForm::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetEquippedWeaponGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct VWeaponsPairingComponent_GetEquippedWeaponGameplayTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetEquippedWeaponGameplayTag) == 0x000004, "Wrong alignment on VWeaponsPairingComponent_GetEquippedWeaponGameplayTag");
static_assert(sizeof(VWeaponsPairingComponent_GetEquippedWeaponGameplayTag) == 0x000008, "Wrong size on VWeaponsPairingComponent_GetEquippedWeaponGameplayTag");
static_assert(offsetof(VWeaponsPairingComponent_GetEquippedWeaponGameplayTag, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetEquippedWeaponGameplayTag::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.GetMainWeaponReach
// 0x0004 (0x0004 - 0x0000)
struct VWeaponsPairingComponent_GetMainWeaponReach final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_GetMainWeaponReach) == 0x000004, "Wrong alignment on VWeaponsPairingComponent_GetMainWeaponReach");
static_assert(sizeof(VWeaponsPairingComponent_GetMainWeaponReach) == 0x000004, "Wrong size on VWeaponsPairingComponent_GetMainWeaponReach");
static_assert(offsetof(VWeaponsPairingComponent_GetMainWeaponReach, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_GetMainWeaponReach::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.HasShieldEquipped
// 0x0001 (0x0001 - 0x0000)
struct VWeaponsPairingComponent_HasShieldEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_HasShieldEquipped) == 0x000001, "Wrong alignment on VWeaponsPairingComponent_HasShieldEquipped");
static_assert(sizeof(VWeaponsPairingComponent_HasShieldEquipped) == 0x000001, "Wrong size on VWeaponsPairingComponent_HasShieldEquipped");
static_assert(offsetof(VWeaponsPairingComponent_HasShieldEquipped, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_HasShieldEquipped::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.IsQuiverAttached
// 0x0001 (0x0001 - 0x0000)
struct VWeaponsPairingComponent_IsQuiverAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_IsQuiverAttached) == 0x000001, "Wrong alignment on VWeaponsPairingComponent_IsQuiverAttached");
static_assert(sizeof(VWeaponsPairingComponent_IsQuiverAttached) == 0x000001, "Wrong size on VWeaponsPairingComponent_IsQuiverAttached");
static_assert(offsetof(VWeaponsPairingComponent_IsQuiverAttached, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_IsQuiverAttached::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.IsTorchHeld
// 0x0001 (0x0001 - 0x0000)
struct VWeaponsPairingComponent_IsTorchHeld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_IsTorchHeld) == 0x000001, "Wrong alignment on VWeaponsPairingComponent_IsTorchHeld");
static_assert(sizeof(VWeaponsPairingComponent_IsTorchHeld) == 0x000001, "Wrong size on VWeaponsPairingComponent_IsTorchHeld");
static_assert(offsetof(VWeaponsPairingComponent_IsTorchHeld, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_IsTorchHeld::ReturnValue' has a wrong offset!");

// Function Altar.VWeaponsPairingComponent.IsWeaponDrawn
// 0x0001 (0x0001 - 0x0000)
struct VWeaponsPairingComponent_IsWeaponDrawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeaponsPairingComponent_IsWeaponDrawn) == 0x000001, "Wrong alignment on VWeaponsPairingComponent_IsWeaponDrawn");
static_assert(sizeof(VWeaponsPairingComponent_IsWeaponDrawn) == 0x000001, "Wrong size on VWeaponsPairingComponent_IsWeaponDrawn");
static_assert(offsetof(VWeaponsPairingComponent_IsWeaponDrawn, ReturnValue) == 0x000000, "Member 'VWeaponsPairingComponent_IsWeaponDrawn::ReturnValue' has a wrong offset!");

// Function Altar.TestAnimCharacterBase.AttemptStartAttack
// 0x0001 (0x0001 - 0x0000)
struct TestAnimCharacterBase_AttemptStartAttack final
{
public:
	EAttackActionType                             AttackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimCharacterBase_AttemptStartAttack) == 0x000001, "Wrong alignment on TestAnimCharacterBase_AttemptStartAttack");
static_assert(sizeof(TestAnimCharacterBase_AttemptStartAttack) == 0x000001, "Wrong size on TestAnimCharacterBase_AttemptStartAttack");
static_assert(offsetof(TestAnimCharacterBase_AttemptStartAttack, AttackType) == 0x000000, "Member 'TestAnimCharacterBase_AttemptStartAttack::AttackType' has a wrong offset!");

// Function Altar.TestAnimCharacterBase.MeleeAttackRaycast
// 0x00E8 (0x00E8 - 0x0000)
struct TestAnimCharacterBase_MeleeAttackRaycast final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimCharacterBase_MeleeAttackRaycast) == 0x000008, "Wrong alignment on TestAnimCharacterBase_MeleeAttackRaycast");
static_assert(sizeof(TestAnimCharacterBase_MeleeAttackRaycast) == 0x0000E8, "Wrong size on TestAnimCharacterBase_MeleeAttackRaycast");
static_assert(offsetof(TestAnimCharacterBase_MeleeAttackRaycast, ReturnValue) == 0x000000, "Member 'TestAnimCharacterBase_MeleeAttackRaycast::ReturnValue' has a wrong offset!");

// Function Altar.TestAnimCharacterBase.MoveTowardsFromControlRotation
// 0x0018 (0x0018 - 0x0000)
struct TestAnimCharacterBase_MoveTowardsFromControlRotation final
{
public:
	struct FVector2D                              Direction;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Run;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TestAnimCharacterBase_MoveTowardsFromControlRotation) == 0x000008, "Wrong alignment on TestAnimCharacterBase_MoveTowardsFromControlRotation");
static_assert(sizeof(TestAnimCharacterBase_MoveTowardsFromControlRotation) == 0x000018, "Wrong size on TestAnimCharacterBase_MoveTowardsFromControlRotation");
static_assert(offsetof(TestAnimCharacterBase_MoveTowardsFromControlRotation, Direction) == 0x000000, "Member 'TestAnimCharacterBase_MoveTowardsFromControlRotation::Direction' has a wrong offset!");
static_assert(offsetof(TestAnimCharacterBase_MoveTowardsFromControlRotation, Run) == 0x000010, "Member 'TestAnimCharacterBase_MoveTowardsFromControlRotation::Run' has a wrong offset!");

// Function Altar.TestAnimCharacterBase.OnHitImpact
// 0x0020 (0x0020 - 0x0000)
struct TestAnimCharacterBase_OnHitImpact final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimCharacterBase_OnHitImpact) == 0x000008, "Wrong alignment on TestAnimCharacterBase_OnHitImpact");
static_assert(sizeof(TestAnimCharacterBase_OnHitImpact) == 0x000020, "Wrong size on TestAnimCharacterBase_OnHitImpact");
static_assert(offsetof(TestAnimCharacterBase_OnHitImpact, ImpactPoint) == 0x000000, "Member 'TestAnimCharacterBase_OnHitImpact::ImpactPoint' has a wrong offset!");
static_assert(offsetof(TestAnimCharacterBase_OnHitImpact, HitComponent) == 0x000018, "Member 'TestAnimCharacterBase_OnHitImpact::HitComponent' has a wrong offset!");

// Function Altar.TestAnimCharacterBase.SetAimPosition
// 0x0018 (0x0018 - 0x0000)
struct TestAnimCharacterBase_SetAimPosition final
{
public:
	struct FVector                                AimPosition;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimCharacterBase_SetAimPosition) == 0x000008, "Wrong alignment on TestAnimCharacterBase_SetAimPosition");
static_assert(sizeof(TestAnimCharacterBase_SetAimPosition) == 0x000018, "Wrong size on TestAnimCharacterBase_SetAimPosition");
static_assert(offsetof(TestAnimCharacterBase_SetAimPosition, AimPosition) == 0x000000, "Member 'TestAnimCharacterBase_SetAimPosition::AimPosition' has a wrong offset!");

// Function Altar.VAnimNotifyState_FacialPose.UpdateFacialPose
// 0x0018 (0x0018 - 0x0000)
struct VAnimNotifyState_FacialPose_UpdateFacialPose final
{
public:
	const class AActor*                           OwnerActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFacialPoseType                               AnimNotifyFacialPose;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimNotifyBlendWeight;                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideFacialPose;                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAnimNotifyBegin;                                // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAnimNotifyState_FacialPose_UpdateFacialPose) == 0x000008, "Wrong alignment on VAnimNotifyState_FacialPose_UpdateFacialPose");
static_assert(sizeof(VAnimNotifyState_FacialPose_UpdateFacialPose) == 0x000018, "Wrong size on VAnimNotifyState_FacialPose_UpdateFacialPose");
static_assert(offsetof(VAnimNotifyState_FacialPose_UpdateFacialPose, OwnerActor) == 0x000000, "Member 'VAnimNotifyState_FacialPose_UpdateFacialPose::OwnerActor' has a wrong offset!");
static_assert(offsetof(VAnimNotifyState_FacialPose_UpdateFacialPose, AnimNotifyFacialPose) == 0x000008, "Member 'VAnimNotifyState_FacialPose_UpdateFacialPose::AnimNotifyFacialPose' has a wrong offset!");
static_assert(offsetof(VAnimNotifyState_FacialPose_UpdateFacialPose, AnimNotifyBlendWeight) == 0x00000C, "Member 'VAnimNotifyState_FacialPose_UpdateFacialPose::AnimNotifyBlendWeight' has a wrong offset!");
static_assert(offsetof(VAnimNotifyState_FacialPose_UpdateFacialPose, bShouldOverrideFacialPose) == 0x000010, "Member 'VAnimNotifyState_FacialPose_UpdateFacialPose::bShouldOverrideFacialPose' has a wrong offset!");
static_assert(offsetof(VAnimNotifyState_FacialPose_UpdateFacialPose, bIsAnimNotifyBegin) == 0x000011, "Member 'VAnimNotifyState_FacialPose_UpdateFacialPose::bIsAnimNotifyBegin' has a wrong offset!");

// Function Altar.TestAnimInstanceBase.AttemptAttackAnimation
// 0x00F8 (0x00F8 - 0x0000)
struct TestAnimInstanceBase_AttemptAttackAnimation final
{
public:
	EAttackActionType                             AttackActionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCharacterAttackStartInfo          AttackStartInfo;                                   // 0x0008(0x00E8)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TestAnimInstanceBase_AttemptAttackAnimation) == 0x000008, "Wrong alignment on TestAnimInstanceBase_AttemptAttackAnimation");
static_assert(sizeof(TestAnimInstanceBase_AttemptAttackAnimation) == 0x0000F8, "Wrong size on TestAnimInstanceBase_AttemptAttackAnimation");
static_assert(offsetof(TestAnimInstanceBase_AttemptAttackAnimation, AttackActionType) == 0x000000, "Member 'TestAnimInstanceBase_AttemptAttackAnimation::AttackActionType' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_AttemptAttackAnimation, AttackStartInfo) == 0x000008, "Member 'TestAnimInstanceBase_AttemptAttackAnimation::AttackStartInfo' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_AttemptAttackAnimation, ReturnValue) == 0x0000F0, "Member 'TestAnimInstanceBase_AttemptAttackAnimation::ReturnValue' has a wrong offset!");

// Function Altar.TestAnimInstanceBase.ChooseNextAttackMoveset
// 0x0100 (0x0100 - 0x0000)
struct TestAnimInstanceBase_ChooseNextAttackMoveset final
{
public:
	EAttackActionType                             AttackActionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimCharacterAttackStartInfo          AttackStartInfo;                                   // 0x0008(0x00E8)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAttackMovesetItem>             ReturnValue;                                       // 0x00F0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInstanceBase_ChooseNextAttackMoveset) == 0x000008, "Wrong alignment on TestAnimInstanceBase_ChooseNextAttackMoveset");
static_assert(sizeof(TestAnimInstanceBase_ChooseNextAttackMoveset) == 0x000100, "Wrong size on TestAnimInstanceBase_ChooseNextAttackMoveset");
static_assert(offsetof(TestAnimInstanceBase_ChooseNextAttackMoveset, AttackActionType) == 0x000000, "Member 'TestAnimInstanceBase_ChooseNextAttackMoveset::AttackActionType' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_ChooseNextAttackMoveset, AttackStartInfo) == 0x000008, "Member 'TestAnimInstanceBase_ChooseNextAttackMoveset::AttackStartInfo' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_ChooseNextAttackMoveset, ReturnValue) == 0x0000F0, "Member 'TestAnimInstanceBase_ChooseNextAttackMoveset::ReturnValue' has a wrong offset!");

// Function Altar.TestAnimInstanceBase.ProcessDamageReaction
// 0x0050 (0x0050 - 0x0000)
struct TestAnimInstanceBase_ProcessDamageReaction final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMeleeAttackDamageEvent                DamageEvent;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInstanceBase_ProcessDamageReaction) == 0x000008, "Wrong alignment on TestAnimInstanceBase_ProcessDamageReaction");
static_assert(sizeof(TestAnimInstanceBase_ProcessDamageReaction) == 0x000050, "Wrong size on TestAnimInstanceBase_ProcessDamageReaction");
static_assert(offsetof(TestAnimInstanceBase_ProcessDamageReaction, Damage) == 0x000000, "Member 'TestAnimInstanceBase_ProcessDamageReaction::Damage' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_ProcessDamageReaction, DamageEvent) == 0x000008, "Member 'TestAnimInstanceBase_ProcessDamageReaction::DamageEvent' has a wrong offset!");

// Function Altar.TestAnimInstanceBase.SetTargetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct TestAnimInstanceBase_SetTargetForwardSpeed final
{
public:
	float                                         TargetSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInstanceBase_SetTargetForwardSpeed) == 0x000004, "Wrong alignment on TestAnimInstanceBase_SetTargetForwardSpeed");
static_assert(sizeof(TestAnimInstanceBase_SetTargetForwardSpeed) == 0x000004, "Wrong size on TestAnimInstanceBase_SetTargetForwardSpeed");
static_assert(offsetof(TestAnimInstanceBase_SetTargetForwardSpeed, TargetSpeed) == 0x000000, "Member 'TestAnimInstanceBase_SetTargetForwardSpeed::TargetSpeed' has a wrong offset!");

// Function Altar.TestAnimInstanceBase.SetTargetRightSpeed
// 0x0004 (0x0004 - 0x0000)
struct TestAnimInstanceBase_SetTargetRightSpeed final
{
public:
	float                                         TargetSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInstanceBase_SetTargetRightSpeed) == 0x000004, "Wrong alignment on TestAnimInstanceBase_SetTargetRightSpeed");
static_assert(sizeof(TestAnimInstanceBase_SetTargetRightSpeed) == 0x000004, "Wrong size on TestAnimInstanceBase_SetTargetRightSpeed");
static_assert(offsetof(TestAnimInstanceBase_SetTargetRightSpeed, TargetSpeed) == 0x000000, "Member 'TestAnimInstanceBase_SetTargetRightSpeed::TargetSpeed' has a wrong offset!");

// Function Altar.TestAnimInstanceBase.StartPhysicsBlendFromBone
// 0x0028 (0x0028 - 0x0000)
struct TestAnimInstanceBase_StartPhysicsBlendFromBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartImpulse;                                      // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInstanceBase_StartPhysicsBlendFromBone) == 0x000008, "Wrong alignment on TestAnimInstanceBase_StartPhysicsBlendFromBone");
static_assert(sizeof(TestAnimInstanceBase_StartPhysicsBlendFromBone) == 0x000028, "Wrong size on TestAnimInstanceBase_StartPhysicsBlendFromBone");
static_assert(offsetof(TestAnimInstanceBase_StartPhysicsBlendFromBone, BoneName) == 0x000000, "Member 'TestAnimInstanceBase_StartPhysicsBlendFromBone::BoneName' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_StartPhysicsBlendFromBone, Duration) == 0x000008, "Member 'TestAnimInstanceBase_StartPhysicsBlendFromBone::Duration' has a wrong offset!");
static_assert(offsetof(TestAnimInstanceBase_StartPhysicsBlendFromBone, StartImpulse) == 0x000010, "Member 'TestAnimInstanceBase_StartPhysicsBlendFromBone::StartImpulse' has a wrong offset!");

// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastOnRequestTimedRevertPopup
// 0x0008 (0x0008 - 0x0000)
struct VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup final
{
public:
	class UVModernSettingWidget*                  ChangedSettings;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup) == 0x000008, "Wrong alignment on VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup");
static_assert(sizeof(VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup) == 0x000008, "Wrong size on VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup");
static_assert(offsetof(VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup, ChangedSettings) == 0x000000, "Member 'VSettingsGlobalSubsystem_RequestBroadcastOnRequestTimedRevertPopup::ChangedSettings' has a wrong offset!");

// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastOnSettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged final
{
public:
	class UVModernSettingWidget*                  ChangedSettings;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged) == 0x000008, "Wrong alignment on VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged");
static_assert(sizeof(VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged) == 0x000008, "Wrong size on VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged");
static_assert(offsetof(VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged, ChangedSettings) == 0x000000, "Member 'VSettingsGlobalSubsystem_RequestBroadcastOnSettingsChanged::ChangedSettings' has a wrong offset!");

// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastOnUpdateSettingsLockState
// 0x0001 (0x0001 - 0x0000)
struct VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState final
{
public:
	bool                                          NewLockState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState) == 0x000001, "Wrong alignment on VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState");
static_assert(sizeof(VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState) == 0x000001, "Wrong size on VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState");
static_assert(offsetof(VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState, NewLockState) == 0x000000, "Member 'VSettingsGlobalSubsystem_RequestBroadcastOnUpdateSettingsLockState::NewLockState' has a wrong offset!");

// Function Altar.VSettingsGlobalSubsystem.RequestBroadcastSettings
// 0x0010 (0x0010 - 0x0000)
struct VSettingsGlobalSubsystem_RequestBroadcastSettings final
{
public:
	class FString                                 CommandToBroadcast;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsGlobalSubsystem_RequestBroadcastSettings) == 0x000008, "Wrong alignment on VSettingsGlobalSubsystem_RequestBroadcastSettings");
static_assert(sizeof(VSettingsGlobalSubsystem_RequestBroadcastSettings) == 0x000010, "Wrong size on VSettingsGlobalSubsystem_RequestBroadcastSettings");
static_assert(offsetof(VSettingsGlobalSubsystem_RequestBroadcastSettings, CommandToBroadcast) == 0x000000, "Member 'VSettingsGlobalSubsystem_RequestBroadcastSettings::CommandToBroadcast' has a wrong offset!");

// Function Altar.VSettingsGlobalSubsystem.RequestSaveLoadPopup
// 0x0020 (0x0020 - 0x0000)
struct VSettingsGlobalSubsystem_RequestSaveLoadPopup final
{
public:
	class FText                                   PopupText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ModIndex;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VSettingsGlobalSubsystem_RequestSaveLoadPopup) == 0x000008, "Wrong alignment on VSettingsGlobalSubsystem_RequestSaveLoadPopup");
static_assert(sizeof(VSettingsGlobalSubsystem_RequestSaveLoadPopup) == 0x000020, "Wrong size on VSettingsGlobalSubsystem_RequestSaveLoadPopup");
static_assert(offsetof(VSettingsGlobalSubsystem_RequestSaveLoadPopup, PopupText) == 0x000000, "Member 'VSettingsGlobalSubsystem_RequestSaveLoadPopup::PopupText' has a wrong offset!");
static_assert(offsetof(VSettingsGlobalSubsystem_RequestSaveLoadPopup, ModIndex) == 0x000018, "Member 'VSettingsGlobalSubsystem_RequestSaveLoadPopup::ModIndex' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellAtGridXY
// 0x0010 (0x0010 - 0x0000)
struct TESWorldSpace_GetCellAtGridXY final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTESCell*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellAtGridXY) == 0x000008, "Wrong alignment on TESWorldSpace_GetCellAtGridXY");
static_assert(sizeof(TESWorldSpace_GetCellAtGridXY) == 0x000010, "Wrong size on TESWorldSpace_GetCellAtGridXY");
static_assert(offsetof(TESWorldSpace_GetCellAtGridXY, X) == 0x000000, "Member 'TESWorldSpace_GetCellAtGridXY::X' has a wrong offset!");
static_assert(offsetof(TESWorldSpace_GetCellAtGridXY, Y) == 0x000004, "Member 'TESWorldSpace_GetCellAtGridXY::Y' has a wrong offset!");
static_assert(offsetof(TESWorldSpace_GetCellAtGridXY, ReturnValue) == 0x000008, "Member 'TESWorldSpace_GetCellAtGridXY::ReturnValue' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellsGridMaxX
// 0x0004 (0x0004 - 0x0000)
struct TESWorldSpace_GetCellsGridMaxX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellsGridMaxX) == 0x000004, "Wrong alignment on TESWorldSpace_GetCellsGridMaxX");
static_assert(sizeof(TESWorldSpace_GetCellsGridMaxX) == 0x000004, "Wrong size on TESWorldSpace_GetCellsGridMaxX");
static_assert(offsetof(TESWorldSpace_GetCellsGridMaxX, ReturnValue) == 0x000000, "Member 'TESWorldSpace_GetCellsGridMaxX::ReturnValue' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellsGridMaxY
// 0x0004 (0x0004 - 0x0000)
struct TESWorldSpace_GetCellsGridMaxY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellsGridMaxY) == 0x000004, "Wrong alignment on TESWorldSpace_GetCellsGridMaxY");
static_assert(sizeof(TESWorldSpace_GetCellsGridMaxY) == 0x000004, "Wrong size on TESWorldSpace_GetCellsGridMaxY");
static_assert(offsetof(TESWorldSpace_GetCellsGridMaxY, ReturnValue) == 0x000000, "Member 'TESWorldSpace_GetCellsGridMaxY::ReturnValue' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellsGridMinX
// 0x0004 (0x0004 - 0x0000)
struct TESWorldSpace_GetCellsGridMinX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellsGridMinX) == 0x000004, "Wrong alignment on TESWorldSpace_GetCellsGridMinX");
static_assert(sizeof(TESWorldSpace_GetCellsGridMinX) == 0x000004, "Wrong size on TESWorldSpace_GetCellsGridMinX");
static_assert(offsetof(TESWorldSpace_GetCellsGridMinX, ReturnValue) == 0x000000, "Member 'TESWorldSpace_GetCellsGridMinX::ReturnValue' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellsGridMinY
// 0x0004 (0x0004 - 0x0000)
struct TESWorldSpace_GetCellsGridMinY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellsGridMinY) == 0x000004, "Wrong alignment on TESWorldSpace_GetCellsGridMinY");
static_assert(sizeof(TESWorldSpace_GetCellsGridMinY) == 0x000004, "Wrong size on TESWorldSpace_GetCellsGridMinY");
static_assert(offsetof(TESWorldSpace_GetCellsGridMinY, ReturnValue) == 0x000000, "Member 'TESWorldSpace_GetCellsGridMinY::ReturnValue' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellsGridSizeX
// 0x0004 (0x0004 - 0x0000)
struct TESWorldSpace_GetCellsGridSizeX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellsGridSizeX) == 0x000004, "Wrong alignment on TESWorldSpace_GetCellsGridSizeX");
static_assert(sizeof(TESWorldSpace_GetCellsGridSizeX) == 0x000004, "Wrong size on TESWorldSpace_GetCellsGridSizeX");
static_assert(offsetof(TESWorldSpace_GetCellsGridSizeX, ReturnValue) == 0x000000, "Member 'TESWorldSpace_GetCellsGridSizeX::ReturnValue' has a wrong offset!");

// Function Altar.TESWorldSpace.GetCellsGridSizeY
// 0x0004 (0x0004 - 0x0000)
struct TESWorldSpace_GetCellsGridSizeY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TESWorldSpace_GetCellsGridSizeY) == 0x000004, "Wrong alignment on TESWorldSpace_GetCellsGridSizeY");
static_assert(sizeof(TESWorldSpace_GetCellsGridSizeY) == 0x000004, "Wrong size on TESWorldSpace_GetCellsGridSizeY");
static_assert(offsetof(TESWorldSpace_GetCellsGridSizeY, ReturnValue) == 0x000000, "Member 'TESWorldSpace_GetCellsGridSizeY::ReturnValue' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.ResetCharacterToPreset
// 0x0008 (0x0008 - 0x0000)
struct VPhenotypeCustomizationSession_ResetCharacterToPreset final
{
public:
	const class UVCharacterPhenotypePreset*       Preset;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhenotypeCustomizationSession_ResetCharacterToPreset) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_ResetCharacterToPreset");
static_assert(sizeof(VPhenotypeCustomizationSession_ResetCharacterToPreset) == 0x000008, "Wrong size on VPhenotypeCustomizationSession_ResetCharacterToPreset");
static_assert(offsetof(VPhenotypeCustomizationSession_ResetCharacterToPreset, Preset) == 0x000000, "Member 'VPhenotypeCustomizationSession_ResetCharacterToPreset::Preset' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetEyeMaterial
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_SetEyeMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomisationIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetEyeMaterial) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_SetEyeMaterial");
static_assert(sizeof(VPhenotypeCustomizationSession_SetEyeMaterial) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_SetEyeMaterial");
static_assert(offsetof(VPhenotypeCustomizationSession_SetEyeMaterial, Material) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetEyeMaterial::Material' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetEyeMaterial, CustomisationIndex) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetEyeMaterial::CustomisationIndex' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetEyeMaterial, bShouldRefreshCharacter) == 0x00000C, "Member 'VPhenotypeCustomizationSession_SetEyeMaterial::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetFaceBaseMesh
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_SetFaceBaseMesh final
{
public:
	class USkeletalMesh*                          FaceBaseMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetFaceBaseMesh) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_SetFaceBaseMesh");
static_assert(sizeof(VPhenotypeCustomizationSession_SetFaceBaseMesh) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_SetFaceBaseMesh");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceBaseMesh, FaceBaseMesh) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetFaceBaseMesh::FaceBaseMesh' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceBaseMesh, bShouldRefreshCharacter) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetFaceBaseMesh::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetFaceMorphAxisValue
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_SetFaceMorphAxisValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetFaceMorphAxisValue) == 0x000004, "Wrong alignment on VPhenotypeCustomizationSession_SetFaceMorphAxisValue");
static_assert(sizeof(VPhenotypeCustomizationSession_SetFaceMorphAxisValue) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_SetFaceMorphAxisValue");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceMorphAxisValue, Name_0) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetFaceMorphAxisValue::Name_0' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceMorphAxisValue, Value) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetFaceMorphAxisValue::Value' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceMorphAxisValue, bShouldRefreshCharacter) == 0x00000C, "Member 'VPhenotypeCustomizationSession_SetFaceMorphAxisValue::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetFaceSkinMaterial
// 0x0018 (0x0018 - 0x0000)
struct VPhenotypeCustomizationSession_SetFaceSkinMaterial final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetFaceSkinMaterial) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_SetFaceSkinMaterial");
static_assert(sizeof(VPhenotypeCustomizationSession_SetFaceSkinMaterial) == 0x000018, "Wrong size on VPhenotypeCustomizationSession_SetFaceSkinMaterial");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceSkinMaterial, MaterialSlotName) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetFaceSkinMaterial::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceSkinMaterial, Material) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetFaceSkinMaterial::Material' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetFaceSkinMaterial, bShouldRefreshCharacter) == 0x000010, "Member 'VPhenotypeCustomizationSession_SetFaceSkinMaterial::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetHairPiece
// 0x0018 (0x0018 - 0x0000)
struct VPhenotypeCustomizationSession_SetHairPiece final
{
public:
	EVFacialHairType                              HairType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVCharacterHairPieceBase*               HairPiece;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomisationIndex;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetHairPiece) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_SetHairPiece");
static_assert(sizeof(VPhenotypeCustomizationSession_SetHairPiece) == 0x000018, "Wrong size on VPhenotypeCustomizationSession_SetHairPiece");
static_assert(offsetof(VPhenotypeCustomizationSession_SetHairPiece, HairType) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetHairPiece::HairType' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetHairPiece, HairPiece) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetHairPiece::HairPiece' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetHairPiece, CustomisationIndex) == 0x000010, "Member 'VPhenotypeCustomizationSession_SetHairPiece::CustomisationIndex' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetHairPiece, bShouldRefreshCharacter) == 0x000014, "Member 'VPhenotypeCustomizationSession_SetHairPiece::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetRace
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_SetRace final
{
public:
	class UTESRace*                               NewRace;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetRace) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_SetRace");
static_assert(sizeof(VPhenotypeCustomizationSession_SetRace) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_SetRace");
static_assert(offsetof(VPhenotypeCustomizationSession_SetRace, NewRace) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetRace::NewRace' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetRace, bShouldRefreshCharacter) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetRace::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetSenescenceValue
// 0x0008 (0x0008 - 0x0000)
struct VPhenotypeCustomizationSession_SetSenescenceValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetSenescenceValue) == 0x000004, "Wrong alignment on VPhenotypeCustomizationSession_SetSenescenceValue");
static_assert(sizeof(VPhenotypeCustomizationSession_SetSenescenceValue) == 0x000008, "Wrong size on VPhenotypeCustomizationSession_SetSenescenceValue");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSenescenceValue, NewValue) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetSenescenceValue::NewValue' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSenescenceValue, bShouldRefreshCharacter) == 0x000004, "Member 'VPhenotypeCustomizationSession_SetSenescenceValue::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetSex
// 0x0002 (0x0002 - 0x0000)
struct VPhenotypeCustomizationSession_SetSex final
{
public:
	ECharacterSex                                 Sex;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhenotypeCustomizationSession_SetSex) == 0x000001, "Wrong alignment on VPhenotypeCustomizationSession_SetSex");
static_assert(sizeof(VPhenotypeCustomizationSession_SetSex) == 0x000002, "Wrong size on VPhenotypeCustomizationSession_SetSex");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSex, Sex) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetSex::Sex' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSex, bShouldRefreshCharacter) == 0x000001, "Member 'VPhenotypeCustomizationSession_SetSex::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetSkinColorParameter
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_SetSkinColorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetSkinColorParameter) == 0x000004, "Wrong alignment on VPhenotypeCustomizationSession_SetSkinColorParameter");
static_assert(sizeof(VPhenotypeCustomizationSession_SetSkinColorParameter) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_SetSkinColorParameter");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSkinColorParameter, ParameterName) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetSkinColorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSkinColorParameter, Value) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetSkinColorParameter::Value' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSkinColorParameter, bShouldRefreshCharacter) == 0x00000C, "Member 'VPhenotypeCustomizationSession_SetSkinColorParameter::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.SetSkinParameter
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_SetSkinParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshCharacter;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_SetSkinParameter) == 0x000004, "Wrong alignment on VPhenotypeCustomizationSession_SetSkinParameter");
static_assert(sizeof(VPhenotypeCustomizationSession_SetSkinParameter) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_SetSkinParameter");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSkinParameter, ParameterName) == 0x000000, "Member 'VPhenotypeCustomizationSession_SetSkinParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSkinParameter, Value) == 0x000008, "Member 'VPhenotypeCustomizationSession_SetSkinParameter::Value' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_SetSkinParameter, bShouldRefreshCharacter) == 0x00000C, "Member 'VPhenotypeCustomizationSession_SetSkinParameter::bShouldRefreshCharacter' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.StartFromCharacter
// 0x0010 (0x0010 - 0x0000)
struct VPhenotypeCustomizationSession_StartFromCharacter final
{
public:
	class AVPairedCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestroyCharacterOnSessionEnd;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhenotypeCustomizationSession_StartFromCharacter) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_StartFromCharacter");
static_assert(sizeof(VPhenotypeCustomizationSession_StartFromCharacter) == 0x000010, "Wrong size on VPhenotypeCustomizationSession_StartFromCharacter");
static_assert(offsetof(VPhenotypeCustomizationSession_StartFromCharacter, Character) == 0x000000, "Member 'VPhenotypeCustomizationSession_StartFromCharacter::Character' has a wrong offset!");
static_assert(offsetof(VPhenotypeCustomizationSession_StartFromCharacter, DestroyCharacterOnSessionEnd) == 0x000008, "Member 'VPhenotypeCustomizationSession_StartFromCharacter::DestroyCharacterOnSessionEnd' has a wrong offset!");

// Function Altar.VPhenotypeCustomizationSession.StartFromScratch
// 0x0008 (0x0008 - 0x0000)
struct VPhenotypeCustomizationSession_StartFromScratch final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhenotypeCustomizationSession_StartFromScratch) == 0x000008, "Wrong alignment on VPhenotypeCustomizationSession_StartFromScratch");
static_assert(sizeof(VPhenotypeCustomizationSession_StartFromScratch) == 0x000008, "Wrong size on VPhenotypeCustomizationSession_StartFromScratch");
static_assert(offsetof(VPhenotypeCustomizationSession_StartFromScratch, InWorld) == 0x000000, "Member 'VPhenotypeCustomizationSession_StartFromScratch::InWorld' has a wrong offset!");

// Function Altar.VCinematicSubsystem.IsPlayingCinematic
// 0x0001 (0x0001 - 0x0000)
struct VCinematicSubsystem_IsPlayingCinematic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCinematicSubsystem_IsPlayingCinematic) == 0x000001, "Wrong alignment on VCinematicSubsystem_IsPlayingCinematic");
static_assert(sizeof(VCinematicSubsystem_IsPlayingCinematic) == 0x000001, "Wrong size on VCinematicSubsystem_IsPlayingCinematic");
static_assert(offsetof(VCinematicSubsystem_IsPlayingCinematic, ReturnValue) == 0x000000, "Member 'VCinematicSubsystem_IsPlayingCinematic::ReturnValue' has a wrong offset!");

// Function Altar.VClassItemObject.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VClassItemObject_SetIsSelected final
{
public:
	bool                                          bNewSelectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassItemObject_SetIsSelected) == 0x000001, "Wrong alignment on VClassItemObject_SetIsSelected");
static_assert(sizeof(VClassItemObject_SetIsSelected) == 0x000001, "Wrong size on VClassItemObject_SetIsSelected");
static_assert(offsetof(VClassItemObject_SetIsSelected, bNewSelectionState) == 0x000000, "Member 'VClassItemObject_SetIsSelected::bNewSelectionState' has a wrong offset!");

// Function Altar.VClassItemObject.SetProperties
// 0x00A0 (0x00A0 - 0x0000)
struct VClassItemObject_SetProperties final
{
public:
	struct FPlayerClassItemProperties             NewProperties;                                     // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassItemObject_SetProperties) == 0x000008, "Wrong alignment on VClassItemObject_SetProperties");
static_assert(sizeof(VClassItemObject_SetProperties) == 0x0000A0, "Wrong size on VClassItemObject_SetProperties");
static_assert(offsetof(VClassItemObject_SetProperties, NewProperties) == 0x000000, "Member 'VClassItemObject_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VClassItemObject.GetProperties
// 0x00A0 (0x00A0 - 0x0000)
struct VClassItemObject_GetProperties final
{
public:
	struct FPlayerClassItemProperties             ReturnValue;                                       // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassItemObject_GetProperties) == 0x000008, "Wrong alignment on VClassItemObject_GetProperties");
static_assert(sizeof(VClassItemObject_GetProperties) == 0x0000A0, "Wrong size on VClassItemObject_GetProperties");
static_assert(offsetof(VClassItemObject_GetProperties, ReturnValue) == 0x000000, "Member 'VClassItemObject_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VClassItemObject.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct VClassItemObject_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassItemObject_IsSelected) == 0x000001, "Wrong alignment on VClassItemObject_IsSelected");
static_assert(sizeof(VClassItemObject_IsSelected) == 0x000001, "Wrong size on VClassItemObject_IsSelected");
static_assert(offsetof(VClassItemObject_IsSelected, ReturnValue) == 0x000000, "Member 'VClassItemObject_IsSelected::ReturnValue' has a wrong offset!");

// Function Altar.VActorBehaviorBase.OnEnd
// 0x0001 (0x0001 - 0x0000)
struct VActorBehaviorBase_OnEnd final
{
public:
	bool                                          bInterrupted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_OnEnd) == 0x000001, "Wrong alignment on VActorBehaviorBase_OnEnd");
static_assert(sizeof(VActorBehaviorBase_OnEnd) == 0x000001, "Wrong size on VActorBehaviorBase_OnEnd");
static_assert(offsetof(VActorBehaviorBase_OnEnd, bInterrupted) == 0x000000, "Member 'VActorBehaviorBase_OnEnd::bInterrupted' has a wrong offset!");

// Function Altar.VActorBehaviorBase.OnUpdate
// 0x0004 (0x0004 - 0x0000)
struct VActorBehaviorBase_OnUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_OnUpdate) == 0x000004, "Wrong alignment on VActorBehaviorBase_OnUpdate");
static_assert(sizeof(VActorBehaviorBase_OnUpdate) == 0x000004, "Wrong size on VActorBehaviorBase_OnUpdate");
static_assert(offsetof(VActorBehaviorBase_OnUpdate, DeltaTime) == 0x000000, "Member 'VActorBehaviorBase_OnUpdate::DeltaTime' has a wrong offset!");

// Function Altar.VActorBehaviorBase.GetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct VActorBehaviorBase_GetControlledPawn final
{
public:
	class AVPairedPawn*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_GetControlledPawn) == 0x000008, "Wrong alignment on VActorBehaviorBase_GetControlledPawn");
static_assert(sizeof(VActorBehaviorBase_GetControlledPawn) == 0x000008, "Wrong size on VActorBehaviorBase_GetControlledPawn");
static_assert(offsetof(VActorBehaviorBase_GetControlledPawn, ReturnValue) == 0x000000, "Member 'VActorBehaviorBase_GetControlledPawn::ReturnValue' has a wrong offset!");

// Function Altar.VActorBehaviorBase.GetElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct VActorBehaviorBase_GetElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_GetElapsedTime) == 0x000004, "Wrong alignment on VActorBehaviorBase_GetElapsedTime");
static_assert(sizeof(VActorBehaviorBase_GetElapsedTime) == 0x000004, "Wrong size on VActorBehaviorBase_GetElapsedTime");
static_assert(offsetof(VActorBehaviorBase_GetElapsedTime, ReturnValue) == 0x000000, "Member 'VActorBehaviorBase_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function Altar.VActorBehaviorBase.GetOuterState
// 0x0008 (0x0008 - 0x0000)
struct VActorBehaviorBase_GetOuterState final
{
public:
	class UVAltarActionState*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_GetOuterState) == 0x000008, "Wrong alignment on VActorBehaviorBase_GetOuterState");
static_assert(sizeof(VActorBehaviorBase_GetOuterState) == 0x000008, "Wrong size on VActorBehaviorBase_GetOuterState");
static_assert(offsetof(VActorBehaviorBase_GetOuterState, ReturnValue) == 0x000000, "Member 'VActorBehaviorBase_GetOuterState::ReturnValue' has a wrong offset!");

// Function Altar.VActorBehaviorBase.GetState
// 0x0001 (0x0001 - 0x0000)
struct VActorBehaviorBase_GetState final
{
public:
	EVActorBehaviorState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_GetState) == 0x000001, "Wrong alignment on VActorBehaviorBase_GetState");
static_assert(sizeof(VActorBehaviorBase_GetState) == 0x000001, "Wrong size on VActorBehaviorBase_GetState");
static_assert(offsetof(VActorBehaviorBase_GetState, ReturnValue) == 0x000000, "Member 'VActorBehaviorBase_GetState::ReturnValue' has a wrong offset!");

// Function Altar.VActorBehaviorBase.HasEnded
// 0x0001 (0x0001 - 0x0000)
struct VActorBehaviorBase_HasEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorBase_HasEnded) == 0x000001, "Wrong alignment on VActorBehaviorBase_HasEnded");
static_assert(sizeof(VActorBehaviorBase_HasEnded) == 0x000001, "Wrong size on VActorBehaviorBase_HasEnded");
static_assert(offsetof(VActorBehaviorBase_HasEnded, ReturnValue) == 0x000000, "Member 'VActorBehaviorBase_HasEnded::ReturnValue' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.RegisterSendClickedItem
// 0x0004 (0x0004 - 0x0000)
struct VSkillsMenuViewModel_RegisterSendClickedItem final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_RegisterSendClickedItem) == 0x000004, "Wrong alignment on VSkillsMenuViewModel_RegisterSendClickedItem");
static_assert(sizeof(VSkillsMenuViewModel_RegisterSendClickedItem) == 0x000004, "Wrong size on VSkillsMenuViewModel_RegisterSendClickedItem");
static_assert(offsetof(VSkillsMenuViewModel_RegisterSendClickedItem, ID) == 0x000000, "Member 'VSkillsMenuViewModel_RegisterSendClickedItem::ID' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.RegisterSendCustomClassName
// 0x0018 (0x0018 - 0x0000)
struct VSkillsMenuViewModel_RegisterSendCustomClassName final
{
public:
	class FText                                   NewClassName;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_RegisterSendCustomClassName) == 0x000008, "Wrong alignment on VSkillsMenuViewModel_RegisterSendCustomClassName");
static_assert(sizeof(VSkillsMenuViewModel_RegisterSendCustomClassName) == 0x000018, "Wrong size on VSkillsMenuViewModel_RegisterSendCustomClassName");
static_assert(offsetof(VSkillsMenuViewModel_RegisterSendCustomClassName, NewClassName) == 0x000000, "Member 'VSkillsMenuViewModel_RegisterSendCustomClassName::NewClassName' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.RegisterSendMultipleClicksBack
// 0x0004 (0x0004 - 0x0000)
struct VSkillsMenuViewModel_RegisterSendMultipleClicksBack final
{
public:
	int32                                         NumberOfClicksToEmulate;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_RegisterSendMultipleClicksBack) == 0x000004, "Wrong alignment on VSkillsMenuViewModel_RegisterSendMultipleClicksBack");
static_assert(sizeof(VSkillsMenuViewModel_RegisterSendMultipleClicksBack) == 0x000004, "Wrong size on VSkillsMenuViewModel_RegisterSendMultipleClicksBack");
static_assert(offsetof(VSkillsMenuViewModel_RegisterSendMultipleClicksBack, NumberOfClicksToEmulate) == 0x000000, "Member 'VSkillsMenuViewModel_RegisterSendMultipleClicksBack::NumberOfClicksToEmulate' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.RegisterSendMultipleClicksDone
// 0x0004 (0x0004 - 0x0000)
struct VSkillsMenuViewModel_RegisterSendMultipleClicksDone final
{
public:
	int32                                         NumberOfClicksToEmulate;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_RegisterSendMultipleClicksDone) == 0x000004, "Wrong alignment on VSkillsMenuViewModel_RegisterSendMultipleClicksDone");
static_assert(sizeof(VSkillsMenuViewModel_RegisterSendMultipleClicksDone) == 0x000004, "Wrong size on VSkillsMenuViewModel_RegisterSendMultipleClicksDone");
static_assert(offsetof(VSkillsMenuViewModel_RegisterSendMultipleClicksDone, NumberOfClicksToEmulate) == 0x000000, "Member 'VSkillsMenuViewModel_RegisterSendMultipleClicksDone::NumberOfClicksToEmulate' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.SetItems
// 0x0010 (0x0010 - 0x0000)
struct VSkillsMenuViewModel_SetItems final
{
public:
	TArray<struct FSkillsMenuItemProperties>      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_SetItems) == 0x000008, "Wrong alignment on VSkillsMenuViewModel_SetItems");
static_assert(sizeof(VSkillsMenuViewModel_SetItems) == 0x000010, "Wrong size on VSkillsMenuViewModel_SetItems");
static_assert(offsetof(VSkillsMenuViewModel_SetItems, Data) == 0x000000, "Member 'VSkillsMenuViewModel_SetItems::Data' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.SetProperties
// 0x0050 (0x0050 - 0x0000)
struct VSkillsMenuViewModel_SetProperties final
{
public:
	struct FSkillsMenuProperties                  Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_SetProperties) == 0x000008, "Wrong alignment on VSkillsMenuViewModel_SetProperties");
static_assert(sizeof(VSkillsMenuViewModel_SetProperties) == 0x000050, "Wrong size on VSkillsMenuViewModel_SetProperties");
static_assert(offsetof(VSkillsMenuViewModel_SetProperties, Data) == 0x000000, "Member 'VSkillsMenuViewModel_SetProperties::Data' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.UpdateItemSelection
// 0x0008 (0x0008 - 0x0000)
struct VSkillsMenuViewModel_UpdateItemSelection final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewSelectionState;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VSkillsMenuViewModel_UpdateItemSelection) == 0x000004, "Wrong alignment on VSkillsMenuViewModel_UpdateItemSelection");
static_assert(sizeof(VSkillsMenuViewModel_UpdateItemSelection) == 0x000008, "Wrong size on VSkillsMenuViewModel_UpdateItemSelection");
static_assert(offsetof(VSkillsMenuViewModel_UpdateItemSelection, ItemIndex) == 0x000000, "Member 'VSkillsMenuViewModel_UpdateItemSelection::ItemIndex' has a wrong offset!");
static_assert(offsetof(VSkillsMenuViewModel_UpdateItemSelection, bNewSelectionState) == 0x000004, "Member 'VSkillsMenuViewModel_UpdateItemSelection::bNewSelectionState' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.GetItems
// 0x0010 (0x0010 - 0x0000)
struct VSkillsMenuViewModel_GetItems final
{
public:
	TArray<struct FSkillsMenuItemProperties>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_GetItems) == 0x000008, "Wrong alignment on VSkillsMenuViewModel_GetItems");
static_assert(sizeof(VSkillsMenuViewModel_GetItems) == 0x000010, "Wrong size on VSkillsMenuViewModel_GetItems");
static_assert(offsetof(VSkillsMenuViewModel_GetItems, ReturnValue) == 0x000000, "Member 'VSkillsMenuViewModel_GetItems::ReturnValue' has a wrong offset!");

// Function Altar.VSkillsMenuViewModel.GetProperties
// 0x0050 (0x0050 - 0x0000)
struct VSkillsMenuViewModel_GetProperties final
{
public:
	struct FSkillsMenuProperties                  ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillsMenuViewModel_GetProperties) == 0x000008, "Wrong alignment on VSkillsMenuViewModel_GetProperties");
static_assert(sizeof(VSkillsMenuViewModel_GetProperties) == 0x000050, "Wrong size on VSkillsMenuViewModel_GetProperties");
static_assert(offsetof(VSkillsMenuViewModel_GetProperties, ReturnValue) == 0x000000, "Member 'VSkillsMenuViewModel_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VActorBehaviorMap.GetBehaviorForTag
// 0x0010 (0x0010 - 0x0000)
struct VActorBehaviorMap_GetBehaviorForTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActorBehaviorBase*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorBehaviorMap_GetBehaviorForTag) == 0x000008, "Wrong alignment on VActorBehaviorMap_GetBehaviorForTag");
static_assert(sizeof(VActorBehaviorMap_GetBehaviorForTag) == 0x000010, "Wrong size on VActorBehaviorMap_GetBehaviorForTag");
static_assert(offsetof(VActorBehaviorMap_GetBehaviorForTag, Tag) == 0x000000, "Member 'VActorBehaviorMap_GetBehaviorForTag::Tag' has a wrong offset!");
static_assert(offsetof(VActorBehaviorMap_GetBehaviorForTag, ReturnValue) == 0x000008, "Member 'VActorBehaviorMap_GetBehaviorForTag::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.BindOnActorValueChanged
// 0x0014 (0x0014 - 0x0000)
struct VActorValuesPairingComponent_BindOnActorValueChanged final
{
public:
	EVActorValues                                 ActorValueToListen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)> Callback; // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_BindOnActorValueChanged) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_BindOnActorValueChanged");
static_assert(sizeof(VActorValuesPairingComponent_BindOnActorValueChanged) == 0x000014, "Wrong size on VActorValuesPairingComponent_BindOnActorValueChanged");
static_assert(offsetof(VActorValuesPairingComponent_BindOnActorValueChanged, ActorValueToListen) == 0x000000, "Member 'VActorValuesPairingComponent_BindOnActorValueChanged::ActorValueToListen' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_BindOnActorValueChanged, Callback) == 0x000004, "Member 'VActorValuesPairingComponent_BindOnActorValueChanged::Callback' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.BindOnAnyActorValueChanged
// 0x0060 (0x0060 - 0x0000)
struct VActorValuesPairingComponent_BindOnAnyActorValueChanged final
{
public:
	TSet<EVActorValues>                           ActorValuesToListen;                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)> Callback; // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_BindOnAnyActorValueChanged) == 0x000008, "Wrong alignment on VActorValuesPairingComponent_BindOnAnyActorValueChanged");
static_assert(sizeof(VActorValuesPairingComponent_BindOnAnyActorValueChanged) == 0x000060, "Wrong size on VActorValuesPairingComponent_BindOnAnyActorValueChanged");
static_assert(offsetof(VActorValuesPairingComponent_BindOnAnyActorValueChanged, ActorValuesToListen) == 0x000000, "Member 'VActorValuesPairingComponent_BindOnAnyActorValueChanged::ActorValuesToListen' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_BindOnAnyActorValueChanged, Callback) == 0x000050, "Member 'VActorValuesPairingComponent_BindOnAnyActorValueChanged::Callback' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.UnBindOnActorValueChanged
// 0x0014 (0x0014 - 0x0000)
struct VActorValuesPairingComponent_UnBindOnActorValueChanged final
{
public:
	EVActorValues                                 ActorValueToListen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)> Callback; // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_UnBindOnActorValueChanged) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_UnBindOnActorValueChanged");
static_assert(sizeof(VActorValuesPairingComponent_UnBindOnActorValueChanged) == 0x000014, "Wrong size on VActorValuesPairingComponent_UnBindOnActorValueChanged");
static_assert(offsetof(VActorValuesPairingComponent_UnBindOnActorValueChanged, ActorValueToListen) == 0x000000, "Member 'VActorValuesPairingComponent_UnBindOnActorValueChanged::ActorValueToListen' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_UnBindOnActorValueChanged, Callback) == 0x000004, "Member 'VActorValuesPairingComponent_UnBindOnActorValueChanged::Callback' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.UnBindOnAnyActorValueChanged
// 0x0010 (0x0010 - 0x0000)
struct VActorValuesPairingComponent_UnBindOnAnyActorValueChanged final
{
public:
	TDelegate<void(EVActorValues ActorValue, float PreviousBaseValue, float PreviousModifiedValue, float NewBaseValue, float NewModifiedValue)> Callback; // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_UnBindOnAnyActorValueChanged) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_UnBindOnAnyActorValueChanged");
static_assert(sizeof(VActorValuesPairingComponent_UnBindOnAnyActorValueChanged) == 0x000010, "Wrong size on VActorValuesPairingComponent_UnBindOnAnyActorValueChanged");
static_assert(offsetof(VActorValuesPairingComponent_UnBindOnAnyActorValueChanged, Callback) == 0x000000, "Member 'VActorValuesPairingComponent_UnBindOnAnyActorValueChanged::Callback' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetBaseSkillLevel
// 0x0002 (0x0002 - 0x0000)
struct VActorValuesPairingComponent_GetBaseSkillLevel final
{
public:
	EVSkill                                       Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVSkillLevel                                  ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetBaseSkillLevel) == 0x000001, "Wrong alignment on VActorValuesPairingComponent_GetBaseSkillLevel");
static_assert(sizeof(VActorValuesPairingComponent_GetBaseSkillLevel) == 0x000002, "Wrong size on VActorValuesPairingComponent_GetBaseSkillLevel");
static_assert(offsetof(VActorValuesPairingComponent_GetBaseSkillLevel, Skill) == 0x000000, "Member 'VActorValuesPairingComponent_GetBaseSkillLevel::Skill' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetBaseSkillLevel, ReturnValue) == 0x000001, "Member 'VActorValuesPairingComponent_GetBaseSkillLevel::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetEquippedEncumbrance
// 0x0004 (0x0004 - 0x0000)
struct VActorValuesPairingComponent_GetEquippedEncumbrance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetEquippedEncumbrance) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_GetEquippedEncumbrance");
static_assert(sizeof(VActorValuesPairingComponent_GetEquippedEncumbrance) == 0x000004, "Wrong size on VActorValuesPairingComponent_GetEquippedEncumbrance");
static_assert(offsetof(VActorValuesPairingComponent_GetEquippedEncumbrance, ReturnValue) == 0x000000, "Member 'VActorValuesPairingComponent_GetEquippedEncumbrance::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetFloatBaseActorValue
// 0x0008 (0x0008 - 0x0000)
struct VActorValuesPairingComponent_GetFloatBaseActorValue final
{
public:
	EVActorValues                                 ValueWanted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetFloatBaseActorValue) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_GetFloatBaseActorValue");
static_assert(sizeof(VActorValuesPairingComponent_GetFloatBaseActorValue) == 0x000008, "Wrong size on VActorValuesPairingComponent_GetFloatBaseActorValue");
static_assert(offsetof(VActorValuesPairingComponent_GetFloatBaseActorValue, ValueWanted) == 0x000000, "Member 'VActorValuesPairingComponent_GetFloatBaseActorValue::ValueWanted' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetFloatBaseActorValue, ReturnValue) == 0x000004, "Member 'VActorValuesPairingComponent_GetFloatBaseActorValue::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetFloatModifiedActorValue
// 0x0008 (0x0008 - 0x0000)
struct VActorValuesPairingComponent_GetFloatModifiedActorValue final
{
public:
	EVActorValues                                 ValueWanted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetFloatModifiedActorValue) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_GetFloatModifiedActorValue");
static_assert(sizeof(VActorValuesPairingComponent_GetFloatModifiedActorValue) == 0x000008, "Wrong size on VActorValuesPairingComponent_GetFloatModifiedActorValue");
static_assert(offsetof(VActorValuesPairingComponent_GetFloatModifiedActorValue, ValueWanted) == 0x000000, "Member 'VActorValuesPairingComponent_GetFloatModifiedActorValue::ValueWanted' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetFloatModifiedActorValue, ReturnValue) == 0x000004, "Member 'VActorValuesPairingComponent_GetFloatModifiedActorValue::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetIntBaseActorValue
// 0x0008 (0x0008 - 0x0000)
struct VActorValuesPairingComponent_GetIntBaseActorValue final
{
public:
	EVActorValues                                 ValueWanted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetIntBaseActorValue) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_GetIntBaseActorValue");
static_assert(sizeof(VActorValuesPairingComponent_GetIntBaseActorValue) == 0x000008, "Wrong size on VActorValuesPairingComponent_GetIntBaseActorValue");
static_assert(offsetof(VActorValuesPairingComponent_GetIntBaseActorValue, ValueWanted) == 0x000000, "Member 'VActorValuesPairingComponent_GetIntBaseActorValue::ValueWanted' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetIntBaseActorValue, ReturnValue) == 0x000004, "Member 'VActorValuesPairingComponent_GetIntBaseActorValue::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetIntModifiedActorValue
// 0x0008 (0x0008 - 0x0000)
struct VActorValuesPairingComponent_GetIntModifiedActorValue final
{
public:
	EVActorValues                                 ValueWanted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetIntModifiedActorValue) == 0x000004, "Wrong alignment on VActorValuesPairingComponent_GetIntModifiedActorValue");
static_assert(sizeof(VActorValuesPairingComponent_GetIntModifiedActorValue) == 0x000008, "Wrong size on VActorValuesPairingComponent_GetIntModifiedActorValue");
static_assert(offsetof(VActorValuesPairingComponent_GetIntModifiedActorValue, ValueWanted) == 0x000000, "Member 'VActorValuesPairingComponent_GetIntModifiedActorValue::ValueWanted' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetIntModifiedActorValue, ReturnValue) == 0x000004, "Member 'VActorValuesPairingComponent_GetIntModifiedActorValue::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetModifiedSkillLevel
// 0x0002 (0x0002 - 0x0000)
struct VActorValuesPairingComponent_GetModifiedSkillLevel final
{
public:
	EVSkill                                       Skill;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVSkillLevel                                  ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetModifiedSkillLevel) == 0x000001, "Wrong alignment on VActorValuesPairingComponent_GetModifiedSkillLevel");
static_assert(sizeof(VActorValuesPairingComponent_GetModifiedSkillLevel) == 0x000002, "Wrong size on VActorValuesPairingComponent_GetModifiedSkillLevel");
static_assert(offsetof(VActorValuesPairingComponent_GetModifiedSkillLevel, Skill) == 0x000000, "Member 'VActorValuesPairingComponent_GetModifiedSkillLevel::Skill' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetModifiedSkillLevel, ReturnValue) == 0x000001, "Member 'VActorValuesPairingComponent_GetModifiedSkillLevel::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetUIntBaseActorValue
// 0x0002 (0x0002 - 0x0000)
struct VActorValuesPairingComponent_GetUIntBaseActorValue final
{
public:
	EVActorValues                                 ValueWanted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetUIntBaseActorValue) == 0x000001, "Wrong alignment on VActorValuesPairingComponent_GetUIntBaseActorValue");
static_assert(sizeof(VActorValuesPairingComponent_GetUIntBaseActorValue) == 0x000002, "Wrong size on VActorValuesPairingComponent_GetUIntBaseActorValue");
static_assert(offsetof(VActorValuesPairingComponent_GetUIntBaseActorValue, ValueWanted) == 0x000000, "Member 'VActorValuesPairingComponent_GetUIntBaseActorValue::ValueWanted' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetUIntBaseActorValue, ReturnValue) == 0x000001, "Member 'VActorValuesPairingComponent_GetUIntBaseActorValue::ReturnValue' has a wrong offset!");

// Function Altar.VActorValuesPairingComponent.GetUIntModifiedActorValue
// 0x0002 (0x0002 - 0x0000)
struct VActorValuesPairingComponent_GetUIntModifiedActorValue final
{
public:
	EVActorValues                                 ValueWanted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VActorValuesPairingComponent_GetUIntModifiedActorValue) == 0x000001, "Wrong alignment on VActorValuesPairingComponent_GetUIntModifiedActorValue");
static_assert(sizeof(VActorValuesPairingComponent_GetUIntModifiedActorValue) == 0x000002, "Wrong size on VActorValuesPairingComponent_GetUIntModifiedActorValue");
static_assert(offsetof(VActorValuesPairingComponent_GetUIntModifiedActorValue, ValueWanted) == 0x000000, "Member 'VActorValuesPairingComponent_GetUIntModifiedActorValue::ValueWanted' has a wrong offset!");
static_assert(offsetof(VActorValuesPairingComponent_GetUIntModifiedActorValue, ReturnValue) == 0x000001, "Member 'VActorValuesPairingComponent_GetUIntModifiedActorValue::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.RegisterSendClickOnCreateButton
// 0x0010 (0x0010 - 0x0000)
struct VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton final
{
public:
	class FString                                 NewEnchantedItemName;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton");
static_assert(sizeof(VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton) == 0x000010, "Wrong size on VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton");
static_assert(offsetof(VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton, NewEnchantedItemName) == 0x000000, "Member 'VSigilStoneMenuViewModel_RegisterSendClickOnCreateButton::NewEnchantedItemName' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.RegisterSendHoverAnItemToEnchant
// 0x0004 (0x0004 - 0x0000)
struct VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant) == 0x000004, "Wrong alignment on VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant");
static_assert(sizeof(VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant) == 0x000004, "Wrong size on VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant");
static_assert(offsetof(VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant, ItemIndex) == 0x000000, "Member 'VSigilStoneMenuViewModel_RegisterSendHoverAnItemToEnchant::ItemIndex' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetGearEffect
// 0x0060 (0x0060 - 0x0000)
struct VSigilStoneMenuViewModel_SetGearEffect final
{
public:
	struct FModernEffectItemData                  NewAvailableEffect;                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetGearEffect) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_SetGearEffect");
static_assert(sizeof(VSigilStoneMenuViewModel_SetGearEffect) == 0x000060, "Wrong size on VSigilStoneMenuViewModel_SetGearEffect");
static_assert(offsetof(VSigilStoneMenuViewModel_SetGearEffect, NewAvailableEffect) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetGearEffect::NewAvailableEffect' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VSigilStoneMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          bNewIsSortReversed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VSigilStoneMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VSigilStoneMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VSigilStoneMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VSigilStoneMenuViewModel_SetIsSortReversed, bNewIsSortReversed) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetIsSortReversed::bNewIsSortReversed' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetItemsList
// 0x0010 (0x0010 - 0x0000)
struct VSigilStoneMenuViewModel_SetItemsList final
{
public:
	TArray<struct FModernSigilStoneMenuItemProperties> NewList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetItemsList) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_SetItemsList");
static_assert(sizeof(VSigilStoneMenuViewModel_SetItemsList) == 0x000010, "Wrong size on VSigilStoneMenuViewModel_SetItemsList");
static_assert(offsetof(VSigilStoneMenuViewModel_SetItemsList, NewList) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetItemsList::NewList' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetItemToEnchantInfo
// 0x0020 (0x0020 - 0x0000)
struct VSigilStoneMenuViewModel_SetItemToEnchantInfo final
{
public:
	struct FItemToEnchantInfo                     NewItemToEnchantInfo;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetItemToEnchantInfo) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_SetItemToEnchantInfo");
static_assert(sizeof(VSigilStoneMenuViewModel_SetItemToEnchantInfo) == 0x000020, "Wrong size on VSigilStoneMenuViewModel_SetItemToEnchantInfo");
static_assert(offsetof(VSigilStoneMenuViewModel_SetItemToEnchantInfo, NewItemToEnchantInfo) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetItemToEnchantInfo::NewItemToEnchantInfo' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetSigilStoneInfo
// 0x0028 (0x0028 - 0x0000)
struct VSigilStoneMenuViewModel_SetSigilStoneInfo final
{
public:
	struct FSoulGemInfo                           NewSigilStoneInfo;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetSigilStoneInfo) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_SetSigilStoneInfo");
static_assert(sizeof(VSigilStoneMenuViewModel_SetSigilStoneInfo) == 0x000028, "Wrong size on VSigilStoneMenuViewModel_SetSigilStoneInfo");
static_assert(offsetof(VSigilStoneMenuViewModel_SetSigilStoneInfo, NewSigilStoneInfo) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetSigilStoneInfo::NewSigilStoneInfo' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VSigilStoneMenuViewModel_SetSortType final
{
public:
	EOriginalInventoryMenuSortType                NewSortType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VSigilStoneMenuViewModel_SetSortType");
static_assert(sizeof(VSigilStoneMenuViewModel_SetSortType) == 0x000001, "Wrong size on VSigilStoneMenuViewModel_SetSortType");
static_assert(offsetof(VSigilStoneMenuViewModel_SetSortType, NewSortType) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetSortType::NewSortType' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.SetWeaponEffect
// 0x0060 (0x0060 - 0x0000)
struct VSigilStoneMenuViewModel_SetWeaponEffect final
{
public:
	struct FModernEffectItemData                  NewAvailableEffect;                                // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_SetWeaponEffect) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_SetWeaponEffect");
static_assert(sizeof(VSigilStoneMenuViewModel_SetWeaponEffect) == 0x000060, "Wrong size on VSigilStoneMenuViewModel_SetWeaponEffect");
static_assert(offsetof(VSigilStoneMenuViewModel_SetWeaponEffect, NewAvailableEffect) == 0x000000, "Member 'VSigilStoneMenuViewModel_SetWeaponEffect::NewAvailableEffect' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.GetGearEffect
// 0x0060 (0x0060 - 0x0000)
struct VSigilStoneMenuViewModel_GetGearEffect final
{
public:
	struct FModernEffectItemData                  ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_GetGearEffect) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_GetGearEffect");
static_assert(sizeof(VSigilStoneMenuViewModel_GetGearEffect) == 0x000060, "Wrong size on VSigilStoneMenuViewModel_GetGearEffect");
static_assert(offsetof(VSigilStoneMenuViewModel_GetGearEffect, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_GetGearEffect::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.GetItemsList
// 0x0010 (0x0010 - 0x0000)
struct VSigilStoneMenuViewModel_GetItemsList final
{
public:
	TArray<struct FModernSigilStoneMenuItemProperties> ReturnValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_GetItemsList) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_GetItemsList");
static_assert(sizeof(VSigilStoneMenuViewModel_GetItemsList) == 0x000010, "Wrong size on VSigilStoneMenuViewModel_GetItemsList");
static_assert(offsetof(VSigilStoneMenuViewModel_GetItemsList, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_GetItemsList::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.GetItemToEnchantInfo
// 0x0020 (0x0020 - 0x0000)
struct VSigilStoneMenuViewModel_GetItemToEnchantInfo final
{
public:
	struct FItemToEnchantInfo                     ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_GetItemToEnchantInfo) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_GetItemToEnchantInfo");
static_assert(sizeof(VSigilStoneMenuViewModel_GetItemToEnchantInfo) == 0x000020, "Wrong size on VSigilStoneMenuViewModel_GetItemToEnchantInfo");
static_assert(offsetof(VSigilStoneMenuViewModel_GetItemToEnchantInfo, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_GetItemToEnchantInfo::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.GetSigilStoneInfo
// 0x0028 (0x0028 - 0x0000)
struct VSigilStoneMenuViewModel_GetSigilStoneInfo final
{
public:
	struct FSoulGemInfo                           ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_GetSigilStoneInfo) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_GetSigilStoneInfo");
static_assert(sizeof(VSigilStoneMenuViewModel_GetSigilStoneInfo) == 0x000028, "Wrong size on VSigilStoneMenuViewModel_GetSigilStoneInfo");
static_assert(offsetof(VSigilStoneMenuViewModel_GetSigilStoneInfo, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_GetSigilStoneInfo::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VSigilStoneMenuViewModel_GetSortType final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VSigilStoneMenuViewModel_GetSortType");
static_assert(sizeof(VSigilStoneMenuViewModel_GetSortType) == 0x000001, "Wrong size on VSigilStoneMenuViewModel_GetSortType");
static_assert(offsetof(VSigilStoneMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.GetWeaponEffect
// 0x0060 (0x0060 - 0x0000)
struct VSigilStoneMenuViewModel_GetWeaponEffect final
{
public:
	struct FModernEffectItemData                  ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_GetWeaponEffect) == 0x000008, "Wrong alignment on VSigilStoneMenuViewModel_GetWeaponEffect");
static_assert(sizeof(VSigilStoneMenuViewModel_GetWeaponEffect) == 0x000060, "Wrong size on VSigilStoneMenuViewModel_GetWeaponEffect");
static_assert(offsetof(VSigilStoneMenuViewModel_GetWeaponEffect, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_GetWeaponEffect::ReturnValue' has a wrong offset!");

// Function Altar.VSigilStoneMenuViewModel.IsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VSigilStoneMenuViewModel_IsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSigilStoneMenuViewModel_IsSortReversed) == 0x000001, "Wrong alignment on VSigilStoneMenuViewModel_IsSortReversed");
static_assert(sizeof(VSigilStoneMenuViewModel_IsSortReversed) == 0x000001, "Wrong size on VSigilStoneMenuViewModel_IsSortReversed");
static_assert(offsetof(VSigilStoneMenuViewModel_IsSortReversed, ReturnValue) == 0x000000, "Member 'VSigilStoneMenuViewModel_IsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyEffectItem.SetProperties
// 0x0060 (0x0060 - 0x0000)
struct VLegacyEffectItem_SetProperties final
{
public:
	struct FLegacyAddedEffectItemProperties       Value;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyEffectItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyEffectItem_SetProperties");
static_assert(sizeof(VLegacyEffectItem_SetProperties) == 0x000060, "Wrong size on VLegacyEffectItem_SetProperties");
static_assert(offsetof(VLegacyEffectItem_SetProperties, Value) == 0x000000, "Member 'VLegacyEffectItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyEffectItem.GetProperties
// 0x0060 (0x0060 - 0x0000)
struct VLegacyEffectItem_GetProperties final
{
public:
	struct FLegacyAddedEffectItemProperties       ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyEffectItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyEffectItem_GetProperties");
static_assert(sizeof(VLegacyEffectItem_GetProperties) == 0x000060, "Wrong size on VLegacyEffectItem_GetProperties");
static_assert(offsetof(VLegacyEffectItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyEffectItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VModernEffectItem.SetProperties
// 0x0060 (0x0060 - 0x0000)
struct VModernEffectItem_SetProperties final
{
public:
	struct FModernEffectItemData                  Value;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernEffectItem_SetProperties) == 0x000008, "Wrong alignment on VModernEffectItem_SetProperties");
static_assert(sizeof(VModernEffectItem_SetProperties) == 0x000060, "Wrong size on VModernEffectItem_SetProperties");
static_assert(offsetof(VModernEffectItem_SetProperties, Value) == 0x000000, "Member 'VModernEffectItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VModernEffectItem.GetProperties
// 0x0060 (0x0060 - 0x0000)
struct VModernEffectItem_GetProperties final
{
public:
	struct FModernEffectItemData                  ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernEffectItem_GetProperties) == 0x000008, "Wrong alignment on VModernEffectItem_GetProperties");
static_assert(sizeof(VModernEffectItem_GetProperties) == 0x000060, "Wrong size on VModernEffectItem_GetProperties");
static_assert(offsetof(VModernEffectItem_GetProperties, ReturnValue) == 0x000000, "Member 'VModernEffectItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VAddedEffectsListViewModel.SetAddedEffectsList
// 0x0010 (0x0010 - 0x0000)
struct VAddedEffectsListViewModel_SetAddedEffectsList final
{
public:
	TArray<struct FLegacyAddedEffectItemProperties> NewAddedEffectsList;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAddedEffectsListViewModel_SetAddedEffectsList) == 0x000008, "Wrong alignment on VAddedEffectsListViewModel_SetAddedEffectsList");
static_assert(sizeof(VAddedEffectsListViewModel_SetAddedEffectsList) == 0x000010, "Wrong size on VAddedEffectsListViewModel_SetAddedEffectsList");
static_assert(offsetof(VAddedEffectsListViewModel_SetAddedEffectsList, NewAddedEffectsList) == 0x000000, "Member 'VAddedEffectsListViewModel_SetAddedEffectsList::NewAddedEffectsList' has a wrong offset!");

// Function Altar.VAddedEffectsListViewModel.SetModernAddedItemEffectsList
// 0x0010 (0x0010 - 0x0000)
struct VAddedEffectsListViewModel_SetModernAddedItemEffectsList final
{
public:
	TArray<struct FModernEffectItemData>          NewModernAddedItemEffectsList;                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAddedEffectsListViewModel_SetModernAddedItemEffectsList) == 0x000008, "Wrong alignment on VAddedEffectsListViewModel_SetModernAddedItemEffectsList");
static_assert(sizeof(VAddedEffectsListViewModel_SetModernAddedItemEffectsList) == 0x000010, "Wrong size on VAddedEffectsListViewModel_SetModernAddedItemEffectsList");
static_assert(offsetof(VAddedEffectsListViewModel_SetModernAddedItemEffectsList, NewModernAddedItemEffectsList) == 0x000000, "Member 'VAddedEffectsListViewModel_SetModernAddedItemEffectsList::NewModernAddedItemEffectsList' has a wrong offset!");

// Function Altar.VAddedEffectsListViewModel.GetAddedEffectsList
// 0x0010 (0x0010 - 0x0000)
struct VAddedEffectsListViewModel_GetAddedEffectsList final
{
public:
	TArray<struct FLegacyAddedEffectItemProperties> ReturnValue;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAddedEffectsListViewModel_GetAddedEffectsList) == 0x000008, "Wrong alignment on VAddedEffectsListViewModel_GetAddedEffectsList");
static_assert(sizeof(VAddedEffectsListViewModel_GetAddedEffectsList) == 0x000010, "Wrong size on VAddedEffectsListViewModel_GetAddedEffectsList");
static_assert(offsetof(VAddedEffectsListViewModel_GetAddedEffectsList, ReturnValue) == 0x000000, "Member 'VAddedEffectsListViewModel_GetAddedEffectsList::ReturnValue' has a wrong offset!");

// Function Altar.VAddedEffectsListViewModel.GetModernAddedItemEffectsList
// 0x0010 (0x0010 - 0x0000)
struct VAddedEffectsListViewModel_GetModernAddedItemEffectsList final
{
public:
	TArray<struct FModernEffectItemData>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAddedEffectsListViewModel_GetModernAddedItemEffectsList) == 0x000008, "Wrong alignment on VAddedEffectsListViewModel_GetModernAddedItemEffectsList");
static_assert(sizeof(VAddedEffectsListViewModel_GetModernAddedItemEffectsList) == 0x000010, "Wrong size on VAddedEffectsListViewModel_GetModernAddedItemEffectsList");
static_assert(offsetof(VAddedEffectsListViewModel_GetModernAddedItemEffectsList, ReturnValue) == 0x000000, "Member 'VAddedEffectsListViewModel_GetModernAddedItemEffectsList::ReturnValue' has a wrong offset!");

// Function Altar.VAltarCursor.SetCursorVisibility
// 0x0001 (0x0001 - 0x0000)
struct VAltarCursor_SetCursorVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCursor_SetCursorVisibility) == 0x000001, "Wrong alignment on VAltarCursor_SetCursorVisibility");
static_assert(sizeof(VAltarCursor_SetCursorVisibility) == 0x000001, "Wrong size on VAltarCursor_SetCursorVisibility");
static_assert(offsetof(VAltarCursor_SetCursorVisibility, bVisible) == 0x000000, "Member 'VAltarCursor_SetCursorVisibility::bVisible' has a wrong offset!");

// Function Altar.VAltarCursor.OnUpdateCursorSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarCursor_OnUpdateCursorSize final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCursor_OnUpdateCursorSize) == 0x000004, "Wrong alignment on VAltarCursor_OnUpdateCursorSize");
static_assert(sizeof(VAltarCursor_OnUpdateCursorSize) == 0x000004, "Wrong size on VAltarCursor_OnUpdateCursorSize");
static_assert(offsetof(VAltarCursor_OnUpdateCursorSize, Delta) == 0x000000, "Member 'VAltarCursor_OnUpdateCursorSize::Delta' has a wrong offset!");

// Function Altar.VAltarCursor.OnUpdateCursorVisibility
// 0x0001 (0x0001 - 0x0000)
struct VAltarCursor_OnUpdateCursorVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCursor_OnUpdateCursorVisibility) == 0x000001, "Wrong alignment on VAltarCursor_OnUpdateCursorVisibility");
static_assert(sizeof(VAltarCursor_OnUpdateCursorVisibility) == 0x000001, "Wrong size on VAltarCursor_OnUpdateCursorVisibility");
static_assert(offsetof(VAltarCursor_OnUpdateCursorVisibility, bVisible) == 0x000000, "Member 'VAltarCursor_OnUpdateCursorVisibility::bVisible' has a wrong offset!");

// Function Altar.VAvailableEffectsListViewModel.SetAvailableEffects
// 0x0010 (0x0010 - 0x0000)
struct VAvailableEffectsListViewModel_SetAvailableEffects final
{
public:
	TArray<struct FAvailableEffectData>           NewAvailableEffects;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAvailableEffectsListViewModel_SetAvailableEffects) == 0x000008, "Wrong alignment on VAvailableEffectsListViewModel_SetAvailableEffects");
static_assert(sizeof(VAvailableEffectsListViewModel_SetAvailableEffects) == 0x000010, "Wrong size on VAvailableEffectsListViewModel_SetAvailableEffects");
static_assert(offsetof(VAvailableEffectsListViewModel_SetAvailableEffects, NewAvailableEffects) == 0x000000, "Member 'VAvailableEffectsListViewModel_SetAvailableEffects::NewAvailableEffects' has a wrong offset!");

// Function Altar.VAvailableEffectsListViewModel.GetAvailableEffects
// 0x0010 (0x0010 - 0x0000)
struct VAvailableEffectsListViewModel_GetAvailableEffects final
{
public:
	TArray<struct FAvailableEffectData>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAvailableEffectsListViewModel_GetAvailableEffects) == 0x000008, "Wrong alignment on VAvailableEffectsListViewModel_GetAvailableEffects");
static_assert(sizeof(VAvailableEffectsListViewModel_GetAvailableEffects) == 0x000010, "Wrong size on VAvailableEffectsListViewModel_GetAvailableEffects");
static_assert(offsetof(VAvailableEffectsListViewModel_GetAvailableEffects, ReturnValue) == 0x000000, "Member 'VAvailableEffectsListViewModel_GetAvailableEffects::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_Acquire.GetInternalActivateProcedure
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_Acquire_GetInternalActivateProcedure final
{
public:
	class UVAIProcedureExecution_ACTIVATE*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_Acquire_GetInternalActivateProcedure) == 0x000008, "Wrong alignment on VAIProcedureExecution_Acquire_GetInternalActivateProcedure");
static_assert(sizeof(VAIProcedureExecution_Acquire_GetInternalActivateProcedure) == 0x000008, "Wrong size on VAIProcedureExecution_Acquire_GetInternalActivateProcedure");
static_assert(offsetof(VAIProcedureExecution_Acquire_GetInternalActivateProcedure, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_Acquire_GetInternalActivateProcedure::ReturnValue' has a wrong offset!");

// Function Altar.VAltarTextBlock.SetDefaultFontSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarTextBlock_SetDefaultFontSize final
{
public:
	float                                         NewFontSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTextBlock_SetDefaultFontSize) == 0x000004, "Wrong alignment on VAltarTextBlock_SetDefaultFontSize");
static_assert(sizeof(VAltarTextBlock_SetDefaultFontSize) == 0x000004, "Wrong size on VAltarTextBlock_SetDefaultFontSize");
static_assert(offsetof(VAltarTextBlock_SetDefaultFontSize, NewFontSize) == 0x000000, "Member 'VAltarTextBlock_SetDefaultFontSize::NewFontSize' has a wrong offset!");

// Function Altar.VAltarTextBlock.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarTextBlock_SetFontSize final
{
public:
	int32                                         FontSizeDelta;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTextBlock_SetFontSize) == 0x000004, "Wrong alignment on VAltarTextBlock_SetFontSize");
static_assert(sizeof(VAltarTextBlock_SetFontSize) == 0x000004, "Wrong size on VAltarTextBlock_SetFontSize");
static_assert(offsetof(VAltarTextBlock_SetFontSize, FontSizeDelta) == 0x000000, "Member 'VAltarTextBlock_SetFontSize::FontSizeDelta' has a wrong offset!");

// Function Altar.VAIProcedureExecution_Sleep.GetInternalProcedure
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_Sleep_GetInternalProcedure final
{
public:
	class UVAIProcedureExecution_TRAVEL*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_Sleep_GetInternalProcedure) == 0x000008, "Wrong alignment on VAIProcedureExecution_Sleep_GetInternalProcedure");
static_assert(sizeof(VAIProcedureExecution_Sleep_GetInternalProcedure) == 0x000008, "Wrong size on VAIProcedureExecution_Sleep_GetInternalProcedure");
static_assert(offsetof(VAIProcedureExecution_Sleep_GetInternalProcedure, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_Sleep_GetInternalProcedure::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_USE_ITEM.SetUsedObjectFormId
// 0x0004 (0x0004 - 0x0000)
struct VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId final
{
public:
	int32                                         iUsedObjectFormId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId) == 0x000004, "Wrong alignment on VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId");
static_assert(sizeof(VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId) == 0x000004, "Wrong size on VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId");
static_assert(offsetof(VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId, iUsedObjectFormId) == 0x000000, "Member 'VAIProcedureExecution_USE_ITEM_SetUsedObjectFormId::iUsedObjectFormId' has a wrong offset!");

// Function Altar.VAIProcedureExecution_USE_ITEM.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct VAIProcedureExecution_USE_ITEM_GetTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_USE_ITEM_GetTarget) == 0x000008, "Wrong alignment on VAIProcedureExecution_USE_ITEM_GetTarget");
static_assert(sizeof(VAIProcedureExecution_USE_ITEM_GetTarget) == 0x000008, "Wrong size on VAIProcedureExecution_USE_ITEM_GetTarget");
static_assert(offsetof(VAIProcedureExecution_USE_ITEM_GetTarget, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_USE_ITEM_GetTarget::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_USE_ITEM.GetUsageCount
// 0x0004 (0x0004 - 0x0000)
struct VAIProcedureExecution_USE_ITEM_GetUsageCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_USE_ITEM_GetUsageCount) == 0x000004, "Wrong alignment on VAIProcedureExecution_USE_ITEM_GetUsageCount");
static_assert(sizeof(VAIProcedureExecution_USE_ITEM_GetUsageCount) == 0x000004, "Wrong size on VAIProcedureExecution_USE_ITEM_GetUsageCount");
static_assert(offsetof(VAIProcedureExecution_USE_ITEM_GetUsageCount, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_USE_ITEM_GetUsageCount::ReturnValue' has a wrong offset!");

// Function Altar.VAIProcedureExecution_USE_ITEM.GetUsageRadius
// 0x0004 (0x0004 - 0x0000)
struct VAIProcedureExecution_USE_ITEM_GetUsageRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAIProcedureExecution_USE_ITEM_GetUsageRadius) == 0x000004, "Wrong alignment on VAIProcedureExecution_USE_ITEM_GetUsageRadius");
static_assert(sizeof(VAIProcedureExecution_USE_ITEM_GetUsageRadius) == 0x000004, "Wrong size on VAIProcedureExecution_USE_ITEM_GetUsageRadius");
static_assert(offsetof(VAIProcedureExecution_USE_ITEM_GetUsageRadius, ReturnValue) == 0x000000, "Member 'VAIProcedureExecution_USE_ITEM_GetUsageRadius::ReturnValue' has a wrong offset!");

// Function Altar.VModernAlchemyEffect.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModernAlchemyEffect_SetIsSelected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernAlchemyEffect_SetIsSelected) == 0x000001, "Wrong alignment on VModernAlchemyEffect_SetIsSelected");
static_assert(sizeof(VModernAlchemyEffect_SetIsSelected) == 0x000001, "Wrong size on VModernAlchemyEffect_SetIsSelected");
static_assert(offsetof(VModernAlchemyEffect_SetIsSelected, Value) == 0x000000, "Member 'VModernAlchemyEffect_SetIsSelected::Value' has a wrong offset!");

// Function Altar.VModernAlchemyEffect.SetProperties
// 0x0040 (0x0040 - 0x0000)
struct VModernAlchemyEffect_SetProperties final
{
public:
	struct FModernItemEffectProperties            Value;                                             // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernAlchemyEffect_SetProperties) == 0x000008, "Wrong alignment on VModernAlchemyEffect_SetProperties");
static_assert(sizeof(VModernAlchemyEffect_SetProperties) == 0x000040, "Wrong size on VModernAlchemyEffect_SetProperties");
static_assert(offsetof(VModernAlchemyEffect_SetProperties, Value) == 0x000000, "Member 'VModernAlchemyEffect_SetProperties::Value' has a wrong offset!");

// Function Altar.VModernAlchemyEffect.GetProperties
// 0x0040 (0x0040 - 0x0000)
struct VModernAlchemyEffect_GetProperties final
{
public:
	struct FModernItemEffectProperties            ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernAlchemyEffect_GetProperties) == 0x000008, "Wrong alignment on VModernAlchemyEffect_GetProperties");
static_assert(sizeof(VModernAlchemyEffect_GetProperties) == 0x000040, "Wrong size on VModernAlchemyEffect_GetProperties");
static_assert(offsetof(VModernAlchemyEffect_GetProperties, ReturnValue) == 0x000000, "Member 'VModernAlchemyEffect_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VModernAlchemyEffect.IsEffectSelected
// 0x0001 (0x0001 - 0x0000)
struct VModernAlchemyEffect_IsEffectSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernAlchemyEffect_IsEffectSelected) == 0x000001, "Wrong alignment on VModernAlchemyEffect_IsEffectSelected");
static_assert(sizeof(VModernAlchemyEffect_IsEffectSelected) == 0x000001, "Wrong size on VModernAlchemyEffect_IsEffectSelected");
static_assert(offsetof(VModernAlchemyEffect_IsEffectSelected, ReturnValue) == 0x000000, "Member 'VModernAlchemyEffect_IsEffectSelected::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.OnEffectFilterClicked
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_OnEffectFilterClicked final
{
public:
	class FString                                 EffectName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_OnEffectFilterClicked) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_OnEffectFilterClicked");
static_assert(sizeof(VAlchemyMenuViewModel_OnEffectFilterClicked) == 0x000010, "Wrong size on VAlchemyMenuViewModel_OnEffectFilterClicked");
static_assert(offsetof(VAlchemyMenuViewModel_OnEffectFilterClicked, EffectName) == 0x000000, "Member 'VAlchemyMenuViewModel_OnEffectFilterClicked::EffectName' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedCreate
// 0x0018 (0x0018 - 0x0000)
struct VAlchemyMenuViewModel_RegisterSendClickedCreate final
{
public:
	class FText                                   NewPotionName;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_RegisterSendClickedCreate) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_RegisterSendClickedCreate");
static_assert(sizeof(VAlchemyMenuViewModel_RegisterSendClickedCreate) == 0x000018, "Wrong size on VAlchemyMenuViewModel_RegisterSendClickedCreate");
static_assert(offsetof(VAlchemyMenuViewModel_RegisterSendClickedCreate, NewPotionName) == 0x000000, "Member 'VAlchemyMenuViewModel_RegisterSendClickedCreate::NewPotionName' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedIngredient
// 0x0004 (0x0004 - 0x0000)
struct VAlchemyMenuViewModel_RegisterSendClickedIngredient final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_RegisterSendClickedIngredient) == 0x000004, "Wrong alignment on VAlchemyMenuViewModel_RegisterSendClickedIngredient");
static_assert(sizeof(VAlchemyMenuViewModel_RegisterSendClickedIngredient) == 0x000004, "Wrong size on VAlchemyMenuViewModel_RegisterSendClickedIngredient");
static_assert(offsetof(VAlchemyMenuViewModel_RegisterSendClickedIngredient, Index_0) == 0x000000, "Member 'VAlchemyMenuViewModel_RegisterSendClickedIngredient::Index_0' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.RegisterSendClickedItem
// 0x0004 (0x0004 - 0x0000)
struct VAlchemyMenuViewModel_RegisterSendClickedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_RegisterSendClickedItem) == 0x000004, "Wrong alignment on VAlchemyMenuViewModel_RegisterSendClickedItem");
static_assert(sizeof(VAlchemyMenuViewModel_RegisterSendClickedItem) == 0x000004, "Wrong size on VAlchemyMenuViewModel_RegisterSendClickedItem");
static_assert(offsetof(VAlchemyMenuViewModel_RegisterSendClickedItem, ItemIndex) == 0x000000, "Member 'VAlchemyMenuViewModel_RegisterSendClickedItem::ItemIndex' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetApparatusProperties
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_SetApparatusProperties final
{
public:
	TArray<struct FModernApparatusProperties>     NewProperties;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetApparatusProperties) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetApparatusProperties");
static_assert(sizeof(VAlchemyMenuViewModel_SetApparatusProperties) == 0x000010, "Wrong size on VAlchemyMenuViewModel_SetApparatusProperties");
static_assert(offsetof(VAlchemyMenuViewModel_SetApparatusProperties, NewProperties) == 0x000000, "Member 'VAlchemyMenuViewModel_SetApparatusProperties::NewProperties' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetCreateButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct VAlchemyMenuViewModel_SetCreateButtonEnable final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetCreateButtonEnable) == 0x000001, "Wrong alignment on VAlchemyMenuViewModel_SetCreateButtonEnable");
static_assert(sizeof(VAlchemyMenuViewModel_SetCreateButtonEnable) == 0x000001, "Wrong size on VAlchemyMenuViewModel_SetCreateButtonEnable");
static_assert(offsetof(VAlchemyMenuViewModel_SetCreateButtonEnable, bNewValue) == 0x000000, "Member 'VAlchemyMenuViewModel_SetCreateButtonEnable::bNewValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetCurrentItemEffects
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_SetCurrentItemEffects final
{
public:
	TArray<struct FModernItemEffectProperties>    NewEffectsProperties;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetCurrentItemEffects) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetCurrentItemEffects");
static_assert(sizeof(VAlchemyMenuViewModel_SetCurrentItemEffects) == 0x000010, "Wrong size on VAlchemyMenuViewModel_SetCurrentItemEffects");
static_assert(offsetof(VAlchemyMenuViewModel_SetCurrentItemEffects, NewEffectsProperties) == 0x000000, "Member 'VAlchemyMenuViewModel_SetCurrentItemEffects::NewEffectsProperties' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetEffectFiltersSelectedNames
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_SetEffectFiltersSelectedNames final
{
public:
	TArray<class FString>                         NewEffectFiltersSelected;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetEffectFiltersSelectedNames) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetEffectFiltersSelectedNames");
static_assert(sizeof(VAlchemyMenuViewModel_SetEffectFiltersSelectedNames) == 0x000010, "Wrong size on VAlchemyMenuViewModel_SetEffectFiltersSelectedNames");
static_assert(offsetof(VAlchemyMenuViewModel_SetEffectFiltersSelectedNames, NewEffectFiltersSelected) == 0x000000, "Member 'VAlchemyMenuViewModel_SetEffectFiltersSelectedNames::NewEffectFiltersSelected' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetIngredientItems
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_SetIngredientItems final
{
public:
	TArray<struct FLegacyIngredientItemProperties> NewItems;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetIngredientItems) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetIngredientItems");
static_assert(sizeof(VAlchemyMenuViewModel_SetIngredientItems) == 0x000010, "Wrong size on VAlchemyMenuViewModel_SetIngredientItems");
static_assert(offsetof(VAlchemyMenuViewModel_SetIngredientItems, NewItems) == 0x000000, "Member 'VAlchemyMenuViewModel_SetIngredientItems::NewItems' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetItemsList
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_SetItemsList final
{
public:
	TArray<struct FLegacyIngredientItemProperties> NewIngredients;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetItemsList) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetItemsList");
static_assert(sizeof(VAlchemyMenuViewModel_SetItemsList) == 0x000010, "Wrong size on VAlchemyMenuViewModel_SetItemsList");
static_assert(offsetof(VAlchemyMenuViewModel_SetItemsList, NewIngredients) == 0x000000, "Member 'VAlchemyMenuViewModel_SetItemsList::NewIngredients' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetPotionDefaultNameAndKey
// 0x0030 (0x0030 - 0x0000)
struct VAlchemyMenuViewModel_SetPotionDefaultNameAndKey final
{
public:
	class FText                                   NewLocalizedPotionName;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   AssiosiatedKey;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetPotionDefaultNameAndKey) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetPotionDefaultNameAndKey");
static_assert(sizeof(VAlchemyMenuViewModel_SetPotionDefaultNameAndKey) == 0x000030, "Wrong size on VAlchemyMenuViewModel_SetPotionDefaultNameAndKey");
static_assert(offsetof(VAlchemyMenuViewModel_SetPotionDefaultNameAndKey, NewLocalizedPotionName) == 0x000000, "Member 'VAlchemyMenuViewModel_SetPotionDefaultNameAndKey::NewLocalizedPotionName' has a wrong offset!");
static_assert(offsetof(VAlchemyMenuViewModel_SetPotionDefaultNameAndKey, AssiosiatedKey) == 0x000018, "Member 'VAlchemyMenuViewModel_SetPotionDefaultNameAndKey::AssiosiatedKey' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetPotionName
// 0x0018 (0x0018 - 0x0000)
struct VAlchemyMenuViewModel_SetPotionName final
{
public:
	class FText                                   NewPotionName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetPotionName) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SetPotionName");
static_assert(sizeof(VAlchemyMenuViewModel_SetPotionName) == 0x000018, "Wrong size on VAlchemyMenuViewModel_SetPotionName");
static_assert(offsetof(VAlchemyMenuViewModel_SetPotionName, NewPotionName) == 0x000000, "Member 'VAlchemyMenuViewModel_SetPotionName::NewPotionName' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetPotionPrice
// 0x0004 (0x0004 - 0x0000)
struct VAlchemyMenuViewModel_SetPotionPrice final
{
public:
	int32                                         NewPrice;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetPotionPrice) == 0x000004, "Wrong alignment on VAlchemyMenuViewModel_SetPotionPrice");
static_assert(sizeof(VAlchemyMenuViewModel_SetPotionPrice) == 0x000004, "Wrong size on VAlchemyMenuViewModel_SetPotionPrice");
static_assert(offsetof(VAlchemyMenuViewModel_SetPotionPrice, NewPrice) == 0x000000, "Member 'VAlchemyMenuViewModel_SetPotionPrice::NewPrice' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SetPotionWeight
// 0x0004 (0x0004 - 0x0000)
struct VAlchemyMenuViewModel_SetPotionWeight final
{
public:
	float                                         NewWeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SetPotionWeight) == 0x000004, "Wrong alignment on VAlchemyMenuViewModel_SetPotionWeight");
static_assert(sizeof(VAlchemyMenuViewModel_SetPotionWeight) == 0x000004, "Wrong size on VAlchemyMenuViewModel_SetPotionWeight");
static_assert(offsetof(VAlchemyMenuViewModel_SetPotionWeight, NewWeight) == 0x000000, "Member 'VAlchemyMenuViewModel_SetPotionWeight::NewWeight' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.SortEffectsListByName
// 0x0020 (0x0020 - 0x0000)
struct VAlchemyMenuViewModel_SortEffectsListByName final
{
public:
	TArray<struct FModernItemEffectProperties>    Effects;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FModernItemEffectProperties>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_SortEffectsListByName) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_SortEffectsListByName");
static_assert(sizeof(VAlchemyMenuViewModel_SortEffectsListByName) == 0x000020, "Wrong size on VAlchemyMenuViewModel_SortEffectsListByName");
static_assert(offsetof(VAlchemyMenuViewModel_SortEffectsListByName, Effects) == 0x000000, "Member 'VAlchemyMenuViewModel_SortEffectsListByName::Effects' has a wrong offset!");
static_assert(offsetof(VAlchemyMenuViewModel_SortEffectsListByName, ReturnValue) == 0x000010, "Member 'VAlchemyMenuViewModel_SortEffectsListByName::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetApparatusProperties
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_GetApparatusProperties final
{
public:
	TArray<struct FModernApparatusProperties>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetApparatusProperties) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetApparatusProperties");
static_assert(sizeof(VAlchemyMenuViewModel_GetApparatusProperties) == 0x000010, "Wrong size on VAlchemyMenuViewModel_GetApparatusProperties");
static_assert(offsetof(VAlchemyMenuViewModel_GetApparatusProperties, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetApparatusProperties::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetCreateButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct VAlchemyMenuViewModel_GetCreateButtonEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetCreateButtonEnable) == 0x000001, "Wrong alignment on VAlchemyMenuViewModel_GetCreateButtonEnable");
static_assert(sizeof(VAlchemyMenuViewModel_GetCreateButtonEnable) == 0x000001, "Wrong size on VAlchemyMenuViewModel_GetCreateButtonEnable");
static_assert(offsetof(VAlchemyMenuViewModel_GetCreateButtonEnable, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetCreateButtonEnable::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetCurrentItemEffects
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_GetCurrentItemEffects final
{
public:
	TArray<struct FModernItemEffectProperties>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetCurrentItemEffects) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetCurrentItemEffects");
static_assert(sizeof(VAlchemyMenuViewModel_GetCurrentItemEffects) == 0x000010, "Wrong size on VAlchemyMenuViewModel_GetCurrentItemEffects");
static_assert(offsetof(VAlchemyMenuViewModel_GetCurrentItemEffects, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetCurrentItemEffects::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetEffectFiltersSelectedNames
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_GetEffectFiltersSelectedNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetEffectFiltersSelectedNames) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetEffectFiltersSelectedNames");
static_assert(sizeof(VAlchemyMenuViewModel_GetEffectFiltersSelectedNames) == 0x000010, "Wrong size on VAlchemyMenuViewModel_GetEffectFiltersSelectedNames");
static_assert(offsetof(VAlchemyMenuViewModel_GetEffectFiltersSelectedNames, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetEffectFiltersSelectedNames::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetIngredientItems
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_GetIngredientItems final
{
public:
	TArray<struct FLegacyIngredientItemProperties> ReturnValue;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetIngredientItems) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetIngredientItems");
static_assert(sizeof(VAlchemyMenuViewModel_GetIngredientItems) == 0x000010, "Wrong size on VAlchemyMenuViewModel_GetIngredientItems");
static_assert(offsetof(VAlchemyMenuViewModel_GetIngredientItems, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetIngredientItems::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetItemsList
// 0x0010 (0x0010 - 0x0000)
struct VAlchemyMenuViewModel_GetItemsList final
{
public:
	TArray<struct FLegacyIngredientItemProperties> ReturnValue;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetItemsList) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetItemsList");
static_assert(sizeof(VAlchemyMenuViewModel_GetItemsList) == 0x000010, "Wrong size on VAlchemyMenuViewModel_GetItemsList");
static_assert(offsetof(VAlchemyMenuViewModel_GetItemsList, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetItemsList::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetLocalizedPotionDefaultName
// 0x0018 (0x0018 - 0x0000)
struct VAlchemyMenuViewModel_GetLocalizedPotionDefaultName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetLocalizedPotionDefaultName) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetLocalizedPotionDefaultName");
static_assert(sizeof(VAlchemyMenuViewModel_GetLocalizedPotionDefaultName) == 0x000018, "Wrong size on VAlchemyMenuViewModel_GetLocalizedPotionDefaultName");
static_assert(offsetof(VAlchemyMenuViewModel_GetLocalizedPotionDefaultName, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetLocalizedPotionDefaultName::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetPotionDefaultNameKey
// 0x0018 (0x0018 - 0x0000)
struct VAlchemyMenuViewModel_GetPotionDefaultNameKey final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetPotionDefaultNameKey) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetPotionDefaultNameKey");
static_assert(sizeof(VAlchemyMenuViewModel_GetPotionDefaultNameKey) == 0x000018, "Wrong size on VAlchemyMenuViewModel_GetPotionDefaultNameKey");
static_assert(offsetof(VAlchemyMenuViewModel_GetPotionDefaultNameKey, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetPotionDefaultNameKey::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetPotionName
// 0x0018 (0x0018 - 0x0000)
struct VAlchemyMenuViewModel_GetPotionName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetPotionName) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_GetPotionName");
static_assert(sizeof(VAlchemyMenuViewModel_GetPotionName) == 0x000018, "Wrong size on VAlchemyMenuViewModel_GetPotionName");
static_assert(offsetof(VAlchemyMenuViewModel_GetPotionName, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetPotionName::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetPotionPrice
// 0x0004 (0x0004 - 0x0000)
struct VAlchemyMenuViewModel_GetPotionPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetPotionPrice) == 0x000004, "Wrong alignment on VAlchemyMenuViewModel_GetPotionPrice");
static_assert(sizeof(VAlchemyMenuViewModel_GetPotionPrice) == 0x000004, "Wrong size on VAlchemyMenuViewModel_GetPotionPrice");
static_assert(offsetof(VAlchemyMenuViewModel_GetPotionPrice, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetPotionPrice::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.GetPotionWeight
// 0x0004 (0x0004 - 0x0000)
struct VAlchemyMenuViewModel_GetPotionWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_GetPotionWeight) == 0x000004, "Wrong alignment on VAlchemyMenuViewModel_GetPotionWeight");
static_assert(sizeof(VAlchemyMenuViewModel_GetPotionWeight) == 0x000004, "Wrong size on VAlchemyMenuViewModel_GetPotionWeight");
static_assert(offsetof(VAlchemyMenuViewModel_GetPotionWeight, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_GetPotionWeight::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.HasEffectOnFilter
// 0x0048 (0x0048 - 0x0000)
struct VAlchemyMenuViewModel_HasEffectOnFilter final
{
public:
	struct FLegacyIngredientItemProperties        Item;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAlchemyMenuViewModel_HasEffectOnFilter) == 0x000008, "Wrong alignment on VAlchemyMenuViewModel_HasEffectOnFilter");
static_assert(sizeof(VAlchemyMenuViewModel_HasEffectOnFilter) == 0x000048, "Wrong size on VAlchemyMenuViewModel_HasEffectOnFilter");
static_assert(offsetof(VAlchemyMenuViewModel_HasEffectOnFilter, Item) == 0x000000, "Member 'VAlchemyMenuViewModel_HasEffectOnFilter::Item' has a wrong offset!");
static_assert(offsetof(VAlchemyMenuViewModel_HasEffectOnFilter, ReturnValue) == 0x000040, "Member 'VAlchemyMenuViewModel_HasEffectOnFilter::ReturnValue' has a wrong offset!");

// Function Altar.VAlchemyMenuViewModel.MustContainAllSelectedFilters
// 0x0001 (0x0001 - 0x0000)
struct VAlchemyMenuViewModel_MustContainAllSelectedFilters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAlchemyMenuViewModel_MustContainAllSelectedFilters) == 0x000001, "Wrong alignment on VAlchemyMenuViewModel_MustContainAllSelectedFilters");
static_assert(sizeof(VAlchemyMenuViewModel_MustContainAllSelectedFilters) == 0x000001, "Wrong size on VAlchemyMenuViewModel_MustContainAllSelectedFilters");
static_assert(offsetof(VAlchemyMenuViewModel_MustContainAllSelectedFilters, ReturnValue) == 0x000000, "Member 'VAlchemyMenuViewModel_MustContainAllSelectedFilters::ReturnValue' has a wrong offset!");

// Function Altar.VAltarActionState.CreateBehaviorFromTag
// 0x0010 (0x0010 - 0x0000)
struct VAltarActionState_CreateBehaviorFromTag final
{
public:
	struct FGameplayTag                           BehaviorTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActorBehaviorBase*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarActionState_CreateBehaviorFromTag) == 0x000008, "Wrong alignment on VAltarActionState_CreateBehaviorFromTag");
static_assert(sizeof(VAltarActionState_CreateBehaviorFromTag) == 0x000010, "Wrong size on VAltarActionState_CreateBehaviorFromTag");
static_assert(offsetof(VAltarActionState_CreateBehaviorFromTag, BehaviorTag) == 0x000000, "Member 'VAltarActionState_CreateBehaviorFromTag::BehaviorTag' has a wrong offset!");
static_assert(offsetof(VAltarActionState_CreateBehaviorFromTag, ReturnValue) == 0x000008, "Member 'VAltarActionState_CreateBehaviorFromTag::ReturnValue' has a wrong offset!");

// Function Altar.VAltarActionState.CreateBehaviorFromTemplate
// 0x0010 (0x0010 - 0x0000)
struct VAltarActionState_CreateBehaviorFromTemplate final
{
public:
	class UVActorBehaviorBase*                    BehaviorTemplate;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVActorBehaviorBase*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarActionState_CreateBehaviorFromTemplate) == 0x000008, "Wrong alignment on VAltarActionState_CreateBehaviorFromTemplate");
static_assert(sizeof(VAltarActionState_CreateBehaviorFromTemplate) == 0x000010, "Wrong size on VAltarActionState_CreateBehaviorFromTemplate");
static_assert(offsetof(VAltarActionState_CreateBehaviorFromTemplate, BehaviorTemplate) == 0x000000, "Member 'VAltarActionState_CreateBehaviorFromTemplate::BehaviorTemplate' has a wrong offset!");
static_assert(offsetof(VAltarActionState_CreateBehaviorFromTemplate, ReturnValue) == 0x000008, "Member 'VAltarActionState_CreateBehaviorFromTemplate::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.GetHintKeyText
// 0x0030 (0x0030 - 0x0000)
struct VAltarBoundActionButton_GetHintKeyText final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_GetHintKeyText) == 0x000008, "Wrong alignment on VAltarBoundActionButton_GetHintKeyText");
static_assert(sizeof(VAltarBoundActionButton_GetHintKeyText) == 0x000030, "Wrong size on VAltarBoundActionButton_GetHintKeyText");
static_assert(offsetof(VAltarBoundActionButton_GetHintKeyText, InKey) == 0x000000, "Member 'VAltarBoundActionButton_GetHintKeyText::InKey' has a wrong offset!");
static_assert(offsetof(VAltarBoundActionButton_GetHintKeyText, ReturnValue) == 0x000018, "Member 'VAltarBoundActionButton_GetHintKeyText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.GetInputActionKeyText
// 0x0028 (0x0028 - 0x0000)
struct VAltarBoundActionButton_GetInputActionKeyText final
{
public:
	class UInputAction*                           InInputAction;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   InInputMappingContext;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_GetInputActionKeyText) == 0x000008, "Wrong alignment on VAltarBoundActionButton_GetInputActionKeyText");
static_assert(sizeof(VAltarBoundActionButton_GetInputActionKeyText) == 0x000028, "Wrong size on VAltarBoundActionButton_GetInputActionKeyText");
static_assert(offsetof(VAltarBoundActionButton_GetInputActionKeyText, InInputAction) == 0x000000, "Member 'VAltarBoundActionButton_GetInputActionKeyText::InInputAction' has a wrong offset!");
static_assert(offsetof(VAltarBoundActionButton_GetInputActionKeyText, InInputMappingContext) == 0x000008, "Member 'VAltarBoundActionButton_GetInputActionKeyText::InInputMappingContext' has a wrong offset!");
static_assert(offsetof(VAltarBoundActionButton_GetInputActionKeyText, ReturnValue) == 0x000010, "Member 'VAltarBoundActionButton_GetInputActionKeyText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.SetDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct VAltarBoundActionButton_SetDescriptionText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_SetDescriptionText) == 0x000008, "Wrong alignment on VAltarBoundActionButton_SetDescriptionText");
static_assert(sizeof(VAltarBoundActionButton_SetDescriptionText) == 0x000018, "Wrong size on VAltarBoundActionButton_SetDescriptionText");
static_assert(offsetof(VAltarBoundActionButton_SetDescriptionText, NewText) == 0x000000, "Member 'VAltarBoundActionButton_SetDescriptionText::NewText' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.SetInputAction
// 0x0028 (0x0028 - 0x0000)
struct VAltarBoundActionButton_SetInputAction final
{
public:
	class UInputAction*                           NewBinding;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideActionText;                                // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   NewMappingContext;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_SetInputAction) == 0x000008, "Wrong alignment on VAltarBoundActionButton_SetInputAction");
static_assert(sizeof(VAltarBoundActionButton_SetInputAction) == 0x000028, "Wrong size on VAltarBoundActionButton_SetInputAction");
static_assert(offsetof(VAltarBoundActionButton_SetInputAction, NewBinding) == 0x000000, "Member 'VAltarBoundActionButton_SetInputAction::NewBinding' has a wrong offset!");
static_assert(offsetof(VAltarBoundActionButton_SetInputAction, OverrideActionText) == 0x000008, "Member 'VAltarBoundActionButton_SetInputAction::OverrideActionText' has a wrong offset!");
static_assert(offsetof(VAltarBoundActionButton_SetInputAction, NewMappingContext) == 0x000020, "Member 'VAltarBoundActionButton_SetInputAction::NewMappingContext' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.GetBoundInputAction
// 0x0008 (0x0008 - 0x0000)
struct VAltarBoundActionButton_GetBoundInputAction final
{
public:
	const class UInputAction*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_GetBoundInputAction) == 0x000008, "Wrong alignment on VAltarBoundActionButton_GetBoundInputAction");
static_assert(sizeof(VAltarBoundActionButton_GetBoundInputAction) == 0x000008, "Wrong size on VAltarBoundActionButton_GetBoundInputAction");
static_assert(offsetof(VAltarBoundActionButton_GetBoundInputAction, ReturnValue) == 0x000000, "Member 'VAltarBoundActionButton_GetBoundInputAction::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.GetHoldTreshold
// 0x0004 (0x0004 - 0x0000)
struct VAltarBoundActionButton_GetHoldTreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_GetHoldTreshold) == 0x000004, "Wrong alignment on VAltarBoundActionButton_GetHoldTreshold");
static_assert(sizeof(VAltarBoundActionButton_GetHoldTreshold) == 0x000004, "Wrong size on VAltarBoundActionButton_GetHoldTreshold");
static_assert(offsetof(VAltarBoundActionButton_GetHoldTreshold, ReturnValue) == 0x000000, "Member 'VAltarBoundActionButton_GetHoldTreshold::ReturnValue' has a wrong offset!");

// Function Altar.VAltarBoundActionButton.GetText
// 0x0008 (0x0008 - 0x0000)
struct VAltarBoundActionButton_GetText final
{
public:
	class UCommonTextBlock*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarBoundActionButton_GetText) == 0x000008, "Wrong alignment on VAltarBoundActionButton_GetText");
static_assert(sizeof(VAltarBoundActionButton_GetText) == 0x000008, "Wrong size on VAltarBoundActionButton_GetText");
static_assert(offsetof(VAltarBoundActionButton_GetText, ReturnValue) == 0x000000, "Member 'VAltarBoundActionButton_GetText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarCommonVideoPlayer.BP_Seek
// 0x0004 (0x0004 - 0x0000)
struct VAltarCommonVideoPlayer_BP_Seek final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCommonVideoPlayer_BP_Seek) == 0x000004, "Wrong alignment on VAltarCommonVideoPlayer_BP_Seek");
static_assert(sizeof(VAltarCommonVideoPlayer_BP_Seek) == 0x000004, "Wrong size on VAltarCommonVideoPlayer_BP_Seek");
static_assert(offsetof(VAltarCommonVideoPlayer_BP_Seek, Timestamp) == 0x000000, "Member 'VAltarCommonVideoPlayer_BP_Seek::Timestamp' has a wrong offset!");

// Function Altar.VAltarCommonVideoPlayer.BP_SetLooping
// 0x0001 (0x0001 - 0x0000)
struct VAltarCommonVideoPlayer_BP_SetLooping final
{
public:
	bool                                          bShouldLoopPlayback;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCommonVideoPlayer_BP_SetLooping) == 0x000001, "Wrong alignment on VAltarCommonVideoPlayer_BP_SetLooping");
static_assert(sizeof(VAltarCommonVideoPlayer_BP_SetLooping) == 0x000001, "Wrong size on VAltarCommonVideoPlayer_BP_SetLooping");
static_assert(offsetof(VAltarCommonVideoPlayer_BP_SetLooping, bShouldLoopPlayback) == 0x000000, "Member 'VAltarCommonVideoPlayer_BP_SetLooping::bShouldLoopPlayback' has a wrong offset!");

// Function Altar.VAltarCommonVideoPlayer.BP_IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct VAltarCommonVideoPlayer_BP_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCommonVideoPlayer_BP_IsPlaying) == 0x000001, "Wrong alignment on VAltarCommonVideoPlayer_BP_IsPlaying");
static_assert(sizeof(VAltarCommonVideoPlayer_BP_IsPlaying) == 0x000001, "Wrong size on VAltarCommonVideoPlayer_BP_IsPlaying");
static_assert(offsetof(VAltarCommonVideoPlayer_BP_IsPlaying, ReturnValue) == 0x000000, "Member 'VAltarCommonVideoPlayer_BP_IsPlaying::ReturnValue' has a wrong offset!");

// Function Altar.VAltarCommonVideoPlayer.IsMediaOpen
// 0x0001 (0x0001 - 0x0000)
struct VAltarCommonVideoPlayer_IsMediaOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarCommonVideoPlayer_IsMediaOpen) == 0x000001, "Wrong alignment on VAltarCommonVideoPlayer_IsMediaOpen");
static_assert(sizeof(VAltarCommonVideoPlayer_IsMediaOpen) == 0x000001, "Wrong size on VAltarCommonVideoPlayer_IsMediaOpen");
static_assert(offsetof(VAltarCommonVideoPlayer_IsMediaOpen, ReturnValue) == 0x000000, "Member 'VAltarCommonVideoPlayer_IsMediaOpen::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetMaxTextSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarEditableTextViewModel_SetMaxTextSize final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetMaxTextSize) == 0x000004, "Wrong alignment on VAltarEditableTextViewModel_SetMaxTextSize");
static_assert(sizeof(VAltarEditableTextViewModel_SetMaxTextSize) == 0x000004, "Wrong size on VAltarEditableTextViewModel_SetMaxTextSize");
static_assert(offsetof(VAltarEditableTextViewModel_SetMaxTextSize, NewValue) == 0x000000, "Member 'VAltarEditableTextViewModel_SetMaxTextSize::NewValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetShouldCheckForInvalidCharacter
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter");
static_assert(sizeof(VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter) == 0x000001, "Wrong size on VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter");
static_assert(offsetof(VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter, NewValue) == 0x000000, "Member 'VAltarEditableTextViewModel_SetShouldCheckForInvalidCharacter::NewValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetShouldCheckForWhiteSpaceOnly
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly");
static_assert(sizeof(VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly) == 0x000001, "Wrong size on VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly");
static_assert(offsetof(VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly, NewValue) == 0x000000, "Member 'VAltarEditableTextViewModel_SetShouldCheckForWhiteSpaceOnly::NewValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetShouldCheckIfTextIsEmpty
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty");
static_assert(sizeof(VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty) == 0x000001, "Wrong size on VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty");
static_assert(offsetof(VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty, NewValue) == 0x000000, "Member 'VAltarEditableTextViewModel_SetShouldCheckIfTextIsEmpty::NewValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetShouldCheckIfTextIsTooLong
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong");
static_assert(sizeof(VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong) == 0x000001, "Wrong size on VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong");
static_assert(offsetof(VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong, NewValue) == 0x000000, "Member 'VAltarEditableTextViewModel_SetShouldCheckIfTextIsTooLong::NewValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetUserInputText
// 0x0018 (0x0018 - 0x0000)
struct VAltarEditableTextViewModel_SetUserInputText final
{
public:
	class FText                                   NewUserInputText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetUserInputText) == 0x000008, "Wrong alignment on VAltarEditableTextViewModel_SetUserInputText");
static_assert(sizeof(VAltarEditableTextViewModel_SetUserInputText) == 0x000018, "Wrong size on VAltarEditableTextViewModel_SetUserInputText");
static_assert(offsetof(VAltarEditableTextViewModel_SetUserInputText, NewUserInputText) == 0x000000, "Member 'VAltarEditableTextViewModel_SetUserInputText::NewUserInputText' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetUserInputTextPair
// 0x0028 (0x0028 - 0x0000)
struct VAltarEditableTextViewModel_SetUserInputTextPair final
{
public:
	struct FUserInputTextPair                     NewUserInputTextPair;                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetUserInputTextPair) == 0x000008, "Wrong alignment on VAltarEditableTextViewModel_SetUserInputTextPair");
static_assert(sizeof(VAltarEditableTextViewModel_SetUserInputTextPair) == 0x000028, "Wrong size on VAltarEditableTextViewModel_SetUserInputTextPair");
static_assert(offsetof(VAltarEditableTextViewModel_SetUserInputTextPair, NewUserInputTextPair) == 0x000000, "Member 'VAltarEditableTextViewModel_SetUserInputTextPair::NewUserInputTextPair' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetUserInputTextValidityCode
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_SetUserInputTextValidityCode final
{
public:
	EUserInputTextValidityCode                    NewValidityCode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetUserInputTextValidityCode) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_SetUserInputTextValidityCode");
static_assert(sizeof(VAltarEditableTextViewModel_SetUserInputTextValidityCode) == 0x000001, "Wrong size on VAltarEditableTextViewModel_SetUserInputTextValidityCode");
static_assert(offsetof(VAltarEditableTextViewModel_SetUserInputTextValidityCode, NewValidityCode) == 0x000000, "Member 'VAltarEditableTextViewModel_SetUserInputTextValidityCode::NewValidityCode' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.SetValidCharacters
// 0x0010 (0x0010 - 0x0000)
struct VAltarEditableTextViewModel_SetValidCharacters final
{
public:
	TArray<class FString>                         NewValidCharacters;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_SetValidCharacters) == 0x000008, "Wrong alignment on VAltarEditableTextViewModel_SetValidCharacters");
static_assert(sizeof(VAltarEditableTextViewModel_SetValidCharacters) == 0x000010, "Wrong size on VAltarEditableTextViewModel_SetValidCharacters");
static_assert(offsetof(VAltarEditableTextViewModel_SetValidCharacters, NewValidCharacters) == 0x000000, "Member 'VAltarEditableTextViewModel_SetValidCharacters::NewValidCharacters' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.GetMaxTextSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarEditableTextViewModel_GetMaxTextSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_GetMaxTextSize) == 0x000004, "Wrong alignment on VAltarEditableTextViewModel_GetMaxTextSize");
static_assert(sizeof(VAltarEditableTextViewModel_GetMaxTextSize) == 0x000004, "Wrong size on VAltarEditableTextViewModel_GetMaxTextSize");
static_assert(offsetof(VAltarEditableTextViewModel_GetMaxTextSize, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_GetMaxTextSize::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.GetUserInputText
// 0x0018 (0x0018 - 0x0000)
struct VAltarEditableTextViewModel_GetUserInputText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_GetUserInputText) == 0x000008, "Wrong alignment on VAltarEditableTextViewModel_GetUserInputText");
static_assert(sizeof(VAltarEditableTextViewModel_GetUserInputText) == 0x000018, "Wrong size on VAltarEditableTextViewModel_GetUserInputText");
static_assert(offsetof(VAltarEditableTextViewModel_GetUserInputText, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_GetUserInputText::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.GetUserInputTextPair
// 0x0028 (0x0028 - 0x0000)
struct VAltarEditableTextViewModel_GetUserInputTextPair final
{
public:
	struct FUserInputTextPair                     ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_GetUserInputTextPair) == 0x000008, "Wrong alignment on VAltarEditableTextViewModel_GetUserInputTextPair");
static_assert(sizeof(VAltarEditableTextViewModel_GetUserInputTextPair) == 0x000028, "Wrong size on VAltarEditableTextViewModel_GetUserInputTextPair");
static_assert(offsetof(VAltarEditableTextViewModel_GetUserInputTextPair, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_GetUserInputTextPair::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.GetUserInputTextValidityCode
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_GetUserInputTextValidityCode final
{
public:
	EUserInputTextValidityCode                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_GetUserInputTextValidityCode) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_GetUserInputTextValidityCode");
static_assert(sizeof(VAltarEditableTextViewModel_GetUserInputTextValidityCode) == 0x000001, "Wrong size on VAltarEditableTextViewModel_GetUserInputTextValidityCode");
static_assert(offsetof(VAltarEditableTextViewModel_GetUserInputTextValidityCode, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_GetUserInputTextValidityCode::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.GetValidCharacters
// 0x0010 (0x0010 - 0x0000)
struct VAltarEditableTextViewModel_GetValidCharacters final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_GetValidCharacters) == 0x000008, "Wrong alignment on VAltarEditableTextViewModel_GetValidCharacters");
static_assert(sizeof(VAltarEditableTextViewModel_GetValidCharacters) == 0x000010, "Wrong size on VAltarEditableTextViewModel_GetValidCharacters");
static_assert(offsetof(VAltarEditableTextViewModel_GetValidCharacters, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_GetValidCharacters::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.ShouldCheckForInvalidCharacter
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter");
static_assert(sizeof(VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter) == 0x000001, "Wrong size on VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter");
static_assert(offsetof(VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_ShouldCheckForInvalidCharacter::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.ShouldCheckForWhiteSpaceOnly
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly");
static_assert(sizeof(VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly) == 0x000001, "Wrong size on VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly");
static_assert(offsetof(VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_ShouldCheckForWhiteSpaceOnly::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.ShouldCheckIfTextIsEmpty
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty");
static_assert(sizeof(VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty) == 0x000001, "Wrong size on VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty");
static_assert(offsetof(VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_ShouldCheckIfTextIsEmpty::ReturnValue' has a wrong offset!");

// Function Altar.VAltarEditableTextViewModel.ShouldCheckIfTextIsTooLong
// 0x0001 (0x0001 - 0x0000)
struct VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong) == 0x000001, "Wrong alignment on VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong");
static_assert(sizeof(VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong) == 0x000001, "Wrong size on VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong");
static_assert(offsetof(VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong, ReturnValue) == 0x000000, "Member 'VAltarEditableTextViewModel_ShouldCheckIfTextIsTooLong::ReturnValue' has a wrong offset!");

// Function Altar.VAltarGameDateTimeSystem.Get
// 0x0010 (0x0010 - 0x0000)
struct VAltarGameDateTimeSystem_Get final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAltarGameDateTimeSystem*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarGameDateTimeSystem_Get) == 0x000008, "Wrong alignment on VAltarGameDateTimeSystem_Get");
static_assert(sizeof(VAltarGameDateTimeSystem_Get) == 0x000010, "Wrong size on VAltarGameDateTimeSystem_Get");
static_assert(offsetof(VAltarGameDateTimeSystem_Get, World) == 0x000000, "Member 'VAltarGameDateTimeSystem_Get::World' has a wrong offset!");
static_assert(offsetof(VAltarGameDateTimeSystem_Get, ReturnValue) == 0x000008, "Member 'VAltarGameDateTimeSystem_Get::ReturnValue' has a wrong offset!");

// Function Altar.VAltarGameDateTimeSystem.GetOblivionDateInfo
// 0x0010 (0x0010 - 0x0000)
struct VAltarGameDateTimeSystem_GetOblivionDateInfo final
{
public:
	struct FOblivionDateTimeInfo                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarGameDateTimeSystem_GetOblivionDateInfo) == 0x000004, "Wrong alignment on VAltarGameDateTimeSystem_GetOblivionDateInfo");
static_assert(sizeof(VAltarGameDateTimeSystem_GetOblivionDateInfo) == 0x000010, "Wrong size on VAltarGameDateTimeSystem_GetOblivionDateInfo");
static_assert(offsetof(VAltarGameDateTimeSystem_GetOblivionDateInfo, ReturnValue) == 0x000000, "Member 'VAltarGameDateTimeSystem_GetOblivionDateInfo::ReturnValue' has a wrong offset!");

// Function Altar.VAltarGameDateTimeSystem.GetOblivionDay
// 0x0004 (0x0004 - 0x0000)
struct VAltarGameDateTimeSystem_GetOblivionDay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarGameDateTimeSystem_GetOblivionDay) == 0x000004, "Wrong alignment on VAltarGameDateTimeSystem_GetOblivionDay");
static_assert(sizeof(VAltarGameDateTimeSystem_GetOblivionDay) == 0x000004, "Wrong size on VAltarGameDateTimeSystem_GetOblivionDay");
static_assert(offsetof(VAltarGameDateTimeSystem_GetOblivionDay, ReturnValue) == 0x000000, "Member 'VAltarGameDateTimeSystem_GetOblivionDay::ReturnValue' has a wrong offset!");

// Function Altar.VAltarGameDateTimeSystem.GetOblivionGameDayPassed
// 0x0004 (0x0004 - 0x0000)
struct VAltarGameDateTimeSystem_GetOblivionGameDayPassed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarGameDateTimeSystem_GetOblivionGameDayPassed) == 0x000004, "Wrong alignment on VAltarGameDateTimeSystem_GetOblivionGameDayPassed");
static_assert(sizeof(VAltarGameDateTimeSystem_GetOblivionGameDayPassed) == 0x000004, "Wrong size on VAltarGameDateTimeSystem_GetOblivionGameDayPassed");
static_assert(offsetof(VAltarGameDateTimeSystem_GetOblivionGameDayPassed, ReturnValue) == 0x000000, "Member 'VAltarGameDateTimeSystem_GetOblivionGameDayPassed::ReturnValue' has a wrong offset!");

// Function Altar.VAltarGameDateTimeSystem.GetOblivionMonth
// 0x0004 (0x0004 - 0x0000)
struct VAltarGameDateTimeSystem_GetOblivionMonth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarGameDateTimeSystem_GetOblivionMonth) == 0x000004, "Wrong alignment on VAltarGameDateTimeSystem_GetOblivionMonth");
static_assert(sizeof(VAltarGameDateTimeSystem_GetOblivionMonth) == 0x000004, "Wrong size on VAltarGameDateTimeSystem_GetOblivionMonth");
static_assert(offsetof(VAltarGameDateTimeSystem_GetOblivionMonth, ReturnValue) == 0x000000, "Member 'VAltarGameDateTimeSystem_GetOblivionMonth::ReturnValue' has a wrong offset!");

// Function Altar.VAltarGameDateTimeSystem.GetOblivionYear
// 0x0004 (0x0004 - 0x0000)
struct VAltarGameDateTimeSystem_GetOblivionYear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarGameDateTimeSystem_GetOblivionYear) == 0x000004, "Wrong alignment on VAltarGameDateTimeSystem_GetOblivionYear");
static_assert(sizeof(VAltarGameDateTimeSystem_GetOblivionYear) == 0x000004, "Wrong size on VAltarGameDateTimeSystem_GetOblivionYear");
static_assert(offsetof(VAltarGameDateTimeSystem_GetOblivionYear, ReturnValue) == 0x000000, "Member 'VAltarGameDateTimeSystem_GetOblivionYear::ReturnValue' has a wrong offset!");

// Function Altar.VAltarHud.GetPrimaryGameLayout
// 0x0008 (0x0008 - 0x0000)
struct VAltarHud_GetPrimaryGameLayout final
{
public:
	class UVPrimaryGameLayout*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarHud_GetPrimaryGameLayout) == 0x000008, "Wrong alignment on VAltarHud_GetPrimaryGameLayout");
static_assert(sizeof(VAltarHud_GetPrimaryGameLayout) == 0x000008, "Wrong size on VAltarHud_GetPrimaryGameLayout");
static_assert(offsetof(VAltarHud_GetPrimaryGameLayout, ReturnValue) == 0x000000, "Member 'VAltarHud_GetPrimaryGameLayout::ReturnValue' has a wrong offset!");

// Function Altar.VAltarMoonActor.SetMoonState
// 0x0010 (0x0010 - 0x0000)
struct VAltarMoonActor_SetMoonState final
{
public:
	float                                         RotateRevolution;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateAxisAltitude;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoonPhase                                    InPhase;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhaseProgress;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarMoonActor_SetMoonState) == 0x000004, "Wrong alignment on VAltarMoonActor_SetMoonState");
static_assert(sizeof(VAltarMoonActor_SetMoonState) == 0x000010, "Wrong size on VAltarMoonActor_SetMoonState");
static_assert(offsetof(VAltarMoonActor_SetMoonState, RotateRevolution) == 0x000000, "Member 'VAltarMoonActor_SetMoonState::RotateRevolution' has a wrong offset!");
static_assert(offsetof(VAltarMoonActor_SetMoonState, RotateAxisAltitude) == 0x000004, "Member 'VAltarMoonActor_SetMoonState::RotateAxisAltitude' has a wrong offset!");
static_assert(offsetof(VAltarMoonActor_SetMoonState, InPhase) == 0x000008, "Member 'VAltarMoonActor_SetMoonState::InPhase' has a wrong offset!");
static_assert(offsetof(VAltarMoonActor_SetMoonState, PhaseProgress) == 0x00000C, "Member 'VAltarMoonActor_SetMoonState::PhaseProgress' has a wrong offset!");

// Function Altar.VAltarNavigableListView.OnListViewScrolled
// 0x0008 (0x0008 - 0x0000)
struct VAltarNavigableListView_OnListViewScrolled final
{
public:
	float                                         ItemOffset;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRemaining;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableListView_OnListViewScrolled) == 0x000004, "Wrong alignment on VAltarNavigableListView_OnListViewScrolled");
static_assert(sizeof(VAltarNavigableListView_OnListViewScrolled) == 0x000008, "Wrong size on VAltarNavigableListView_OnListViewScrolled");
static_assert(offsetof(VAltarNavigableListView_OnListViewScrolled, ItemOffset) == 0x000000, "Member 'VAltarNavigableListView_OnListViewScrolled::ItemOffset' has a wrong offset!");
static_assert(offsetof(VAltarNavigableListView_OnListViewScrolled, DistanceRemaining) == 0x000004, "Member 'VAltarNavigableListView_OnListViewScrolled::DistanceRemaining' has a wrong offset!");

// Function Altar.VAltarNavigableListView.OnListViewValuesChanged
// 0x0010 (0x0010 - 0x0000)
struct VAltarNavigableListView_OnListViewValuesChanged final
{
public:
	float                                         MinScrollbarValue;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScrollbarValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScrollbarValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThumbFractionSize;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableListView_OnListViewValuesChanged) == 0x000004, "Wrong alignment on VAltarNavigableListView_OnListViewValuesChanged");
static_assert(sizeof(VAltarNavigableListView_OnListViewValuesChanged) == 0x000010, "Wrong size on VAltarNavigableListView_OnListViewValuesChanged");
static_assert(offsetof(VAltarNavigableListView_OnListViewValuesChanged, MinScrollbarValue) == 0x000000, "Member 'VAltarNavigableListView_OnListViewValuesChanged::MinScrollbarValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableListView_OnListViewValuesChanged, MaxScrollbarValue) == 0x000004, "Member 'VAltarNavigableListView_OnListViewValuesChanged::MaxScrollbarValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableListView_OnListViewValuesChanged, CurrentScrollbarValue) == 0x000008, "Member 'VAltarNavigableListView_OnListViewValuesChanged::CurrentScrollbarValue' has a wrong offset!");
static_assert(offsetof(VAltarNavigableListView_OnListViewValuesChanged, ThumbFractionSize) == 0x00000C, "Member 'VAltarNavigableListView_OnListViewValuesChanged::ThumbFractionSize' has a wrong offset!");

// Function Altar.VAltarNavigableListView.OnScrollbarValueChanged
// 0x0004 (0x0004 - 0x0000)
struct VAltarNavigableListView_OnScrollbarValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarNavigableListView_OnScrollbarValueChanged) == 0x000004, "Wrong alignment on VAltarNavigableListView_OnScrollbarValueChanged");
static_assert(sizeof(VAltarNavigableListView_OnScrollbarValueChanged) == 0x000004, "Wrong size on VAltarNavigableListView_OnScrollbarValueChanged");
static_assert(offsetof(VAltarNavigableListView_OnScrollbarValueChanged, NewValue) == 0x000000, "Member 'VAltarNavigableListView_OnScrollbarValueChanged::NewValue' has a wrong offset!");

// Function Altar.VAltarNavigationSystem.OnNavigationDataEndPlay
// 0x0010 (0x0010 - 0x0000)
struct VAltarNavigationSystem_OnNavigationDataEndPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarNavigationSystem_OnNavigationDataEndPlay) == 0x000008, "Wrong alignment on VAltarNavigationSystem_OnNavigationDataEndPlay");
static_assert(sizeof(VAltarNavigationSystem_OnNavigationDataEndPlay) == 0x000010, "Wrong size on VAltarNavigationSystem_OnNavigationDataEndPlay");
static_assert(offsetof(VAltarNavigationSystem_OnNavigationDataEndPlay, Actor) == 0x000000, "Member 'VAltarNavigationSystem_OnNavigationDataEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(VAltarNavigationSystem_OnNavigationDataEndPlay, EndPlayReason) == 0x000008, "Member 'VAltarNavigationSystem_OnNavigationDataEndPlay::EndPlayReason' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.SSScateringSetForegroundWorldUnitGlobalScale
// 0x0004 (0x0004 - 0x0000)
struct VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale) == 0x000004, "Wrong alignment on VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale");
static_assert(sizeof(VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale) == 0x000004, "Wrong size on VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale");
static_assert(offsetof(VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale, Scale) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_SSScateringSetForegroundWorldUnitGlobalScale::Scale' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.SSScateringSetWorldUnitGlobalScale
// 0x0004 (0x0004 - 0x0000)
struct VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale) == 0x000004, "Wrong alignment on VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale");
static_assert(sizeof(VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale) == 0x000004, "Wrong size on VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale");
static_assert(offsetof(VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale, Scale) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_SSScateringSetWorldUnitGlobalScale::Scale' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixApplyOnActorComponent
// 0x0120 (0x0120 - 0x0000)
struct VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TargetComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEstimatePlayerOwnership;                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0030(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent) == 0x000008, "Wrong alignment on VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent");
static_assert(sizeof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent) == 0x000120, "Wrong size on VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, WorldContextObject) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, TargetComponent) == 0x000008, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::TargetComponent' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, RelativeLocation) == 0x000010, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::RelativeLocation' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, bAutoEstimatePlayerOwnership) == 0x000028, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::bAutoEstimatePlayerOwnership' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, bSweep) == 0x000029, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::bSweep' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, bTeleport) == 0x00002A, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::bTeleport' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, SweepHitResult) == 0x000030, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::SweepHitResult' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent, ReturnValue) == 0x000118, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixApplyOnActorComponent::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetOffset
// 0x0060 (0x0060 - 0x0000)
struct VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEstimatePlayerOwnership;                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weight;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewWorldPosition;                                  // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset) == 0x000008, "Wrong alignment on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset");
static_assert(sizeof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset) == 0x000060, "Wrong size on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset, WorldContextObject) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset, WorldPosition) == 0x000008, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset::WorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset, bAutoEstimatePlayerOwnership) == 0x000020, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset::bAutoEstimatePlayerOwnership' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset, Weight) == 0x000028, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset::Weight' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset, NewWorldPosition) == 0x000030, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset::NewWorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset, ReturnValue) == 0x000048, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffset::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetOffsetFromCamera
// 0x0840 (0x0840 - 0x0000)
struct VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEstimatePlayerOwnership;                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       InViewInfo;                                        // 0x0030(0x07D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        Weight;                                            // 0x0800(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewWorldPosition;                                  // 0x0808(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0820(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_838[0x8];                                      // 0x0838(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera) == 0x000010, "Wrong alignment on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera");
static_assert(sizeof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera) == 0x000840, "Wrong size on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, WorldContextObject) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, WorldPosition) == 0x000008, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::WorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, bAutoEstimatePlayerOwnership) == 0x000020, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::bAutoEstimatePlayerOwnership' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, InViewInfo) == 0x000030, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::InViewInfo' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, Weight) == 0x000800, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::Weight' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, NewWorldPosition) == 0x000808, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::NewWorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera, ReturnValue) == 0x000820, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetOffsetFromCamera::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetWeight
// 0x0030 (0x0030 - 0x0000)
struct VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEstimatePlayerOwnership;                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight) == 0x000008, "Wrong alignment on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight");
static_assert(sizeof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight) == 0x000030, "Wrong size on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight, WorldContextObject) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight, WorldPosition) == 0x000008, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight::WorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight, bAutoEstimatePlayerOwnership) == 0x000020, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight::bAutoEstimatePlayerOwnership' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight, ReturnValue) == 0x000028, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeight::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.FirstPersonClippingFixGetWeightFromCamera
// 0x0810 (0x0810 - 0x0000)
struct VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEstimatePlayerOwnership;                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       InViewInfo;                                        // 0x0030(0x07D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0800(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_808[0x8];                                      // 0x0808(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera) == 0x000010, "Wrong alignment on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera");
static_assert(sizeof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera) == 0x000810, "Wrong size on VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera, WorldContextObject) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera, WorldPosition) == 0x000008, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera::WorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera, bAutoEstimatePlayerOwnership) == 0x000020, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera::bAutoEstimatePlayerOwnership' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera, InViewInfo) == 0x000030, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera::InViewInfo' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera, ReturnValue) == 0x000800, "Member 'VAltarRenderingToolsSubsystem_FirstPersonClippingFixGetWeightFromCamera::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.HomogeneousToCartesianCoordinates
// 0x0040 (0x0040 - 0x0000)
struct VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates final
{
public:
	struct FVector4                               HomogeneousCoordinates;                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates) == 0x000010, "Wrong alignment on VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates");
static_assert(sizeof(VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates) == 0x000040, "Wrong size on VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates");
static_assert(offsetof(VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates, HomogeneousCoordinates) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates::HomogeneousCoordinates' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates, ReturnValue) == 0x000020, "Member 'VAltarRenderingToolsSubsystem_HomogeneousToCartesianCoordinates::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRenderingToolsSubsystem.ScaleInDepth
// 0x0140 (0x0140 - 0x0000)
struct VAltarRenderingToolsSubsystem_ScaleInDepth final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Scale;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                CameraViewProjection;                              // 0x0020(0x0080)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                CameraInverseViewProjection;                       // 0x00A0(0x0080)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0120(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarRenderingToolsSubsystem_ScaleInDepth) == 0x000010, "Wrong alignment on VAltarRenderingToolsSubsystem_ScaleInDepth");
static_assert(sizeof(VAltarRenderingToolsSubsystem_ScaleInDepth) == 0x000140, "Wrong size on VAltarRenderingToolsSubsystem_ScaleInDepth");
static_assert(offsetof(VAltarRenderingToolsSubsystem_ScaleInDepth, WorldPosition) == 0x000000, "Member 'VAltarRenderingToolsSubsystem_ScaleInDepth::WorldPosition' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_ScaleInDepth, Scale) == 0x000018, "Member 'VAltarRenderingToolsSubsystem_ScaleInDepth::Scale' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_ScaleInDepth, CameraViewProjection) == 0x000020, "Member 'VAltarRenderingToolsSubsystem_ScaleInDepth::CameraViewProjection' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_ScaleInDepth, CameraInverseViewProjection) == 0x0000A0, "Member 'VAltarRenderingToolsSubsystem_ScaleInDepth::CameraInverseViewProjection' has a wrong offset!");
static_assert(offsetof(VAltarRenderingToolsSubsystem_ScaleInDepth, ReturnValue) == 0x000120, "Member 'VAltarRenderingToolsSubsystem_ScaleInDepth::ReturnValue' has a wrong offset!");

// Function Altar.VAltarRichPresenceBlueprintLibrary.UpdateRichPresence
// 0x0010 (0x0010 - 0x0000)
struct VAltarRichPresenceBlueprintLibrary_UpdateRichPresence final
{
public:
	class FString                                 PresenceData;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRichPresenceBlueprintLibrary_UpdateRichPresence) == 0x000008, "Wrong alignment on VAltarRichPresenceBlueprintLibrary_UpdateRichPresence");
static_assert(sizeof(VAltarRichPresenceBlueprintLibrary_UpdateRichPresence) == 0x000010, "Wrong size on VAltarRichPresenceBlueprintLibrary_UpdateRichPresence");
static_assert(offsetof(VAltarRichPresenceBlueprintLibrary_UpdateRichPresence, PresenceData) == 0x000000, "Member 'VAltarRichPresenceBlueprintLibrary_UpdateRichPresence::PresenceData' has a wrong offset!");

// Function Altar.VAltarRichTextBlock.SetDefaultFontSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarRichTextBlock_SetDefaultFontSize final
{
public:
	int32                                         NewFontSize;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRichTextBlock_SetDefaultFontSize) == 0x000004, "Wrong alignment on VAltarRichTextBlock_SetDefaultFontSize");
static_assert(sizeof(VAltarRichTextBlock_SetDefaultFontSize) == 0x000004, "Wrong size on VAltarRichTextBlock_SetDefaultFontSize");
static_assert(offsetof(VAltarRichTextBlock_SetDefaultFontSize, NewFontSize) == 0x000000, "Member 'VAltarRichTextBlock_SetDefaultFontSize::NewFontSize' has a wrong offset!");

// Function Altar.VAltarRichTextBlock.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct VAltarRichTextBlock_SetFontSize final
{
public:
	int32                                         FontSizeDelta;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRichTextBlock_SetFontSize) == 0x000004, "Wrong alignment on VAltarRichTextBlock_SetFontSize");
static_assert(sizeof(VAltarRichTextBlock_SetFontSize) == 0x000004, "Wrong size on VAltarRichTextBlock_SetFontSize");
static_assert(offsetof(VAltarRichTextBlock_SetFontSize, FontSizeDelta) == 0x000000, "Member 'VAltarRichTextBlock_SetFontSize::FontSizeDelta' has a wrong offset!");

// Function Altar.VAltarRichTextBlock.SetLineHeightPercentage
// 0x0004 (0x0004 - 0x0000)
struct VAltarRichTextBlock_SetLineHeightPercentage final
{
public:
	float                                         NewLineHeightPercentage;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRichTextBlock_SetLineHeightPercentage) == 0x000004, "Wrong alignment on VAltarRichTextBlock_SetLineHeightPercentage");
static_assert(sizeof(VAltarRichTextBlock_SetLineHeightPercentage) == 0x000004, "Wrong size on VAltarRichTextBlock_SetLineHeightPercentage");
static_assert(offsetof(VAltarRichTextBlock_SetLineHeightPercentage, NewLineHeightPercentage) == 0x000000, "Member 'VAltarRichTextBlock_SetLineHeightPercentage::NewLineHeightPercentage' has a wrong offset!");

// Function Altar.VAltarRichTextBlock.SetWrappedAt
// 0x0004 (0x0004 - 0x0000)
struct VAltarRichTextBlock_SetWrappedAt final
{
public:
	float                                         NewWrappedAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarRichTextBlock_SetWrappedAt) == 0x000004, "Wrong alignment on VAltarRichTextBlock_SetWrappedAt");
static_assert(sizeof(VAltarRichTextBlock_SetWrappedAt) == 0x000004, "Wrong size on VAltarRichTextBlock_SetWrappedAt");
static_assert(offsetof(VAltarRichTextBlock_SetWrappedAt, NewWrappedAt) == 0x000000, "Member 'VAltarRichTextBlock_SetWrappedAt::NewWrappedAt' has a wrong offset!");

// Function Altar.VAltarSaveSystem.OnAsyncSaveComplete_Delegate
// 0x0008 (0x0008 - 0x0000)
struct VAltarSaveSystem_OnAsyncSaveComplete_Delegate final
{
public:
	const class UVAltarSaveGame*                  SaveGame;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarSaveSystem_OnAsyncSaveComplete_Delegate) == 0x000008, "Wrong alignment on VAltarSaveSystem_OnAsyncSaveComplete_Delegate");
static_assert(sizeof(VAltarSaveSystem_OnAsyncSaveComplete_Delegate) == 0x000008, "Wrong size on VAltarSaveSystem_OnAsyncSaveComplete_Delegate");
static_assert(offsetof(VAltarSaveSystem_OnAsyncSaveComplete_Delegate, SaveGame) == 0x000000, "Member 'VAltarSaveSystem_OnAsyncSaveComplete_Delegate::SaveGame' has a wrong offset!");

// Function Altar.VAltarSaveSystem.SetProvisionScreenshot
// 0x0018 (0x0018 - 0x0000)
struct VAltarSaveSystem_SetProvisionScreenshot final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarSaveSystem_SetProvisionScreenshot) == 0x000008, "Wrong alignment on VAltarSaveSystem_SetProvisionScreenshot");
static_assert(sizeof(VAltarSaveSystem_SetProvisionScreenshot) == 0x000018, "Wrong size on VAltarSaveSystem_SetProvisionScreenshot");
static_assert(offsetof(VAltarSaveSystem_SetProvisionScreenshot, SizeX) == 0x000000, "Member 'VAltarSaveSystem_SetProvisionScreenshot::SizeX' has a wrong offset!");
static_assert(offsetof(VAltarSaveSystem_SetProvisionScreenshot, SizeY) == 0x000004, "Member 'VAltarSaveSystem_SetProvisionScreenshot::SizeY' has a wrong offset!");
static_assert(offsetof(VAltarSaveSystem_SetProvisionScreenshot, Data) == 0x000008, "Member 'VAltarSaveSystem_SetProvisionScreenshot::Data' has a wrong offset!");

// Function Altar.VAltarStarsActor.SetStarsState
// 0x0010 (0x0010 - 0x0000)
struct VAltarStarsActor_SetStarsState final
{
public:
	float                                         AxisX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisZ;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarStarsActor_SetStarsState) == 0x000004, "Wrong alignment on VAltarStarsActor_SetStarsState");
static_assert(sizeof(VAltarStarsActor_SetStarsState) == 0x000010, "Wrong size on VAltarStarsActor_SetStarsState");
static_assert(offsetof(VAltarStarsActor_SetStarsState, AxisX) == 0x000000, "Member 'VAltarStarsActor_SetStarsState::AxisX' has a wrong offset!");
static_assert(offsetof(VAltarStarsActor_SetStarsState, AxisY) == 0x000004, "Member 'VAltarStarsActor_SetStarsState::AxisY' has a wrong offset!");
static_assert(offsetof(VAltarStarsActor_SetStarsState, AxisZ) == 0x000008, "Member 'VAltarStarsActor_SetStarsState::AxisZ' has a wrong offset!");
static_assert(offsetof(VAltarStarsActor_SetStarsState, Angle) == 0x00000C, "Member 'VAltarStarsActor_SetStarsState::Angle' has a wrong offset!");

// Function Altar.VAltarSunActor.SetSunState
// 0x0014 (0x0014 - 0x0000)
struct VAltarSunActor_SetSunState final
{
public:
	float                                         AxisX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisZ;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunriseBegin;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunsetEnd;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarSunActor_SetSunState) == 0x000004, "Wrong alignment on VAltarSunActor_SetSunState");
static_assert(sizeof(VAltarSunActor_SetSunState) == 0x000014, "Wrong size on VAltarSunActor_SetSunState");
static_assert(offsetof(VAltarSunActor_SetSunState, AxisX) == 0x000000, "Member 'VAltarSunActor_SetSunState::AxisX' has a wrong offset!");
static_assert(offsetof(VAltarSunActor_SetSunState, AxisY) == 0x000004, "Member 'VAltarSunActor_SetSunState::AxisY' has a wrong offset!");
static_assert(offsetof(VAltarSunActor_SetSunState, AxisZ) == 0x000008, "Member 'VAltarSunActor_SetSunState::AxisZ' has a wrong offset!");
static_assert(offsetof(VAltarSunActor_SetSunState, SunriseBegin) == 0x00000C, "Member 'VAltarSunActor_SetSunState::SunriseBegin' has a wrong offset!");
static_assert(offsetof(VAltarSunActor_SetSunState, SunsetEnd) == 0x000010, "Member 'VAltarSunActor_SetSunState::SunsetEnd' has a wrong offset!");

// Function Altar.VAltarTelemetrySubsystem.OnAppActivationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct VAltarTelemetrySubsystem_OnAppActivationStateChanged final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTelemetrySubsystem_OnAppActivationStateChanged) == 0x000001, "Wrong alignment on VAltarTelemetrySubsystem_OnAppActivationStateChanged");
static_assert(sizeof(VAltarTelemetrySubsystem_OnAppActivationStateChanged) == 0x000001, "Wrong size on VAltarTelemetrySubsystem_OnAppActivationStateChanged");
static_assert(offsetof(VAltarTelemetrySubsystem_OnAppActivationStateChanged, bIsFocused) == 0x000000, "Member 'VAltarTelemetrySubsystem_OnAppActivationStateChanged::bIsFocused' has a wrong offset!");

// Function Altar.VAltarTelemetrySubsystem.OnBISessionIDChanged
// 0x0010 (0x0010 - 0x0000)
struct VAltarTelemetrySubsystem_OnBISessionIDChanged final
{
public:
	class FString                                 NewBISessionID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTelemetrySubsystem_OnBISessionIDChanged) == 0x000008, "Wrong alignment on VAltarTelemetrySubsystem_OnBISessionIDChanged");
static_assert(sizeof(VAltarTelemetrySubsystem_OnBISessionIDChanged) == 0x000010, "Wrong size on VAltarTelemetrySubsystem_OnBISessionIDChanged");
static_assert(offsetof(VAltarTelemetrySubsystem_OnBISessionIDChanged, NewBISessionID) == 0x000000, "Member 'VAltarTelemetrySubsystem_OnBISessionIDChanged::NewBISessionID' has a wrong offset!");

// Function Altar.VAltarTelemetrySubsystem.OnSaveComplete
// 0x0008 (0x0008 - 0x0000)
struct VAltarTelemetrySubsystem_OnSaveComplete final
{
public:
	const class UVAltarSaveGame*                  SaveGame;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTelemetrySubsystem_OnSaveComplete) == 0x000008, "Wrong alignment on VAltarTelemetrySubsystem_OnSaveComplete");
static_assert(sizeof(VAltarTelemetrySubsystem_OnSaveComplete) == 0x000008, "Wrong size on VAltarTelemetrySubsystem_OnSaveComplete");
static_assert(offsetof(VAltarTelemetrySubsystem_OnSaveComplete, SaveGame) == 0x000000, "Member 'VAltarTelemetrySubsystem_OnSaveComplete::SaveGame' has a wrong offset!");

// Function Altar.VAltarTelemetrySubsystem.OnSaveStarted
// 0x0008 (0x0008 - 0x0000)
struct VAltarTelemetrySubsystem_OnSaveStarted final
{
public:
	const class UVAltarSaveGame*                  SaveGame;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTelemetrySubsystem_OnSaveStarted) == 0x000008, "Wrong alignment on VAltarTelemetrySubsystem_OnSaveStarted");
static_assert(sizeof(VAltarTelemetrySubsystem_OnSaveStarted) == 0x000008, "Wrong size on VAltarTelemetrySubsystem_OnSaveStarted");
static_assert(offsetof(VAltarTelemetrySubsystem_OnSaveStarted, SaveGame) == 0x000000, "Member 'VAltarTelemetrySubsystem_OnSaveStarted::SaveGame' has a wrong offset!");

// Function Altar.VAltarTextSubsystem.RegisterAltarRichTextBlock
// 0x0008 (0x0008 - 0x0000)
struct VAltarTextSubsystem_RegisterAltarRichTextBlock final
{
public:
	class UVAltarRichTextBlock*                   NewAltarRichTextBlock;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTextSubsystem_RegisterAltarRichTextBlock) == 0x000008, "Wrong alignment on VAltarTextSubsystem_RegisterAltarRichTextBlock");
static_assert(sizeof(VAltarTextSubsystem_RegisterAltarRichTextBlock) == 0x000008, "Wrong size on VAltarTextSubsystem_RegisterAltarRichTextBlock");
static_assert(offsetof(VAltarTextSubsystem_RegisterAltarRichTextBlock, NewAltarRichTextBlock) == 0x000000, "Member 'VAltarTextSubsystem_RegisterAltarRichTextBlock::NewAltarRichTextBlock' has a wrong offset!");

// Function Altar.VAltarTextSubsystem.RegisterAltarTextBlock
// 0x0008 (0x0008 - 0x0000)
struct VAltarTextSubsystem_RegisterAltarTextBlock final
{
public:
	class UVAltarTextBlock*                       NewAltarTextBlock;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTextSubsystem_RegisterAltarTextBlock) == 0x000008, "Wrong alignment on VAltarTextSubsystem_RegisterAltarTextBlock");
static_assert(sizeof(VAltarTextSubsystem_RegisterAltarTextBlock) == 0x000008, "Wrong size on VAltarTextSubsystem_RegisterAltarTextBlock");
static_assert(offsetof(VAltarTextSubsystem_RegisterAltarTextBlock, NewAltarTextBlock) == 0x000000, "Member 'VAltarTextSubsystem_RegisterAltarTextBlock::NewAltarTextBlock' has a wrong offset!");

// Function Altar.VAltarTextSubsystem.UnregisterAltarRichTextBlock
// 0x0008 (0x0008 - 0x0000)
struct VAltarTextSubsystem_UnregisterAltarRichTextBlock final
{
public:
	class UVAltarRichTextBlock*                   AltarRichTextBlock;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTextSubsystem_UnregisterAltarRichTextBlock) == 0x000008, "Wrong alignment on VAltarTextSubsystem_UnregisterAltarRichTextBlock");
static_assert(sizeof(VAltarTextSubsystem_UnregisterAltarRichTextBlock) == 0x000008, "Wrong size on VAltarTextSubsystem_UnregisterAltarRichTextBlock");
static_assert(offsetof(VAltarTextSubsystem_UnregisterAltarRichTextBlock, AltarRichTextBlock) == 0x000000, "Member 'VAltarTextSubsystem_UnregisterAltarRichTextBlock::AltarRichTextBlock' has a wrong offset!");

// Function Altar.VAltarTextSubsystem.UnregisterAltarTextBlock
// 0x0008 (0x0008 - 0x0000)
struct VAltarTextSubsystem_UnregisterAltarTextBlock final
{
public:
	class UVAltarTextBlock*                       AltarTextBlock;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarTextSubsystem_UnregisterAltarTextBlock) == 0x000008, "Wrong alignment on VAltarTextSubsystem_UnregisterAltarTextBlock");
static_assert(sizeof(VAltarTextSubsystem_UnregisterAltarTextBlock) == 0x000008, "Wrong size on VAltarTextSubsystem_UnregisterAltarTextBlock");
static_assert(offsetof(VAltarTextSubsystem_UnregisterAltarTextBlock, AltarTextBlock) == 0x000000, "Member 'VAltarTextSubsystem_UnregisterAltarTextBlock::AltarTextBlock' has a wrong offset!");

// Function Altar.VAltarUISubsystem.ForceUIInputMode
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_ForceUIInputMode final
{
public:
	bool                                          bShowMouseCursor;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_ForceUIInputMode) == 0x000001, "Wrong alignment on VAltarUISubsystem_ForceUIInputMode");
static_assert(sizeof(VAltarUISubsystem_ForceUIInputMode) == 0x000001, "Wrong size on VAltarUISubsystem_ForceUIInputMode");
static_assert(offsetof(VAltarUISubsystem_ForceUIInputMode, bShowMouseCursor) == 0x000000, "Member 'VAltarUISubsystem_ForceUIInputMode::bShowMouseCursor' has a wrong offset!");

// Function Altar.VAltarUISubsystem.RegisterExponentialHeightFog
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_RegisterExponentialHeightFog final
{
public:
	class AExponentialHeightFog*                  InNewExponentialHeightFog;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_RegisterExponentialHeightFog) == 0x000008, "Wrong alignment on VAltarUISubsystem_RegisterExponentialHeightFog");
static_assert(sizeof(VAltarUISubsystem_RegisterExponentialHeightFog) == 0x000008, "Wrong size on VAltarUISubsystem_RegisterExponentialHeightFog");
static_assert(offsetof(VAltarUISubsystem_RegisterExponentialHeightFog, InNewExponentialHeightFog) == 0x000000, "Member 'VAltarUISubsystem_RegisterExponentialHeightFog::InNewExponentialHeightFog' has a wrong offset!");

// Function Altar.VAltarUISubsystem.RegisterGlobalLightingActor
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_RegisterGlobalLightingActor final
{
public:
	class AVGlobalLighting*                       InNewGlobalLightingActor;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_RegisterGlobalLightingActor) == 0x000008, "Wrong alignment on VAltarUISubsystem_RegisterGlobalLightingActor");
static_assert(sizeof(VAltarUISubsystem_RegisterGlobalLightingActor) == 0x000008, "Wrong size on VAltarUISubsystem_RegisterGlobalLightingActor");
static_assert(offsetof(VAltarUISubsystem_RegisterGlobalLightingActor, InNewGlobalLightingActor) == 0x000000, "Member 'VAltarUISubsystem_RegisterGlobalLightingActor::InNewGlobalLightingActor' has a wrong offset!");

// Function Altar.VAltarUISubsystem.SetCurrentLoadingScreenContext
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_SetCurrentLoadingScreenContext final
{
public:
	ELoadingScreenType                            InNewLoadingScreenContext;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_SetCurrentLoadingScreenContext) == 0x000001, "Wrong alignment on VAltarUISubsystem_SetCurrentLoadingScreenContext");
static_assert(sizeof(VAltarUISubsystem_SetCurrentLoadingScreenContext) == 0x000001, "Wrong size on VAltarUISubsystem_SetCurrentLoadingScreenContext");
static_assert(offsetof(VAltarUISubsystem_SetCurrentLoadingScreenContext, InNewLoadingScreenContext) == 0x000000, "Member 'VAltarUISubsystem_SetCurrentLoadingScreenContext::InNewLoadingScreenContext' has a wrong offset!");

// Function Altar.VAltarUISubsystem.SetInventoryHoveredObjectActor
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_SetInventoryHoveredObjectActor final
{
public:
	class AActor*                                 InNewActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_SetInventoryHoveredObjectActor) == 0x000008, "Wrong alignment on VAltarUISubsystem_SetInventoryHoveredObjectActor");
static_assert(sizeof(VAltarUISubsystem_SetInventoryHoveredObjectActor) == 0x000008, "Wrong size on VAltarUISubsystem_SetInventoryHoveredObjectActor");
static_assert(offsetof(VAltarUISubsystem_SetInventoryHoveredObjectActor, InNewActor) == 0x000000, "Member 'VAltarUISubsystem_SetInventoryHoveredObjectActor::InNewActor' has a wrong offset!");

// Function Altar.VAltarUISubsystem.SetInventoryHoveredObjectForm
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_SetInventoryHoveredObjectForm final
{
public:
	class UTESForm*                               InNewForm;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_SetInventoryHoveredObjectForm) == 0x000008, "Wrong alignment on VAltarUISubsystem_SetInventoryHoveredObjectForm");
static_assert(sizeof(VAltarUISubsystem_SetInventoryHoveredObjectForm) == 0x000008, "Wrong size on VAltarUISubsystem_SetInventoryHoveredObjectForm");
static_assert(offsetof(VAltarUISubsystem_SetInventoryHoveredObjectForm, InNewForm) == 0x000000, "Member 'VAltarUISubsystem_SetInventoryHoveredObjectForm::InNewForm' has a wrong offset!");

// Function Altar.VAltarUISubsystem.SetPlayerLevelFromLastLoadedSave
// 0x0004 (0x0004 - 0x0000)
struct VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave final
{
public:
	int32                                         InNewPlayerLevel;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave) == 0x000004, "Wrong alignment on VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave");
static_assert(sizeof(VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave) == 0x000004, "Wrong size on VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave");
static_assert(offsetof(VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave, InNewPlayerLevel) == 0x000000, "Member 'VAltarUISubsystem_SetPlayerLevelFromLastLoadedSave::InNewPlayerLevel' has a wrong offset!");

// Function Altar.VAltarUISubsystem.SetPlayerLevelFromLevelUp
// 0x0004 (0x0004 - 0x0000)
struct VAltarUISubsystem_SetPlayerLevelFromLevelUp final
{
public:
	int32                                         InNewPlayerLevel;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_SetPlayerLevelFromLevelUp) == 0x000004, "Wrong alignment on VAltarUISubsystem_SetPlayerLevelFromLevelUp");
static_assert(sizeof(VAltarUISubsystem_SetPlayerLevelFromLevelUp) == 0x000004, "Wrong size on VAltarUISubsystem_SetPlayerLevelFromLevelUp");
static_assert(offsetof(VAltarUISubsystem_SetPlayerLevelFromLevelUp, InNewPlayerLevel) == 0x000000, "Member 'VAltarUISubsystem_SetPlayerLevelFromLevelUp::InNewPlayerLevel' has a wrong offset!");

// Function Altar.VAltarUISubsystem.SetPlayerNameTextFromLastLoadedSave
// 0x0018 (0x0018 - 0x0000)
struct VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave final
{
public:
	class FText                                   InNewPlayerName;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave) == 0x000008, "Wrong alignment on VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave");
static_assert(sizeof(VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave) == 0x000018, "Wrong size on VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave");
static_assert(offsetof(VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave, InNewPlayerName) == 0x000000, "Member 'VAltarUISubsystem_SetPlayerNameTextFromLastLoadedSave::InNewPlayerName' has a wrong offset!");

// Function Altar.VAltarUISubsystem.ToggleHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_ToggleHUDVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_ToggleHUDVisibility) == 0x000001, "Wrong alignment on VAltarUISubsystem_ToggleHUDVisibility");
static_assert(sizeof(VAltarUISubsystem_ToggleHUDVisibility) == 0x000001, "Wrong size on VAltarUISubsystem_ToggleHUDVisibility");
static_assert(offsetof(VAltarUISubsystem_ToggleHUDVisibility, bIsVisible) == 0x000000, "Member 'VAltarUISubsystem_ToggleHUDVisibility::bIsVisible' has a wrong offset!");

// Function Altar.VAltarUISubsystem.ToggleInputHintVisibility
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_ToggleInputHintVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_ToggleInputHintVisibility) == 0x000001, "Wrong alignment on VAltarUISubsystem_ToggleInputHintVisibility");
static_assert(sizeof(VAltarUISubsystem_ToggleInputHintVisibility) == 0x000001, "Wrong size on VAltarUISubsystem_ToggleInputHintVisibility");
static_assert(offsetof(VAltarUISubsystem_ToggleInputHintVisibility, bIsVisible) == 0x000000, "Member 'VAltarUISubsystem_ToggleInputHintVisibility::bIsVisible' has a wrong offset!");

// Function Altar.VAltarUISubsystem.TryGetBrushFromKey
// 0x00F0 (0x00F0 - 0x0000)
struct VAltarUISubsystem_TryGetBrushFromKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            OutBrush;                                          // 0x0020(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_TryGetBrushFromKey) == 0x000010, "Wrong alignment on VAltarUISubsystem_TryGetBrushFromKey");
static_assert(sizeof(VAltarUISubsystem_TryGetBrushFromKey) == 0x0000F0, "Wrong size on VAltarUISubsystem_TryGetBrushFromKey");
static_assert(offsetof(VAltarUISubsystem_TryGetBrushFromKey, InKey) == 0x000000, "Member 'VAltarUISubsystem_TryGetBrushFromKey::InKey' has a wrong offset!");
static_assert(offsetof(VAltarUISubsystem_TryGetBrushFromKey, OutBrush) == 0x000020, "Member 'VAltarUISubsystem_TryGetBrushFromKey::OutBrush' has a wrong offset!");

// Function Altar.VAltarUISubsystem.UnregisterExponentialHeightFog
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_UnregisterExponentialHeightFog final
{
public:
	class AExponentialHeightFog*                  InExponentialHeightFog;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_UnregisterExponentialHeightFog) == 0x000008, "Wrong alignment on VAltarUISubsystem_UnregisterExponentialHeightFog");
static_assert(sizeof(VAltarUISubsystem_UnregisterExponentialHeightFog) == 0x000008, "Wrong size on VAltarUISubsystem_UnregisterExponentialHeightFog");
static_assert(offsetof(VAltarUISubsystem_UnregisterExponentialHeightFog, InExponentialHeightFog) == 0x000000, "Member 'VAltarUISubsystem_UnregisterExponentialHeightFog::InExponentialHeightFog' has a wrong offset!");

// Function Altar.VAltarUISubsystem.UnregisterGlobalLightingActor
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_UnregisterGlobalLightingActor final
{
public:
	class AVGlobalLighting*                       InGlobalLightingActor;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_UnregisterGlobalLightingActor) == 0x000008, "Wrong alignment on VAltarUISubsystem_UnregisterGlobalLightingActor");
static_assert(sizeof(VAltarUISubsystem_UnregisterGlobalLightingActor) == 0x000008, "Wrong size on VAltarUISubsystem_UnregisterGlobalLightingActor");
static_assert(offsetof(VAltarUISubsystem_UnregisterGlobalLightingActor, InGlobalLightingActor) == 0x000000, "Member 'VAltarUISubsystem_UnregisterGlobalLightingActor::InGlobalLightingActor' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetAllExponentialHeightFogs
// 0x0010 (0x0010 - 0x0000)
struct VAltarUISubsystem_GetAllExponentialHeightFogs final
{
public:
	TArray<class AExponentialHeightFog*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetAllExponentialHeightFogs) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetAllExponentialHeightFogs");
static_assert(sizeof(VAltarUISubsystem_GetAllExponentialHeightFogs) == 0x000010, "Wrong size on VAltarUISubsystem_GetAllExponentialHeightFogs");
static_assert(offsetof(VAltarUISubsystem_GetAllExponentialHeightFogs, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetAllExponentialHeightFogs::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetCoutryGroup
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_GetCoutryGroup final
{
public:
	EVCountryGroup                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetCoutryGroup) == 0x000001, "Wrong alignment on VAltarUISubsystem_GetCoutryGroup");
static_assert(sizeof(VAltarUISubsystem_GetCoutryGroup) == 0x000001, "Wrong size on VAltarUISubsystem_GetCoutryGroup");
static_assert(offsetof(VAltarUISubsystem_GetCoutryGroup, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetCoutryGroup::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetCurrentLoadingScreenContext
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_GetCurrentLoadingScreenContext final
{
public:
	ELoadingScreenType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetCurrentLoadingScreenContext) == 0x000001, "Wrong alignment on VAltarUISubsystem_GetCurrentLoadingScreenContext");
static_assert(sizeof(VAltarUISubsystem_GetCurrentLoadingScreenContext) == 0x000001, "Wrong size on VAltarUISubsystem_GetCurrentLoadingScreenContext");
static_assert(offsetof(VAltarUISubsystem_GetCurrentLoadingScreenContext, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetCurrentLoadingScreenContext::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetCurrentUpdatedPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct VAltarUISubsystem_GetCurrentUpdatedPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetCurrentUpdatedPlayerLevel) == 0x000004, "Wrong alignment on VAltarUISubsystem_GetCurrentUpdatedPlayerLevel");
static_assert(sizeof(VAltarUISubsystem_GetCurrentUpdatedPlayerLevel) == 0x000004, "Wrong size on VAltarUISubsystem_GetCurrentUpdatedPlayerLevel");
static_assert(offsetof(VAltarUISubsystem_GetCurrentUpdatedPlayerLevel, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetCurrentUpdatedPlayerLevel::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetGlobalLightingActors
// 0x0010 (0x0010 - 0x0000)
struct VAltarUISubsystem_GetGlobalLightingActors final
{
public:
	TArray<class AVGlobalLighting*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetGlobalLightingActors) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetGlobalLightingActors");
static_assert(sizeof(VAltarUISubsystem_GetGlobalLightingActors) == 0x000010, "Wrong size on VAltarUISubsystem_GetGlobalLightingActors");
static_assert(offsetof(VAltarUISubsystem_GetGlobalLightingActors, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetGlobalLightingActors::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetInventoryHoveredObjectActor
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_GetInventoryHoveredObjectActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetInventoryHoveredObjectActor) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetInventoryHoveredObjectActor");
static_assert(sizeof(VAltarUISubsystem_GetInventoryHoveredObjectActor) == 0x000008, "Wrong size on VAltarUISubsystem_GetInventoryHoveredObjectActor");
static_assert(offsetof(VAltarUISubsystem_GetInventoryHoveredObjectActor, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetInventoryHoveredObjectActor::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetInventoryHoveredObjectForm
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_GetInventoryHoveredObjectForm final
{
public:
	class UTESForm*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetInventoryHoveredObjectForm) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetInventoryHoveredObjectForm");
static_assert(sizeof(VAltarUISubsystem_GetInventoryHoveredObjectForm) == 0x000008, "Wrong size on VAltarUISubsystem_GetInventoryHoveredObjectForm");
static_assert(offsetof(VAltarUISubsystem_GetInventoryHoveredObjectForm, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetInventoryHoveredObjectForm::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetMenuDefaultClass
// 0x0050 (0x0050 - 0x0000)
struct VAltarUISubsystem_GetMenuDefaultClass final
{
public:
	TSoftClassPtr<class UClass>                   MenuClass;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetMenuDefaultClass) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetMenuDefaultClass");
static_assert(sizeof(VAltarUISubsystem_GetMenuDefaultClass) == 0x000050, "Wrong size on VAltarUISubsystem_GetMenuDefaultClass");
static_assert(offsetof(VAltarUISubsystem_GetMenuDefaultClass, MenuClass) == 0x000000, "Member 'VAltarUISubsystem_GetMenuDefaultClass::MenuClass' has a wrong offset!");
static_assert(offsetof(VAltarUISubsystem_GetMenuDefaultClass, ReturnValue) == 0x000028, "Member 'VAltarUISubsystem_GetMenuDefaultClass::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetMenuDefaultLayer
// 0x0030 (0x0030 - 0x0000)
struct VAltarUISubsystem_GetMenuDefaultLayer final
{
public:
	TSoftClassPtr<class UClass>                   MenuClass;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetMenuDefaultLayer) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetMenuDefaultLayer");
static_assert(sizeof(VAltarUISubsystem_GetMenuDefaultLayer) == 0x000030, "Wrong size on VAltarUISubsystem_GetMenuDefaultLayer");
static_assert(offsetof(VAltarUISubsystem_GetMenuDefaultLayer, MenuClass) == 0x000000, "Member 'VAltarUISubsystem_GetMenuDefaultLayer::MenuClass' has a wrong offset!");
static_assert(offsetof(VAltarUISubsystem_GetMenuDefaultLayer, ReturnValue) == 0x000028, "Member 'VAltarUISubsystem_GetMenuDefaultLayer::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetPlatformTag
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_GetPlatformTag final
{
public:
	EModernCategoryPlatormFlag                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetPlatformTag) == 0x000001, "Wrong alignment on VAltarUISubsystem_GetPlatformTag");
static_assert(sizeof(VAltarUISubsystem_GetPlatformTag) == 0x000001, "Wrong size on VAltarUISubsystem_GetPlatformTag");
static_assert(offsetof(VAltarUISubsystem_GetPlatformTag, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetPlatformTag::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetPlayerLevelFromLastLoadedSave
// 0x0004 (0x0004 - 0x0000)
struct VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave) == 0x000004, "Wrong alignment on VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave");
static_assert(sizeof(VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave) == 0x000004, "Wrong size on VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave");
static_assert(offsetof(VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetPlayerLevelFromLastLoadedSave::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetPlayerNameTextFromLastLoadedSave
// 0x0018 (0x0018 - 0x0000)
struct VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave");
static_assert(sizeof(VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave) == 0x000018, "Wrong size on VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave");
static_assert(offsetof(VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetPlayerNameTextFromLastLoadedSave::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.GetPrimaryGameLayout
// 0x0008 (0x0008 - 0x0000)
struct VAltarUISubsystem_GetPrimaryGameLayout final
{
public:
	class UVPrimaryGameLayout*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_GetPrimaryGameLayout) == 0x000008, "Wrong alignment on VAltarUISubsystem_GetPrimaryGameLayout");
static_assert(sizeof(VAltarUISubsystem_GetPrimaryGameLayout) == 0x000008, "Wrong size on VAltarUISubsystem_GetPrimaryGameLayout");
static_assert(offsetof(VAltarUISubsystem_GetPrimaryGameLayout, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_GetPrimaryGameLayout::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.IsHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_IsHUDVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_IsHUDVisible) == 0x000001, "Wrong alignment on VAltarUISubsystem_IsHUDVisible");
static_assert(sizeof(VAltarUISubsystem_IsHUDVisible) == 0x000001, "Wrong size on VAltarUISubsystem_IsHUDVisible");
static_assert(offsetof(VAltarUISubsystem_IsHUDVisible, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_IsHUDVisible::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.IsInputHintsVisible
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_IsInputHintsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_IsInputHintsVisible) == 0x000001, "Wrong alignment on VAltarUISubsystem_IsInputHintsVisible");
static_assert(sizeof(VAltarUISubsystem_IsInputHintsVisible) == 0x000001, "Wrong size on VAltarUISubsystem_IsInputHintsVisible");
static_assert(offsetof(VAltarUISubsystem_IsInputHintsVisible, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_IsInputHintsVisible::ReturnValue' has a wrong offset!");

// Function Altar.VAltarUISubsystem.IsMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct VAltarUISubsystem_IsMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarUISubsystem_IsMenuVisible) == 0x000001, "Wrong alignment on VAltarUISubsystem_IsMenuVisible");
static_assert(sizeof(VAltarUISubsystem_IsMenuVisible) == 0x000001, "Wrong size on VAltarUISubsystem_IsMenuVisible");
static_assert(offsetof(VAltarUISubsystem_IsMenuVisible, ReturnValue) == 0x000000, "Member 'VAltarUISubsystem_IsMenuVisible::ReturnValue' has a wrong offset!");

// Function Altar.VAnimationObjectPairingComponent.PlayAnimActivable
// 0x0018 (0x0018 - 0x0000)
struct VAnimationObjectPairingComponent_PlayAnimActivable final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimationName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAnimationObjectPairingComponent_PlayAnimActivable) == 0x000008, "Wrong alignment on VAnimationObjectPairingComponent_PlayAnimActivable");
static_assert(sizeof(VAnimationObjectPairingComponent_PlayAnimActivable) == 0x000018, "Wrong size on VAnimationObjectPairingComponent_PlayAnimActivable");
static_assert(offsetof(VAnimationObjectPairingComponent_PlayAnimActivable, SkeletalMeshComponent) == 0x000000, "Member 'VAnimationObjectPairingComponent_PlayAnimActivable::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VAnimationObjectPairingComponent_PlayAnimActivable, AnimationName) == 0x000008, "Member 'VAnimationObjectPairingComponent_PlayAnimActivable::AnimationName' has a wrong offset!");

// Function Altar.VAnimationObjectPairingComponent.SetAnimActivable
// 0x0020 (0x0020 - 0x0000)
struct VAnimationObjectPairingComponent_SetAnimActivable final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimationName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosRatio;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAnimation;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAnimationObjectPairingComponent_SetAnimActivable) == 0x000008, "Wrong alignment on VAnimationObjectPairingComponent_SetAnimActivable");
static_assert(sizeof(VAnimationObjectPairingComponent_SetAnimActivable) == 0x000020, "Wrong size on VAnimationObjectPairingComponent_SetAnimActivable");
static_assert(offsetof(VAnimationObjectPairingComponent_SetAnimActivable, SkeletalMeshComponent) == 0x000000, "Member 'VAnimationObjectPairingComponent_SetAnimActivable::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VAnimationObjectPairingComponent_SetAnimActivable, AnimationName) == 0x000008, "Member 'VAnimationObjectPairingComponent_SetAnimActivable::AnimationName' has a wrong offset!");
static_assert(offsetof(VAnimationObjectPairingComponent_SetAnimActivable, PosRatio) == 0x000018, "Member 'VAnimationObjectPairingComponent_SetAnimActivable::PosRatio' has a wrong offset!");
static_assert(offsetof(VAnimationObjectPairingComponent_SetAnimActivable, bPlayAnimation) == 0x00001C, "Member 'VAnimationObjectPairingComponent_SetAnimActivable::bPlayAnimation' has a wrong offset!");

// Function Altar.VAnimNotify_ActionCameraTracking.ShouldIgnoreTrackingOnTargetedPawn
// 0x0018 (0x0018 - 0x0000)
struct VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn final
{
public:
	class AVPairedPawn*                           ControlledPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVPairedPawn*                           TargetedPawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn) == 0x000008, "Wrong alignment on VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn");
static_assert(sizeof(VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn) == 0x000018, "Wrong size on VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn");
static_assert(offsetof(VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn, ControlledPawn) == 0x000000, "Member 'VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn::ControlledPawn' has a wrong offset!");
static_assert(offsetof(VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn, TargetedPawn) == 0x000008, "Member 'VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn::TargetedPawn' has a wrong offset!");
static_assert(offsetof(VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn, ReturnValue) == 0x000010, "Member 'VAnimNotify_ActionCameraTracking_ShouldIgnoreTrackingOnTargetedPawn::ReturnValue' has a wrong offset!");

// Function Altar.VAnimNotify_ActionMeleeHitWindow.ComputeHitbox
// 0x0038 (0x0038 - 0x0000)
struct VAnimNotify_ActionMeleeHitWindow_ComputeHitbox final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAnimNotify_ActionMeleeHitWindow_ComputeHitbox) == 0x000008, "Wrong alignment on VAnimNotify_ActionMeleeHitWindow_ComputeHitbox");
static_assert(sizeof(VAnimNotify_ActionMeleeHitWindow_ComputeHitbox) == 0x000038, "Wrong size on VAnimNotify_ActionMeleeHitWindow_ComputeHitbox");
static_assert(offsetof(VAnimNotify_ActionMeleeHitWindow_ComputeHitbox, ReturnValue) == 0x000000, "Member 'VAnimNotify_ActionMeleeHitWindow_ComputeHitbox::ReturnValue' has a wrong offset!");

// Function Altar.VAnimNotify_ActionNotify.TriggerEventOnAnimatedAction
// 0x0010 (0x0010 - 0x0000)
struct VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction final
{
public:
	class AVPairedPawn*                           PairedPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVPawnAnimatedAction*                   AnimatedAction;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction) == 0x000008, "Wrong alignment on VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction");
static_assert(sizeof(VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction) == 0x000010, "Wrong size on VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction");
static_assert(offsetof(VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction, PairedPawn) == 0x000000, "Member 'VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction::PairedPawn' has a wrong offset!");
static_assert(offsetof(VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction, AnimatedAction) == 0x000008, "Member 'VAnimNotify_ActionNotify_TriggerEventOnAnimatedAction::AnimatedAction' has a wrong offset!");

// Function Altar.VAudioHandlersSubsystem.GetMusicPlayerActor
// 0x0008 (0x0008 - 0x0000)
struct VAudioHandlersSubsystem_GetMusicPlayerActor final
{
public:
	class AVMusicPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioHandlersSubsystem_GetMusicPlayerActor) == 0x000008, "Wrong alignment on VAudioHandlersSubsystem_GetMusicPlayerActor");
static_assert(sizeof(VAudioHandlersSubsystem_GetMusicPlayerActor) == 0x000008, "Wrong size on VAudioHandlersSubsystem_GetMusicPlayerActor");
static_assert(offsetof(VAudioHandlersSubsystem_GetMusicPlayerActor, ReturnValue) == 0x000000, "Member 'VAudioHandlersSubsystem_GetMusicPlayerActor::ReturnValue' has a wrong offset!");

// Function Altar.VAudioHandlersSubsystem.GetWeatherAudioPlayerActor
// 0x0008 (0x0008 - 0x0000)
struct VAudioHandlersSubsystem_GetWeatherAudioPlayerActor final
{
public:
	class AVWeatherAudioPlayer*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioHandlersSubsystem_GetWeatherAudioPlayerActor) == 0x000008, "Wrong alignment on VAudioHandlersSubsystem_GetWeatherAudioPlayerActor");
static_assert(sizeof(VAudioHandlersSubsystem_GetWeatherAudioPlayerActor) == 0x000008, "Wrong size on VAudioHandlersSubsystem_GetWeatherAudioPlayerActor");
static_assert(offsetof(VAudioHandlersSubsystem_GetWeatherAudioPlayerActor, ReturnValue) == 0x000000, "Member 'VAudioHandlersSubsystem_GetWeatherAudioPlayerActor::ReturnValue' has a wrong offset!");

// Function Altar.VAudioStatics.BPF_PostAudioEvent
// 0x0008 (0x0008 - 0x0000)
struct VAudioStatics_BPF_PostAudioEvent final
{
public:
	class UAkAudioEvent*                          EventToPost;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_BPF_PostAudioEvent) == 0x000008, "Wrong alignment on VAudioStatics_BPF_PostAudioEvent");
static_assert(sizeof(VAudioStatics_BPF_PostAudioEvent) == 0x000008, "Wrong size on VAudioStatics_BPF_PostAudioEvent");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEvent, EventToPost) == 0x000000, "Member 'VAudioStatics_BPF_PostAudioEvent::EventToPost' has a wrong offset!");

// Function Altar.VAudioStatics.BPF_PostAudioEventAtLocation
// 0x0028 (0x0028 - 0x0000)
struct VAudioStatics_BPF_PostAudioEventAtLocation final
{
public:
	class UAkAudioEvent*                          EventToPost;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_BPF_PostAudioEventAtLocation) == 0x000008, "Wrong alignment on VAudioStatics_BPF_PostAudioEventAtLocation");
static_assert(sizeof(VAudioStatics_BPF_PostAudioEventAtLocation) == 0x000028, "Wrong size on VAudioStatics_BPF_PostAudioEventAtLocation");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventAtLocation, EventToPost) == 0x000000, "Member 'VAudioStatics_BPF_PostAudioEventAtLocation::EventToPost' has a wrong offset!");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventAtLocation, Location) == 0x000008, "Member 'VAudioStatics_BPF_PostAudioEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventAtLocation, WorldContext) == 0x000020, "Member 'VAudioStatics_BPF_PostAudioEventAtLocation::WorldContext' has a wrong offset!");

// Function Altar.VAudioStatics.BPF_PostAudioEventOnActor
// 0x0010 (0x0010 - 0x0000)
struct VAudioStatics_BPF_PostAudioEventOnActor final
{
public:
	class UAkAudioEvent*                          EventToPost;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_BPF_PostAudioEventOnActor) == 0x000008, "Wrong alignment on VAudioStatics_BPF_PostAudioEventOnActor");
static_assert(sizeof(VAudioStatics_BPF_PostAudioEventOnActor) == 0x000010, "Wrong size on VAudioStatics_BPF_PostAudioEventOnActor");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventOnActor, EventToPost) == 0x000000, "Member 'VAudioStatics_BPF_PostAudioEventOnActor::EventToPost' has a wrong offset!");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventOnActor, Actor) == 0x000008, "Member 'VAudioStatics_BPF_PostAudioEventOnActor::Actor' has a wrong offset!");

// Function Altar.VAudioStatics.BPF_PostAudioEventWithComponent
// 0x0010 (0x0010 - 0x0000)
struct VAudioStatics_BPF_PostAudioEventWithComponent final
{
public:
	class UAkAudioEvent*                          EventToPost;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_BPF_PostAudioEventWithComponent) == 0x000008, "Wrong alignment on VAudioStatics_BPF_PostAudioEventWithComponent");
static_assert(sizeof(VAudioStatics_BPF_PostAudioEventWithComponent) == 0x000010, "Wrong size on VAudioStatics_BPF_PostAudioEventWithComponent");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventWithComponent, EventToPost) == 0x000000, "Member 'VAudioStatics_BPF_PostAudioEventWithComponent::EventToPost' has a wrong offset!");
static_assert(offsetof(VAudioStatics_BPF_PostAudioEventWithComponent, Component) == 0x000008, "Member 'VAudioStatics_BPF_PostAudioEventWithComponent::Component' has a wrong offset!");

// Function Altar.VAudioStatics.PrepareAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct VAudioStatics_PrepareAudioEvent final
{
public:
	class UAkAudioEvent*                          EventToPrepare;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWhitelist;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAudioStatics_PrepareAudioEvent) == 0x000008, "Wrong alignment on VAudioStatics_PrepareAudioEvent");
static_assert(sizeof(VAudioStatics_PrepareAudioEvent) == 0x000010, "Wrong size on VAudioStatics_PrepareAudioEvent");
static_assert(offsetof(VAudioStatics_PrepareAudioEvent, EventToPrepare) == 0x000000, "Member 'VAudioStatics_PrepareAudioEvent::EventToPrepare' has a wrong offset!");
static_assert(offsetof(VAudioStatics_PrepareAudioEvent, bWhitelist) == 0x000008, "Member 'VAudioStatics_PrepareAudioEvent::bWhitelist' has a wrong offset!");
static_assert(offsetof(VAudioStatics_PrepareAudioEvent, ReturnValue) == 0x000009, "Member 'VAudioStatics_PrepareAudioEvent::ReturnValue' has a wrong offset!");

// Function Altar.VAudioStatics.SetGlobalRTPCValue
// 0x0010 (0x0010 - 0x0000)
struct VAudioStatics_SetGlobalRTPCValue final
{
public:
	class FName                                   RTPCName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTPCValue;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeInMs;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_SetGlobalRTPCValue) == 0x000004, "Wrong alignment on VAudioStatics_SetGlobalRTPCValue");
static_assert(sizeof(VAudioStatics_SetGlobalRTPCValue) == 0x000010, "Wrong size on VAudioStatics_SetGlobalRTPCValue");
static_assert(offsetof(VAudioStatics_SetGlobalRTPCValue, RTPCName) == 0x000000, "Member 'VAudioStatics_SetGlobalRTPCValue::RTPCName' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetGlobalRTPCValue, RTPCValue) == 0x000008, "Member 'VAudioStatics_SetGlobalRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetGlobalRTPCValue, InterpolationTimeInMs) == 0x00000C, "Member 'VAudioStatics_SetGlobalRTPCValue::InterpolationTimeInMs' has a wrong offset!");

// Function Altar.VAudioStatics.SetRTPCValue
// 0x0018 (0x0018 - 0x0000)
struct VAudioStatics_SetRTPCValue final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RTPCName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTPCValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterpolationTimeInMs;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_SetRTPCValue) == 0x000008, "Wrong alignment on VAudioStatics_SetRTPCValue");
static_assert(sizeof(VAudioStatics_SetRTPCValue) == 0x000018, "Wrong size on VAudioStatics_SetRTPCValue");
static_assert(offsetof(VAudioStatics_SetRTPCValue, Actor) == 0x000000, "Member 'VAudioStatics_SetRTPCValue::Actor' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetRTPCValue, RTPCName) == 0x000008, "Member 'VAudioStatics_SetRTPCValue::RTPCName' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetRTPCValue, RTPCValue) == 0x000010, "Member 'VAudioStatics_SetRTPCValue::RTPCValue' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetRTPCValue, InterpolationTimeInMs) == 0x000014, "Member 'VAudioStatics_SetRTPCValue::InterpolationTimeInMs' has a wrong offset!");

// Function Altar.VAudioStatics.SetState
// 0x0010 (0x0010 - 0x0000)
struct VAudioStatics_SetState final
{
public:
	class FName                                   StateGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateValue;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_SetState) == 0x000004, "Wrong alignment on VAudioStatics_SetState");
static_assert(sizeof(VAudioStatics_SetState) == 0x000010, "Wrong size on VAudioStatics_SetState");
static_assert(offsetof(VAudioStatics_SetState, StateGroup) == 0x000000, "Member 'VAudioStatics_SetState::StateGroup' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetState, StateValue) == 0x000008, "Member 'VAudioStatics_SetState::StateValue' has a wrong offset!");

// Function Altar.VAudioStatics.SetSwitch
// 0x0018 (0x0018 - 0x0000)
struct VAudioStatics_SetSwitch final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchGroup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchValue;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioStatics_SetSwitch) == 0x000008, "Wrong alignment on VAudioStatics_SetSwitch");
static_assert(sizeof(VAudioStatics_SetSwitch) == 0x000018, "Wrong size on VAudioStatics_SetSwitch");
static_assert(offsetof(VAudioStatics_SetSwitch, Actor) == 0x000000, "Member 'VAudioStatics_SetSwitch::Actor' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetSwitch, SwitchGroup) == 0x000008, "Member 'VAudioStatics_SetSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(VAudioStatics_SetSwitch, SwitchValue) == 0x000010, "Member 'VAudioStatics_SetSwitch::SwitchValue' has a wrong offset!");

// Function Altar.VAudioStatics.UnloadAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct VAudioStatics_UnloadAudioEvent final
{
public:
	class UAkAudioEvent*                          EventToUnload;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsync;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAudioStatics_UnloadAudioEvent) == 0x000008, "Wrong alignment on VAudioStatics_UnloadAudioEvent");
static_assert(sizeof(VAudioStatics_UnloadAudioEvent) == 0x000010, "Wrong size on VAudioStatics_UnloadAudioEvent");
static_assert(offsetof(VAudioStatics_UnloadAudioEvent, EventToUnload) == 0x000000, "Member 'VAudioStatics_UnloadAudioEvent::EventToUnload' has a wrong offset!");
static_assert(offsetof(VAudioStatics_UnloadAudioEvent, bAsync) == 0x000008, "Member 'VAudioStatics_UnloadAudioEvent::bAsync' has a wrong offset!");

// Function Altar.VAudioTriggerBox.EnterBox
// 0x0010 (0x0010 - 0x0000)
struct VAudioTriggerBox_EnterBox final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioTriggerBox_EnterBox) == 0x000008, "Wrong alignment on VAudioTriggerBox_EnterBox");
static_assert(sizeof(VAudioTriggerBox_EnterBox) == 0x000010, "Wrong size on VAudioTriggerBox_EnterBox");
static_assert(offsetof(VAudioTriggerBox_EnterBox, OverlappedActor) == 0x000000, "Member 'VAudioTriggerBox_EnterBox::OverlappedActor' has a wrong offset!");
static_assert(offsetof(VAudioTriggerBox_EnterBox, OtherActor) == 0x000008, "Member 'VAudioTriggerBox_EnterBox::OtherActor' has a wrong offset!");

// Function Altar.VAudioTriggerBox.ExitBox
// 0x0010 (0x0010 - 0x0000)
struct VAudioTriggerBox_ExitBox final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAudioTriggerBox_ExitBox) == 0x000008, "Wrong alignment on VAudioTriggerBox_ExitBox");
static_assert(sizeof(VAudioTriggerBox_ExitBox) == 0x000010, "Wrong size on VAudioTriggerBox_ExitBox");
static_assert(offsetof(VAudioTriggerBox_ExitBox, OverlappedActor) == 0x000000, "Member 'VAudioTriggerBox_ExitBox::OverlappedActor' has a wrong offset!");
static_assert(offsetof(VAudioTriggerBox_ExitBox, OtherActor) == 0x000008, "Member 'VAudioTriggerBox_ExitBox::OtherActor' has a wrong offset!");

// Function Altar.VAvailableEffectItem.SetProperties
// 0x0028 (0x0028 - 0x0000)
struct VAvailableEffectItem_SetProperties final
{
public:
	struct FAvailableEffectData                   Value;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAvailableEffectItem_SetProperties) == 0x000008, "Wrong alignment on VAvailableEffectItem_SetProperties");
static_assert(sizeof(VAvailableEffectItem_SetProperties) == 0x000028, "Wrong size on VAvailableEffectItem_SetProperties");
static_assert(offsetof(VAvailableEffectItem_SetProperties, Value) == 0x000000, "Member 'VAvailableEffectItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VAvailableEffectItem.GetProperties
// 0x0028 (0x0028 - 0x0000)
struct VAvailableEffectItem_GetProperties final
{
public:
	struct FAvailableEffectData                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAvailableEffectItem_GetProperties) == 0x000008, "Wrong alignment on VAvailableEffectItem_GetProperties");
static_assert(sizeof(VAvailableEffectItem_GetProperties) == 0x000028, "Wrong size on VAvailableEffectItem_GetProperties");
static_assert(offsetof(VAvailableEffectItem_GetProperties, ReturnValue) == 0x000000, "Member 'VAvailableEffectItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VBackgroundWidgetBase.OnScreenShotcapturedDelegate
// 0x0018 (0x0018 - 0x0000)
struct VBackgroundWidgetBase_OnScreenShotcapturedDelegate final
{
public:
	int32                                         InSizeX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSizeY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         InImageData;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBackgroundWidgetBase_OnScreenShotcapturedDelegate) == 0x000008, "Wrong alignment on VBackgroundWidgetBase_OnScreenShotcapturedDelegate");
static_assert(sizeof(VBackgroundWidgetBase_OnScreenShotcapturedDelegate) == 0x000018, "Wrong size on VBackgroundWidgetBase_OnScreenShotcapturedDelegate");
static_assert(offsetof(VBackgroundWidgetBase_OnScreenShotcapturedDelegate, InSizeX) == 0x000000, "Member 'VBackgroundWidgetBase_OnScreenShotcapturedDelegate::InSizeX' has a wrong offset!");
static_assert(offsetof(VBackgroundWidgetBase_OnScreenShotcapturedDelegate, InSizeY) == 0x000004, "Member 'VBackgroundWidgetBase_OnScreenShotcapturedDelegate::InSizeY' has a wrong offset!");
static_assert(offsetof(VBackgroundWidgetBase_OnScreenShotcapturedDelegate, InImageData) == 0x000008, "Member 'VBackgroundWidgetBase_OnScreenShotcapturedDelegate::InImageData' has a wrong offset!");

// Function Altar.VBackgroundWidgetBase.SetBackgroundImage
// 0x0008 (0x0008 - 0x0000)
struct VBackgroundWidgetBase_SetBackgroundImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBackgroundWidgetBase_SetBackgroundImage) == 0x000008, "Wrong alignment on VBackgroundWidgetBase_SetBackgroundImage");
static_assert(sizeof(VBackgroundWidgetBase_SetBackgroundImage) == 0x000008, "Wrong size on VBackgroundWidgetBase_SetBackgroundImage");
static_assert(offsetof(VBackgroundWidgetBase_SetBackgroundImage, Image) == 0x000000, "Member 'VBackgroundWidgetBase_SetBackgroundImage::Image' has a wrong offset!");

// Function Altar.VBackgroundWidgetBase.GetBackgroundImageBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VBackgroundWidgetBase_GetBackgroundImageBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBackgroundWidgetBase_GetBackgroundImageBrush) == 0x000010, "Wrong alignment on VBackgroundWidgetBase_GetBackgroundImageBrush");
static_assert(sizeof(VBackgroundWidgetBase_GetBackgroundImageBrush) == 0x0000D0, "Wrong size on VBackgroundWidgetBase_GetBackgroundImageBrush");
static_assert(offsetof(VBackgroundWidgetBase_GetBackgroundImageBrush, ReturnValue) == 0x000000, "Member 'VBackgroundWidgetBase_GetBackgroundImageBrush::ReturnValue' has a wrong offset!");

// Function Altar.VBlockCharacterAnimInstance.OnBlockHitEnd
// 0x0020 (0x0020 - 0x0000)
struct VBlockCharacterAnimInstance_OnBlockHitEnd final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlockCharacterAnimInstance_OnBlockHitEnd) == 0x000008, "Wrong alignment on VBlockCharacterAnimInstance_OnBlockHitEnd");
static_assert(sizeof(VBlockCharacterAnimInstance_OnBlockHitEnd) == 0x000020, "Wrong size on VBlockCharacterAnimInstance_OnBlockHitEnd");
static_assert(offsetof(VBlockCharacterAnimInstance_OnBlockHitEnd, Context) == 0x000000, "Member 'VBlockCharacterAnimInstance_OnBlockHitEnd::Context' has a wrong offset!");
static_assert(offsetof(VBlockCharacterAnimInstance_OnBlockHitEnd, Node) == 0x000010, "Member 'VBlockCharacterAnimInstance_OnBlockHitEnd::Node' has a wrong offset!");

// Function Altar.VBlockCharacterAnimInstance.OnBlockHitEnter
// 0x0020 (0x0020 - 0x0000)
struct VBlockCharacterAnimInstance_OnBlockHitEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlockCharacterAnimInstance_OnBlockHitEnter) == 0x000008, "Wrong alignment on VBlockCharacterAnimInstance_OnBlockHitEnter");
static_assert(sizeof(VBlockCharacterAnimInstance_OnBlockHitEnter) == 0x000020, "Wrong size on VBlockCharacterAnimInstance_OnBlockHitEnter");
static_assert(offsetof(VBlockCharacterAnimInstance_OnBlockHitEnter, Context) == 0x000000, "Member 'VBlockCharacterAnimInstance_OnBlockHitEnter::Context' has a wrong offset!");
static_assert(offsetof(VBlockCharacterAnimInstance_OnBlockHitEnter, Node) == 0x000010, "Member 'VBlockCharacterAnimInstance_OnBlockHitEnter::Node' has a wrong offset!");

// Function Altar.VBlockCharacterAnimInstance.GetShouldEnterBlockState
// 0x0001 (0x0001 - 0x0000)
struct VBlockCharacterAnimInstance_GetShouldEnterBlockState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlockCharacterAnimInstance_GetShouldEnterBlockState) == 0x000001, "Wrong alignment on VBlockCharacterAnimInstance_GetShouldEnterBlockState");
static_assert(sizeof(VBlockCharacterAnimInstance_GetShouldEnterBlockState) == 0x000001, "Wrong size on VBlockCharacterAnimInstance_GetShouldEnterBlockState");
static_assert(offsetof(VBlockCharacterAnimInstance_GetShouldEnterBlockState, ReturnValue) == 0x000000, "Member 'VBlockCharacterAnimInstance_GetShouldEnterBlockState::ReturnValue' has a wrong offset!");

// Function Altar.VBlockCharacterAnimInstance.IsBlockingHit
// 0x0001 (0x0001 - 0x0000)
struct VBlockCharacterAnimInstance_IsBlockingHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlockCharacterAnimInstance_IsBlockingHit) == 0x000001, "Wrong alignment on VBlockCharacterAnimInstance_IsBlockingHit");
static_assert(sizeof(VBlockCharacterAnimInstance_IsBlockingHit) == 0x000001, "Wrong size on VBlockCharacterAnimInstance_IsBlockingHit");
static_assert(offsetof(VBlockCharacterAnimInstance_IsBlockingHit, ReturnValue) == 0x000000, "Member 'VBlockCharacterAnimInstance_IsBlockingHit::ReturnValue' has a wrong offset!");

// Function Altar.VBlockShieldCharacterAnimInstance.OnBlockShieldHitEnter
// 0x0020 (0x0020 - 0x0000)
struct VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter) == 0x000008, "Wrong alignment on VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter");
static_assert(sizeof(VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter) == 0x000020, "Wrong size on VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter");
static_assert(offsetof(VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter, Context) == 0x000000, "Member 'VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter::Context' has a wrong offset!");
static_assert(offsetof(VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter, Node) == 0x000010, "Member 'VBlockShieldCharacterAnimInstance_OnBlockShieldHitEnter::Node' has a wrong offset!");

// Function Altar.VBlockShieldCharacterAnimInstance.HasShield
// 0x0001 (0x0001 - 0x0000)
struct VBlockShieldCharacterAnimInstance_HasShield final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBlockShieldCharacterAnimInstance_HasShield) == 0x000001, "Wrong alignment on VBlockShieldCharacterAnimInstance_HasShield");
static_assert(sizeof(VBlockShieldCharacterAnimInstance_HasShield) == 0x000001, "Wrong size on VBlockShieldCharacterAnimInstance_HasShield");
static_assert(offsetof(VBlockShieldCharacterAnimInstance_HasShield, ReturnValue) == 0x000000, "Member 'VBlockShieldCharacterAnimInstance_HasShield::ReturnValue' has a wrong offset!");

// Function Altar.VBloodSystemVFXBlueprint.OnStartPlay
// 0x0060 (0x0060 - 0x0000)
struct VBloodSystemVFXBlueprint_OnStartPlay final
{
public:
	float                                         Damages;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVBloodColor                                  BloodColor;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingWeapon;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Attacker;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMaxHP;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceType                               HitSourceType;                                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	const class UStaticMeshComponent*             WeaponComp;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpactNormal;                                      // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceWeaponType                         HitWeaponType;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBloodSystemVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VBloodSystemVFXBlueprint_OnStartPlay");
static_assert(sizeof(VBloodSystemVFXBlueprint_OnStartPlay) == 0x000060, "Wrong size on VBloodSystemVFXBlueprint_OnStartPlay");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, Damages) == 0x000000, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::Damages' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, BloodColor) == 0x000004, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::BloodColor' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, bIsUsingWeapon) == 0x000005, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::bIsUsingWeapon' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, Target) == 0x000008, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::Target' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, Attacker) == 0x000010, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::Attacker' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, TargetMaxHP) == 0x000018, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::TargetMaxHP' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, bDoesBeginInFirstPerson) == 0x00001C, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, HitSourceType) == 0x00001D, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::HitSourceType' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, WeaponComp) == 0x000020, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::WeaponComp' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, ImpactNormal) == 0x000028, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::ImpactNormal' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, HitWeaponType) == 0x000040, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::HitWeaponType' has a wrong offset!");
static_assert(offsetof(VBloodSystemVFXBlueprint_OnStartPlay, HitDirection) == 0x000048, "Member 'VBloodSystemVFXBlueprint_OnStartPlay::HitDirection' has a wrong offset!");

// Function Altar.VBookMenuViewModel.SetProperties
// 0x0018 (0x0018 - 0x0000)
struct VBookMenuViewModel_SetProperties final
{
public:
	struct FLegacyBookProperties                  NewProperties;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBookMenuViewModel_SetProperties) == 0x000008, "Wrong alignment on VBookMenuViewModel_SetProperties");
static_assert(sizeof(VBookMenuViewModel_SetProperties) == 0x000018, "Wrong size on VBookMenuViewModel_SetProperties");
static_assert(offsetof(VBookMenuViewModel_SetProperties, NewProperties) == 0x000000, "Member 'VBookMenuViewModel_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VBookMenuViewModel.GetProperties
// 0x0018 (0x0018 - 0x0000)
struct VBookMenuViewModel_GetProperties final
{
public:
	struct FLegacyBookProperties                  ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBookMenuViewModel_GetProperties) == 0x000008, "Wrong alignment on VBookMenuViewModel_GetProperties");
static_assert(sizeof(VBookMenuViewModel_GetProperties) == 0x000018, "Wrong size on VBookMenuViewModel_GetProperties");
static_assert(offsetof(VBookMenuViewModel_GetProperties, ReturnValue) == 0x000000, "Member 'VBookMenuViewModel_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VBowAttackStandSneakAnimInstance.OnReleaseEnter
// 0x0020 (0x0020 - 0x0000)
struct VBowAttackStandSneakAnimInstance_OnReleaseEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBowAttackStandSneakAnimInstance_OnReleaseEnter) == 0x000008, "Wrong alignment on VBowAttackStandSneakAnimInstance_OnReleaseEnter");
static_assert(sizeof(VBowAttackStandSneakAnimInstance_OnReleaseEnter) == 0x000020, "Wrong size on VBowAttackStandSneakAnimInstance_OnReleaseEnter");
static_assert(offsetof(VBowAttackStandSneakAnimInstance_OnReleaseEnter, Context) == 0x000000, "Member 'VBowAttackStandSneakAnimInstance_OnReleaseEnter::Context' has a wrong offset!");
static_assert(offsetof(VBowAttackStandSneakAnimInstance_OnReleaseEnter, Node) == 0x000010, "Member 'VBowAttackStandSneakAnimInstance_OnReleaseEnter::Node' has a wrong offset!");

// Function Altar.VBowAttackStandSneakAnimInstance.OnStartEnter
// 0x0020 (0x0020 - 0x0000)
struct VBowAttackStandSneakAnimInstance_OnStartEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBowAttackStandSneakAnimInstance_OnStartEnter) == 0x000008, "Wrong alignment on VBowAttackStandSneakAnimInstance_OnStartEnter");
static_assert(sizeof(VBowAttackStandSneakAnimInstance_OnStartEnter) == 0x000020, "Wrong size on VBowAttackStandSneakAnimInstance_OnStartEnter");
static_assert(offsetof(VBowAttackStandSneakAnimInstance_OnStartEnter, Context) == 0x000000, "Member 'VBowAttackStandSneakAnimInstance_OnStartEnter::Context' has a wrong offset!");
static_assert(offsetof(VBowAttackStandSneakAnimInstance_OnStartEnter, Node) == 0x000010, "Member 'VBowAttackStandSneakAnimInstance_OnStartEnter::Node' has a wrong offset!");

// Function Altar.VBowAttackStandSneakAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VBowAttackStandSneakAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBowAttackStandSneakAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VBowAttackStandSneakAnimInstance_IsSneaking");
static_assert(sizeof(VBowAttackStandSneakAnimInstance_IsSneaking) == 0x000001, "Wrong size on VBowAttackStandSneakAnimInstance_IsSneaking");
static_assert(offsetof(VBowAttackStandSneakAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VBowAttackStandSneakAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VBowAttackStandSneakAnimInstance.IsStanding
// 0x0001 (0x0001 - 0x0000)
struct VBowAttackStandSneakAnimInstance_IsStanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VBowAttackStandSneakAnimInstance_IsStanding) == 0x000001, "Wrong alignment on VBowAttackStandSneakAnimInstance_IsStanding");
static_assert(sizeof(VBowAttackStandSneakAnimInstance_IsStanding) == 0x000001, "Wrong size on VBowAttackStandSneakAnimInstance_IsStanding");
static_assert(offsetof(VBowAttackStandSneakAnimInstance_IsStanding, ReturnValue) == 0x000000, "Member 'VBowAttackStandSneakAnimInstance_IsStanding::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.GetBlendTimeFromSequence
// 0x0010 (0x0010 - 0x0000)
struct VCharacterAnimInstance_GetBlendTimeFromSequence final
{
public:
	class UAnimationAsset*                        AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VCharacterAnimInstance_GetBlendTimeFromSequence) == 0x000008, "Wrong alignment on VCharacterAnimInstance_GetBlendTimeFromSequence");
static_assert(sizeof(VCharacterAnimInstance_GetBlendTimeFromSequence) == 0x000010, "Wrong size on VCharacterAnimInstance_GetBlendTimeFromSequence");
static_assert(offsetof(VCharacterAnimInstance_GetBlendTimeFromSequence, AnimSequence) == 0x000000, "Member 'VCharacterAnimInstance_GetBlendTimeFromSequence::AnimSequence' has a wrong offset!");
static_assert(offsetof(VCharacterAnimInstance_GetBlendTimeFromSequence, ReturnValue) == 0x000008, "Member 'VCharacterAnimInstance_GetBlendTimeFromSequence::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnAnimationSkip
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAnimInstance_OnAnimationSkip final
{
public:
	EOblivionAnimSection                          Section;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnAnimationSkip) == 0x000001, "Wrong alignment on VCharacterAnimInstance_OnAnimationSkip");
static_assert(sizeof(VCharacterAnimInstance_OnAnimationSkip) == 0x000001, "Wrong size on VCharacterAnimInstance_OnAnimationSkip");
static_assert(offsetof(VCharacterAnimInstance_OnAnimationSkip, Section) == 0x000000, "Member 'VCharacterAnimInstance_OnAnimationSkip::Section' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnAnimationStateChanged
// 0x0038 (0x0038 - 0x0000)
struct VCharacterAnimInstance_OnAnimationStateChanged final
{
public:
	struct FOblivionSourcedCharacterAnimationState OldState;                                         // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOblivionSourcedCharacterAnimationState NewState;                                         // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnAnimationStateChanged) == 0x000004, "Wrong alignment on VCharacterAnimInstance_OnAnimationStateChanged");
static_assert(sizeof(VCharacterAnimInstance_OnAnimationStateChanged) == 0x000038, "Wrong size on VCharacterAnimInstance_OnAnimationStateChanged");
static_assert(offsetof(VCharacterAnimInstance_OnAnimationStateChanged, OldState) == 0x000000, "Member 'VCharacterAnimInstance_OnAnimationStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(VCharacterAnimInstance_OnAnimationStateChanged, NewState) == 0x00001C, "Member 'VCharacterAnimInstance_OnAnimationStateChanged::NewState' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnAttackStarted
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAnimInstance_OnAttackStarted final
{
public:
	ECharacterAttackMove                          AttackMove;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnAttackStarted) == 0x000001, "Wrong alignment on VCharacterAnimInstance_OnAttackStarted");
static_assert(sizeof(VCharacterAnimInstance_OnAttackStarted) == 0x000001, "Wrong size on VCharacterAnimInstance_OnAttackStarted");
static_assert(offsetof(VCharacterAnimInstance_OnAttackStarted, AttackMove) == 0x000000, "Member 'VCharacterAnimInstance_OnAttackStarted::AttackMove' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnCastSpellRanged
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAnimInstance_OnCastSpellRanged final
{
public:
	uint8                                         Arm;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnCastSpellRanged) == 0x000001, "Wrong alignment on VCharacterAnimInstance_OnCastSpellRanged");
static_assert(sizeof(VCharacterAnimInstance_OnCastSpellRanged) == 0x000001, "Wrong size on VCharacterAnimInstance_OnCastSpellRanged");
static_assert(offsetof(VCharacterAnimInstance_OnCastSpellRanged, Arm) == 0x000000, "Member 'VCharacterAnimInstance_OnCastSpellRanged::Arm' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnCastSpellSelf
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAnimInstance_OnCastSpellSelf final
{
public:
	uint8                                         Arm;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnCastSpellSelf) == 0x000001, "Wrong alignment on VCharacterAnimInstance_OnCastSpellSelf");
static_assert(sizeof(VCharacterAnimInstance_OnCastSpellSelf) == 0x000001, "Wrong size on VCharacterAnimInstance_OnCastSpellSelf");
static_assert(offsetof(VCharacterAnimInstance_OnCastSpellSelf, Arm) == 0x000000, "Member 'VCharacterAnimInstance_OnCastSpellSelf::Arm' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnCastSpellTouch
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAnimInstance_OnCastSpellTouch final
{
public:
	uint8                                         Arm;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnCastSpellTouch) == 0x000001, "Wrong alignment on VCharacterAnimInstance_OnCastSpellTouch");
static_assert(sizeof(VCharacterAnimInstance_OnCastSpellTouch) == 0x000001, "Wrong size on VCharacterAnimInstance_OnCastSpellTouch");
static_assert(offsetof(VCharacterAnimInstance_OnCastSpellTouch, Arm) == 0x000000, "Member 'VCharacterAnimInstance_OnCastSpellTouch::Arm' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnDynamicIdleAnimationChange
// 0x0008 (0x0008 - 0x0000)
struct VCharacterAnimInstance_OnDynamicIdleAnimationChange final
{
public:
	class UAnimSequence*                          Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnDynamicIdleAnimationChange) == 0x000008, "Wrong alignment on VCharacterAnimInstance_OnDynamicIdleAnimationChange");
static_assert(sizeof(VCharacterAnimInstance_OnDynamicIdleAnimationChange) == 0x000008, "Wrong size on VCharacterAnimInstance_OnDynamicIdleAnimationChange");
static_assert(offsetof(VCharacterAnimInstance_OnDynamicIdleAnimationChange, Animation) == 0x000000, "Member 'VCharacterAnimInstance_OnDynamicIdleAnimationChange::Animation' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnSpecialIdleAnimation_WantToMove
// 0x0001 (0x0001 - 0x0000)
struct VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove final
{
public:
	bool                                          ShouldBeMoving;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove) == 0x000001, "Wrong alignment on VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove");
static_assert(sizeof(VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove) == 0x000001, "Wrong size on VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove");
static_assert(offsetof(VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove, ShouldBeMoving) == 0x000000, "Member 'VCharacterAnimInstance_OnSpecialIdleAnimation_WantToMove::ShouldBeMoving' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.OnSpecialIdleAnimationStart
// 0x0008 (0x0008 - 0x0000)
struct VCharacterAnimInstance_OnSpecialIdleAnimationStart final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_OnSpecialIdleAnimationStart) == 0x000008, "Wrong alignment on VCharacterAnimInstance_OnSpecialIdleAnimationStart");
static_assert(sizeof(VCharacterAnimInstance_OnSpecialIdleAnimationStart) == 0x000008, "Wrong size on VCharacterAnimInstance_OnSpecialIdleAnimationStart");
static_assert(offsetof(VCharacterAnimInstance_OnSpecialIdleAnimationStart, Animation) == 0x000000, "Member 'VCharacterAnimInstance_OnSpecialIdleAnimationStart::Animation' has a wrong offset!");

// Function Altar.VCharacterAnimInstance.UpdateInternalStateMachine
// 0x0038 (0x0038 - 0x0000)
struct VCharacterAnimInstance_UpdateInternalStateMachine final
{
public:
	struct FOblivionSourcedCharacterAnimationState OldState;                                         // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOblivionSourcedCharacterAnimationState NewState;                                         // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterAnimInstance_UpdateInternalStateMachine) == 0x000004, "Wrong alignment on VCharacterAnimInstance_UpdateInternalStateMachine");
static_assert(sizeof(VCharacterAnimInstance_UpdateInternalStateMachine) == 0x000038, "Wrong size on VCharacterAnimInstance_UpdateInternalStateMachine");
static_assert(offsetof(VCharacterAnimInstance_UpdateInternalStateMachine, OldState) == 0x000000, "Member 'VCharacterAnimInstance_UpdateInternalStateMachine::OldState' has a wrong offset!");
static_assert(offsetof(VCharacterAnimInstance_UpdateInternalStateMachine, NewState) == 0x00001C, "Member 'VCharacterAnimInstance_UpdateInternalStateMachine::NewState' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.GetClassFromSlot
// 0x0010 (0x0010 - 0x0000)
struct VCharacterBodyPairingComponent_GetClassFromSlot final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AVModularBodyPartBase>      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_GetClassFromSlot) == 0x000008, "Wrong alignment on VCharacterBodyPairingComponent_GetClassFromSlot");
static_assert(sizeof(VCharacterBodyPairingComponent_GetClassFromSlot) == 0x000010, "Wrong size on VCharacterBodyPairingComponent_GetClassFromSlot");
static_assert(offsetof(VCharacterBodyPairingComponent_GetClassFromSlot, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_GetClassFromSlot::Slot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_GetClassFromSlot, ReturnValue) == 0x000008, "Member 'VCharacterBodyPairingComponent_GetClassFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.EquipFormOnSlot
// 0x0010 (0x0010 - 0x0000)
struct VCharacterBodyPairingComponent_EquipFormOnSlot final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTESForm*                         form;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_EquipFormOnSlot) == 0x000008, "Wrong alignment on VCharacterBodyPairingComponent_EquipFormOnSlot");
static_assert(sizeof(VCharacterBodyPairingComponent_EquipFormOnSlot) == 0x000010, "Wrong size on VCharacterBodyPairingComponent_EquipFormOnSlot");
static_assert(offsetof(VCharacterBodyPairingComponent_EquipFormOnSlot, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_EquipFormOnSlot::Slot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_EquipFormOnSlot, form) == 0x000008, "Member 'VCharacterBodyPairingComponent_EquipFormOnSlot::form' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.RegisterSupportedSlot
// 0x0001 (0x0001 - 0x0000)
struct VCharacterBodyPairingComponent_RegisterSupportedSlot final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_RegisterSupportedSlot) == 0x000001, "Wrong alignment on VCharacterBodyPairingComponent_RegisterSupportedSlot");
static_assert(sizeof(VCharacterBodyPairingComponent_RegisterSupportedSlot) == 0x000001, "Wrong size on VCharacterBodyPairingComponent_RegisterSupportedSlot");
static_assert(offsetof(VCharacterBodyPairingComponent_RegisterSupportedSlot, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_RegisterSupportedSlot::Slot' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.SetNakedOnSlot
// 0x0001 (0x0001 - 0x0000)
struct VCharacterBodyPairingComponent_SetNakedOnSlot final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_SetNakedOnSlot) == 0x000001, "Wrong alignment on VCharacterBodyPairingComponent_SetNakedOnSlot");
static_assert(sizeof(VCharacterBodyPairingComponent_SetNakedOnSlot) == 0x000001, "Wrong size on VCharacterBodyPairingComponent_SetNakedOnSlot");
static_assert(offsetof(VCharacterBodyPairingComponent_SetNakedOnSlot, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_SetNakedOnSlot::Slot' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.SetSlotCovered
// 0x0002 (0x0002 - 0x0000)
struct VCharacterBodyPairingComponent_SetSlotCovered final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCovered;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_SetSlotCovered) == 0x000001, "Wrong alignment on VCharacterBodyPairingComponent_SetSlotCovered");
static_assert(sizeof(VCharacterBodyPairingComponent_SetSlotCovered) == 0x000002, "Wrong size on VCharacterBodyPairingComponent_SetSlotCovered");
static_assert(offsetof(VCharacterBodyPairingComponent_SetSlotCovered, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_SetSlotCovered::Slot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_SetSlotCovered, bIsCovered) == 0x000001, "Member 'VCharacterBodyPairingComponent_SetSlotCovered::bIsCovered' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.GetBodyPartForm
// 0x0010 (0x0010 - 0x0000)
struct VCharacterBodyPairingComponent_GetBodyPartForm final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTESForm*                         ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_GetBodyPartForm) == 0x000008, "Wrong alignment on VCharacterBodyPairingComponent_GetBodyPartForm");
static_assert(sizeof(VCharacterBodyPairingComponent_GetBodyPartForm) == 0x000010, "Wrong size on VCharacterBodyPairingComponent_GetBodyPartForm");
static_assert(offsetof(VCharacterBodyPairingComponent_GetBodyPartForm, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_GetBodyPartForm::Slot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_GetBodyPartForm, ReturnValue) == 0x000008, "Member 'VCharacterBodyPairingComponent_GetBodyPartForm::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.GetBodyPartProperties
// 0x0030 (0x0030 - 0x0000)
struct VCharacterBodyPairingComponent_GetBodyPartProperties final
{
public:
	EBipedModularBodySlot                         BodySlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVCharacterBodyPartProperties          ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_GetBodyPartProperties) == 0x000008, "Wrong alignment on VCharacterBodyPairingComponent_GetBodyPartProperties");
static_assert(sizeof(VCharacterBodyPairingComponent_GetBodyPartProperties) == 0x000030, "Wrong size on VCharacterBodyPairingComponent_GetBodyPartProperties");
static_assert(offsetof(VCharacterBodyPairingComponent_GetBodyPartProperties, BodySlot) == 0x000000, "Member 'VCharacterBodyPairingComponent_GetBodyPartProperties::BodySlot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_GetBodyPartProperties, ReturnValue) == 0x000008, "Member 'VCharacterBodyPairingComponent_GetBodyPartProperties::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.GetSupportedSlots
// 0x0010 (0x0010 - 0x0000)
struct VCharacterBodyPairingComponent_GetSupportedSlots final
{
public:
	TArray<EBipedModularBodySlot>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_GetSupportedSlots) == 0x000008, "Wrong alignment on VCharacterBodyPairingComponent_GetSupportedSlots");
static_assert(sizeof(VCharacterBodyPairingComponent_GetSupportedSlots) == 0x000010, "Wrong size on VCharacterBodyPairingComponent_GetSupportedSlots");
static_assert(offsetof(VCharacterBodyPairingComponent_GetSupportedSlots, ReturnValue) == 0x000000, "Member 'VCharacterBodyPairingComponent_GetSupportedSlots::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.IsSlotCovered
// 0x0002 (0x0002 - 0x0000)
struct VCharacterBodyPairingComponent_IsSlotCovered final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_IsSlotCovered) == 0x000001, "Wrong alignment on VCharacterBodyPairingComponent_IsSlotCovered");
static_assert(sizeof(VCharacterBodyPairingComponent_IsSlotCovered) == 0x000002, "Wrong size on VCharacterBodyPairingComponent_IsSlotCovered");
static_assert(offsetof(VCharacterBodyPairingComponent_IsSlotCovered, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_IsSlotCovered::Slot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_IsSlotCovered, ReturnValue) == 0x000001, "Member 'VCharacterBodyPairingComponent_IsSlotCovered::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterBodyPairingComponent.IsSlotSupported
// 0x0002 (0x0002 - 0x0000)
struct VCharacterBodyPairingComponent_IsSlotSupported final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterBodyPairingComponent_IsSlotSupported) == 0x000001, "Wrong alignment on VCharacterBodyPairingComponent_IsSlotSupported");
static_assert(sizeof(VCharacterBodyPairingComponent_IsSlotSupported) == 0x000002, "Wrong size on VCharacterBodyPairingComponent_IsSlotSupported");
static_assert(offsetof(VCharacterBodyPairingComponent_IsSlotSupported, Slot) == 0x000000, "Member 'VCharacterBodyPairingComponent_IsSlotSupported::Slot' has a wrong offset!");
static_assert(offsetof(VCharacterBodyPairingComponent_IsSlotSupported, ReturnValue) == 0x000001, "Member 'VCharacterBodyPairingComponent_IsSlotSupported::ReturnValue' has a wrong offset!");

// Function Altar.VSettingsMenuViewModel.RegisterSendClickedButton
// 0x0001 (0x0001 - 0x0000)
struct VSettingsMenuViewModel_RegisterSendClickedButton final
{
public:
	ELegacySettingsMenuIDs                        InButtonIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong alignment on VSettingsMenuViewModel_RegisterSendClickedButton");
static_assert(sizeof(VSettingsMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong size on VSettingsMenuViewModel_RegisterSendClickedButton");
static_assert(offsetof(VSettingsMenuViewModel_RegisterSendClickedButton, InButtonIndex) == 0x000000, "Member 'VSettingsMenuViewModel_RegisterSendClickedButton::InButtonIndex' has a wrong offset!");

// Function Altar.VSettingsMenuViewModel.SetPageIndex
// 0x0004 (0x0004 - 0x0000)
struct VSettingsMenuViewModel_SetPageIndex final
{
public:
	int32                                         NewPageIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsMenuViewModel_SetPageIndex) == 0x000004, "Wrong alignment on VSettingsMenuViewModel_SetPageIndex");
static_assert(sizeof(VSettingsMenuViewModel_SetPageIndex) == 0x000004, "Wrong size on VSettingsMenuViewModel_SetPageIndex");
static_assert(offsetof(VSettingsMenuViewModel_SetPageIndex, NewPageIndex) == 0x000000, "Member 'VSettingsMenuViewModel_SetPageIndex::NewPageIndex' has a wrong offset!");

// Function Altar.VSettingsMenuViewModel.GetBuildInfo
// 0x0018 (0x0018 - 0x0000)
struct VSettingsMenuViewModel_GetBuildInfo final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsMenuViewModel_GetBuildInfo) == 0x000008, "Wrong alignment on VSettingsMenuViewModel_GetBuildInfo");
static_assert(sizeof(VSettingsMenuViewModel_GetBuildInfo) == 0x000018, "Wrong size on VSettingsMenuViewModel_GetBuildInfo");
static_assert(offsetof(VSettingsMenuViewModel_GetBuildInfo, ReturnValue) == 0x000000, "Member 'VSettingsMenuViewModel_GetBuildInfo::ReturnValue' has a wrong offset!");

// Function Altar.VSettingsMenuViewModel.GetPageIndex
// 0x0004 (0x0004 - 0x0000)
struct VSettingsMenuViewModel_GetPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsMenuViewModel_GetPageIndex) == 0x000004, "Wrong alignment on VSettingsMenuViewModel_GetPageIndex");
static_assert(sizeof(VSettingsMenuViewModel_GetPageIndex) == 0x000004, "Wrong size on VSettingsMenuViewModel_GetPageIndex");
static_assert(offsetof(VSettingsMenuViewModel_GetPageIndex, ReturnValue) == 0x000000, "Member 'VSettingsMenuViewModel_GetPageIndex::ReturnValue' has a wrong offset!");

// Function Altar.VSettingsMenuViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VSettingsMenuViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VSettingsMenuViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VSettingsMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VSettingsMenuViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VSettingsMenuViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VSettingsMenuViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VCharacterFadeInOutComponent.SetDitherOnCharacterVisibleComponents
// 0x0010 (0x0010 - 0x0000)
struct VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents final
{
public:
	class AVPairedCharacter*                      PairedCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoDither;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DitherScale;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents) == 0x000008, "Wrong alignment on VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents");
static_assert(sizeof(VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents) == 0x000010, "Wrong size on VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents");
static_assert(offsetof(VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents, PairedCharacter) == 0x000000, "Member 'VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents::PairedCharacter' has a wrong offset!");
static_assert(offsetof(VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents, bDoDither) == 0x000008, "Member 'VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents::bDoDither' has a wrong offset!");
static_assert(offsetof(VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents, DitherScale) == 0x00000C, "Member 'VCharacterFadeInOutComponent_SetDitherOnCharacterVisibleComponents::DitherScale' has a wrong offset!");

// Function Altar.VCharacterFadeInOutComponent.SetDitherOnCreatureVisibleComponents
// 0x0010 (0x0010 - 0x0000)
struct VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents final
{
public:
	class AVPairedCreature*                       PairedCreature;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoDither;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DitherScale;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents) == 0x000008, "Wrong alignment on VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents");
static_assert(sizeof(VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents) == 0x000010, "Wrong size on VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents");
static_assert(offsetof(VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents, PairedCreature) == 0x000000, "Member 'VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents::PairedCreature' has a wrong offset!");
static_assert(offsetof(VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents, bDoDither) == 0x000008, "Member 'VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents::bDoDither' has a wrong offset!");
static_assert(offsetof(VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents, DitherScale) == 0x00000C, "Member 'VCharacterFadeInOutComponent_SetDitherOnCreatureVisibleComponents::DitherScale' has a wrong offset!");

// Function Altar.VCharacterStatePairingComponent.UpdateAnimationState
// 0x0008 (0x0008 - 0x0000)
struct VCharacterStatePairingComponent_UpdateAnimationState final
{
public:
	const class AVWeapon*                         WeaponActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterStatePairingComponent_UpdateAnimationState) == 0x000008, "Wrong alignment on VCharacterStatePairingComponent_UpdateAnimationState");
static_assert(sizeof(VCharacterStatePairingComponent_UpdateAnimationState) == 0x000008, "Wrong size on VCharacterStatePairingComponent_UpdateAnimationState");
static_assert(offsetof(VCharacterStatePairingComponent_UpdateAnimationState, WeaponActor) == 0x000000, "Member 'VCharacterStatePairingComponent_UpdateAnimationState::WeaponActor' has a wrong offset!");

// Function Altar.VCharacterStatePairingComponent.UpdateInternalStateMachine
// 0x0038 (0x0038 - 0x0000)
struct VCharacterStatePairingComponent_UpdateInternalStateMachine final
{
public:
	struct FOblivionSourcedCharacterAnimationState OldState;                                         // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOblivionSourcedCharacterAnimationState NewState;                                         // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterStatePairingComponent_UpdateInternalStateMachine) == 0x000004, "Wrong alignment on VCharacterStatePairingComponent_UpdateInternalStateMachine");
static_assert(sizeof(VCharacterStatePairingComponent_UpdateInternalStateMachine) == 0x000038, "Wrong size on VCharacterStatePairingComponent_UpdateInternalStateMachine");
static_assert(offsetof(VCharacterStatePairingComponent_UpdateInternalStateMachine, OldState) == 0x000000, "Member 'VCharacterStatePairingComponent_UpdateInternalStateMachine::OldState' has a wrong offset!");
static_assert(offsetof(VCharacterStatePairingComponent_UpdateInternalStateMachine, NewState) == 0x00001C, "Member 'VCharacterStatePairingComponent_UpdateInternalStateMachine::NewState' has a wrong offset!");

// Function Altar.VCharacterStatePairingComponent.IsGhost
// 0x0001 (0x0001 - 0x0000)
struct VCharacterStatePairingComponent_IsGhost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VCharacterStatePairingComponent_IsGhost) == 0x000001, "Wrong alignment on VCharacterStatePairingComponent_IsGhost");
static_assert(sizeof(VCharacterStatePairingComponent_IsGhost) == 0x000001, "Wrong size on VCharacterStatePairingComponent_IsGhost");
static_assert(offsetof(VCharacterStatePairingComponent_IsGhost, ReturnValue) == 0x000000, "Member 'VCharacterStatePairingComponent_IsGhost::ReturnValue' has a wrong offset!");

// Function Altar.VSkillInfoObject.SetProperties
// 0x0020 (0x0020 - 0x0000)
struct VSkillInfoObject_SetProperties final
{
public:
	struct FSkillInformation                      NewProperties;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillInfoObject_SetProperties) == 0x000008, "Wrong alignment on VSkillInfoObject_SetProperties");
static_assert(sizeof(VSkillInfoObject_SetProperties) == 0x000020, "Wrong size on VSkillInfoObject_SetProperties");
static_assert(offsetof(VSkillInfoObject_SetProperties, NewProperties) == 0x000000, "Member 'VSkillInfoObject_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VSkillInfoObject.GetProperties
// 0x0020 (0x0020 - 0x0000)
struct VSkillInfoObject_GetProperties final
{
public:
	struct FSkillInformation                      ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSkillInfoObject_GetProperties) == 0x000008, "Wrong alignment on VSkillInfoObject_GetProperties");
static_assert(sizeof(VSkillInfoObject_GetProperties) == 0x000020, "Wrong size on VSkillInfoObject_GetProperties");
static_assert(offsetof(VSkillInfoObject_GetProperties, ReturnValue) == 0x000000, "Member 'VSkillInfoObject_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VClassMenuViewModel.RegisterSendClickedItemHandler
// 0x0004 (0x0004 - 0x0000)
struct VClassMenuViewModel_RegisterSendClickedItemHandler final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassMenuViewModel_RegisterSendClickedItemHandler) == 0x000004, "Wrong alignment on VClassMenuViewModel_RegisterSendClickedItemHandler");
static_assert(sizeof(VClassMenuViewModel_RegisterSendClickedItemHandler) == 0x000004, "Wrong size on VClassMenuViewModel_RegisterSendClickedItemHandler");
static_assert(offsetof(VClassMenuViewModel_RegisterSendClickedItemHandler, InButtonIndex) == 0x000000, "Member 'VClassMenuViewModel_RegisterSendClickedItemHandler::InButtonIndex' has a wrong offset!");

// Function Altar.VClassMenuViewModel.RegisterSendOnHoveredItemHandler
// 0x0004 (0x0004 - 0x0000)
struct VClassMenuViewModel_RegisterSendOnHoveredItemHandler final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassMenuViewModel_RegisterSendOnHoveredItemHandler) == 0x000004, "Wrong alignment on VClassMenuViewModel_RegisterSendOnHoveredItemHandler");
static_assert(sizeof(VClassMenuViewModel_RegisterSendOnHoveredItemHandler) == 0x000004, "Wrong size on VClassMenuViewModel_RegisterSendOnHoveredItemHandler");
static_assert(offsetof(VClassMenuViewModel_RegisterSendOnHoveredItemHandler, InButtonIndex) == 0x000000, "Member 'VClassMenuViewModel_RegisterSendOnHoveredItemHandler::InButtonIndex' has a wrong offset!");

// Function Altar.VClassMenuViewModel.SetFirstSelectedClassIndex
// 0x0004 (0x0004 - 0x0000)
struct VClassMenuViewModel_SetFirstSelectedClassIndex final
{
public:
	int32                                         NewFirstSelectedClassIndex;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassMenuViewModel_SetFirstSelectedClassIndex) == 0x000004, "Wrong alignment on VClassMenuViewModel_SetFirstSelectedClassIndex");
static_assert(sizeof(VClassMenuViewModel_SetFirstSelectedClassIndex) == 0x000004, "Wrong size on VClassMenuViewModel_SetFirstSelectedClassIndex");
static_assert(offsetof(VClassMenuViewModel_SetFirstSelectedClassIndex, NewFirstSelectedClassIndex) == 0x000000, "Member 'VClassMenuViewModel_SetFirstSelectedClassIndex::NewFirstSelectedClassIndex' has a wrong offset!");

// Function Altar.VClassMenuViewModel.GetClassList
// 0x0010 (0x0010 - 0x0000)
struct VClassMenuViewModel_GetClassList final
{
public:
	TArray<struct FPlayerClassItemProperties>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassMenuViewModel_GetClassList) == 0x000008, "Wrong alignment on VClassMenuViewModel_GetClassList");
static_assert(sizeof(VClassMenuViewModel_GetClassList) == 0x000010, "Wrong size on VClassMenuViewModel_GetClassList");
static_assert(offsetof(VClassMenuViewModel_GetClassList, ReturnValue) == 0x000000, "Member 'VClassMenuViewModel_GetClassList::ReturnValue' has a wrong offset!");

// Function Altar.VClassMenuViewModel.GetFirstSelectedClassIndex
// 0x0004 (0x0004 - 0x0000)
struct VClassMenuViewModel_GetFirstSelectedClassIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VClassMenuViewModel_GetFirstSelectedClassIndex) == 0x000004, "Wrong alignment on VClassMenuViewModel_GetFirstSelectedClassIndex");
static_assert(sizeof(VClassMenuViewModel_GetFirstSelectedClassIndex) == 0x000004, "Wrong size on VClassMenuViewModel_GetFirstSelectedClassIndex");
static_assert(offsetof(VClassMenuViewModel_GetFirstSelectedClassIndex, ReturnValue) == 0x000000, "Member 'VClassMenuViewModel_GetFirstSelectedClassIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetIsAchievementDisabled
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_SetIsAchievementDisabled final
{
public:
	bool                                          InNewBool;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetIsAchievementDisabled) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_SetIsAchievementDisabled");
static_assert(sizeof(VModernSaveLoadMenuItem_SetIsAchievementDisabled) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_SetIsAchievementDisabled");
static_assert(offsetof(VModernSaveLoadMenuItem_SetIsAchievementDisabled, InNewBool) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetIsAchievementDisabled::InNewBool' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_SetIsExpanded final
{
public:
	bool                                          InNewBool;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetIsExpanded) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_SetIsExpanded");
static_assert(sizeof(VModernSaveLoadMenuItem_SetIsExpanded) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_SetIsExpanded");
static_assert(offsetof(VModernSaveLoadMenuItem_SetIsExpanded, InNewBool) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetIsExpanded::InNewBool' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetIsInSaveMenu
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_SetIsInSaveMenu final
{
public:
	bool                                          InNewBool;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetIsInSaveMenu) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_SetIsInSaveMenu");
static_assert(sizeof(VModernSaveLoadMenuItem_SetIsInSaveMenu) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_SetIsInSaveMenu");
static_assert(offsetof(VModernSaveLoadMenuItem_SetIsInSaveMenu, InNewBool) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetIsInSaveMenu::InNewBool' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetIsSectionHeader
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_SetIsSectionHeader final
{
public:
	bool                                          InNewBool;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetIsSectionHeader) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_SetIsSectionHeader");
static_assert(sizeof(VModernSaveLoadMenuItem_SetIsSectionHeader) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_SetIsSectionHeader");
static_assert(offsetof(VModernSaveLoadMenuItem_SetIsSectionHeader, InNewBool) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetIsSectionHeader::InNewBool' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct VModernSaveLoadMenuItem_SetPlayerName final
{
public:
	class FString                                 NewPlayerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetPlayerName) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_SetPlayerName");
static_assert(sizeof(VModernSaveLoadMenuItem_SetPlayerName) == 0x000010, "Wrong size on VModernSaveLoadMenuItem_SetPlayerName");
static_assert(offsetof(VModernSaveLoadMenuItem_SetPlayerName, NewPlayerName) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetPlayerName::NewPlayerName' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetSlotName
// 0x0010 (0x0010 - 0x0000)
struct VModernSaveLoadMenuItem_SetSlotName final
{
public:
	class FString                                 NewSlotName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetSlotName) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_SetSlotName");
static_assert(sizeof(VModernSaveLoadMenuItem_SetSlotName) == 0x000010, "Wrong size on VModernSaveLoadMenuItem_SetSlotName");
static_assert(offsetof(VModernSaveLoadMenuItem_SetSlotName, NewSlotName) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetSlotName::NewSlotName' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetText
// 0x0018 (0x0018 - 0x0000)
struct VModernSaveLoadMenuItem_SetText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetText) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_SetText");
static_assert(sizeof(VModernSaveLoadMenuItem_SetText) == 0x000018, "Wrong size on VModernSaveLoadMenuItem_SetText");
static_assert(offsetof(VModernSaveLoadMenuItem_SetText, Value) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetText::Value' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.SetTimeText
// 0x0018 (0x0018 - 0x0000)
struct VModernSaveLoadMenuItem_SetTimeText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_SetTimeText) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_SetTimeText");
static_assert(sizeof(VModernSaveLoadMenuItem_SetTimeText) == 0x000018, "Wrong size on VModernSaveLoadMenuItem_SetTimeText");
static_assert(offsetof(VModernSaveLoadMenuItem_SetTimeText, Value) == 0x000000, "Member 'VModernSaveLoadMenuItem_SetTimeText::Value' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetIsAchievementDisabled
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_GetIsAchievementDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetIsAchievementDisabled) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_GetIsAchievementDisabled");
static_assert(sizeof(VModernSaveLoadMenuItem_GetIsAchievementDisabled) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_GetIsAchievementDisabled");
static_assert(offsetof(VModernSaveLoadMenuItem_GetIsAchievementDisabled, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetIsAchievementDisabled::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetIsExpanded
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_GetIsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetIsExpanded) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_GetIsExpanded");
static_assert(sizeof(VModernSaveLoadMenuItem_GetIsExpanded) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_GetIsExpanded");
static_assert(offsetof(VModernSaveLoadMenuItem_GetIsExpanded, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetIsExpanded::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetIsInSaveMenu
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_GetIsInSaveMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetIsInSaveMenu) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_GetIsInSaveMenu");
static_assert(sizeof(VModernSaveLoadMenuItem_GetIsInSaveMenu) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_GetIsInSaveMenu");
static_assert(offsetof(VModernSaveLoadMenuItem_GetIsInSaveMenu, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetIsInSaveMenu::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetIsOnExpandedBound
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_GetIsOnExpandedBound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetIsOnExpandedBound) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_GetIsOnExpandedBound");
static_assert(sizeof(VModernSaveLoadMenuItem_GetIsOnExpandedBound) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_GetIsOnExpandedBound");
static_assert(offsetof(VModernSaveLoadMenuItem_GetIsOnExpandedBound, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetIsOnExpandedBound::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetIsSectionHeader
// 0x0001 (0x0001 - 0x0000)
struct VModernSaveLoadMenuItem_GetIsSectionHeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetIsSectionHeader) == 0x000001, "Wrong alignment on VModernSaveLoadMenuItem_GetIsSectionHeader");
static_assert(sizeof(VModernSaveLoadMenuItem_GetIsSectionHeader) == 0x000001, "Wrong size on VModernSaveLoadMenuItem_GetIsSectionHeader");
static_assert(offsetof(VModernSaveLoadMenuItem_GetIsSectionHeader, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetIsSectionHeader::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct VModernSaveLoadMenuItem_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetPlayerName) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_GetPlayerName");
static_assert(sizeof(VModernSaveLoadMenuItem_GetPlayerName) == 0x000010, "Wrong size on VModernSaveLoadMenuItem_GetPlayerName");
static_assert(offsetof(VModernSaveLoadMenuItem_GetPlayerName, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetPlayerName::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetSlotName
// 0x0010 (0x0010 - 0x0000)
struct VModernSaveLoadMenuItem_GetSlotName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetSlotName) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_GetSlotName");
static_assert(sizeof(VModernSaveLoadMenuItem_GetSlotName) == 0x000010, "Wrong size on VModernSaveLoadMenuItem_GetSlotName");
static_assert(offsetof(VModernSaveLoadMenuItem_GetSlotName, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetSlotName::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetText
// 0x0018 (0x0018 - 0x0000)
struct VModernSaveLoadMenuItem_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetText) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_GetText");
static_assert(sizeof(VModernSaveLoadMenuItem_GetText) == 0x000018, "Wrong size on VModernSaveLoadMenuItem_GetText");
static_assert(offsetof(VModernSaveLoadMenuItem_GetText, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetText::ReturnValue' has a wrong offset!");

// Function Altar.VModernSaveLoadMenuItem.GetTimeText
// 0x0018 (0x0018 - 0x0000)
struct VModernSaveLoadMenuItem_GetTimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSaveLoadMenuItem_GetTimeText) == 0x000008, "Wrong alignment on VModernSaveLoadMenuItem_GetTimeText");
static_assert(sizeof(VModernSaveLoadMenuItem_GetTimeText) == 0x000018, "Wrong size on VModernSaveLoadMenuItem_GetTimeText");
static_assert(offsetof(VModernSaveLoadMenuItem_GetTimeText, ReturnValue) == 0x000000, "Member 'VModernSaveLoadMenuItem_GetTimeText::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.RegisterSendButtonSwitchToContainerHandler
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler final
{
public:
	bool                                          ForceSwitch;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler) == 0x000001, "Wrong alignment on VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler");
static_assert(sizeof(VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler) == 0x000001, "Wrong size on VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler");
static_assert(offsetof(VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler, ForceSwitch) == 0x000000, "Member 'VContainerMenuViewModel_RegisterSendButtonSwitchToContainerHandler::ForceSwitch' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.RegisterSendButtonSwitchToInventoryHandler
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler final
{
public:
	bool                                          ForceSwitch;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler) == 0x000001, "Wrong alignment on VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler");
static_assert(sizeof(VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler) == 0x000001, "Wrong size on VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler");
static_assert(offsetof(VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler, ForceSwitch) == 0x000000, "Member 'VContainerMenuViewModel_RegisterSendButtonSwitchToInventoryHandler::ForceSwitch' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.ReplaceCurrentPageItemsContainer
// 0x0010 (0x0010 - 0x0000)
struct VContainerMenuViewModel_ReplaceCurrentPageItemsContainer final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> NewPageContainer;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_ReplaceCurrentPageItemsContainer) == 0x000008, "Wrong alignment on VContainerMenuViewModel_ReplaceCurrentPageItemsContainer");
static_assert(sizeof(VContainerMenuViewModel_ReplaceCurrentPageItemsContainer) == 0x000010, "Wrong size on VContainerMenuViewModel_ReplaceCurrentPageItemsContainer");
static_assert(offsetof(VContainerMenuViewModel_ReplaceCurrentPageItemsContainer, NewPageContainer) == 0x000000, "Member 'VContainerMenuViewModel_ReplaceCurrentPageItemsContainer::NewPageContainer' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetButtonData
// 0x0002 (0x0002 - 0x0000)
struct VContainerMenuViewModel_SetButtonData final
{
public:
	struct FLegacyContainerMenuButtonData         NewButtonData;                                     // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetButtonData) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetButtonData");
static_assert(sizeof(VContainerMenuViewModel_SetButtonData) == 0x000002, "Wrong size on VContainerMenuViewModel_SetButtonData");
static_assert(offsetof(VContainerMenuViewModel_SetButtonData, NewButtonData) == 0x000000, "Member 'VContainerMenuViewModel_SetButtonData::NewButtonData' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetContainerItems
// 0x0010 (0x0010 - 0x0000)
struct VContainerMenuViewModel_SetContainerItems final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> NewContainerItems;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetContainerItems) == 0x000008, "Wrong alignment on VContainerMenuViewModel_SetContainerItems");
static_assert(sizeof(VContainerMenuViewModel_SetContainerItems) == 0x000010, "Wrong size on VContainerMenuViewModel_SetContainerItems");
static_assert(offsetof(VContainerMenuViewModel_SetContainerItems, NewContainerItems) == 0x000000, "Member 'VContainerMenuViewModel_SetContainerItems::NewContainerItems' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetCurrentPageContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_SetCurrentPageContainer final
{
public:
	ELegacyInventoryMenuPage                      NewPage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetCurrentPageContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetCurrentPageContainer");
static_assert(sizeof(VContainerMenuViewModel_SetCurrentPageContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_SetCurrentPageContainer");
static_assert(offsetof(VContainerMenuViewModel_SetCurrentPageContainer, NewPage) == 0x000000, "Member 'VContainerMenuViewModel_SetCurrentPageContainer::NewPage' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetCurrentTab
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_SetCurrentTab final
{
public:
	ELegacyContainerMenuTab                       NewMenuTab;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetCurrentTab) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetCurrentTab");
static_assert(sizeof(VContainerMenuViewModel_SetCurrentTab) == 0x000001, "Wrong size on VContainerMenuViewModel_SetCurrentTab");
static_assert(offsetof(VContainerMenuViewModel_SetCurrentTab, NewMenuTab) == 0x000000, "Member 'VContainerMenuViewModel_SetCurrentTab::NewMenuTab' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetIsSimpleContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_SetIsSimpleContainer final
{
public:
	bool                                          bNewIsSimpleContainer;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetIsSimpleContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetIsSimpleContainer");
static_assert(sizeof(VContainerMenuViewModel_SetIsSimpleContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_SetIsSimpleContainer");
static_assert(offsetof(VContainerMenuViewModel_SetIsSimpleContainer, bNewIsSimpleContainer) == 0x000000, "Member 'VContainerMenuViewModel_SetIsSimpleContainer::bNewIsSimpleContainer' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetIsSortReversedContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_SetIsSortReversedContainer final
{
public:
	bool                                          bNewIsSortReversedContainer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetIsSortReversedContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetIsSortReversedContainer");
static_assert(sizeof(VContainerMenuViewModel_SetIsSortReversedContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_SetIsSortReversedContainer");
static_assert(offsetof(VContainerMenuViewModel_SetIsSortReversedContainer, bNewIsSortReversedContainer) == 0x000000, "Member 'VContainerMenuViewModel_SetIsSortReversedContainer::bNewIsSortReversedContainer' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetMenuType
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_SetMenuType final
{
public:
	ELegacyContainerMenuType                      NewMenuType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetMenuType) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetMenuType");
static_assert(sizeof(VContainerMenuViewModel_SetMenuType) == 0x000001, "Wrong size on VContainerMenuViewModel_SetMenuType");
static_assert(offsetof(VContainerMenuViewModel_SetMenuType, NewMenuType) == 0x000000, "Member 'VContainerMenuViewModel_SetMenuType::NewMenuType' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetNpcData
// 0x0020 (0x0020 - 0x0000)
struct VContainerMenuViewModel_SetNpcData final
{
public:
	struct FLegacyContainerMenuNpcData            NewNPCData;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetNpcData) == 0x000008, "Wrong alignment on VContainerMenuViewModel_SetNpcData");
static_assert(sizeof(VContainerMenuViewModel_SetNpcData) == 0x000020, "Wrong size on VContainerMenuViewModel_SetNpcData");
static_assert(offsetof(VContainerMenuViewModel_SetNpcData, NewNPCData) == 0x000000, "Member 'VContainerMenuViewModel_SetNpcData::NewNPCData' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.SetSortTypeContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_SetSortTypeContainer final
{
public:
	EOriginalInventoryMenuSortType                NewSortTypeContainer;                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_SetSortTypeContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_SetSortTypeContainer");
static_assert(sizeof(VContainerMenuViewModel_SetSortTypeContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_SetSortTypeContainer");
static_assert(offsetof(VContainerMenuViewModel_SetSortTypeContainer, NewSortTypeContainer) == 0x000000, "Member 'VContainerMenuViewModel_SetSortTypeContainer::NewSortTypeContainer' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetButtonData
// 0x0002 (0x0002 - 0x0000)
struct VContainerMenuViewModel_GetButtonData final
{
public:
	struct FLegacyContainerMenuButtonData         ReturnValue;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetButtonData) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetButtonData");
static_assert(sizeof(VContainerMenuViewModel_GetButtonData) == 0x000002, "Wrong size on VContainerMenuViewModel_GetButtonData");
static_assert(offsetof(VContainerMenuViewModel_GetButtonData, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetButtonData::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetContainerItems
// 0x0010 (0x0010 - 0x0000)
struct VContainerMenuViewModel_GetContainerItems final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> ReturnValue;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetContainerItems) == 0x000008, "Wrong alignment on VContainerMenuViewModel_GetContainerItems");
static_assert(sizeof(VContainerMenuViewModel_GetContainerItems) == 0x000010, "Wrong size on VContainerMenuViewModel_GetContainerItems");
static_assert(offsetof(VContainerMenuViewModel_GetContainerItems, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetContainerItems::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetCurrentPageContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_GetCurrentPageContainer final
{
public:
	ELegacyInventoryMenuPage                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetCurrentPageContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetCurrentPageContainer");
static_assert(sizeof(VContainerMenuViewModel_GetCurrentPageContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_GetCurrentPageContainer");
static_assert(offsetof(VContainerMenuViewModel_GetCurrentPageContainer, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetCurrentPageContainer::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetCurrentPageItemsContainer
// 0x0010 (0x0010 - 0x0000)
struct VContainerMenuViewModel_GetCurrentPageItemsContainer final
{
public:
	TArray<struct FOriginalInventoryMenuItemProperties> ReturnValue;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetCurrentPageItemsContainer) == 0x000008, "Wrong alignment on VContainerMenuViewModel_GetCurrentPageItemsContainer");
static_assert(sizeof(VContainerMenuViewModel_GetCurrentPageItemsContainer) == 0x000010, "Wrong size on VContainerMenuViewModel_GetCurrentPageItemsContainer");
static_assert(offsetof(VContainerMenuViewModel_GetCurrentPageItemsContainer, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetCurrentPageItemsContainer::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetCurrentTab
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_GetCurrentTab final
{
public:
	ELegacyContainerMenuTab                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetCurrentTab) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetCurrentTab");
static_assert(sizeof(VContainerMenuViewModel_GetCurrentTab) == 0x000001, "Wrong size on VContainerMenuViewModel_GetCurrentTab");
static_assert(offsetof(VContainerMenuViewModel_GetCurrentTab, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetCurrentTab::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetIsSimpleContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_GetIsSimpleContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetIsSimpleContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetIsSimpleContainer");
static_assert(sizeof(VContainerMenuViewModel_GetIsSimpleContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_GetIsSimpleContainer");
static_assert(offsetof(VContainerMenuViewModel_GetIsSimpleContainer, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetIsSimpleContainer::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetIsSortReversedContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_GetIsSortReversedContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetIsSortReversedContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetIsSortReversedContainer");
static_assert(sizeof(VContainerMenuViewModel_GetIsSortReversedContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_GetIsSortReversedContainer");
static_assert(offsetof(VContainerMenuViewModel_GetIsSortReversedContainer, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetIsSortReversedContainer::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetMenuType
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_GetMenuType final
{
public:
	ELegacyContainerMenuType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetMenuType) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetMenuType");
static_assert(sizeof(VContainerMenuViewModel_GetMenuType) == 0x000001, "Wrong size on VContainerMenuViewModel_GetMenuType");
static_assert(offsetof(VContainerMenuViewModel_GetMenuType, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetMenuType::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetNpcData
// 0x0020 (0x0020 - 0x0000)
struct VContainerMenuViewModel_GetNpcData final
{
public:
	struct FLegacyContainerMenuNpcData            ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetNpcData) == 0x000008, "Wrong alignment on VContainerMenuViewModel_GetNpcData");
static_assert(sizeof(VContainerMenuViewModel_GetNpcData) == 0x000020, "Wrong size on VContainerMenuViewModel_GetNpcData");
static_assert(offsetof(VContainerMenuViewModel_GetNpcData, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetNpcData::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.GetSortTypeContainer
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_GetSortTypeContainer final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_GetSortTypeContainer) == 0x000001, "Wrong alignment on VContainerMenuViewModel_GetSortTypeContainer");
static_assert(sizeof(VContainerMenuViewModel_GetSortTypeContainer) == 0x000001, "Wrong size on VContainerMenuViewModel_GetSortTypeContainer");
static_assert(offsetof(VContainerMenuViewModel_GetSortTypeContainer, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_GetSortTypeContainer::ReturnValue' has a wrong offset!");

// Function Altar.VContainerMenuViewModel.IsContainerTab
// 0x0001 (0x0001 - 0x0000)
struct VContainerMenuViewModel_IsContainerTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VContainerMenuViewModel_IsContainerTab) == 0x000001, "Wrong alignment on VContainerMenuViewModel_IsContainerTab");
static_assert(sizeof(VContainerMenuViewModel_IsContainerTab) == 0x000001, "Wrong size on VContainerMenuViewModel_IsContainerTab");
static_assert(offsetof(VContainerMenuViewModel_IsContainerTab, ReturnValue) == 0x000000, "Member 'VContainerMenuViewModel_IsContainerTab::ReturnValue' has a wrong offset!");

// Function Altar.VConversationIdleAnimInstance.IsInDialogue
// 0x0001 (0x0001 - 0x0000)
struct VConversationIdleAnimInstance_IsInDialogue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VConversationIdleAnimInstance_IsInDialogue) == 0x000001, "Wrong alignment on VConversationIdleAnimInstance_IsInDialogue");
static_assert(sizeof(VConversationIdleAnimInstance_IsInDialogue) == 0x000001, "Wrong size on VConversationIdleAnimInstance_IsInDialogue");
static_assert(offsetof(VConversationIdleAnimInstance_IsInDialogue, ReturnValue) == 0x000000, "Member 'VConversationIdleAnimInstance_IsInDialogue::ReturnValue' has a wrong offset!");

// Function Altar.VDeathVFXBlueprint.OnStartPlay
// 0x0008 (0x0008 - 0x0000)
struct VDeathVFXBlueprint_OnStartPlay final
{
public:
	class AVPairedPawn*                           Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDeathVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VDeathVFXBlueprint_OnStartPlay");
static_assert(sizeof(VDeathVFXBlueprint_OnStartPlay) == 0x000008, "Wrong size on VDeathVFXBlueprint_OnStartPlay");
static_assert(offsetof(VDeathVFXBlueprint_OnStartPlay, Pawn) == 0x000000, "Member 'VDeathVFXBlueprint_OnStartPlay::Pawn' has a wrong offset!");

// Function Altar.VOriginalVideoSettingWidget.SetExtremalValue
// 0x0008 (0x0008 - 0x0000)
struct VOriginalVideoSettingWidget_SetExtremalValue final
{
public:
	struct FFloatInterval                         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalVideoSettingWidget_SetExtremalValue) == 0x000004, "Wrong alignment on VOriginalVideoSettingWidget_SetExtremalValue");
static_assert(sizeof(VOriginalVideoSettingWidget_SetExtremalValue) == 0x000008, "Wrong size on VOriginalVideoSettingWidget_SetExtremalValue");
static_assert(offsetof(VOriginalVideoSettingWidget_SetExtremalValue, Value) == 0x000000, "Member 'VOriginalVideoSettingWidget_SetExtremalValue::Value' has a wrong offset!");

// Function Altar.VOriginalVideoSettingWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct VOriginalVideoSettingWidget_SetLabel final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalVideoSettingWidget_SetLabel) == 0x000008, "Wrong alignment on VOriginalVideoSettingWidget_SetLabel");
static_assert(sizeof(VOriginalVideoSettingWidget_SetLabel) == 0x000018, "Wrong size on VOriginalVideoSettingWidget_SetLabel");
static_assert(offsetof(VOriginalVideoSettingWidget_SetLabel, Value) == 0x000000, "Member 'VOriginalVideoSettingWidget_SetLabel::Value' has a wrong offset!");

// Function Altar.VOriginalVideoSettingWidget.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct VOriginalVideoSettingWidget_SetOptions final
{
public:
	TArray<struct FOriginalVideoOption>           Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalVideoSettingWidget_SetOptions) == 0x000008, "Wrong alignment on VOriginalVideoSettingWidget_SetOptions");
static_assert(sizeof(VOriginalVideoSettingWidget_SetOptions) == 0x000010, "Wrong size on VOriginalVideoSettingWidget_SetOptions");
static_assert(offsetof(VOriginalVideoSettingWidget_SetOptions, Value) == 0x000000, "Member 'VOriginalVideoSettingWidget_SetOptions::Value' has a wrong offset!");

// Function Altar.VOriginalVideoSettingWidget.GetExtremalValue
// 0x0008 (0x0008 - 0x0000)
struct VOriginalVideoSettingWidget_GetExtremalValue final
{
public:
	struct FFloatInterval                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalVideoSettingWidget_GetExtremalValue) == 0x000004, "Wrong alignment on VOriginalVideoSettingWidget_GetExtremalValue");
static_assert(sizeof(VOriginalVideoSettingWidget_GetExtremalValue) == 0x000008, "Wrong size on VOriginalVideoSettingWidget_GetExtremalValue");
static_assert(offsetof(VOriginalVideoSettingWidget_GetExtremalValue, ReturnValue) == 0x000000, "Member 'VOriginalVideoSettingWidget_GetExtremalValue::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalVideoSettingWidget.GetLabel
// 0x0018 (0x0018 - 0x0000)
struct VOriginalVideoSettingWidget_GetLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalVideoSettingWidget_GetLabel) == 0x000008, "Wrong alignment on VOriginalVideoSettingWidget_GetLabel");
static_assert(sizeof(VOriginalVideoSettingWidget_GetLabel) == 0x000018, "Wrong size on VOriginalVideoSettingWidget_GetLabel");
static_assert(offsetof(VOriginalVideoSettingWidget_GetLabel, ReturnValue) == 0x000000, "Member 'VOriginalVideoSettingWidget_GetLabel::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalVideoSettingWidget.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct VOriginalVideoSettingWidget_GetOptions final
{
public:
	TArray<struct FOriginalVideoOption>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalVideoSettingWidget_GetOptions) == 0x000008, "Wrong alignment on VOriginalVideoSettingWidget_GetOptions");
static_assert(sizeof(VOriginalVideoSettingWidget_GetOptions) == 0x000010, "Wrong size on VOriginalVideoSettingWidget_GetOptions");
static_assert(offsetof(VOriginalVideoSettingWidget_GetOptions, ReturnValue) == 0x000000, "Member 'VOriginalVideoSettingWidget_GetOptions::ReturnValue' has a wrong offset!");

// Function Altar.VDebugGraphicsSettingWidget.AddConsoleCommandToSave
// 0x0010 (0x0010 - 0x0000)
struct VDebugGraphicsSettingWidget_AddConsoleCommandToSave final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDebugGraphicsSettingWidget_AddConsoleCommandToSave) == 0x000008, "Wrong alignment on VDebugGraphicsSettingWidget_AddConsoleCommandToSave");
static_assert(sizeof(VDebugGraphicsSettingWidget_AddConsoleCommandToSave) == 0x000010, "Wrong size on VDebugGraphicsSettingWidget_AddConsoleCommandToSave");
static_assert(offsetof(VDebugGraphicsSettingWidget_AddConsoleCommandToSave, Command) == 0x000000, "Member 'VDebugGraphicsSettingWidget_AddConsoleCommandToSave::Command' has a wrong offset!");

// Function Altar.VDebugGraphicsSettingWidget.HardwareRayTracingLightingMode
// 0x0004 (0x0004 - 0x0000)
struct VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode) == 0x000004, "Wrong alignment on VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode");
static_assert(sizeof(VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode) == 0x000004, "Wrong size on VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode");
static_assert(offsetof(VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode, ReturnValue) == 0x000000, "Member 'VDebugGraphicsSettingWidget_HardwareRayTracingLightingMode::ReturnValue' has a wrong offset!");

// Function Altar.VDebugGraphicsSettingWidget.IsHardrwareRayTracingOn
// 0x0001 (0x0001 - 0x0000)
struct VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn) == 0x000001, "Wrong alignment on VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn");
static_assert(sizeof(VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn) == 0x000001, "Wrong size on VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn");
static_assert(offsetof(VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn, ReturnValue) == 0x000000, "Member 'VDebugGraphicsSettingWidget_IsHardrwareRayTracingOn::ReturnValue' has a wrong offset!");

// Function Altar.VDebugGraphicsSettingWidget.IsHardwareRayTracingSupportedByBuild
// 0x0001 (0x0001 - 0x0000)
struct VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild) == 0x000001, "Wrong alignment on VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild");
static_assert(sizeof(VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild) == 0x000001, "Wrong size on VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild");
static_assert(offsetof(VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild, ReturnValue) == 0x000000, "Member 'VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByBuild::ReturnValue' has a wrong offset!");

// Function Altar.VDebugGraphicsSettingWidget.IsHardwareRayTracingSupportedByHardware
// 0x0001 (0x0001 - 0x0000)
struct VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware) == 0x000001, "Wrong alignment on VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware");
static_assert(sizeof(VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware) == 0x000001, "Wrong size on VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware");
static_assert(offsetof(VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware, ReturnValue) == 0x000000, "Member 'VDebugGraphicsSettingWidget_IsHardwareRayTracingSupportedByHardware::ReturnValue' has a wrong offset!");

// Function Altar.VDebugGraphicsSettingWidget.SoftwareRaytracingQuality
// 0x0004 (0x0004 - 0x0000)
struct VDebugGraphicsSettingWidget_SoftwareRaytracingQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDebugGraphicsSettingWidget_SoftwareRaytracingQuality) == 0x000004, "Wrong alignment on VDebugGraphicsSettingWidget_SoftwareRaytracingQuality");
static_assert(sizeof(VDebugGraphicsSettingWidget_SoftwareRaytracingQuality) == 0x000004, "Wrong size on VDebugGraphicsSettingWidget_SoftwareRaytracingQuality");
static_assert(offsetof(VDebugGraphicsSettingWidget_SoftwareRaytracingQuality, ReturnValue) == 0x000000, "Member 'VDebugGraphicsSettingWidget_SoftwareRaytracingQuality::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenuFaction.SetFaction
// 0x0058 (0x0058 - 0x0000)
struct VLegacyStatsMenuFaction_SetFaction final
{
public:
	struct FLegacyStatsMenuFactionProperties      Value;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuFaction_SetFaction) == 0x000008, "Wrong alignment on VLegacyStatsMenuFaction_SetFaction");
static_assert(sizeof(VLegacyStatsMenuFaction_SetFaction) == 0x000058, "Wrong size on VLegacyStatsMenuFaction_SetFaction");
static_assert(offsetof(VLegacyStatsMenuFaction_SetFaction, Value) == 0x000000, "Member 'VLegacyStatsMenuFaction_SetFaction::Value' has a wrong offset!");

// Function Altar.VLegacyStatsMenuFaction.GetFaction
// 0x0058 (0x0058 - 0x0000)
struct VLegacyStatsMenuFaction_GetFaction final
{
public:
	struct FLegacyStatsMenuFactionProperties      ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuFaction_GetFaction) == 0x000008, "Wrong alignment on VLegacyStatsMenuFaction_GetFaction");
static_assert(sizeof(VLegacyStatsMenuFaction_GetFaction) == 0x000058, "Wrong size on VLegacyStatsMenuFaction_GetFaction");
static_assert(offsetof(VLegacyStatsMenuFaction_GetFaction, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenuFaction_GetFaction::ReturnValue' has a wrong offset!");

// Function Altar.VDetectionLightingSubsystem.GetDetectionLightTag
// 0x0010 (0x0010 - 0x0000)
struct VDetectionLightingSubsystem_GetDetectionLightTag final
{
public:
	const class AActor*                           LightActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVDetectionLightTag                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VDetectionLightingSubsystem_GetDetectionLightTag) == 0x000008, "Wrong alignment on VDetectionLightingSubsystem_GetDetectionLightTag");
static_assert(sizeof(VDetectionLightingSubsystem_GetDetectionLightTag) == 0x000010, "Wrong size on VDetectionLightingSubsystem_GetDetectionLightTag");
static_assert(offsetof(VDetectionLightingSubsystem_GetDetectionLightTag, LightActor) == 0x000000, "Member 'VDetectionLightingSubsystem_GetDetectionLightTag::LightActor' has a wrong offset!");
static_assert(offsetof(VDetectionLightingSubsystem_GetDetectionLightTag, ReturnValue) == 0x000008, "Member 'VDetectionLightingSubsystem_GetDetectionLightTag::ReturnValue' has a wrong offset!");

// Function Altar.VDetectionLightingSubsystem.GetTagName
// 0x000C (0x000C - 0x0000)
struct VDetectionLightingSubsystem_GetTagName final
{
public:
	EVDetectionLightTag                           LightTag;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDetectionLightingSubsystem_GetTagName) == 0x000004, "Wrong alignment on VDetectionLightingSubsystem_GetTagName");
static_assert(sizeof(VDetectionLightingSubsystem_GetTagName) == 0x00000C, "Wrong size on VDetectionLightingSubsystem_GetTagName");
static_assert(offsetof(VDetectionLightingSubsystem_GetTagName, LightTag) == 0x000000, "Member 'VDetectionLightingSubsystem_GetTagName::LightTag' has a wrong offset!");
static_assert(offsetof(VDetectionLightingSubsystem_GetTagName, ReturnValue) == 0x000004, "Member 'VDetectionLightingSubsystem_GetTagName::ReturnValue' has a wrong offset!");

// Function Altar.VDetectionLightingSubsystem.OnLightComponentBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct VDetectionLightingSubsystem_OnLightComponentBeginPlay final
{
public:
	const class ULightComponentBase*              LightComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDetectionLightingSubsystem_OnLightComponentBeginPlay) == 0x000008, "Wrong alignment on VDetectionLightingSubsystem_OnLightComponentBeginPlay");
static_assert(sizeof(VDetectionLightingSubsystem_OnLightComponentBeginPlay) == 0x000008, "Wrong size on VDetectionLightingSubsystem_OnLightComponentBeginPlay");
static_assert(offsetof(VDetectionLightingSubsystem_OnLightComponentBeginPlay, LightComponent) == 0x000000, "Member 'VDetectionLightingSubsystem_OnLightComponentBeginPlay::LightComponent' has a wrong offset!");

// Function Altar.VDetectionLightingSubsystem.OnPostWorldCreation
// 0x0008 (0x0008 - 0x0000)
struct VDetectionLightingSubsystem_OnPostWorldCreation final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDetectionLightingSubsystem_OnPostWorldCreation) == 0x000008, "Wrong alignment on VDetectionLightingSubsystem_OnPostWorldCreation");
static_assert(sizeof(VDetectionLightingSubsystem_OnPostWorldCreation) == 0x000008, "Wrong size on VDetectionLightingSubsystem_OnPostWorldCreation");
static_assert(offsetof(VDetectionLightingSubsystem_OnPostWorldCreation, World) == 0x000000, "Member 'VDetectionLightingSubsystem_OnPostWorldCreation::World' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.GetSubtitleVisibilityCVarSettings
// 0x0001 (0x0001 - 0x0000)
struct VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings) == 0x000001, "Wrong alignment on VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings");
static_assert(sizeof(VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings) == 0x000001, "Wrong size on VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings");
static_assert(offsetof(VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings, ReturnValue) == 0x000000, "Member 'VDialogueMenuViewModel_GetSubtitleVisibilityCVarSettings::ReturnValue' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.RegisterSendClickedResponse
// 0x0004 (0x0004 - 0x0000)
struct VDialogueMenuViewModel_RegisterSendClickedResponse final
{
public:
	int32                                         ResponseIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_RegisterSendClickedResponse) == 0x000004, "Wrong alignment on VDialogueMenuViewModel_RegisterSendClickedResponse");
static_assert(sizeof(VDialogueMenuViewModel_RegisterSendClickedResponse) == 0x000004, "Wrong size on VDialogueMenuViewModel_RegisterSendClickedResponse");
static_assert(offsetof(VDialogueMenuViewModel_RegisterSendClickedResponse, ResponseIndex) == 0x000000, "Member 'VDialogueMenuViewModel_RegisterSendClickedResponse::ResponseIndex' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.GetButtonsVisibility
// 0x0010 (0x0010 - 0x0000)
struct VDialogueMenuViewModel_GetButtonsVisibility final
{
public:
	struct FLegacyDialogMenuButtonVisibility      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_GetButtonsVisibility) == 0x000008, "Wrong alignment on VDialogueMenuViewModel_GetButtonsVisibility");
static_assert(sizeof(VDialogueMenuViewModel_GetButtonsVisibility) == 0x000010, "Wrong size on VDialogueMenuViewModel_GetButtonsVisibility");
static_assert(offsetof(VDialogueMenuViewModel_GetButtonsVisibility, ReturnValue) == 0x000000, "Member 'VDialogueMenuViewModel_GetButtonsVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.GetResponses
// 0x0010 (0x0010 - 0x0000)
struct VDialogueMenuViewModel_GetResponses final
{
public:
	TArray<struct FResponsesData>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_GetResponses) == 0x000008, "Wrong alignment on VDialogueMenuViewModel_GetResponses");
static_assert(sizeof(VDialogueMenuViewModel_GetResponses) == 0x000010, "Wrong size on VDialogueMenuViewModel_GetResponses");
static_assert(offsetof(VDialogueMenuViewModel_GetResponses, ReturnValue) == 0x000000, "Member 'VDialogueMenuViewModel_GetResponses::ReturnValue' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.GetSpeakerName
// 0x0018 (0x0018 - 0x0000)
struct VDialogueMenuViewModel_GetSpeakerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_GetSpeakerName) == 0x000008, "Wrong alignment on VDialogueMenuViewModel_GetSpeakerName");
static_assert(sizeof(VDialogueMenuViewModel_GetSpeakerName) == 0x000018, "Wrong size on VDialogueMenuViewModel_GetSpeakerName");
static_assert(offsetof(VDialogueMenuViewModel_GetSpeakerName, ReturnValue) == 0x000000, "Member 'VDialogueMenuViewModel_GetSpeakerName::ReturnValue' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.GetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct VDialogueMenuViewModel_GetSubtitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_GetSubtitle) == 0x000008, "Wrong alignment on VDialogueMenuViewModel_GetSubtitle");
static_assert(sizeof(VDialogueMenuViewModel_GetSubtitle) == 0x000018, "Wrong size on VDialogueMenuViewModel_GetSubtitle");
static_assert(offsetof(VDialogueMenuViewModel_GetSubtitle, ReturnValue) == 0x000000, "Member 'VDialogueMenuViewModel_GetSubtitle::ReturnValue' has a wrong offset!");

// Function Altar.VDialogueMenuViewModel.IsSubtitleVisible
// 0x0001 (0x0001 - 0x0000)
struct VDialogueMenuViewModel_IsSubtitleVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDialogueMenuViewModel_IsSubtitleVisible) == 0x000001, "Wrong alignment on VDialogueMenuViewModel_IsSubtitleVisible");
static_assert(sizeof(VDialogueMenuViewModel_IsSubtitleVisible) == 0x000001, "Wrong size on VDialogueMenuViewModel_IsSubtitleVisible");
static_assert(offsetof(VDialogueMenuViewModel_IsSubtitleVisible, ReturnValue) == 0x000000, "Member 'VDialogueMenuViewModel_IsSubtitleVisible::ReturnValue' has a wrong offset!");

// Function Altar.VDoorNavLinkProxy.OnSmartNavLinkReached
// 0x0020 (0x0020 - 0x0000)
struct VDoorNavLinkProxy_OnSmartNavLinkReached final
{
public:
	const class AActor*                           MovingActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestinationPoint;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDoorNavLinkProxy_OnSmartNavLinkReached) == 0x000008, "Wrong alignment on VDoorNavLinkProxy_OnSmartNavLinkReached");
static_assert(sizeof(VDoorNavLinkProxy_OnSmartNavLinkReached) == 0x000020, "Wrong size on VDoorNavLinkProxy_OnSmartNavLinkReached");
static_assert(offsetof(VDoorNavLinkProxy_OnSmartNavLinkReached, MovingActor) == 0x000000, "Member 'VDoorNavLinkProxy_OnSmartNavLinkReached::MovingActor' has a wrong offset!");
static_assert(offsetof(VDoorNavLinkProxy_OnSmartNavLinkReached, DestinationPoint) == 0x000008, "Member 'VDoorNavLinkProxy_OnSmartNavLinkReached::DestinationPoint' has a wrong offset!");

// Function Altar.VDynamicNavAreaRebuilderComponent.DirtyNavArea
// 0x0008 (0x0008 - 0x0000)
struct VDynamicNavAreaRebuilderComponent_DirtyNavArea final
{
public:
	class FName                                   DebugReason;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDynamicNavAreaRebuilderComponent_DirtyNavArea) == 0x000004, "Wrong alignment on VDynamicNavAreaRebuilderComponent_DirtyNavArea");
static_assert(sizeof(VDynamicNavAreaRebuilderComponent_DirtyNavArea) == 0x000008, "Wrong size on VDynamicNavAreaRebuilderComponent_DirtyNavArea");
static_assert(offsetof(VDynamicNavAreaRebuilderComponent_DirtyNavArea, DebugReason) == 0x000000, "Member 'VDynamicNavAreaRebuilderComponent_DirtyNavArea::DebugReason' has a wrong offset!");

// Function Altar.VDynamicNavAreaRebuilderComponent.ForceDirtyNavArea
// 0x0008 (0x0008 - 0x0000)
struct VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea final
{
public:
	class FName                                   DebugReason;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea) == 0x000004, "Wrong alignment on VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea");
static_assert(sizeof(VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea) == 0x000008, "Wrong size on VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea");
static_assert(offsetof(VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea, DebugReason) == 0x000000, "Member 'VDynamicNavAreaRebuilderComponent_ForceDirtyNavArea::DebugReason' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.RegisterSendClickedScrollbar
// 0x0008 (0x0008 - 0x0000)
struct VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELegacyEffectEntryType                        NewScrollbarType;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar");
static_assert(sizeof(VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar) == 0x000008, "Wrong size on VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar");
static_assert(offsetof(VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar, NewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar::NewValue' has a wrong offset!");
static_assert(offsetof(VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar, NewScrollbarType) == 0x000004, "Member 'VEffectSettingsMenuViewModel_RegisterSendClickedScrollbar::NewScrollbarType' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetAreaScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VEffectSettingsMenuViewModel_SetAreaScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        NewScrollbarProperties;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetAreaScrollbarProperties) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetAreaScrollbarProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetAreaScrollbarProperties) == 0x000010, "Wrong size on VEffectSettingsMenuViewModel_SetAreaScrollbarProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetAreaScrollbarProperties, NewScrollbarProperties) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetAreaScrollbarProperties::NewScrollbarProperties' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetAreaSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VEffectSettingsMenuViewModel_SetAreaSelectedValue final
{
public:
	float                                         NewSelectedValue;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetAreaSelectedValue) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetAreaSelectedValue");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetAreaSelectedValue) == 0x000004, "Wrong size on VEffectSettingsMenuViewModel_SetAreaSelectedValue");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetAreaSelectedValue, NewSelectedValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetAreaSelectedValue::NewSelectedValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetDurationScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VEffectSettingsMenuViewModel_SetDurationScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        NewScrollbarProperties;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetDurationScrollbarProperties) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetDurationScrollbarProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetDurationScrollbarProperties) == 0x000010, "Wrong size on VEffectSettingsMenuViewModel_SetDurationScrollbarProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetDurationScrollbarProperties, NewScrollbarProperties) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetDurationScrollbarProperties::NewScrollbarProperties' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetDurationSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VEffectSettingsMenuViewModel_SetDurationSelectedValue final
{
public:
	float                                         NewSelectedValue;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetDurationSelectedValue) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetDurationSelectedValue");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetDurationSelectedValue) == 0x000004, "Wrong size on VEffectSettingsMenuViewModel_SetDurationSelectedValue");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetDurationSelectedValue, NewSelectedValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetDurationSelectedValue::NewSelectedValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetEffectCost
// 0x000C (0x000C - 0x0000)
struct VEffectSettingsMenuViewModel_SetEffectCost final
{
public:
	struct FLegacyEffectCost                      NewCost;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetEffectCost) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetEffectCost");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetEffectCost) == 0x00000C, "Wrong size on VEffectSettingsMenuViewModel_SetEffectCost");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetEffectCost, NewCost) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetEffectCost::NewCost' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetEffectProperties
// 0x0020 (0x0020 - 0x0000)
struct VEffectSettingsMenuViewModel_SetEffectProperties final
{
public:
	struct FLegacyEffectProperties                NewProperties;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetEffectProperties) == 0x000008, "Wrong alignment on VEffectSettingsMenuViewModel_SetEffectProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetEffectProperties) == 0x000020, "Wrong size on VEffectSettingsMenuViewModel_SetEffectProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetEffectProperties, NewProperties) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetEffectProperties::NewProperties' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetFirstButtonText
// 0x0018 (0x0018 - 0x0000)
struct VEffectSettingsMenuViewModel_SetFirstButtonText final
{
public:
	class FText                                   NewValue;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetFirstButtonText) == 0x000008, "Wrong alignment on VEffectSettingsMenuViewModel_SetFirstButtonText");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetFirstButtonText) == 0x000018, "Wrong size on VEffectSettingsMenuViewModel_SetFirstButtonText");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetFirstButtonText, NewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetFirstButtonText::NewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetFirstButtonType
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetFirstButtonType final
{
public:
	ELegacyEffectEntryType                        NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetFirstButtonType) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetFirstButtonType");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetFirstButtonType) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetFirstButtonType");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetFirstButtonType, NewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetFirstButtonType::NewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsAreaVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsAreaVisible final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsAreaVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsAreaVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsAreaVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsAreaVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsAreaVisible, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsAreaVisible::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsDeleteVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsDeleteVisible final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsDeleteVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsDeleteVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsDeleteVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsDeleteVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsDeleteVisible, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsDeleteVisible::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsDurationVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsDurationVisible final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsDurationVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsDurationVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsDurationVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsDurationVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsDurationVisible, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsDurationVisible::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsEnchantmentMenu
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsEnchantmentMenu final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsEnchantmentMenu) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsEnchantmentMenu");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsEnchantmentMenu) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsEnchantmentMenu");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsEnchantmentMenu, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsEnchantmentMenu::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsLockLevelVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsLockLevelVisible final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsLockLevelVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsLockLevelVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsLockLevelVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsLockLevelVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsLockLevelVisible, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsLockLevelVisible::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsMagnitudeVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsMagnitudeVisible final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsMagnitudeVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsMagnitudeVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsMagnitudeVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsMagnitudeVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsMagnitudeVisible, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsMagnitudeVisible::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetIsRangeVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetIsRangeVisible final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetIsRangeVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetIsRangeVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetIsRangeVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetIsRangeVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetIsRangeVisible, bNewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetIsRangeVisible::bNewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetLocklevel
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_SetLocklevel final
{
public:
	EMordernLockLevel                             NewLockValue;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetLocklevel) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_SetLocklevel");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetLocklevel) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_SetLocklevel");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetLocklevel, NewLockValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetLocklevel::NewLockValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetMagnitudeScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        NewScrollbarProperties;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties) == 0x000010, "Wrong size on VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties, NewScrollbarProperties) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetMagnitudeScrollbarProperties::NewScrollbarProperties' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetMagnitudeSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue final
{
public:
	float                                         NewSelectedValue;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue) == 0x000004, "Wrong size on VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue, NewSelectedValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetMagnitudeSelectedValue::NewSelectedValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.SetRangeText
// 0x0018 (0x0018 - 0x0000)
struct VEffectSettingsMenuViewModel_SetRangeText final
{
public:
	class FText                                   NewValue;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_SetRangeText) == 0x000008, "Wrong alignment on VEffectSettingsMenuViewModel_SetRangeText");
static_assert(sizeof(VEffectSettingsMenuViewModel_SetRangeText) == 0x000018, "Wrong size on VEffectSettingsMenuViewModel_SetRangeText");
static_assert(offsetof(VEffectSettingsMenuViewModel_SetRangeText, NewValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_SetRangeText::NewValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetAreaScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VEffectSettingsMenuViewModel_GetAreaScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetAreaScrollbarProperties) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetAreaScrollbarProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetAreaScrollbarProperties) == 0x000010, "Wrong size on VEffectSettingsMenuViewModel_GetAreaScrollbarProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetAreaScrollbarProperties, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetAreaScrollbarProperties::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetAreaSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VEffectSettingsMenuViewModel_GetAreaSelectedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetAreaSelectedValue) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetAreaSelectedValue");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetAreaSelectedValue) == 0x000004, "Wrong size on VEffectSettingsMenuViewModel_GetAreaSelectedValue");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetAreaSelectedValue, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetAreaSelectedValue::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetDurationScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VEffectSettingsMenuViewModel_GetDurationScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetDurationScrollbarProperties) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetDurationScrollbarProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetDurationScrollbarProperties) == 0x000010, "Wrong size on VEffectSettingsMenuViewModel_GetDurationScrollbarProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetDurationScrollbarProperties, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetDurationScrollbarProperties::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetDurationSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VEffectSettingsMenuViewModel_GetDurationSelectedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetDurationSelectedValue) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetDurationSelectedValue");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetDurationSelectedValue) == 0x000004, "Wrong size on VEffectSettingsMenuViewModel_GetDurationSelectedValue");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetDurationSelectedValue, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetDurationSelectedValue::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetEffectCost
// 0x000C (0x000C - 0x0000)
struct VEffectSettingsMenuViewModel_GetEffectCost final
{
public:
	struct FLegacyEffectCost                      ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetEffectCost) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetEffectCost");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetEffectCost) == 0x00000C, "Wrong size on VEffectSettingsMenuViewModel_GetEffectCost");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetEffectCost, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetEffectCost::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetEffectProperties
// 0x0020 (0x0020 - 0x0000)
struct VEffectSettingsMenuViewModel_GetEffectProperties final
{
public:
	struct FLegacyEffectProperties                ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetEffectProperties) == 0x000008, "Wrong alignment on VEffectSettingsMenuViewModel_GetEffectProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetEffectProperties) == 0x000020, "Wrong size on VEffectSettingsMenuViewModel_GetEffectProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetEffectProperties, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetEffectProperties::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetFirstButtonText
// 0x0018 (0x0018 - 0x0000)
struct VEffectSettingsMenuViewModel_GetFirstButtonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetFirstButtonText) == 0x000008, "Wrong alignment on VEffectSettingsMenuViewModel_GetFirstButtonText");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetFirstButtonText) == 0x000018, "Wrong size on VEffectSettingsMenuViewModel_GetFirstButtonText");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetFirstButtonText, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetFirstButtonText::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetFirstButtonType
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetFirstButtonType final
{
public:
	ELegacyEffectEntryType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetFirstButtonType) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetFirstButtonType");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetFirstButtonType) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetFirstButtonType");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetFirstButtonType, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetFirstButtonType::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsAreaVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsAreaVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsAreaVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsAreaVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsAreaVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsAreaVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsAreaVisible, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsAreaVisible::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsDeleteVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsDeleteVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsDeleteVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsDeleteVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsDeleteVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsDeleteVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsDeleteVisible, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsDeleteVisible::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsDurationVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsDurationVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsDurationVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsDurationVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsDurationVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsDurationVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsDurationVisible, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsDurationVisible::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsEnchantmentMenu
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsEnchantmentMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsEnchantmentMenu) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsEnchantmentMenu");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsEnchantmentMenu) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsEnchantmentMenu");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsEnchantmentMenu, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsEnchantmentMenu::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsLockLevelVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsLockLevelVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsLockLevelVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsLockLevelVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsLockLevelVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsLockLevelVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsLockLevelVisible, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsLockLevelVisible::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsMagnitudeVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsMagnitudeVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsMagnitudeVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsMagnitudeVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsMagnitudeVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsMagnitudeVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsMagnitudeVisible, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsMagnitudeVisible::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetIsRangeVisible
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetIsRangeVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetIsRangeVisible) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetIsRangeVisible");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetIsRangeVisible) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetIsRangeVisible");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetIsRangeVisible, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetIsRangeVisible::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetLocklevel
// 0x0001 (0x0001 - 0x0000)
struct VEffectSettingsMenuViewModel_GetLocklevel final
{
public:
	EMordernLockLevel                             ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetLocklevel) == 0x000001, "Wrong alignment on VEffectSettingsMenuViewModel_GetLocklevel");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetLocklevel) == 0x000001, "Wrong size on VEffectSettingsMenuViewModel_GetLocklevel");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetLocklevel, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetLocklevel::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetMagnitudeScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties) == 0x000010, "Wrong size on VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetMagnitudeScrollbarProperties::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetMagnitudeSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue) == 0x000004, "Wrong alignment on VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue) == 0x000004, "Wrong size on VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetMagnitudeSelectedValue::ReturnValue' has a wrong offset!");

// Function Altar.VEffectSettingsMenuViewModel.GetRangeText
// 0x0018 (0x0018 - 0x0000)
struct VEffectSettingsMenuViewModel_GetRangeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEffectSettingsMenuViewModel_GetRangeText) == 0x000008, "Wrong alignment on VEffectSettingsMenuViewModel_GetRangeText");
static_assert(sizeof(VEffectSettingsMenuViewModel_GetRangeText) == 0x000018, "Wrong size on VEffectSettingsMenuViewModel_GetRangeText");
static_assert(offsetof(VEffectSettingsMenuViewModel_GetRangeText, ReturnValue) == 0x000000, "Member 'VEffectSettingsMenuViewModel_GetRangeText::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnAddedEffectItem
// 0x0008 (0x0008 - 0x0000)
struct VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantToDelete;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem) == 0x000004, "Wrong alignment on VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem");
static_assert(sizeof(VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem) == 0x000008, "Wrong size on VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem");
static_assert(offsetof(VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem, ItemIndex) == 0x000000, "Member 'VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem, bWantToDelete) == 0x000004, "Member 'VEnchantmentMenuViewModel_RegisterSendClickOnAddedEffectItem::bWantToDelete' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnAvailableEffectItem
// 0x0008 (0x0008 - 0x0000)
struct VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantToDelete;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem) == 0x000004, "Wrong alignment on VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem");
static_assert(sizeof(VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem) == 0x000008, "Wrong size on VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem");
static_assert(offsetof(VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem, ItemIndex) == 0x000000, "Member 'VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem, bWantToDelete) == 0x000004, "Member 'VEnchantmentMenuViewModel_RegisterSendClickOnAvailableEffectItem::bWantToDelete' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnCreateButton
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton final
{
public:
	class FString                                 NewEnchantedItemName;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton");
static_assert(sizeof(VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton");
static_assert(offsetof(VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton, NewEnchantedItemName) == 0x000000, "Member 'VEnchantmentMenuViewModel_RegisterSendClickOnCreateButton::NewEnchantedItemName' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.RegisterSendClickOnItem
// 0x0004 (0x0004 - 0x0000)
struct VEnchantmentMenuViewModel_RegisterSendClickOnItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_RegisterSendClickOnItem) == 0x000004, "Wrong alignment on VEnchantmentMenuViewModel_RegisterSendClickOnItem");
static_assert(sizeof(VEnchantmentMenuViewModel_RegisterSendClickOnItem) == 0x000004, "Wrong size on VEnchantmentMenuViewModel_RegisterSendClickOnItem");
static_assert(offsetof(VEnchantmentMenuViewModel_RegisterSendClickOnItem, ItemIndex) == 0x000000, "Member 'VEnchantmentMenuViewModel_RegisterSendClickOnItem::ItemIndex' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_SetCurrentPage final
{
public:
	EModernEnchantmentMenuPage                    NewPage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetCurrentPage) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_SetCurrentPage");
static_assert(sizeof(VEnchantmentMenuViewModel_SetCurrentPage) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_SetCurrentPage");
static_assert(offsetof(VEnchantmentMenuViewModel_SetCurrentPage, NewPage) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetCurrentPage::NewPage' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetCurrentPageItemsList
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_SetCurrentPageItemsList final
{
public:
	TArray<struct FVModernEnchantmentItemProperties> NewItemsList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetCurrentPageItemsList) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_SetCurrentPageItemsList");
static_assert(sizeof(VEnchantmentMenuViewModel_SetCurrentPageItemsList) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_SetCurrentPageItemsList");
static_assert(offsetof(VEnchantmentMenuViewModel_SetCurrentPageItemsList, NewItemsList) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetCurrentPageItemsList::NewItemsList' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetEffectsList
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_SetEffectsList final
{
public:
	TArray<struct FVModernEnchantmentItemProperties> NewEffectsList;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetEffectsList) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_SetEffectsList");
static_assert(sizeof(VEnchantmentMenuViewModel_SetEffectsList) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_SetEffectsList");
static_assert(offsetof(VEnchantmentMenuViewModel_SetEffectsList, NewEffectsList) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetEffectsList::NewEffectsList' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetInventoryForPage
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_SetInventoryForPage final
{
public:
	EModernEnchantmentMenuPage                    Page;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetInventoryForPage) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_SetInventoryForPage");
static_assert(sizeof(VEnchantmentMenuViewModel_SetInventoryForPage) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_SetInventoryForPage");
static_assert(offsetof(VEnchantmentMenuViewModel_SetInventoryForPage, Page) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetInventoryForPage::Page' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          bNewIsSortReversed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VEnchantmentMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VEnchantmentMenuViewModel_SetIsSortReversed, bNewIsSortReversed) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetIsSortReversed::bNewIsSortReversed' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetItemsList
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_SetItemsList final
{
public:
	TArray<struct FVModernEnchantmentItemProperties> NewItemsList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetItemsList) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_SetItemsList");
static_assert(sizeof(VEnchantmentMenuViewModel_SetItemsList) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_SetItemsList");
static_assert(offsetof(VEnchantmentMenuViewModel_SetItemsList, NewItemsList) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetItemsList::NewItemsList' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetItemToEnchantInfo
// 0x0020 (0x0020 - 0x0000)
struct VEnchantmentMenuViewModel_SetItemToEnchantInfo final
{
public:
	struct FItemToEnchantInfo                     NewItemToEnchantInfo;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetItemToEnchantInfo) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_SetItemToEnchantInfo");
static_assert(sizeof(VEnchantmentMenuViewModel_SetItemToEnchantInfo) == 0x000020, "Wrong size on VEnchantmentMenuViewModel_SetItemToEnchantInfo");
static_assert(offsetof(VEnchantmentMenuViewModel_SetItemToEnchantInfo, NewItemToEnchantInfo) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetItemToEnchantInfo::NewItemToEnchantInfo' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VEnchantmentMenuViewModel_SetPlayerGold final
{
public:
	int32                                         NewPlayerGold;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetPlayerGold) == 0x000004, "Wrong alignment on VEnchantmentMenuViewModel_SetPlayerGold");
static_assert(sizeof(VEnchantmentMenuViewModel_SetPlayerGold) == 0x000004, "Wrong size on VEnchantmentMenuViewModel_SetPlayerGold");
static_assert(offsetof(VEnchantmentMenuViewModel_SetPlayerGold, NewPlayerGold) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetPlayerGold::NewPlayerGold' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_SetSortType final
{
public:
	EOriginalInventoryMenuSortType                NewSortType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_SetSortType");
static_assert(sizeof(VEnchantmentMenuViewModel_SetSortType) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_SetSortType");
static_assert(offsetof(VEnchantmentMenuViewModel_SetSortType, NewSortType) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetSortType::NewSortType' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.SetSoulGemInfo
// 0x0028 (0x0028 - 0x0000)
struct VEnchantmentMenuViewModel_SetSoulGemInfo final
{
public:
	struct FSoulGemInfo                           NewSoulGemInfo;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_SetSoulGemInfo) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_SetSoulGemInfo");
static_assert(sizeof(VEnchantmentMenuViewModel_SetSoulGemInfo) == 0x000028, "Wrong size on VEnchantmentMenuViewModel_SetSoulGemInfo");
static_assert(offsetof(VEnchantmentMenuViewModel_SetSoulGemInfo, NewSoulGemInfo) == 0x000000, "Member 'VEnchantmentMenuViewModel_SetSoulGemInfo::NewSoulGemInfo' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_GetCurrentPage final
{
public:
	EModernEnchantmentMenuPage                    ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetCurrentPage) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_GetCurrentPage");
static_assert(sizeof(VEnchantmentMenuViewModel_GetCurrentPage) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_GetCurrentPage");
static_assert(offsetof(VEnchantmentMenuViewModel_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetCurrentPageItemsList
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_GetCurrentPageItemsList final
{
public:
	TArray<struct FVModernEnchantmentItemProperties> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetCurrentPageItemsList) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_GetCurrentPageItemsList");
static_assert(sizeof(VEnchantmentMenuViewModel_GetCurrentPageItemsList) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_GetCurrentPageItemsList");
static_assert(offsetof(VEnchantmentMenuViewModel_GetCurrentPageItemsList, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetCurrentPageItemsList::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetEffectsList
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_GetEffectsList final
{
public:
	TArray<struct FVModernEnchantmentItemProperties> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetEffectsList) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_GetEffectsList");
static_assert(sizeof(VEnchantmentMenuViewModel_GetEffectsList) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_GetEffectsList");
static_assert(offsetof(VEnchantmentMenuViewModel_GetEffectsList, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetEffectsList::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetItemsList
// 0x0010 (0x0010 - 0x0000)
struct VEnchantmentMenuViewModel_GetItemsList final
{
public:
	TArray<struct FVModernEnchantmentItemProperties> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetItemsList) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_GetItemsList");
static_assert(sizeof(VEnchantmentMenuViewModel_GetItemsList) == 0x000010, "Wrong size on VEnchantmentMenuViewModel_GetItemsList");
static_assert(offsetof(VEnchantmentMenuViewModel_GetItemsList, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetItemsList::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetItemToEnchantInfo
// 0x0020 (0x0020 - 0x0000)
struct VEnchantmentMenuViewModel_GetItemToEnchantInfo final
{
public:
	struct FItemToEnchantInfo                     ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetItemToEnchantInfo) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_GetItemToEnchantInfo");
static_assert(sizeof(VEnchantmentMenuViewModel_GetItemToEnchantInfo) == 0x000020, "Wrong size on VEnchantmentMenuViewModel_GetItemToEnchantInfo");
static_assert(offsetof(VEnchantmentMenuViewModel_GetItemToEnchantInfo, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetItemToEnchantInfo::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VEnchantmentMenuViewModel_GetPlayerGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetPlayerGold) == 0x000004, "Wrong alignment on VEnchantmentMenuViewModel_GetPlayerGold");
static_assert(sizeof(VEnchantmentMenuViewModel_GetPlayerGold) == 0x000004, "Wrong size on VEnchantmentMenuViewModel_GetPlayerGold");
static_assert(offsetof(VEnchantmentMenuViewModel_GetPlayerGold, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetPlayerGold::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_GetSortType final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_GetSortType");
static_assert(sizeof(VEnchantmentMenuViewModel_GetSortType) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_GetSortType");
static_assert(offsetof(VEnchantmentMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.GetSoulGemInfo
// 0x0028 (0x0028 - 0x0000)
struct VEnchantmentMenuViewModel_GetSoulGemInfo final
{
public:
	struct FSoulGemInfo                           ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_GetSoulGemInfo) == 0x000008, "Wrong alignment on VEnchantmentMenuViewModel_GetSoulGemInfo");
static_assert(sizeof(VEnchantmentMenuViewModel_GetSoulGemInfo) == 0x000028, "Wrong size on VEnchantmentMenuViewModel_GetSoulGemInfo");
static_assert(offsetof(VEnchantmentMenuViewModel_GetSoulGemInfo, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_GetSoulGemInfo::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.IsItemTypeOnPage
// 0x0003 (0x0003 - 0x0000)
struct VEnchantmentMenuViewModel_IsItemTypeOnPage final
{
public:
	EModernEnchantmentMenuItemType                ItemType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModernEnchantmentMenuPage                    Page;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_IsItemTypeOnPage) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_IsItemTypeOnPage");
static_assert(sizeof(VEnchantmentMenuViewModel_IsItemTypeOnPage) == 0x000003, "Wrong size on VEnchantmentMenuViewModel_IsItemTypeOnPage");
static_assert(offsetof(VEnchantmentMenuViewModel_IsItemTypeOnPage, ItemType) == 0x000000, "Member 'VEnchantmentMenuViewModel_IsItemTypeOnPage::ItemType' has a wrong offset!");
static_assert(offsetof(VEnchantmentMenuViewModel_IsItemTypeOnPage, Page) == 0x000001, "Member 'VEnchantmentMenuViewModel_IsItemTypeOnPage::Page' has a wrong offset!");
static_assert(offsetof(VEnchantmentMenuViewModel_IsItemTypeOnPage, ReturnValue) == 0x000002, "Member 'VEnchantmentMenuViewModel_IsItemTypeOnPage::ReturnValue' has a wrong offset!");

// Function Altar.VEnchantmentMenuViewModel.IsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VEnchantmentMenuViewModel_IsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnchantmentMenuViewModel_IsSortReversed) == 0x000001, "Wrong alignment on VEnchantmentMenuViewModel_IsSortReversed");
static_assert(sizeof(VEnchantmentMenuViewModel_IsSortReversed) == 0x000001, "Wrong size on VEnchantmentMenuViewModel_IsSortReversed");
static_assert(offsetof(VEnchantmentMenuViewModel_IsSortReversed, ReturnValue) == 0x000000, "Member 'VEnchantmentMenuViewModel_IsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.GetLandingAdditiveAlpha
// 0x0004 (0x0004 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha) == 0x000004, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha) == 0x000004, "Wrong size on VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_GetLandingAdditiveAlpha::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_IsInAir) == 0x000001, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_IsInAir");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_IsInAir) == 0x000001, "Wrong size on VEnhancedInAirCharacterAnimInstance_IsInAir");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_IsInAir, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_IsInAir::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.IsJumping
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_IsJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_IsJumping) == 0x000001, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_IsJumping");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_IsJumping) == 0x000001, "Wrong size on VEnhancedInAirCharacterAnimInstance_IsJumping");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_IsJumping, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_IsJumping::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.IsLanding
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_IsLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_IsLanding) == 0x000001, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_IsLanding");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_IsLanding) == 0x000001, "Wrong size on VEnhancedInAirCharacterAnimInstance_IsLanding");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_IsLanding, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_IsLanding::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.IsLeftFootJump
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_IsLeftFootJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_IsLeftFootJump) == 0x000001, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_IsLeftFootJump");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_IsLeftFootJump) == 0x000001, "Wrong size on VEnhancedInAirCharacterAnimInstance_IsLeftFootJump");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_IsLeftFootJump, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_IsLeftFootJump::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_IsSneaking");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong size on VEnhancedInAirCharacterAnimInstance_IsSneaking");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedInAirCharacterAnimInstance.IsTryingToMove
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedInAirCharacterAnimInstance_IsTryingToMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedInAirCharacterAnimInstance_IsTryingToMove) == 0x000001, "Wrong alignment on VEnhancedInAirCharacterAnimInstance_IsTryingToMove");
static_assert(sizeof(VEnhancedInAirCharacterAnimInstance_IsTryingToMove) == 0x000001, "Wrong size on VEnhancedInAirCharacterAnimInstance_IsTryingToMove");
static_assert(offsetof(VEnhancedInAirCharacterAnimInstance_IsTryingToMove, ReturnValue) == 0x000000, "Member 'VEnhancedInAirCharacterAnimInstance_IsTryingToMove::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedLocomotionCharacterAnimInstance.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedLocomotionCharacterAnimInstance_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedLocomotionCharacterAnimInstance_IsSprinting) == 0x000001, "Wrong alignment on VEnhancedLocomotionCharacterAnimInstance_IsSprinting");
static_assert(sizeof(VEnhancedLocomotionCharacterAnimInstance_IsSprinting) == 0x000001, "Wrong size on VEnhancedLocomotionCharacterAnimInstance_IsSprinting");
static_assert(offsetof(VEnhancedLocomotionCharacterAnimInstance_IsSprinting, ReturnValue) == 0x000000, "Member 'VEnhancedLocomotionCharacterAnimInstance_IsSprinting::ReturnValue' has a wrong offset!");

// Function Altar.VEnhancedLocomotionCharacterAnimInstance.IsWeaponDrawn
// 0x0001 (0x0001 - 0x0000)
struct VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn) == 0x000001, "Wrong alignment on VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn");
static_assert(sizeof(VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn) == 0x000001, "Wrong size on VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn");
static_assert(offsetof(VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn, ReturnValue) == 0x000000, "Member 'VEnhancedLocomotionCharacterAnimInstance_IsWeaponDrawn::ReturnValue' has a wrong offset!");

// Function Altar.VEquipUnequipMultiAnimInstance.OnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipMultiAnimInstance_OnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipMultiAnimInstance_OnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipMultiAnimInstance_OnEquipEnter");
static_assert(sizeof(VEquipUnequipMultiAnimInstance_OnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipMultiAnimInstance_OnEquipEnter");
static_assert(offsetof(VEquipUnequipMultiAnimInstance_OnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipMultiAnimInstance_OnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipMultiAnimInstance_OnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipMultiAnimInstance_OnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipMultiAnimInstance.OnUnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipMultiAnimInstance_OnUnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipMultiAnimInstance_OnUnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipMultiAnimInstance_OnUnEquipEnter");
static_assert(sizeof(VEquipUnequipMultiAnimInstance_OnUnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipMultiAnimInstance_OnUnEquipEnter");
static_assert(offsetof(VEquipUnequipMultiAnimInstance_OnUnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipMultiAnimInstance_OnUnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipMultiAnimInstance_OnUnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipMultiAnimInstance_OnUnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipSingleAnimInstance.OnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipSingleAnimInstance_OnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipSingleAnimInstance_OnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipSingleAnimInstance_OnEquipEnter");
static_assert(sizeof(VEquipUnequipSingleAnimInstance_OnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipSingleAnimInstance_OnEquipEnter");
static_assert(offsetof(VEquipUnequipSingleAnimInstance_OnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipSingleAnimInstance_OnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipSingleAnimInstance_OnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipSingleAnimInstance_OnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipSingleAnimInstance.OnUnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipSingleAnimInstance_OnUnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipSingleAnimInstance_OnUnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipSingleAnimInstance_OnUnEquipEnter");
static_assert(sizeof(VEquipUnequipSingleAnimInstance_OnUnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipSingleAnimInstance_OnUnEquipEnter");
static_assert(offsetof(VEquipUnequipSingleAnimInstance_OnUnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipSingleAnimInstance_OnUnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipSingleAnimInstance_OnUnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipSingleAnimInstance_OnUnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipSSwimSingle.OnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipSSwimSingle_OnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipSSwimSingle_OnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipSSwimSingle_OnEquipEnter");
static_assert(sizeof(VEquipUnequipSSwimSingle_OnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipSSwimSingle_OnEquipEnter");
static_assert(offsetof(VEquipUnequipSSwimSingle_OnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipSSwimSingle_OnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipSSwimSingle_OnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipSSwimSingle_OnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipSSwimSingle.OnUnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipSSwimSingle_OnUnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipSSwimSingle_OnUnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipSSwimSingle_OnUnEquipEnter");
static_assert(sizeof(VEquipUnequipSSwimSingle_OnUnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipSSwimSingle_OnUnEquipEnter");
static_assert(offsetof(VEquipUnequipSSwimSingle_OnUnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipSSwimSingle_OnUnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipSSwimSingle_OnUnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipSSwimSingle_OnUnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipStandSneakSingle.OnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipStandSneakSingle_OnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipStandSneakSingle_OnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipStandSneakSingle_OnEquipEnter");
static_assert(sizeof(VEquipUnequipStandSneakSingle_OnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipStandSneakSingle_OnEquipEnter");
static_assert(offsetof(VEquipUnequipStandSneakSingle_OnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipStandSneakSingle_OnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipStandSneakSingle_OnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipStandSneakSingle_OnEquipEnter::Node' has a wrong offset!");

// Function Altar.VEquipUnequipStandSneakSingle.OnUnEquipEnter
// 0x0020 (0x0020 - 0x0000)
struct VEquipUnequipStandSneakSingle_OnUnEquipEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VEquipUnequipStandSneakSingle_OnUnEquipEnter) == 0x000008, "Wrong alignment on VEquipUnequipStandSneakSingle_OnUnEquipEnter");
static_assert(sizeof(VEquipUnequipStandSneakSingle_OnUnEquipEnter) == 0x000020, "Wrong size on VEquipUnequipStandSneakSingle_OnUnEquipEnter");
static_assert(offsetof(VEquipUnequipStandSneakSingle_OnUnEquipEnter, Context) == 0x000000, "Member 'VEquipUnequipStandSneakSingle_OnUnEquipEnter::Context' has a wrong offset!");
static_assert(offsetof(VEquipUnequipStandSneakSingle_OnUnEquipEnter, Node) == 0x000010, "Member 'VEquipUnequipStandSneakSingle_OnUnEquipEnter::Node' has a wrong offset!");

// Function Altar.VFacialCharacterAnimInstance.IsUsingAttackPose
// 0x0001 (0x0001 - 0x0000)
struct VFacialCharacterAnimInstance_IsUsingAttackPose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFacialCharacterAnimInstance_IsUsingAttackPose) == 0x000001, "Wrong alignment on VFacialCharacterAnimInstance_IsUsingAttackPose");
static_assert(sizeof(VFacialCharacterAnimInstance_IsUsingAttackPose) == 0x000001, "Wrong size on VFacialCharacterAnimInstance_IsUsingAttackPose");
static_assert(offsetof(VFacialCharacterAnimInstance_IsUsingAttackPose, ReturnValue) == 0x000000, "Member 'VFacialCharacterAnimInstance_IsUsingAttackPose::ReturnValue' has a wrong offset!");

// Function Altar.VFacialCharacterAnimInstance.IsUsingHitPose
// 0x0001 (0x0001 - 0x0000)
struct VFacialCharacterAnimInstance_IsUsingHitPose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFacialCharacterAnimInstance_IsUsingHitPose) == 0x000001, "Wrong alignment on VFacialCharacterAnimInstance_IsUsingHitPose");
static_assert(sizeof(VFacialCharacterAnimInstance_IsUsingHitPose) == 0x000001, "Wrong size on VFacialCharacterAnimInstance_IsUsingHitPose");
static_assert(offsetof(VFacialCharacterAnimInstance_IsUsingHitPose, ReturnValue) == 0x000000, "Member 'VFacialCharacterAnimInstance_IsUsingHitPose::ReturnValue' has a wrong offset!");

// Function Altar.VFeetIKCharacterAnimInstance.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct VFeetIKCharacterAnimInstance_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFeetIKCharacterAnimInstance_IsInAir) == 0x000001, "Wrong alignment on VFeetIKCharacterAnimInstance_IsInAir");
static_assert(sizeof(VFeetIKCharacterAnimInstance_IsInAir) == 0x000001, "Wrong size on VFeetIKCharacterAnimInstance_IsInAir");
static_assert(offsetof(VFeetIKCharacterAnimInstance_IsInAir, ReturnValue) == 0x000000, "Member 'VFeetIKCharacterAnimInstance_IsInAir::ReturnValue' has a wrong offset!");

// Function Altar.VFeetIKCharacterAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VFeetIKCharacterAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFeetIKCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VFeetIKCharacterAnimInstance_IsSneaking");
static_assert(sizeof(VFeetIKCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong size on VFeetIKCharacterAnimInstance_IsSneaking");
static_assert(offsetof(VFeetIKCharacterAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VFeetIKCharacterAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VFooterViewModel.OnHoldCancel
// 0x0008 (0x0008 - 0x0000)
struct VFooterViewModel_OnHoldCancel final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFooterViewModel_OnHoldCancel) == 0x000008, "Wrong alignment on VFooterViewModel_OnHoldCancel");
static_assert(sizeof(VFooterViewModel_OnHoldCancel) == 0x000008, "Wrong size on VFooterViewModel_OnHoldCancel");
static_assert(offsetof(VFooterViewModel_OnHoldCancel, InputAction) == 0x000000, "Member 'VFooterViewModel_OnHoldCancel::InputAction' has a wrong offset!");

// Function Altar.VFooterViewModel.SetInputActionDescription
// 0x0020 (0x0020 - 0x0000)
struct VFooterViewModel_SetInputActionDescription final
{
public:
	struct FFooterInputActionDescription          NewExtraData;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFooterViewModel_SetInputActionDescription) == 0x000008, "Wrong alignment on VFooterViewModel_SetInputActionDescription");
static_assert(sizeof(VFooterViewModel_SetInputActionDescription) == 0x000020, "Wrong size on VFooterViewModel_SetInputActionDescription");
static_assert(offsetof(VFooterViewModel_SetInputActionDescription, NewExtraData) == 0x000000, "Member 'VFooterViewModel_SetInputActionDescription::NewExtraData' has a wrong offset!");

// Function Altar.VFooterViewModel.SetInputActionVisibility
// 0x0010 (0x0010 - 0x0000)
struct VFooterViewModel_SetInputActionVisibility final
{
public:
	struct FFooterInputActionVisibility           NewInputActionVisibility;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFooterViewModel_SetInputActionVisibility) == 0x000008, "Wrong alignment on VFooterViewModel_SetInputActionVisibility");
static_assert(sizeof(VFooterViewModel_SetInputActionVisibility) == 0x000010, "Wrong size on VFooterViewModel_SetInputActionVisibility");
static_assert(offsetof(VFooterViewModel_SetInputActionVisibility, NewInputActionVisibility) == 0x000000, "Member 'VFooterViewModel_SetInputActionVisibility::NewInputActionVisibility' has a wrong offset!");

// Function Altar.VFooterViewModel.TriggerOnHoldInput
// 0x0008 (0x0008 - 0x0000)
struct VFooterViewModel_TriggerOnHoldInput final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFooterViewModel_TriggerOnHoldInput) == 0x000008, "Wrong alignment on VFooterViewModel_TriggerOnHoldInput");
static_assert(sizeof(VFooterViewModel_TriggerOnHoldInput) == 0x000008, "Wrong size on VFooterViewModel_TriggerOnHoldInput");
static_assert(offsetof(VFooterViewModel_TriggerOnHoldInput, InputAction) == 0x000000, "Member 'VFooterViewModel_TriggerOnHoldInput::InputAction' has a wrong offset!");

// Function Altar.VFooterViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VFooterViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFooterViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VFooterViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VFooterViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VFooterViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VFooterViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VFooterViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VFootStepVFXBlueprint.OnStartPlay
// 0x0020 (0x0020 - 0x0000)
struct VFootStepVFXBlueprint_OnStartPlay final
{
public:
	EVLocomotionType                              LocomotionType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFootStepVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VFootStepVFXBlueprint_OnStartPlay");
static_assert(sizeof(VFootStepVFXBlueprint_OnStartPlay) == 0x000020, "Wrong size on VFootStepVFXBlueprint_OnStartPlay");
static_assert(offsetof(VFootStepVFXBlueprint_OnStartPlay, LocomotionType) == 0x000000, "Member 'VFootStepVFXBlueprint_OnStartPlay::LocomotionType' has a wrong offset!");
static_assert(offsetof(VFootStepVFXBlueprint_OnStartPlay, bDoesBeginInFirstPerson) == 0x000001, "Member 'VFootStepVFXBlueprint_OnStartPlay::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VFootStepVFXBlueprint_OnStartPlay, Velocity) == 0x000008, "Member 'VFootStepVFXBlueprint_OnStartPlay::Velocity' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.Freeze
// 0x000C (0x000C - 0x0000)
struct VFreezeInMenuSubsystem_Freeze final
{
public:
	class FName                                   FreezeName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFreezeOblivion;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VFreezeInMenuSubsystem_Freeze) == 0x000004, "Wrong alignment on VFreezeInMenuSubsystem_Freeze");
static_assert(sizeof(VFreezeInMenuSubsystem_Freeze) == 0x00000C, "Wrong size on VFreezeInMenuSubsystem_Freeze");
static_assert(offsetof(VFreezeInMenuSubsystem_Freeze, FreezeName) == 0x000000, "Member 'VFreezeInMenuSubsystem_Freeze::FreezeName' has a wrong offset!");
static_assert(offsetof(VFreezeInMenuSubsystem_Freeze, bShouldFreezeOblivion) == 0x000008, "Member 'VFreezeInMenuSubsystem_Freeze::bShouldFreezeOblivion' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.RequestMode
// 0x0001 (0x0001 - 0x0000)
struct VFreezeInMenuSubsystem_RequestMode final
{
public:
	EVFreezeSubsystemMode                         NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFreezeInMenuSubsystem_RequestMode) == 0x000001, "Wrong alignment on VFreezeInMenuSubsystem_RequestMode");
static_assert(sizeof(VFreezeInMenuSubsystem_RequestMode) == 0x000001, "Wrong size on VFreezeInMenuSubsystem_RequestMode");
static_assert(offsetof(VFreezeInMenuSubsystem_RequestMode, NewMode) == 0x000000, "Member 'VFreezeInMenuSubsystem_RequestMode::NewMode' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.SetMode
// 0x0001 (0x0001 - 0x0000)
struct VFreezeInMenuSubsystem_SetMode final
{
public:
	EVFreezeSubsystemMode                         NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFreezeInMenuSubsystem_SetMode) == 0x000001, "Wrong alignment on VFreezeInMenuSubsystem_SetMode");
static_assert(sizeof(VFreezeInMenuSubsystem_SetMode) == 0x000001, "Wrong size on VFreezeInMenuSubsystem_SetMode");
static_assert(offsetof(VFreezeInMenuSubsystem_SetMode, NewMode) == 0x000000, "Member 'VFreezeInMenuSubsystem_SetMode::NewMode' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.SpareActorFromFreeze
// 0x0008 (0x0008 - 0x0000)
struct VFreezeInMenuSubsystem_SpareActorFromFreeze final
{
public:
	class AActor*                                 ActorToAffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFreezeInMenuSubsystem_SpareActorFromFreeze) == 0x000008, "Wrong alignment on VFreezeInMenuSubsystem_SpareActorFromFreeze");
static_assert(sizeof(VFreezeInMenuSubsystem_SpareActorFromFreeze) == 0x000008, "Wrong size on VFreezeInMenuSubsystem_SpareActorFromFreeze");
static_assert(offsetof(VFreezeInMenuSubsystem_SpareActorFromFreeze, ActorToAffect) == 0x000000, "Member 'VFreezeInMenuSubsystem_SpareActorFromFreeze::ActorToAffect' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.UnFreeze
// 0x000C (0x000C - 0x0000)
struct VFreezeInMenuSubsystem_UnFreeze final
{
public:
	class FName                                   FreezeName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUnfreezeOblivion;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VFreezeInMenuSubsystem_UnFreeze) == 0x000004, "Wrong alignment on VFreezeInMenuSubsystem_UnFreeze");
static_assert(sizeof(VFreezeInMenuSubsystem_UnFreeze) == 0x00000C, "Wrong size on VFreezeInMenuSubsystem_UnFreeze");
static_assert(offsetof(VFreezeInMenuSubsystem_UnFreeze, FreezeName) == 0x000000, "Member 'VFreezeInMenuSubsystem_UnFreeze::FreezeName' has a wrong offset!");
static_assert(offsetof(VFreezeInMenuSubsystem_UnFreeze, bShouldUnfreezeOblivion) == 0x000008, "Member 'VFreezeInMenuSubsystem_UnFreeze::bShouldUnfreezeOblivion' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.GetCurrentFreezeName
// 0x0008 (0x0008 - 0x0000)
struct VFreezeInMenuSubsystem_GetCurrentFreezeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFreezeInMenuSubsystem_GetCurrentFreezeName) == 0x000004, "Wrong alignment on VFreezeInMenuSubsystem_GetCurrentFreezeName");
static_assert(sizeof(VFreezeInMenuSubsystem_GetCurrentFreezeName) == 0x000008, "Wrong size on VFreezeInMenuSubsystem_GetCurrentFreezeName");
static_assert(offsetof(VFreezeInMenuSubsystem_GetCurrentFreezeName, ReturnValue) == 0x000000, "Member 'VFreezeInMenuSubsystem_GetCurrentFreezeName::ReturnValue' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.GetMode
// 0x0001 (0x0001 - 0x0000)
struct VFreezeInMenuSubsystem_GetMode final
{
public:
	EVFreezeSubsystemMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFreezeInMenuSubsystem_GetMode) == 0x000001, "Wrong alignment on VFreezeInMenuSubsystem_GetMode");
static_assert(sizeof(VFreezeInMenuSubsystem_GetMode) == 0x000001, "Wrong size on VFreezeInMenuSubsystem_GetMode");
static_assert(offsetof(VFreezeInMenuSubsystem_GetMode, ReturnValue) == 0x000000, "Member 'VFreezeInMenuSubsystem_GetMode::ReturnValue' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.IsActorFrozen
// 0x0010 (0x0010 - 0x0000)
struct VFreezeInMenuSubsystem_IsActorFrozen final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VFreezeInMenuSubsystem_IsActorFrozen) == 0x000008, "Wrong alignment on VFreezeInMenuSubsystem_IsActorFrozen");
static_assert(sizeof(VFreezeInMenuSubsystem_IsActorFrozen) == 0x000010, "Wrong size on VFreezeInMenuSubsystem_IsActorFrozen");
static_assert(offsetof(VFreezeInMenuSubsystem_IsActorFrozen, Actor) == 0x000000, "Member 'VFreezeInMenuSubsystem_IsActorFrozen::Actor' has a wrong offset!");
static_assert(offsetof(VFreezeInMenuSubsystem_IsActorFrozen, ReturnValue) == 0x000008, "Member 'VFreezeInMenuSubsystem_IsActorFrozen::ReturnValue' has a wrong offset!");

// Function Altar.VFreezeInMenuSubsystem.IsFreezing
// 0x0001 (0x0001 - 0x0000)
struct VFreezeInMenuSubsystem_IsFreezing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VFreezeInMenuSubsystem_IsFreezing) == 0x000001, "Wrong alignment on VFreezeInMenuSubsystem_IsFreezing");
static_assert(sizeof(VFreezeInMenuSubsystem_IsFreezing) == 0x000001, "Wrong size on VFreezeInMenuSubsystem_IsFreezing");
static_assert(offsetof(VFreezeInMenuSubsystem_IsFreezing, ReturnValue) == 0x000000, "Member 'VFreezeInMenuSubsystem_IsFreezing::ReturnValue' has a wrong offset!");

// Function Altar.VGameplayTagOverlapComponent.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct VGameplayTagOverlapComponent_OnActorBeginOverlap final
{
public:
	const class AActor*                           OverlappedActor;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OtherActor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayTagOverlapComponent_OnActorBeginOverlap) == 0x000008, "Wrong alignment on VGameplayTagOverlapComponent_OnActorBeginOverlap");
static_assert(sizeof(VGameplayTagOverlapComponent_OnActorBeginOverlap) == 0x000010, "Wrong size on VGameplayTagOverlapComponent_OnActorBeginOverlap");
static_assert(offsetof(VGameplayTagOverlapComponent_OnActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'VGameplayTagOverlapComponent_OnActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(VGameplayTagOverlapComponent_OnActorBeginOverlap, OtherActor) == 0x000008, "Member 'VGameplayTagOverlapComponent_OnActorBeginOverlap::OtherActor' has a wrong offset!");

// Function Altar.VGameplayTagOverlapComponent.OnActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct VGameplayTagOverlapComponent_OnActorEndOverlap final
{
public:
	const class AActor*                           OverlappedActor;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OtherActor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGameplayTagOverlapComponent_OnActorEndOverlap) == 0x000008, "Wrong alignment on VGameplayTagOverlapComponent_OnActorEndOverlap");
static_assert(sizeof(VGameplayTagOverlapComponent_OnActorEndOverlap) == 0x000010, "Wrong size on VGameplayTagOverlapComponent_OnActorEndOverlap");
static_assert(offsetof(VGameplayTagOverlapComponent_OnActorEndOverlap, OverlappedActor) == 0x000000, "Member 'VGameplayTagOverlapComponent_OnActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(VGameplayTagOverlapComponent_OnActorEndOverlap, OtherActor) == 0x000008, "Member 'VGameplayTagOverlapComponent_OnActorEndOverlap::OtherActor' has a wrong offset!");

// Function Altar.VGamertagViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VGamertagViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGamertagViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VGamertagViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VGamertagViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VGamertagViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VGamertagViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VGamertagViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VGenericMenuViewModel.RegisterSendClickedButton
// 0x0004 (0x0004 - 0x0000)
struct VGenericMenuViewModel_RegisterSendClickedButton final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGenericMenuViewModel_RegisterSendClickedButton) == 0x000004, "Wrong alignment on VGenericMenuViewModel_RegisterSendClickedButton");
static_assert(sizeof(VGenericMenuViewModel_RegisterSendClickedButton) == 0x000004, "Wrong size on VGenericMenuViewModel_RegisterSendClickedButton");
static_assert(offsetof(VGenericMenuViewModel_RegisterSendClickedButton, Value) == 0x000000, "Member 'VGenericMenuViewModel_RegisterSendClickedButton::Value' has a wrong offset!");

// Function Altar.VGenericMenuViewModel.SetProperties
// 0x00A8 (0x00A8 - 0x0000)
struct VGenericMenuViewModel_SetProperties final
{
public:
	struct FLegacyQuestAddedProperties            NewProperties;                                     // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGenericMenuViewModel_SetProperties) == 0x000008, "Wrong alignment on VGenericMenuViewModel_SetProperties");
static_assert(sizeof(VGenericMenuViewModel_SetProperties) == 0x0000A8, "Wrong size on VGenericMenuViewModel_SetProperties");
static_assert(offsetof(VGenericMenuViewModel_SetProperties, NewProperties) == 0x000000, "Member 'VGenericMenuViewModel_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VGenericMenuViewModel.GetProperties
// 0x00A8 (0x00A8 - 0x0000)
struct VGenericMenuViewModel_GetProperties final
{
public:
	struct FLegacyQuestAddedProperties            ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGenericMenuViewModel_GetProperties) == 0x000008, "Wrong alignment on VGenericMenuViewModel_GetProperties");
static_assert(sizeof(VGenericMenuViewModel_GetProperties) == 0x0000A8, "Wrong size on VGenericMenuViewModel_GetProperties");
static_assert(offsetof(VGenericMenuViewModel_GetProperties, ReturnValue) == 0x000000, "Member 'VGenericMenuViewModel_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VGenericMenuViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VGenericMenuViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGenericMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VGenericMenuViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VGenericMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VGenericMenuViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VGenericMenuViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VGenericMenuViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VGrabArmComponent.GetTargetRotation
// 0x0018 (0x0018 - 0x0000)
struct VGrabArmComponent_GetTargetRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGrabArmComponent_GetTargetRotation) == 0x000008, "Wrong alignment on VGrabArmComponent_GetTargetRotation");
static_assert(sizeof(VGrabArmComponent_GetTargetRotation) == 0x000018, "Wrong size on VGrabArmComponent_GetTargetRotation");
static_assert(offsetof(VGrabArmComponent_GetTargetRotation, ReturnValue) == 0x000000, "Member 'VGrabArmComponent_GetTargetRotation::ReturnValue' has a wrong offset!");

// Function Altar.VGrabArmComponent.GetUnfixedGrabAnchorPosition
// 0x0018 (0x0018 - 0x0000)
struct VGrabArmComponent_GetUnfixedGrabAnchorPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGrabArmComponent_GetUnfixedGrabAnchorPosition) == 0x000008, "Wrong alignment on VGrabArmComponent_GetUnfixedGrabAnchorPosition");
static_assert(sizeof(VGrabArmComponent_GetUnfixedGrabAnchorPosition) == 0x000018, "Wrong size on VGrabArmComponent_GetUnfixedGrabAnchorPosition");
static_assert(offsetof(VGrabArmComponent_GetUnfixedGrabAnchorPosition, ReturnValue) == 0x000000, "Member 'VGrabArmComponent_GetUnfixedGrabAnchorPosition::ReturnValue' has a wrong offset!");

// Function Altar.VGrabArmComponent.IsCollisionFixApplied
// 0x0001 (0x0001 - 0x0000)
struct VGrabArmComponent_IsCollisionFixApplied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGrabArmComponent_IsCollisionFixApplied) == 0x000001, "Wrong alignment on VGrabArmComponent_IsCollisionFixApplied");
static_assert(sizeof(VGrabArmComponent_IsCollisionFixApplied) == 0x000001, "Wrong size on VGrabArmComponent_IsCollisionFixApplied");
static_assert(offsetof(VGrabArmComponent_IsCollisionFixApplied, ReturnValue) == 0x000000, "Member 'VGrabArmComponent_IsCollisionFixApplied::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionHorseAnimInstance.IsInTrot
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionHorseAnimInstance_IsInTrot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionHorseAnimInstance_IsInTrot) == 0x000001, "Wrong alignment on VLocomotionHorseAnimInstance_IsInTrot");
static_assert(sizeof(VLocomotionHorseAnimInstance_IsInTrot) == 0x000001, "Wrong size on VLocomotionHorseAnimInstance_IsInTrot");
static_assert(offsetof(VLocomotionHorseAnimInstance_IsInTrot, ReturnValue) == 0x000000, "Member 'VLocomotionHorseAnimInstance_IsInTrot::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionHorseAnimInstance.IsMovingBackward
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionHorseAnimInstance_IsMovingBackward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionHorseAnimInstance_IsMovingBackward) == 0x000001, "Wrong alignment on VLocomotionHorseAnimInstance_IsMovingBackward");
static_assert(sizeof(VLocomotionHorseAnimInstance_IsMovingBackward) == 0x000001, "Wrong size on VLocomotionHorseAnimInstance_IsMovingBackward");
static_assert(offsetof(VLocomotionHorseAnimInstance_IsMovingBackward, ReturnValue) == 0x000000, "Member 'VLocomotionHorseAnimInstance_IsMovingBackward::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionHorseAnimInstance.IsMovingForward
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionHorseAnimInstance_IsMovingForward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionHorseAnimInstance_IsMovingForward) == 0x000001, "Wrong alignment on VLocomotionHorseAnimInstance_IsMovingForward");
static_assert(sizeof(VLocomotionHorseAnimInstance_IsMovingForward) == 0x000001, "Wrong size on VLocomotionHorseAnimInstance_IsMovingForward");
static_assert(offsetof(VLocomotionHorseAnimInstance_IsMovingForward, ReturnValue) == 0x000000, "Member 'VLocomotionHorseAnimInstance_IsMovingForward::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionHorseAnimInstance.IsWalking
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionHorseAnimInstance_IsWalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionHorseAnimInstance_IsWalking) == 0x000001, "Wrong alignment on VLocomotionHorseAnimInstance_IsWalking");
static_assert(sizeof(VLocomotionHorseAnimInstance_IsWalking) == 0x000001, "Wrong size on VLocomotionHorseAnimInstance_IsWalking");
static_assert(offsetof(VLocomotionHorseAnimInstance_IsWalking, ReturnValue) == 0x000000, "Member 'VLocomotionHorseAnimInstance_IsWalking::ReturnValue' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.OnSpecialIdleExit
// 0x0020 (0x0020 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit) == 0x000008, "Wrong alignment on VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit) == 0x000020, "Wrong size on VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit, Context) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit::Context' has a wrong offset!");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit, Node) == 0x000010, "Member 'VGroundLocomotionHorseAnimInstance_OnSpecialIdleExit::Node' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.OnUpdateIdleState
// 0x0020 (0x0020 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_OnUpdateIdleState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_OnUpdateIdleState) == 0x000008, "Wrong alignment on VGroundLocomotionHorseAnimInstance_OnUpdateIdleState");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_OnUpdateIdleState) == 0x000020, "Wrong size on VGroundLocomotionHorseAnimInstance_OnUpdateIdleState");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_OnUpdateIdleState, Context) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_OnUpdateIdleState::Context' has a wrong offset!");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_OnUpdateIdleState, Node) == 0x000010, "Member 'VGroundLocomotionHorseAnimInstance_OnUpdateIdleState::Node' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.ProcessIdleTransitionLogic
// 0x0004 (0x0004 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic) == 0x000004, "Wrong alignment on VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic) == 0x000004, "Wrong size on VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic, DeltaTime) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_ProcessIdleTransitionLogic::DeltaTime' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.ProcessSpecialIdleTransitionLogic
// 0x0004 (0x0004 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic) == 0x000004, "Wrong alignment on VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic) == 0x000004, "Wrong size on VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic, DeltaTime) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_ProcessSpecialIdleTransitionLogic::DeltaTime' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.CanPlaySpecialIdle
// 0x0001 (0x0001 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle) == 0x000001, "Wrong alignment on VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle) == 0x000001, "Wrong size on VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle, ReturnValue) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_CanPlaySpecialIdle::ReturnValue' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.GetCurrentSpecialIdleIndex
// 0x0004 (0x0004 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex) == 0x000004, "Wrong alignment on VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex) == 0x000004, "Wrong size on VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex, ReturnValue) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_GetCurrentSpecialIdleIndex::ReturnValue' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseAnimInstance.GetLocomotionPlayRate
// 0x0004 (0x0004 - 0x0000)
struct VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate) == 0x000004, "Wrong alignment on VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate");
static_assert(sizeof(VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate) == 0x000004, "Wrong size on VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate");
static_assert(offsetof(VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate, ReturnValue) == 0x000000, "Member 'VGroundLocomotionHorseAnimInstance_GetLocomotionPlayRate::ReturnValue' has a wrong offset!");

// Function Altar.VGroundLocomotionHorseRiderAnimInstance.SetGroundLayerData
// 0x0050 (0x0050 - 0x0000)
struct VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData final
{
public:
	struct FVHorseRiderLocomotionStanding         InGroundLayerData;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData) == 0x000008, "Wrong alignment on VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData");
static_assert(sizeof(VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData) == 0x000050, "Wrong size on VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData");
static_assert(offsetof(VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData, InGroundLayerData) == 0x000000, "Member 'VGroundLocomotionHorseRiderAnimInstance_SetGroundLayerData::InGroundLayerData' has a wrong offset!");

// Function Altar.VHelpMenuViewModel.SetViewMode
// 0x0004 (0x0004 - 0x0000)
struct VHelpMenuViewModel_SetViewMode final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHelpMenuViewModel_SetViewMode) == 0x000004, "Wrong alignment on VHelpMenuViewModel_SetViewMode");
static_assert(sizeof(VHelpMenuViewModel_SetViewMode) == 0x000004, "Wrong size on VHelpMenuViewModel_SetViewMode");
static_assert(offsetof(VHelpMenuViewModel_SetViewMode, Value) == 0x000000, "Member 'VHelpMenuViewModel_SetViewMode::Value' has a wrong offset!");

// Function Altar.VHelpMenuViewModel.GetTutorialData
// 0x0008 (0x0008 - 0x0000)
struct VHelpMenuViewModel_GetTutorialData final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHelpMenuViewModel_GetTutorialData) == 0x000008, "Wrong alignment on VHelpMenuViewModel_GetTutorialData");
static_assert(sizeof(VHelpMenuViewModel_GetTutorialData) == 0x000008, "Wrong size on VHelpMenuViewModel_GetTutorialData");
static_assert(offsetof(VHelpMenuViewModel_GetTutorialData, ReturnValue) == 0x000000, "Member 'VHelpMenuViewModel_GetTutorialData::ReturnValue' has a wrong offset!");

// Function Altar.VHelpMenuViewModel.GetViewMode
// 0x0004 (0x0004 - 0x0000)
struct VHelpMenuViewModel_GetViewMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHelpMenuViewModel_GetViewMode) == 0x000004, "Wrong alignment on VHelpMenuViewModel_GetViewMode");
static_assert(sizeof(VHelpMenuViewModel_GetViewMode) == 0x000004, "Wrong size on VHelpMenuViewModel_GetViewMode");
static_assert(offsetof(VHelpMenuViewModel_GetViewMode, ReturnValue) == 0x000000, "Member 'VHelpMenuViewModel_GetViewMode::ReturnValue' has a wrong offset!");

// Function Altar.VHitReactionKeyframeAnimInstance.ShouldPlayHitReaction
// 0x0001 (0x0001 - 0x0000)
struct VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction) == 0x000001, "Wrong alignment on VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction");
static_assert(sizeof(VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction) == 0x000001, "Wrong size on VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction");
static_assert(offsetof(VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction, ReturnValue) == 0x000000, "Member 'VHitReactionKeyframeAnimInstance_ShouldPlayHitReaction::ReturnValue' has a wrong offset!");

// Function Altar.VHitReactionProceduralAnimInstance.InitHitReaction
// 0x0028 (0x0028 - 0x0000)
struct VHitReactionProceduralAnimInstance_InitHitReaction final
{
public:
	class FName                                   HitBoneName;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsArrow;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPowerAttack;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpell;                                          // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHitReactionProceduralAnimInstance_InitHitReaction) == 0x000008, "Wrong alignment on VHitReactionProceduralAnimInstance_InitHitReaction");
static_assert(sizeof(VHitReactionProceduralAnimInstance_InitHitReaction) == 0x000028, "Wrong size on VHitReactionProceduralAnimInstance_InitHitReaction");
static_assert(offsetof(VHitReactionProceduralAnimInstance_InitHitReaction, HitBoneName) == 0x000000, "Member 'VHitReactionProceduralAnimInstance_InitHitReaction::HitBoneName' has a wrong offset!");
static_assert(offsetof(VHitReactionProceduralAnimInstance_InitHitReaction, HitDirection) == 0x000008, "Member 'VHitReactionProceduralAnimInstance_InitHitReaction::HitDirection' has a wrong offset!");
static_assert(offsetof(VHitReactionProceduralAnimInstance_InitHitReaction, bIsArrow) == 0x000020, "Member 'VHitReactionProceduralAnimInstance_InitHitReaction::bIsArrow' has a wrong offset!");
static_assert(offsetof(VHitReactionProceduralAnimInstance_InitHitReaction, bIsPowerAttack) == 0x000021, "Member 'VHitReactionProceduralAnimInstance_InitHitReaction::bIsPowerAttack' has a wrong offset!");
static_assert(offsetof(VHitReactionProceduralAnimInstance_InitHitReaction, bIsSpell) == 0x000022, "Member 'VHitReactionProceduralAnimInstance_InitHitReaction::bIsSpell' has a wrong offset!");

// Function Altar.VHitReactionProceduralAnimInstance.OnHitReaction
// 0x0048 (0x0048 - 0x0000)
struct VHitReactionProceduralAnimInstance_OnHitReaction final
{
public:
	struct FVHitReactEvent                        HitReactEvent;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHitReactionProceduralAnimInstance_OnHitReaction) == 0x000008, "Wrong alignment on VHitReactionProceduralAnimInstance_OnHitReaction");
static_assert(sizeof(VHitReactionProceduralAnimInstance_OnHitReaction) == 0x000048, "Wrong size on VHitReactionProceduralAnimInstance_OnHitReaction");
static_assert(offsetof(VHitReactionProceduralAnimInstance_OnHitReaction, HitReactEvent) == 0x000000, "Member 'VHitReactionProceduralAnimInstance_OnHitReaction::HitReactEvent' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.DoSpecialJump
// 0x000C (0x000C - 0x0000)
struct VPairedPawnMovementComponent_DoSpecialJump final
{
public:
	float                                         JumpHeightMultiplier;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalVelocityMultiplier;                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawnMovementComponent_DoSpecialJump) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_DoSpecialJump");
static_assert(sizeof(VPairedPawnMovementComponent_DoSpecialJump) == 0x00000C, "Wrong size on VPairedPawnMovementComponent_DoSpecialJump");
static_assert(offsetof(VPairedPawnMovementComponent_DoSpecialJump, JumpHeightMultiplier) == 0x000000, "Member 'VPairedPawnMovementComponent_DoSpecialJump::JumpHeightMultiplier' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_DoSpecialJump, HorizontalVelocityMultiplier) == 0x000004, "Member 'VPairedPawnMovementComponent_DoSpecialJump::HorizontalVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_DoSpecialJump, ReturnValue) == 0x000008, "Member 'VPairedPawnMovementComponent_DoSpecialJump::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsRunning) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsRunning");
static_assert(sizeof(VPairedPawnMovementComponent_IsRunning) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsRunning");
static_assert(offsetof(VPairedPawnMovementComponent_IsRunning, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsRunning::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.OnHitFromSimulatingActor
// 0x0118 (0x0118 - 0x0000)
struct VPairedPawnMovementComponent_OnHitFromSimulatingActor final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_OnHitFromSimulatingActor) == 0x000008, "Wrong alignment on VPairedPawnMovementComponent_OnHitFromSimulatingActor");
static_assert(sizeof(VPairedPawnMovementComponent_OnHitFromSimulatingActor) == 0x000118, "Wrong size on VPairedPawnMovementComponent_OnHitFromSimulatingActor");
static_assert(offsetof(VPairedPawnMovementComponent_OnHitFromSimulatingActor, HitComponent) == 0x000000, "Member 'VPairedPawnMovementComponent_OnHitFromSimulatingActor::HitComponent' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnHitFromSimulatingActor, OtherActor) == 0x000008, "Member 'VPairedPawnMovementComponent_OnHitFromSimulatingActor::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnHitFromSimulatingActor, OtherComp) == 0x000010, "Member 'VPairedPawnMovementComponent_OnHitFromSimulatingActor::OtherComp' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnHitFromSimulatingActor, NormalImpulse) == 0x000018, "Member 'VPairedPawnMovementComponent_OnHitFromSimulatingActor::NormalImpulse' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnHitFromSimulatingActor, Hit) == 0x000030, "Member 'VPairedPawnMovementComponent_OnHitFromSimulatingActor::Hit' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.OnPawnOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct VPairedPawnMovementComponent_OnPawnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_OnPawnOverlapBegin) == 0x000008, "Wrong alignment on VPairedPawnMovementComponent_OnPawnOverlapBegin");
static_assert(sizeof(VPairedPawnMovementComponent_OnPawnOverlapBegin) == 0x000108, "Wrong size on VPairedPawnMovementComponent_OnPawnOverlapBegin");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'VPairedPawnMovementComponent_OnPawnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapBegin, OtherActor) == 0x000008, "Member 'VPairedPawnMovementComponent_OnPawnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapBegin, OtherComp) == 0x000010, "Member 'VPairedPawnMovementComponent_OnPawnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'VPairedPawnMovementComponent_OnPawnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapBegin, bFromSweep) == 0x00001C, "Member 'VPairedPawnMovementComponent_OnPawnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapBegin, SweepResult) == 0x000020, "Member 'VPairedPawnMovementComponent_OnPawnOverlapBegin::SweepResult' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.OnPawnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct VPairedPawnMovementComponent_OnPawnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedPawnMovementComponent_OnPawnOverlapEnd) == 0x000008, "Wrong alignment on VPairedPawnMovementComponent_OnPawnOverlapEnd");
static_assert(sizeof(VPairedPawnMovementComponent_OnPawnOverlapEnd) == 0x000020, "Wrong size on VPairedPawnMovementComponent_OnPawnOverlapEnd");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'VPairedPawnMovementComponent_OnPawnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapEnd, OtherActor) == 0x000008, "Member 'VPairedPawnMovementComponent_OnPawnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapEnd, OtherComp) == 0x000010, "Member 'VPairedPawnMovementComponent_OnPawnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(VPairedPawnMovementComponent_OnPawnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'VPairedPawnMovementComponent_OnPawnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetAllowWaterWalking
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_SetAllowWaterWalking final
{
public:
	bool                                          bNewAllowWaterWalking;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetAllowWaterWalking) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_SetAllowWaterWalking");
static_assert(sizeof(VPairedPawnMovementComponent_SetAllowWaterWalking) == 0x000001, "Wrong size on VPairedPawnMovementComponent_SetAllowWaterWalking");
static_assert(offsetof(VPairedPawnMovementComponent_SetAllowWaterWalking, bNewAllowWaterWalking) == 0x000000, "Member 'VPairedPawnMovementComponent_SetAllowWaterWalking::bNewAllowWaterWalking' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetGlobalSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_SetGlobalSpeedMultiplier final
{
public:
	float                                         NewMultiplier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetGlobalSpeedMultiplier) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_SetGlobalSpeedMultiplier");
static_assert(sizeof(VPairedPawnMovementComponent_SetGlobalSpeedMultiplier) == 0x000004, "Wrong size on VPairedPawnMovementComponent_SetGlobalSpeedMultiplier");
static_assert(offsetof(VPairedPawnMovementComponent_SetGlobalSpeedMultiplier, NewMultiplier) == 0x000000, "Member 'VPairedPawnMovementComponent_SetGlobalSpeedMultiplier::NewMultiplier' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetIsMovementLocked
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_SetIsMovementLocked final
{
public:
	bool                                          LockMovement;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetIsMovementLocked) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_SetIsMovementLocked");
static_assert(sizeof(VPairedPawnMovementComponent_SetIsMovementLocked) == 0x000001, "Wrong size on VPairedPawnMovementComponent_SetIsMovementLocked");
static_assert(offsetof(VPairedPawnMovementComponent_SetIsMovementLocked, LockMovement) == 0x000000, "Member 'VPairedPawnMovementComponent_SetIsMovementLocked::LockMovement' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetOffsetMovementInput
// 0x0018 (0x0018 - 0x0000)
struct VPairedPawnMovementComponent_SetOffsetMovementInput final
{
public:
	struct FVector                                NewOverrideMoveInput;                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetOffsetMovementInput) == 0x000008, "Wrong alignment on VPairedPawnMovementComponent_SetOffsetMovementInput");
static_assert(sizeof(VPairedPawnMovementComponent_SetOffsetMovementInput) == 0x000018, "Wrong size on VPairedPawnMovementComponent_SetOffsetMovementInput");
static_assert(offsetof(VPairedPawnMovementComponent_SetOffsetMovementInput, NewOverrideMoveInput) == 0x000000, "Member 'VPairedPawnMovementComponent_SetOffsetMovementInput::NewOverrideMoveInput' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetOverrideMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_SetOverrideMaxSpeed final
{
public:
	float                                         fNewOverrideMaxSpeed;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetOverrideMaxSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_SetOverrideMaxSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_SetOverrideMaxSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_SetOverrideMaxSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_SetOverrideMaxSpeed, fNewOverrideMaxSpeed) == 0x000000, "Member 'VPairedPawnMovementComponent_SetOverrideMaxSpeed::fNewOverrideMaxSpeed' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetPreventSwimming
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_SetPreventSwimming final
{
public:
	bool                                          bNeverSwim;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetPreventSwimming) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_SetPreventSwimming");
static_assert(sizeof(VPairedPawnMovementComponent_SetPreventSwimming) == 0x000001, "Wrong size on VPairedPawnMovementComponent_SetPreventSwimming");
static_assert(offsetof(VPairedPawnMovementComponent_SetPreventSwimming, bNeverSwim) == 0x000000, "Member 'VPairedPawnMovementComponent_SetPreventSwimming::bNeverSwim' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.SetUseControllerRotation
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_SetUseControllerRotation final
{
public:
	bool                                          bUseControllerRotation;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_SetUseControllerRotation) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_SetUseControllerRotation");
static_assert(sizeof(VPairedPawnMovementComponent_SetUseControllerRotation) == 0x000001, "Wrong size on VPairedPawnMovementComponent_SetUseControllerRotation");
static_assert(offsetof(VPairedPawnMovementComponent_SetUseControllerRotation, bUseControllerRotation) == 0x000000, "Member 'VPairedPawnMovementComponent_SetUseControllerRotation::bUseControllerRotation' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.CanAcrobaticWaterJump
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_CanAcrobaticWaterJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_CanAcrobaticWaterJump) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_CanAcrobaticWaterJump");
static_assert(sizeof(VPairedPawnMovementComponent_CanAcrobaticWaterJump) == 0x000001, "Wrong size on VPairedPawnMovementComponent_CanAcrobaticWaterJump");
static_assert(offsetof(VPairedPawnMovementComponent_CanAcrobaticWaterJump, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_CanAcrobaticWaterJump::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.CanJumpOutOfWater
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_CanJumpOutOfWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_CanJumpOutOfWater) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_CanJumpOutOfWater");
static_assert(sizeof(VPairedPawnMovementComponent_CanJumpOutOfWater) == 0x000001, "Wrong size on VPairedPawnMovementComponent_CanJumpOutOfWater");
static_assert(offsetof(VPairedPawnMovementComponent_CanJumpOutOfWater, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_CanJumpOutOfWater::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.CanWaterWalk
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_CanWaterWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_CanWaterWalk) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_CanWaterWalk");
static_assert(sizeof(VPairedPawnMovementComponent_CanWaterWalk) == 0x000001, "Wrong size on VPairedPawnMovementComponent_CanWaterWalk");
static_assert(offsetof(VPairedPawnMovementComponent_CanWaterWalk, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_CanWaterWalk::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetCurrentGaitMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetCurrentGaitMaxSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetDistanceToUnderneathWaterPlane
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane");
static_assert(sizeof(VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane");
static_assert(offsetof(VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetDistanceToUnderneathWaterPlane::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetFallingTimer
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetFallingTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetFallingTimer) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetFallingTimer");
static_assert(sizeof(VPairedPawnMovementComponent_GetFallingTimer) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetFallingTimer");
static_assert(offsetof(VPairedPawnMovementComponent_GetFallingTimer, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetFallingTimer::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetGlobalSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetGlobalSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetGlobalSpeedMultiplier) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetGlobalSpeedMultiplier");
static_assert(sizeof(VPairedPawnMovementComponent_GetGlobalSpeedMultiplier) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetGlobalSpeedMultiplier");
static_assert(offsetof(VPairedPawnMovementComponent_GetGlobalSpeedMultiplier, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetGlobalSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetImmersionDepth
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetImmersionDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetImmersionDepth) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetImmersionDepth");
static_assert(sizeof(VPairedPawnMovementComponent_GetImmersionDepth) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetImmersionDepth");
static_assert(offsetof(VPairedPawnMovementComponent_GetImmersionDepth, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetImmersionDepth::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetIsSwimming
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_GetIsSwimming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetIsSwimming) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_GetIsSwimming");
static_assert(sizeof(VPairedPawnMovementComponent_GetIsSwimming) == 0x000001, "Wrong size on VPairedPawnMovementComponent_GetIsSwimming");
static_assert(offsetof(VPairedPawnMovementComponent_GetIsSwimming, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetIsSwimming::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMaxFlySpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetMaxFlySpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMaxFlySpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetMaxFlySpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetMaxFlySpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetMaxFlySpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetMaxFlySpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMaxFlySpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMaxGroundRunSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetMaxGroundRunSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMaxGroundRunSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetMaxGroundRunSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetMaxGroundRunSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetMaxGroundRunSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetMaxGroundRunSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMaxGroundRunSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMaxGroundSprintSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetMaxGroundSprintSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMaxGroundSprintSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetMaxGroundSprintSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetMaxGroundSprintSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetMaxGroundSprintSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetMaxGroundSprintSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMaxGroundSprintSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMaxGroundWalkSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetMaxGroundWalkSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMaxGroundWalkSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetMaxGroundWalkSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetMaxGroundWalkSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetMaxGroundWalkSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetMaxGroundWalkSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMaxGroundWalkSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMaxSwimRunSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetMaxSwimRunSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMaxSwimRunSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetMaxSwimRunSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetMaxSwimRunSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetMaxSwimRunSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetMaxSwimRunSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMaxSwimRunSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMaxSwimWalkSpeed
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnMovementComponent_GetMaxSwimWalkSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMaxSwimWalkSpeed) == 0x000004, "Wrong alignment on VPairedPawnMovementComponent_GetMaxSwimWalkSpeed");
static_assert(sizeof(VPairedPawnMovementComponent_GetMaxSwimWalkSpeed) == 0x000004, "Wrong size on VPairedPawnMovementComponent_GetMaxSwimWalkSpeed");
static_assert(offsetof(VPairedPawnMovementComponent_GetMaxSwimWalkSpeed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMaxSwimWalkSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.GetMovementDirection
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_GetMovementDirection final
{
public:
	EVMoveDirection                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_GetMovementDirection) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_GetMovementDirection");
static_assert(sizeof(VPairedPawnMovementComponent_GetMovementDirection) == 0x000001, "Wrong size on VPairedPawnMovementComponent_GetMovementDirection");
static_assert(offsetof(VPairedPawnMovementComponent_GetMovementDirection, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_GetMovementDirection::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsAboveWater
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsAboveWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsAboveWater) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsAboveWater");
static_assert(sizeof(VPairedPawnMovementComponent_IsAboveWater) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsAboveWater");
static_assert(offsetof(VPairedPawnMovementComponent_IsAboveWater, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsAboveWater::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsInSprintRegenDelay
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsInSprintRegenDelay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsInSprintRegenDelay) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsInSprintRegenDelay");
static_assert(sizeof(VPairedPawnMovementComponent_IsInSprintRegenDelay) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsInSprintRegenDelay");
static_assert(offsetof(VPairedPawnMovementComponent_IsInSprintRegenDelay, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsInSprintRegenDelay::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsMovementLocked
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsMovementLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsMovementLocked) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsMovementLocked");
static_assert(sizeof(VPairedPawnMovementComponent_IsMovementLocked) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsMovementLocked");
static_assert(offsetof(VPairedPawnMovementComponent_IsMovementLocked, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsMovementLocked::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsSprinting) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsSprinting");
static_assert(sizeof(VPairedPawnMovementComponent_IsSprinting) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsSprinting");
static_assert(offsetof(VPairedPawnMovementComponent_IsSprinting, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsSprinting::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsTouchingWater
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsTouchingWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsTouchingWater) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsTouchingWater");
static_assert(sizeof(VPairedPawnMovementComponent_IsTouchingWater) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsTouchingWater");
static_assert(offsetof(VPairedPawnMovementComponent_IsTouchingWater, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsTouchingWater::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsWaterWalking
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsWaterWalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsWaterWalking) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsWaterWalking");
static_assert(sizeof(VPairedPawnMovementComponent_IsWaterWalking) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsWaterWalking");
static_assert(offsetof(VPairedPawnMovementComponent_IsWaterWalking, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsWaterWalking::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnMovementComponent.IsWaterWalkingAllowed
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnMovementComponent_IsWaterWalkingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnMovementComponent_IsWaterWalkingAllowed) == 0x000001, "Wrong alignment on VPairedPawnMovementComponent_IsWaterWalkingAllowed");
static_assert(sizeof(VPairedPawnMovementComponent_IsWaterWalkingAllowed) == 0x000001, "Wrong size on VPairedPawnMovementComponent_IsWaterWalkingAllowed");
static_assert(offsetof(VPairedPawnMovementComponent_IsWaterWalkingAllowed, ReturnValue) == 0x000000, "Member 'VPairedPawnMovementComponent_IsWaterWalkingAllowed::ReturnValue' has a wrong offset!");

// Function Altar.VHorseMovementComponent.GetMaxGroundTrotSpeed
// 0x0004 (0x0004 - 0x0000)
struct VHorseMovementComponent_GetMaxGroundTrotSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHorseMovementComponent_GetMaxGroundTrotSpeed) == 0x000004, "Wrong alignment on VHorseMovementComponent_GetMaxGroundTrotSpeed");
static_assert(sizeof(VHorseMovementComponent_GetMaxGroundTrotSpeed) == 0x000004, "Wrong size on VHorseMovementComponent_GetMaxGroundTrotSpeed");
static_assert(offsetof(VHorseMovementComponent_GetMaxGroundTrotSpeed, ReturnValue) == 0x000000, "Member 'VHorseMovementComponent_GetMaxGroundTrotSpeed::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCreatureAnimInstance.OnNotTurnUpdate
// 0x0020 (0x0020 - 0x0000)
struct VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate) == 0x000008, "Wrong alignment on VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate");
static_assert(sizeof(VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate) == 0x000020, "Wrong size on VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate, Context) == 0x000000, "Member 'VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate::Context' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate, Node) == 0x000010, "Member 'VTurnInPlaceCreatureAnimInstance_OnNotTurnUpdate::Node' has a wrong offset!");

// Function Altar.VTurnInPlaceCreatureAnimInstance.OnTurnEnd
// 0x0020 (0x0020 - 0x0000)
struct VTurnInPlaceCreatureAnimInstance_OnTurnEnd final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCreatureAnimInstance_OnTurnEnd) == 0x000008, "Wrong alignment on VTurnInPlaceCreatureAnimInstance_OnTurnEnd");
static_assert(sizeof(VTurnInPlaceCreatureAnimInstance_OnTurnEnd) == 0x000020, "Wrong size on VTurnInPlaceCreatureAnimInstance_OnTurnEnd");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnTurnEnd, Context) == 0x000000, "Member 'VTurnInPlaceCreatureAnimInstance_OnTurnEnd::Context' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnTurnEnd, Node) == 0x000010, "Member 'VTurnInPlaceCreatureAnimInstance_OnTurnEnd::Node' has a wrong offset!");

// Function Altar.VTurnInPlaceCreatureAnimInstance.OnTurnStart
// 0x0020 (0x0020 - 0x0000)
struct VTurnInPlaceCreatureAnimInstance_OnTurnStart final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCreatureAnimInstance_OnTurnStart) == 0x000008, "Wrong alignment on VTurnInPlaceCreatureAnimInstance_OnTurnStart");
static_assert(sizeof(VTurnInPlaceCreatureAnimInstance_OnTurnStart) == 0x000020, "Wrong size on VTurnInPlaceCreatureAnimInstance_OnTurnStart");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnTurnStart, Context) == 0x000000, "Member 'VTurnInPlaceCreatureAnimInstance_OnTurnStart::Context' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnTurnStart, Node) == 0x000010, "Member 'VTurnInPlaceCreatureAnimInstance_OnTurnStart::Node' has a wrong offset!");

// Function Altar.VTurnInPlaceCreatureAnimInstance.OnTurnUpdate
// 0x0020 (0x0020 - 0x0000)
struct VTurnInPlaceCreatureAnimInstance_OnTurnUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCreatureAnimInstance_OnTurnUpdate) == 0x000008, "Wrong alignment on VTurnInPlaceCreatureAnimInstance_OnTurnUpdate");
static_assert(sizeof(VTurnInPlaceCreatureAnimInstance_OnTurnUpdate) == 0x000020, "Wrong size on VTurnInPlaceCreatureAnimInstance_OnTurnUpdate");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnTurnUpdate, Context) == 0x000000, "Member 'VTurnInPlaceCreatureAnimInstance_OnTurnUpdate::Context' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCreatureAnimInstance_OnTurnUpdate, Node) == 0x000010, "Member 'VTurnInPlaceCreatureAnimInstance_OnTurnUpdate::Node' has a wrong offset!");

// Function Altar.VHUDBreathViewModel.SetBreathPercentage
// 0x0004 (0x0004 - 0x0000)
struct VHUDBreathViewModel_SetBreathPercentage final
{
public:
	float                                         NewBreathPercentage;                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDBreathViewModel_SetBreathPercentage) == 0x000004, "Wrong alignment on VHUDBreathViewModel_SetBreathPercentage");
static_assert(sizeof(VHUDBreathViewModel_SetBreathPercentage) == 0x000004, "Wrong size on VHUDBreathViewModel_SetBreathPercentage");
static_assert(offsetof(VHUDBreathViewModel_SetBreathPercentage, NewBreathPercentage) == 0x000000, "Member 'VHUDBreathViewModel_SetBreathPercentage::NewBreathPercentage' has a wrong offset!");

// Function Altar.VHUDBreathViewModel.GetBreathPercentage
// 0x0004 (0x0004 - 0x0000)
struct VHUDBreathViewModel_GetBreathPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDBreathViewModel_GetBreathPercentage) == 0x000004, "Wrong alignment on VHUDBreathViewModel_GetBreathPercentage");
static_assert(sizeof(VHUDBreathViewModel_GetBreathPercentage) == 0x000004, "Wrong size on VHUDBreathViewModel_GetBreathPercentage");
static_assert(offsetof(VHUDBreathViewModel_GetBreathPercentage, ReturnValue) == 0x000000, "Member 'VHUDBreathViewModel_GetBreathPercentage::ReturnValue' has a wrong offset!");

// Function Altar.VHUDBreathViewModel.GetIsBreathBarBlinking
// 0x0001 (0x0001 - 0x0000)
struct VHUDBreathViewModel_GetIsBreathBarBlinking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDBreathViewModel_GetIsBreathBarBlinking) == 0x000001, "Wrong alignment on VHUDBreathViewModel_GetIsBreathBarBlinking");
static_assert(sizeof(VHUDBreathViewModel_GetIsBreathBarBlinking) == 0x000001, "Wrong size on VHUDBreathViewModel_GetIsBreathBarBlinking");
static_assert(offsetof(VHUDBreathViewModel_GetIsBreathBarBlinking, ReturnValue) == 0x000000, "Member 'VHUDBreathViewModel_GetIsBreathBarBlinking::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.CheckForNewArea
// 0x0020 (0x0020 - 0x0000)
struct VHUDMainViewModel_CheckForNewArea final
{
public:
	class FText                                   AreaName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHUDMainViewModel_CheckForNewArea) == 0x000008, "Wrong alignment on VHUDMainViewModel_CheckForNewArea");
static_assert(sizeof(VHUDMainViewModel_CheckForNewArea) == 0x000020, "Wrong size on VHUDMainViewModel_CheckForNewArea");
static_assert(offsetof(VHUDMainViewModel_CheckForNewArea, AreaName) == 0x000000, "Member 'VHUDMainViewModel_CheckForNewArea::AreaName' has a wrong offset!");
static_assert(offsetof(VHUDMainViewModel_CheckForNewArea, ReturnValue) == 0x000018, "Member 'VHUDMainViewModel_CheckForNewArea::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.ComputeCompassMarkerXPosition
// 0x0050 (0x0050 - 0x0000)
struct VHUDMainViewModel_ComputeCompassMarkerXPosition final
{
public:
	struct FCompassIconMarker                     CompassIconMarker;                                 // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Heading;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VHUDMainViewModel_ComputeCompassMarkerXPosition) == 0x000008, "Wrong alignment on VHUDMainViewModel_ComputeCompassMarkerXPosition");
static_assert(sizeof(VHUDMainViewModel_ComputeCompassMarkerXPosition) == 0x000050, "Wrong size on VHUDMainViewModel_ComputeCompassMarkerXPosition");
static_assert(offsetof(VHUDMainViewModel_ComputeCompassMarkerXPosition, CompassIconMarker) == 0x000000, "Member 'VHUDMainViewModel_ComputeCompassMarkerXPosition::CompassIconMarker' has a wrong offset!");
static_assert(offsetof(VHUDMainViewModel_ComputeCompassMarkerXPosition, Heading) == 0x000040, "Member 'VHUDMainViewModel_ComputeCompassMarkerXPosition::Heading' has a wrong offset!");
static_assert(offsetof(VHUDMainViewModel_ComputeCompassMarkerXPosition, Ratio) == 0x000044, "Member 'VHUDMainViewModel_ComputeCompassMarkerXPosition::Ratio' has a wrong offset!");
static_assert(offsetof(VHUDMainViewModel_ComputeCompassMarkerXPosition, ReturnValue) == 0x000048, "Member 'VHUDMainViewModel_ComputeCompassMarkerXPosition::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.ComputeRelativeMarkerXPosition
// 0x0048 (0x0048 - 0x0000)
struct VHUDMainViewModel_ComputeRelativeMarkerXPosition final
{
public:
	struct FCompassIconMarker                     CompassIconMarker;                                 // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Heading;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_ComputeRelativeMarkerXPosition) == 0x000008, "Wrong alignment on VHUDMainViewModel_ComputeRelativeMarkerXPosition");
static_assert(sizeof(VHUDMainViewModel_ComputeRelativeMarkerXPosition) == 0x000048, "Wrong size on VHUDMainViewModel_ComputeRelativeMarkerXPosition");
static_assert(offsetof(VHUDMainViewModel_ComputeRelativeMarkerXPosition, CompassIconMarker) == 0x000000, "Member 'VHUDMainViewModel_ComputeRelativeMarkerXPosition::CompassIconMarker' has a wrong offset!");
static_assert(offsetof(VHUDMainViewModel_ComputeRelativeMarkerXPosition, Heading) == 0x000040, "Member 'VHUDMainViewModel_ComputeRelativeMarkerXPosition::Heading' has a wrong offset!");
static_assert(offsetof(VHUDMainViewModel_ComputeRelativeMarkerXPosition, ReturnValue) == 0x000044, "Member 'VHUDMainViewModel_ComputeRelativeMarkerXPosition::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.SetCompassIconMarkers
// 0x0010 (0x0010 - 0x0000)
struct VHUDMainViewModel_SetCompassIconMarkers final
{
public:
	TArray<struct FCompassIconMarker>             IconMarkers;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_SetCompassIconMarkers) == 0x000008, "Wrong alignment on VHUDMainViewModel_SetCompassIconMarkers");
static_assert(sizeof(VHUDMainViewModel_SetCompassIconMarkers) == 0x000010, "Wrong size on VHUDMainViewModel_SetCompassIconMarkers");
static_assert(offsetof(VHUDMainViewModel_SetCompassIconMarkers, IconMarkers) == 0x000000, "Member 'VHUDMainViewModel_SetCompassIconMarkers::IconMarkers' has a wrong offset!");

// Function Altar.VHUDMainViewModel.SetHostileData
// 0x0010 (0x0010 - 0x0000)
struct VHUDMainViewModel_SetHostileData final
{
public:
	TArray<struct FHostileData>                   InHostileData;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_SetHostileData) == 0x000008, "Wrong alignment on VHUDMainViewModel_SetHostileData");
static_assert(sizeof(VHUDMainViewModel_SetHostileData) == 0x000010, "Wrong size on VHUDMainViewModel_SetHostileData");
static_assert(offsetof(VHUDMainViewModel_SetHostileData, InHostileData) == 0x000000, "Member 'VHUDMainViewModel_SetHostileData::InHostileData' has a wrong offset!");

// Function Altar.VHUDMainViewModel.SetIsMenuMode
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_SetIsMenuMode final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_SetIsMenuMode) == 0x000001, "Wrong alignment on VHUDMainViewModel_SetIsMenuMode");
static_assert(sizeof(VHUDMainViewModel_SetIsMenuMode) == 0x000001, "Wrong size on VHUDMainViewModel_SetIsMenuMode");
static_assert(offsetof(VHUDMainViewModel_SetIsMenuMode, bNewValue) == 0x000000, "Member 'VHUDMainViewModel_SetIsMenuMode::bNewValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetApparelData
// 0x0002 (0x0002 - 0x0000)
struct VHUDMainViewModel_GetApparelData final
{
public:
	struct FModernApparelData                     ReturnValue;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetApparelData) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetApparelData");
static_assert(sizeof(VHUDMainViewModel_GetApparelData) == 0x000002, "Wrong size on VHUDMainViewModel_GetApparelData");
static_assert(offsetof(VHUDMainViewModel_GetApparelData, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetApparelData::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetBrokenWeaponVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetBrokenWeaponVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetBrokenWeaponVisibility) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetBrokenWeaponVisibility");
static_assert(sizeof(VHUDMainViewModel_GetBrokenWeaponVisibility) == 0x000001, "Wrong size on VHUDMainViewModel_GetBrokenWeaponVisibility");
static_assert(offsetof(VHUDMainViewModel_GetBrokenWeaponVisibility, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetBrokenWeaponVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetCanBeCast
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetCanBeCast final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetCanBeCast) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetCanBeCast");
static_assert(sizeof(VHUDMainViewModel_GetCanBeCast) == 0x000001, "Wrong size on VHUDMainViewModel_GetCanBeCast");
static_assert(offsetof(VHUDMainViewModel_GetCanBeCast, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetCanBeCast::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetCompassDirectionValue
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetCompassDirectionValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetCompassDirectionValue) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetCompassDirectionValue");
static_assert(sizeof(VHUDMainViewModel_GetCompassDirectionValue) == 0x000004, "Wrong size on VHUDMainViewModel_GetCompassDirectionValue");
static_assert(offsetof(VHUDMainViewModel_GetCompassDirectionValue, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetCompassDirectionValue::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetCompassIconMarkers
// 0x0010 (0x0010 - 0x0000)
struct VHUDMainViewModel_GetCompassIconMarkers final
{
public:
	TArray<struct FCompassIconMarker>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetCompassIconMarkers) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetCompassIconMarkers");
static_assert(sizeof(VHUDMainViewModel_GetCompassIconMarkers) == 0x000010, "Wrong size on VHUDMainViewModel_GetCompassIconMarkers");
static_assert(offsetof(VHUDMainViewModel_GetCompassIconMarkers, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetCompassIconMarkers::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetCurrentMagickaValue
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetCurrentMagickaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetCurrentMagickaValue) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetCurrentMagickaValue");
static_assert(sizeof(VHUDMainViewModel_GetCurrentMagickaValue) == 0x000004, "Wrong size on VHUDMainViewModel_GetCurrentMagickaValue");
static_assert(offsetof(VHUDMainViewModel_GetCurrentMagickaValue, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetCurrentMagickaValue::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetEffectsIcons
// 0x0010 (0x0010 - 0x0000)
struct VHUDMainViewModel_GetEffectsIcons final
{
public:
	TArray<class UTexture2D*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetEffectsIcons) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetEffectsIcons");
static_assert(sizeof(VHUDMainViewModel_GetEffectsIcons) == 0x000010, "Wrong size on VHUDMainViewModel_GetEffectsIcons");
static_assert(offsetof(VHUDMainViewModel_GetEffectsIcons, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetEffectsIcons::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetEffectsTimeLeft
// 0x0010 (0x0010 - 0x0000)
struct VHUDMainViewModel_GetEffectsTimeLeft final
{
public:
	TArray<double>                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetEffectsTimeLeft) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetEffectsTimeLeft");
static_assert(sizeof(VHUDMainViewModel_GetEffectsTimeLeft) == 0x000010, "Wrong size on VHUDMainViewModel_GetEffectsTimeLeft");
static_assert(offsetof(VHUDMainViewModel_GetEffectsTimeLeft, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetEffectsTimeLeft::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetFatigueBarValue
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetFatigueBarValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetFatigueBarValue) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetFatigueBarValue");
static_assert(sizeof(VHUDMainViewModel_GetFatigueBarValue) == 0x000004, "Wrong size on VHUDMainViewModel_GetFatigueBarValue");
static_assert(offsetof(VHUDMainViewModel_GetFatigueBarValue, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetFatigueBarValue::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetHealthBarValue
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetHealthBarValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetHealthBarValue) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetHealthBarValue");
static_assert(sizeof(VHUDMainViewModel_GetHealthBarValue) == 0x000004, "Wrong size on VHUDMainViewModel_GetHealthBarValue");
static_assert(offsetof(VHUDMainViewModel_GetHealthBarValue, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetHealthBarValue::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetHostileData
// 0x0010 (0x0010 - 0x0000)
struct VHUDMainViewModel_GetHostileData final
{
public:
	TArray<struct FHostileData>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetHostileData) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetHostileData");
static_assert(sizeof(VHUDMainViewModel_GetHostileData) == 0x000010, "Wrong size on VHUDMainViewModel_GetHostileData");
static_assert(offsetof(VHUDMainViewModel_GetHostileData, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetHostileData::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetIsHealthBarBlinking
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetIsHealthBarBlinking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetIsHealthBarBlinking) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetIsHealthBarBlinking");
static_assert(sizeof(VHUDMainViewModel_GetIsHealthBarBlinking) == 0x000001, "Wrong size on VHUDMainViewModel_GetIsHealthBarBlinking");
static_assert(offsetof(VHUDMainViewModel_GetIsHealthBarBlinking, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetIsHealthBarBlinking::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetIsMenuMode
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetIsMenuMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetIsMenuMode) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetIsMenuMode");
static_assert(sizeof(VHUDMainViewModel_GetIsMenuMode) == 0x000001, "Wrong size on VHUDMainViewModel_GetIsMenuMode");
static_assert(offsetof(VHUDMainViewModel_GetIsMenuMode, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetIsMenuMode::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetIsTrespassing
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetIsTrespassing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetIsTrespassing) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetIsTrespassing");
static_assert(sizeof(VHUDMainViewModel_GetIsTrespassing) == 0x000001, "Wrong size on VHUDMainViewModel_GetIsTrespassing");
static_assert(offsetof(VHUDMainViewModel_GetIsTrespassing, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetIsTrespassing::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetLevelUpIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetLevelUpIconVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetLevelUpIconVisibility) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetLevelUpIconVisibility");
static_assert(sizeof(VHUDMainViewModel_GetLevelUpIconVisibility) == 0x000001, "Wrong size on VHUDMainViewModel_GetLevelUpIconVisibility");
static_assert(offsetof(VHUDMainViewModel_GetLevelUpIconVisibility, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetLevelUpIconVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetMagickaBarValue
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetMagickaBarValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetMagickaBarValue) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetMagickaBarValue");
static_assert(sizeof(VHUDMainViewModel_GetMagickaBarValue) == 0x000004, "Wrong size on VHUDMainViewModel_GetMagickaBarValue");
static_assert(offsetof(VHUDMainViewModel_GetMagickaBarValue, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetMagickaBarValue::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetMaxMagickaValue
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetMaxMagickaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetMaxMagickaValue) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetMaxMagickaValue");
static_assert(sizeof(VHUDMainViewModel_GetMaxMagickaValue) == 0x000004, "Wrong size on VHUDMainViewModel_GetMaxMagickaValue");
static_assert(offsetof(VHUDMainViewModel_GetMaxMagickaValue, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetMaxMagickaValue::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetNewlyDiscovered
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetNewlyDiscovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetNewlyDiscovered) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetNewlyDiscovered");
static_assert(sizeof(VHUDMainViewModel_GetNewlyDiscovered) == 0x000001, "Wrong size on VHUDMainViewModel_GetNewlyDiscovered");
static_assert(offsetof(VHUDMainViewModel_GetNewlyDiscovered, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetNewlyDiscovered::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetOverencumberedVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetOverencumberedVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetOverencumberedVisibility) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetOverencumberedVisibility");
static_assert(sizeof(VHUDMainViewModel_GetOverencumberedVisibility) == 0x000001, "Wrong size on VHUDMainViewModel_GetOverencumberedVisibility");
static_assert(offsetof(VHUDMainViewModel_GetOverencumberedVisibility, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetOverencumberedVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetRegionText
// 0x0018 (0x0018 - 0x0000)
struct VHUDMainViewModel_GetRegionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetRegionText) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetRegionText");
static_assert(sizeof(VHUDMainViewModel_GetRegionText) == 0x000018, "Wrong size on VHUDMainViewModel_GetRegionText");
static_assert(offsetof(VHUDMainViewModel_GetRegionText, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetRegionText::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetShouldDisplayBloodVignette
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetShouldDisplayBloodVignette final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetShouldDisplayBloodVignette) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetShouldDisplayBloodVignette");
static_assert(sizeof(VHUDMainViewModel_GetShouldDisplayBloodVignette) == 0x000001, "Wrong size on VHUDMainViewModel_GetShouldDisplayBloodVignette");
static_assert(offsetof(VHUDMainViewModel_GetShouldDisplayBloodVignette, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetShouldDisplayBloodVignette::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetSkillProgression
// 0x0028 (0x0028 - 0x0000)
struct VHUDMainViewModel_GetSkillProgression final
{
public:
	struct FModernSkillProgression                ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetSkillProgression) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetSkillProgression");
static_assert(sizeof(VHUDMainViewModel_GetSkillProgression) == 0x000028, "Wrong size on VHUDMainViewModel_GetSkillProgression");
static_assert(offsetof(VHUDMainViewModel_GetSkillProgression, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetSkillProgression::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetSpellIcon
// 0x0008 (0x0008 - 0x0000)
struct VHUDMainViewModel_GetSpellIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetSpellIcon) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetSpellIcon");
static_assert(sizeof(VHUDMainViewModel_GetSpellIcon) == 0x000008, "Wrong size on VHUDMainViewModel_GetSpellIcon");
static_assert(offsetof(VHUDMainViewModel_GetSpellIcon, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetSpellIcon::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetThirdPersonCompassOffset
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetThirdPersonCompassOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetThirdPersonCompassOffset) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetThirdPersonCompassOffset");
static_assert(sizeof(VHUDMainViewModel_GetThirdPersonCompassOffset) == 0x000004, "Wrong size on VHUDMainViewModel_GetThirdPersonCompassOffset");
static_assert(offsetof(VHUDMainViewModel_GetThirdPersonCompassOffset, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetThirdPersonCompassOffset::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetWeaponAmmo
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetWeaponAmmo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetWeaponAmmo) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetWeaponAmmo");
static_assert(sizeof(VHUDMainViewModel_GetWeaponAmmo) == 0x000004, "Wrong size on VHUDMainViewModel_GetWeaponAmmo");
static_assert(offsetof(VHUDMainViewModel_GetWeaponAmmo, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetWeaponAmmo::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetWeaponChargeParams
// 0x0008 (0x0008 - 0x0000)
struct VHUDMainViewModel_GetWeaponChargeParams final
{
public:
	struct FWeaponChargeParams                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetWeaponChargeParams) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetWeaponChargeParams");
static_assert(sizeof(VHUDMainViewModel_GetWeaponChargeParams) == 0x000008, "Wrong size on VHUDMainViewModel_GetWeaponChargeParams");
static_assert(offsetof(VHUDMainViewModel_GetWeaponChargeParams, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetWeaponChargeParams::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetWeaponChargeVisibility
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_GetWeaponChargeVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetWeaponChargeVisibility) == 0x000001, "Wrong alignment on VHUDMainViewModel_GetWeaponChargeVisibility");
static_assert(sizeof(VHUDMainViewModel_GetWeaponChargeVisibility) == 0x000001, "Wrong size on VHUDMainViewModel_GetWeaponChargeVisibility");
static_assert(offsetof(VHUDMainViewModel_GetWeaponChargeVisibility, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetWeaponChargeVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetWeaponHealth
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetWeaponHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetWeaponHealth) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetWeaponHealth");
static_assert(sizeof(VHUDMainViewModel_GetWeaponHealth) == 0x000004, "Wrong size on VHUDMainViewModel_GetWeaponHealth");
static_assert(offsetof(VHUDMainViewModel_GetWeaponHealth, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetWeaponHealth::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetWeaponIcon
// 0x0008 (0x0008 - 0x0000)
struct VHUDMainViewModel_GetWeaponIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetWeaponIcon) == 0x000008, "Wrong alignment on VHUDMainViewModel_GetWeaponIcon");
static_assert(sizeof(VHUDMainViewModel_GetWeaponIcon) == 0x000008, "Wrong size on VHUDMainViewModel_GetWeaponIcon");
static_assert(offsetof(VHUDMainViewModel_GetWeaponIcon, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetWeaponIcon::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.GetWeaponStatus
// 0x0004 (0x0004 - 0x0000)
struct VHUDMainViewModel_GetWeaponStatus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_GetWeaponStatus) == 0x000004, "Wrong alignment on VHUDMainViewModel_GetWeaponStatus");
static_assert(sizeof(VHUDMainViewModel_GetWeaponStatus) == 0x000004, "Wrong size on VHUDMainViewModel_GetWeaponStatus");
static_assert(offsetof(VHUDMainViewModel_GetWeaponStatus, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_GetWeaponStatus::ReturnValue' has a wrong offset!");

// Function Altar.VHUDMainViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VHUDMainViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDMainViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VHUDMainViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VHUDMainViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VHUDMainViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VHUDMainViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VHUDMainViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetEnemyHealthProperties
// 0x0008 (0x0008 - 0x0000)
struct VHUDReticleViewModel_SetEnemyHealthProperties final
{
public:
	struct FLegacyReticleEnemyHealthProperties    NewEnemyHealthProperties;                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetEnemyHealthProperties) == 0x000004, "Wrong alignment on VHUDReticleViewModel_SetEnemyHealthProperties");
static_assert(sizeof(VHUDReticleViewModel_SetEnemyHealthProperties) == 0x000008, "Wrong size on VHUDReticleViewModel_SetEnemyHealthProperties");
static_assert(offsetof(VHUDReticleViewModel_SetEnemyHealthProperties, NewEnemyHealthProperties) == 0x000000, "Member 'VHUDReticleViewModel_SetEnemyHealthProperties::NewEnemyHealthProperties' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetIsMenuMode
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_SetIsMenuMode final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetIsMenuMode) == 0x000001, "Wrong alignment on VHUDReticleViewModel_SetIsMenuMode");
static_assert(sizeof(VHUDReticleViewModel_SetIsMenuMode) == 0x000001, "Wrong size on VHUDReticleViewModel_SetIsMenuMode");
static_assert(offsetof(VHUDReticleViewModel_SetIsMenuMode, bNewValue) == 0x000000, "Member 'VHUDReticleViewModel_SetIsMenuMode::bNewValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetIsStealing
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_SetIsStealing final
{
public:
	bool                                          bNewIsStealing;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetIsStealing) == 0x000001, "Wrong alignment on VHUDReticleViewModel_SetIsStealing");
static_assert(sizeof(VHUDReticleViewModel_SetIsStealing) == 0x000001, "Wrong size on VHUDReticleViewModel_SetIsStealing");
static_assert(offsetof(VHUDReticleViewModel_SetIsStealing, bNewIsStealing) == 0x000000, "Member 'VHUDReticleViewModel_SetIsStealing::bNewIsStealing' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetNPCName
// 0x0018 (0x0018 - 0x0000)
struct VHUDReticleViewModel_SetNPCName final
{
public:
	class FText                                   NewNpcName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetNPCName) == 0x000008, "Wrong alignment on VHUDReticleViewModel_SetNPCName");
static_assert(sizeof(VHUDReticleViewModel_SetNPCName) == 0x000018, "Wrong size on VHUDReticleViewModel_SetNPCName");
static_assert(offsetof(VHUDReticleViewModel_SetNPCName, NewNpcName) == 0x000000, "Member 'VHUDReticleViewModel_SetNPCName::NewNpcName' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetReticleIcon
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_SetReticleIcon final
{
public:
	ELegacyHudReticleIcon                         NewReticleIcon;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetReticleIcon) == 0x000001, "Wrong alignment on VHUDReticleViewModel_SetReticleIcon");
static_assert(sizeof(VHUDReticleViewModel_SetReticleIcon) == 0x000001, "Wrong size on VHUDReticleViewModel_SetReticleIcon");
static_assert(offsetof(VHUDReticleViewModel_SetReticleIcon, NewReticleIcon) == 0x000000, "Member 'VHUDReticleViewModel_SetReticleIcon::NewReticleIcon' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetReticleWeaponBehavior
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_SetReticleWeaponBehavior final
{
public:
	EModernReticleWeaponBehavior                  newReticleWeaponBehavior;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetReticleWeaponBehavior) == 0x000001, "Wrong alignment on VHUDReticleViewModel_SetReticleWeaponBehavior");
static_assert(sizeof(VHUDReticleViewModel_SetReticleWeaponBehavior) == 0x000001, "Wrong size on VHUDReticleViewModel_SetReticleWeaponBehavior");
static_assert(offsetof(VHUDReticleViewModel_SetReticleWeaponBehavior, newReticleWeaponBehavior) == 0x000000, "Member 'VHUDReticleViewModel_SetReticleWeaponBehavior::newReticleWeaponBehavior' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetSneakDetectionLevel
// 0x0004 (0x0004 - 0x0000)
struct VHUDReticleViewModel_SetSneakDetectionLevel final
{
public:
	float                                         Detection;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetSneakDetectionLevel) == 0x000004, "Wrong alignment on VHUDReticleViewModel_SetSneakDetectionLevel");
static_assert(sizeof(VHUDReticleViewModel_SetSneakDetectionLevel) == 0x000004, "Wrong size on VHUDReticleViewModel_SetSneakDetectionLevel");
static_assert(offsetof(VHUDReticleViewModel_SetSneakDetectionLevel, Detection) == 0x000000, "Member 'VHUDReticleViewModel_SetSneakDetectionLevel::Detection' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetSneakingProperties
// 0x0008 (0x0008 - 0x0000)
struct VHUDReticleViewModel_SetSneakingProperties final
{
public:
	struct FLegacyReticleSneakingProperties       NewSneakingProperties;                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetSneakingProperties) == 0x000004, "Wrong alignment on VHUDReticleViewModel_SetSneakingProperties");
static_assert(sizeof(VHUDReticleViewModel_SetSneakingProperties) == 0x000008, "Wrong size on VHUDReticleViewModel_SetSneakingProperties");
static_assert(offsetof(VHUDReticleViewModel_SetSneakingProperties, NewSneakingProperties) == 0x000000, "Member 'VHUDReticleViewModel_SetSneakingProperties::NewSneakingProperties' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.SetWeaponTag
// 0x0008 (0x0008 - 0x0000)
struct VHUDReticleViewModel_SetWeaponTag final
{
public:
	struct FGameplayTag                           NewWeaponTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_SetWeaponTag) == 0x000004, "Wrong alignment on VHUDReticleViewModel_SetWeaponTag");
static_assert(sizeof(VHUDReticleViewModel_SetWeaponTag) == 0x000008, "Wrong size on VHUDReticleViewModel_SetWeaponTag");
static_assert(offsetof(VHUDReticleViewModel_SetWeaponTag, NewWeaponTag) == 0x000000, "Member 'VHUDReticleViewModel_SetWeaponTag::NewWeaponTag' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.TriggerHitCrosshairAnimation
// 0x0038 (0x0038 - 0x0000)
struct VHUDReticleViewModel_TriggerHitCrosshairAnimation final
{
public:
	struct FPairedOblivionHitEvent                HitEvent;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_TriggerHitCrosshairAnimation) == 0x000008, "Wrong alignment on VHUDReticleViewModel_TriggerHitCrosshairAnimation");
static_assert(sizeof(VHUDReticleViewModel_TriggerHitCrosshairAnimation) == 0x000038, "Wrong size on VHUDReticleViewModel_TriggerHitCrosshairAnimation");
static_assert(offsetof(VHUDReticleViewModel_TriggerHitCrosshairAnimation, HitEvent) == 0x000000, "Member 'VHUDReticleViewModel_TriggerHitCrosshairAnimation::HitEvent' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetEnemyHealthProperties
// 0x0008 (0x0008 - 0x0000)
struct VHUDReticleViewModel_GetEnemyHealthProperties final
{
public:
	struct FLegacyReticleEnemyHealthProperties    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetEnemyHealthProperties) == 0x000004, "Wrong alignment on VHUDReticleViewModel_GetEnemyHealthProperties");
static_assert(sizeof(VHUDReticleViewModel_GetEnemyHealthProperties) == 0x000008, "Wrong size on VHUDReticleViewModel_GetEnemyHealthProperties");
static_assert(offsetof(VHUDReticleViewModel_GetEnemyHealthProperties, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetEnemyHealthProperties::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetIsMenuMode
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_GetIsMenuMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetIsMenuMode) == 0x000001, "Wrong alignment on VHUDReticleViewModel_GetIsMenuMode");
static_assert(sizeof(VHUDReticleViewModel_GetIsMenuMode) == 0x000001, "Wrong size on VHUDReticleViewModel_GetIsMenuMode");
static_assert(offsetof(VHUDReticleViewModel_GetIsMenuMode, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetIsMenuMode::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetIsStealing
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_GetIsStealing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetIsStealing) == 0x000001, "Wrong alignment on VHUDReticleViewModel_GetIsStealing");
static_assert(sizeof(VHUDReticleViewModel_GetIsStealing) == 0x000001, "Wrong size on VHUDReticleViewModel_GetIsStealing");
static_assert(offsetof(VHUDReticleViewModel_GetIsStealing, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetIsStealing::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetNPCName
// 0x0018 (0x0018 - 0x0000)
struct VHUDReticleViewModel_GetNPCName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetNPCName) == 0x000008, "Wrong alignment on VHUDReticleViewModel_GetNPCName");
static_assert(sizeof(VHUDReticleViewModel_GetNPCName) == 0x000018, "Wrong size on VHUDReticleViewModel_GetNPCName");
static_assert(offsetof(VHUDReticleViewModel_GetNPCName, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetNPCName::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetReticleIcon
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_GetReticleIcon final
{
public:
	ELegacyHudReticleIcon                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetReticleIcon) == 0x000001, "Wrong alignment on VHUDReticleViewModel_GetReticleIcon");
static_assert(sizeof(VHUDReticleViewModel_GetReticleIcon) == 0x000001, "Wrong size on VHUDReticleViewModel_GetReticleIcon");
static_assert(offsetof(VHUDReticleViewModel_GetReticleIcon, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetReticleIcon::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetReticleWeaponBehavior
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_GetReticleWeaponBehavior final
{
public:
	EModernReticleWeaponBehavior                  ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetReticleWeaponBehavior) == 0x000001, "Wrong alignment on VHUDReticleViewModel_GetReticleWeaponBehavior");
static_assert(sizeof(VHUDReticleViewModel_GetReticleWeaponBehavior) == 0x000001, "Wrong size on VHUDReticleViewModel_GetReticleWeaponBehavior");
static_assert(offsetof(VHUDReticleViewModel_GetReticleWeaponBehavior, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetReticleWeaponBehavior::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetSneakDetectionLevel
// 0x0004 (0x0004 - 0x0000)
struct VHUDReticleViewModel_GetSneakDetectionLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetSneakDetectionLevel) == 0x000004, "Wrong alignment on VHUDReticleViewModel_GetSneakDetectionLevel");
static_assert(sizeof(VHUDReticleViewModel_GetSneakDetectionLevel) == 0x000004, "Wrong size on VHUDReticleViewModel_GetSneakDetectionLevel");
static_assert(offsetof(VHUDReticleViewModel_GetSneakDetectionLevel, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetSneakDetectionLevel::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetSneakingLevel
// 0x0004 (0x0004 - 0x0000)
struct VHUDReticleViewModel_GetSneakingLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetSneakingLevel) == 0x000004, "Wrong alignment on VHUDReticleViewModel_GetSneakingLevel");
static_assert(sizeof(VHUDReticleViewModel_GetSneakingLevel) == 0x000004, "Wrong size on VHUDReticleViewModel_GetSneakingLevel");
static_assert(offsetof(VHUDReticleViewModel_GetSneakingLevel, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetSneakingLevel::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetSneakingProperties
// 0x0001 (0x0001 - 0x0000)
struct VHUDReticleViewModel_GetSneakingProperties final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetSneakingProperties) == 0x000001, "Wrong alignment on VHUDReticleViewModel_GetSneakingProperties");
static_assert(sizeof(VHUDReticleViewModel_GetSneakingProperties) == 0x000001, "Wrong size on VHUDReticleViewModel_GetSneakingProperties");
static_assert(offsetof(VHUDReticleViewModel_GetSneakingProperties, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetSneakingProperties::ReturnValue' has a wrong offset!");

// Function Altar.VHUDReticleViewModel.GetWeaponTag
// 0x0008 (0x0008 - 0x0000)
struct VHUDReticleViewModel_GetWeaponTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHUDReticleViewModel_GetWeaponTag) == 0x000004, "Wrong alignment on VHUDReticleViewModel_GetWeaponTag");
static_assert(sizeof(VHUDReticleViewModel_GetWeaponTag) == 0x000008, "Wrong size on VHUDReticleViewModel_GetWeaponTag");
static_assert(offsetof(VHUDReticleViewModel_GetWeaponTag, ReturnValue) == 0x000000, "Member 'VHUDReticleViewModel_GetWeaponTag::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.GetEmotionBlendValue
// 0x0004 (0x0004 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue) == 0x000004, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue) == 0x000004, "Wrong size on VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_GetEmotionBlendValue::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.GetEyeHeadingValue
// 0x0004 (0x0004 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue) == 0x000004, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue) == 0x000004, "Wrong size on VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_GetEyeHeadingValue::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.GetEyePitchValue
// 0x0004 (0x0004 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_GetEyePitchValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_GetEyePitchValue) == 0x000004, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_GetEyePitchValue");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_GetEyePitchValue) == 0x000004, "Wrong size on VHumanoidHeadCharacterAnimInstance_GetEyePitchValue");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_GetEyePitchValue, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_GetEyePitchValue::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsAngry
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsAngry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsAngry) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsAngry");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsAngry) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsAngry");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsAngry, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsAngry::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsConscious
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsConscious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsConscious) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsConscious");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsConscious) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsConscious");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsConscious, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsConscious::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsDisgusted
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsDisgusted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsDisgusted) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsDisgusted");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsDisgusted) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsDisgusted");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsDisgusted, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsDisgusted::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsFearful
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsFearful final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsFearful) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsFearful");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsFearful) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsFearful");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsFearful, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsFearful::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsHappy
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsHappy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsHappy) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsHappy");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsHappy) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsHappy");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsHappy, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsHappy::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsNeutral
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsNeutral final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsNeutral) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsNeutral");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsNeutral) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsNeutral");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsNeutral, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsNeutral::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsSad
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsSad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsSad) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsSad");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsSad) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsSad");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsSad, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsSad::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadCharacterAnimInstance.IsSurprised
// 0x0001 (0x0001 - 0x0000)
struct VHumanoidHeadCharacterAnimInstance_IsSurprised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadCharacterAnimInstance_IsSurprised) == 0x000001, "Wrong alignment on VHumanoidHeadCharacterAnimInstance_IsSurprised");
static_assert(sizeof(VHumanoidHeadCharacterAnimInstance_IsSurprised) == 0x000001, "Wrong size on VHumanoidHeadCharacterAnimInstance_IsSurprised");
static_assert(offsetof(VHumanoidHeadCharacterAnimInstance_IsSurprised, ReturnValue) == 0x000000, "Member 'VHumanoidHeadCharacterAnimInstance_IsSurprised::ReturnValue' has a wrong offset!");

// Function Altar.VHumanoidHeadComponent.InstantiateHairComponents
// 0x0008 (0x0008 - 0x0000)
struct VHumanoidHeadComponent_InstantiateHairComponents final
{
public:
	class UVCharacterPhenotypeData*               Phenotype;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadComponent_InstantiateHairComponents) == 0x000008, "Wrong alignment on VHumanoidHeadComponent_InstantiateHairComponents");
static_assert(sizeof(VHumanoidHeadComponent_InstantiateHairComponents) == 0x000008, "Wrong size on VHumanoidHeadComponent_InstantiateHairComponents");
static_assert(offsetof(VHumanoidHeadComponent_InstantiateHairComponents, Phenotype) == 0x000000, "Member 'VHumanoidHeadComponent_InstantiateHairComponents::Phenotype' has a wrong offset!");

// Function Altar.VHumanoidHeadComponent.SetVisibilityOfFacialHair
// 0x0002 (0x0002 - 0x0000)
struct VHumanoidHeadComponent_SetVisibilityOfFacialHair final
{
public:
	EVFacialHairType                              FacialHair;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHairVisible;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadComponent_SetVisibilityOfFacialHair) == 0x000001, "Wrong alignment on VHumanoidHeadComponent_SetVisibilityOfFacialHair");
static_assert(sizeof(VHumanoidHeadComponent_SetVisibilityOfFacialHair) == 0x000002, "Wrong size on VHumanoidHeadComponent_SetVisibilityOfFacialHair");
static_assert(offsetof(VHumanoidHeadComponent_SetVisibilityOfFacialHair, FacialHair) == 0x000000, "Member 'VHumanoidHeadComponent_SetVisibilityOfFacialHair::FacialHair' has a wrong offset!");
static_assert(offsetof(VHumanoidHeadComponent_SetVisibilityOfFacialHair, bIsHairVisible) == 0x000001, "Member 'VHumanoidHeadComponent_SetVisibilityOfFacialHair::bIsHairVisible' has a wrong offset!");

// Function Altar.VHumanoidHeadComponent.ShouldHideHair
// 0x0002 (0x0002 - 0x0000)
struct VHumanoidHeadComponent_ShouldHideHair final
{
public:
	bool                                          bInShouldHideHair;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHideFacialHair;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadComponent_ShouldHideHair) == 0x000001, "Wrong alignment on VHumanoidHeadComponent_ShouldHideHair");
static_assert(sizeof(VHumanoidHeadComponent_ShouldHideHair) == 0x000002, "Wrong size on VHumanoidHeadComponent_ShouldHideHair");
static_assert(offsetof(VHumanoidHeadComponent_ShouldHideHair, bInShouldHideHair) == 0x000000, "Member 'VHumanoidHeadComponent_ShouldHideHair::bInShouldHideHair' has a wrong offset!");
static_assert(offsetof(VHumanoidHeadComponent_ShouldHideHair, bInHideFacialHair) == 0x000001, "Member 'VHumanoidHeadComponent_ShouldHideHair::bInHideFacialHair' has a wrong offset!");

// Function Altar.VHumanoidHeadComponent.GetEmotion
// 0x0008 (0x0008 - 0x0000)
struct VHumanoidHeadComponent_GetEmotion final
{
public:
	struct FDialogueEmotion                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VHumanoidHeadComponent_GetEmotion) == 0x000004, "Wrong alignment on VHumanoidHeadComponent_GetEmotion");
static_assert(sizeof(VHumanoidHeadComponent_GetEmotion) == 0x000008, "Wrong size on VHumanoidHeadComponent_GetEmotion");
static_assert(offsetof(VHumanoidHeadComponent_GetEmotion, ReturnValue) == 0x000000, "Member 'VHumanoidHeadComponent_GetEmotion::ReturnValue' has a wrong offset!");

// Function Altar.VInAirLocomotionHorseAnimInstance.IsFalling
// 0x0001 (0x0001 - 0x0000)
struct VInAirLocomotionHorseAnimInstance_IsFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInAirLocomotionHorseAnimInstance_IsFalling) == 0x000001, "Wrong alignment on VInAirLocomotionHorseAnimInstance_IsFalling");
static_assert(sizeof(VInAirLocomotionHorseAnimInstance_IsFalling) == 0x000001, "Wrong size on VInAirLocomotionHorseAnimInstance_IsFalling");
static_assert(offsetof(VInAirLocomotionHorseAnimInstance_IsFalling, ReturnValue) == 0x000000, "Member 'VInAirLocomotionHorseAnimInstance_IsFalling::ReturnValue' has a wrong offset!");

// Function Altar.VInAirLocomotionHorseAnimInstance.IsJumping
// 0x0001 (0x0001 - 0x0000)
struct VInAirLocomotionHorseAnimInstance_IsJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInAirLocomotionHorseAnimInstance_IsJumping) == 0x000001, "Wrong alignment on VInAirLocomotionHorseAnimInstance_IsJumping");
static_assert(sizeof(VInAirLocomotionHorseAnimInstance_IsJumping) == 0x000001, "Wrong size on VInAirLocomotionHorseAnimInstance_IsJumping");
static_assert(offsetof(VInAirLocomotionHorseAnimInstance_IsJumping, ReturnValue) == 0x000000, "Member 'VInAirLocomotionHorseAnimInstance_IsJumping::ReturnValue' has a wrong offset!");

// Function Altar.VInAirLocomotionHorseAnimInstance.IsLanding
// 0x0001 (0x0001 - 0x0000)
struct VInAirLocomotionHorseAnimInstance_IsLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInAirLocomotionHorseAnimInstance_IsLanding) == 0x000001, "Wrong alignment on VInAirLocomotionHorseAnimInstance_IsLanding");
static_assert(sizeof(VInAirLocomotionHorseAnimInstance_IsLanding) == 0x000001, "Wrong size on VInAirLocomotionHorseAnimInstance_IsLanding");
static_assert(offsetof(VInAirLocomotionHorseAnimInstance_IsLanding, ReturnValue) == 0x000000, "Member 'VInAirLocomotionHorseAnimInstance_IsLanding::ReturnValue' has a wrong offset!");

// Function Altar.VInAirLocomotionHorseAnimInstance.IsRearing
// 0x0001 (0x0001 - 0x0000)
struct VInAirLocomotionHorseAnimInstance_IsRearing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInAirLocomotionHorseAnimInstance_IsRearing) == 0x000001, "Wrong alignment on VInAirLocomotionHorseAnimInstance_IsRearing");
static_assert(sizeof(VInAirLocomotionHorseAnimInstance_IsRearing) == 0x000001, "Wrong size on VInAirLocomotionHorseAnimInstance_IsRearing");
static_assert(offsetof(VInAirLocomotionHorseAnimInstance_IsRearing, ReturnValue) == 0x000000, "Member 'VInAirLocomotionHorseAnimInstance_IsRearing::ReturnValue' has a wrong offset!");

// Function Altar.VInAirLocomotionHorseRiderAnimInstance.SetJumpLayerData
// 0x0048 (0x0048 - 0x0000)
struct VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData final
{
public:
	struct FVHorseRiderLocomotionJump             InJumpLayerData;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData) == 0x000008, "Wrong alignment on VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData");
static_assert(sizeof(VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData) == 0x000048, "Wrong size on VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData");
static_assert(offsetof(VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData, InJumpLayerData) == 0x000000, "Member 'VInAirLocomotionHorseRiderAnimInstance_SetJumpLayerData::InJumpLayerData' has a wrong offset!");

// Function Altar.VInventoryCharacterAnimInstance.OnEquippedWeaponChanged
// 0x0008 (0x0008 - 0x0000)
struct VInventoryCharacterAnimInstance_OnEquippedWeaponChanged final
{
public:
	int32                                         WeaponType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasShield;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTorch;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VInventoryCharacterAnimInstance_OnEquippedWeaponChanged) == 0x000004, "Wrong alignment on VInventoryCharacterAnimInstance_OnEquippedWeaponChanged");
static_assert(sizeof(VInventoryCharacterAnimInstance_OnEquippedWeaponChanged) == 0x000008, "Wrong size on VInventoryCharacterAnimInstance_OnEquippedWeaponChanged");
static_assert(offsetof(VInventoryCharacterAnimInstance_OnEquippedWeaponChanged, WeaponType) == 0x000000, "Member 'VInventoryCharacterAnimInstance_OnEquippedWeaponChanged::WeaponType' has a wrong offset!");
static_assert(offsetof(VInventoryCharacterAnimInstance_OnEquippedWeaponChanged, bHasShield) == 0x000004, "Member 'VInventoryCharacterAnimInstance_OnEquippedWeaponChanged::bHasShield' has a wrong offset!");
static_assert(offsetof(VInventoryCharacterAnimInstance_OnEquippedWeaponChanged, bHasTorch) == 0x000005, "Member 'VInventoryCharacterAnimInstance_OnEquippedWeaponChanged::bHasTorch' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuItem.SetProperties
// 0x0050 (0x0050 - 0x0000)
struct VOriginalInventoryMenuItem_SetProperties final
{
public:
	struct FOriginalInventoryMenuItemProperties   Value;                                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuItem_SetProperties) == 0x000008, "Wrong alignment on VOriginalInventoryMenuItem_SetProperties");
static_assert(sizeof(VOriginalInventoryMenuItem_SetProperties) == 0x000050, "Wrong size on VOriginalInventoryMenuItem_SetProperties");
static_assert(offsetof(VOriginalInventoryMenuItem_SetProperties, Value) == 0x000000, "Member 'VOriginalInventoryMenuItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuItem.GetInventoryIndex
// 0x0004 (0x0004 - 0x0000)
struct VOriginalInventoryMenuItem_GetInventoryIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuItem_GetInventoryIndex) == 0x000004, "Wrong alignment on VOriginalInventoryMenuItem_GetInventoryIndex");
static_assert(sizeof(VOriginalInventoryMenuItem_GetInventoryIndex) == 0x000004, "Wrong size on VOriginalInventoryMenuItem_GetInventoryIndex");
static_assert(offsetof(VOriginalInventoryMenuItem_GetInventoryIndex, ReturnValue) == 0x000000, "Member 'VOriginalInventoryMenuItem_GetInventoryIndex::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuItem.GetProperties
// 0x0050 (0x0050 - 0x0000)
struct VOriginalInventoryMenuItem_GetProperties final
{
public:
	struct FOriginalInventoryMenuItemProperties   ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuItem_GetProperties) == 0x000008, "Wrong alignment on VOriginalInventoryMenuItem_GetProperties");
static_assert(sizeof(VOriginalInventoryMenuItem_GetProperties) == 0x000050, "Wrong size on VOriginalInventoryMenuItem_GetProperties");
static_assert(offsetof(VOriginalInventoryMenuItem_GetProperties, ReturnValue) == 0x000000, "Member 'VOriginalInventoryMenuItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenuSkillItem.SetProperties
// 0x0090 (0x0090 - 0x0000)
struct VLegacyStatsMenuSkillItem_SetProperties final
{
public:
	struct FLegacyStatsMenuSkillItemProperties    Value;                                             // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuSkillItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyStatsMenuSkillItem_SetProperties");
static_assert(sizeof(VLegacyStatsMenuSkillItem_SetProperties) == 0x000090, "Wrong size on VLegacyStatsMenuSkillItem_SetProperties");
static_assert(offsetof(VLegacyStatsMenuSkillItem_SetProperties, Value) == 0x000000, "Member 'VLegacyStatsMenuSkillItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyStatsMenuSkillItem.UpdateProperties
// 0x0010 (0x0010 - 0x0000)
struct VLegacyStatsMenuSkillItem_UpdateProperties final
{
public:
	struct FLegacyStatsMenuSkillItemUpdatableProperties Value;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuSkillItem_UpdateProperties) == 0x000004, "Wrong alignment on VLegacyStatsMenuSkillItem_UpdateProperties");
static_assert(sizeof(VLegacyStatsMenuSkillItem_UpdateProperties) == 0x000010, "Wrong size on VLegacyStatsMenuSkillItem_UpdateProperties");
static_assert(offsetof(VLegacyStatsMenuSkillItem_UpdateProperties, Value) == 0x000000, "Member 'VLegacyStatsMenuSkillItem_UpdateProperties::Value' has a wrong offset!");

// Function Altar.VLegacyStatsMenuSkillItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyStatsMenuSkillItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuSkillItem_GetIndex) == 0x000004, "Wrong alignment on VLegacyStatsMenuSkillItem_GetIndex");
static_assert(sizeof(VLegacyStatsMenuSkillItem_GetIndex) == 0x000004, "Wrong size on VLegacyStatsMenuSkillItem_GetIndex");
static_assert(offsetof(VLegacyStatsMenuSkillItem_GetIndex, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenuSkillItem_GetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenuSkillItem.GetProperties
// 0x0090 (0x0090 - 0x0000)
struct VLegacyStatsMenuSkillItem_GetProperties final
{
public:
	struct FLegacyStatsMenuSkillItemProperties    ReturnValue;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuSkillItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyStatsMenuSkillItem_GetProperties");
static_assert(sizeof(VLegacyStatsMenuSkillItem_GetProperties) == 0x000090, "Wrong size on VLegacyStatsMenuSkillItem_GetProperties");
static_assert(offsetof(VLegacyStatsMenuSkillItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenuSkillItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VInventoryPlayerCharacter.OnAppearanceRefresh
// 0x0008 (0x0008 - 0x0000)
struct VInventoryPlayerCharacter_OnAppearanceRefresh final
{
public:
	const class UVCharacterPhenotypeData*         Preset;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryPlayerCharacter_OnAppearanceRefresh) == 0x000008, "Wrong alignment on VInventoryPlayerCharacter_OnAppearanceRefresh");
static_assert(sizeof(VInventoryPlayerCharacter_OnAppearanceRefresh) == 0x000008, "Wrong size on VInventoryPlayerCharacter_OnAppearanceRefresh");
static_assert(offsetof(VInventoryPlayerCharacter_OnAppearanceRefresh, Preset) == 0x000000, "Member 'VInventoryPlayerCharacter_OnAppearanceRefresh::Preset' has a wrong offset!");

// Function Altar.VInventoryPlayerCharacter.SetInventoryPlayerEquipment
// 0x0010 (0x0010 - 0x0000)
struct VInventoryPlayerCharacter_SetInventoryPlayerEquipment final
{
public:
	EBipedModularBodySlot                         Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTESForm*                         form;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VInventoryPlayerCharacter_SetInventoryPlayerEquipment) == 0x000008, "Wrong alignment on VInventoryPlayerCharacter_SetInventoryPlayerEquipment");
static_assert(sizeof(VInventoryPlayerCharacter_SetInventoryPlayerEquipment) == 0x000010, "Wrong size on VInventoryPlayerCharacter_SetInventoryPlayerEquipment");
static_assert(offsetof(VInventoryPlayerCharacter_SetInventoryPlayerEquipment, Slot) == 0x000000, "Member 'VInventoryPlayerCharacter_SetInventoryPlayerEquipment::Slot' has a wrong offset!");
static_assert(offsetof(VInventoryPlayerCharacter_SetInventoryPlayerEquipment, form) == 0x000008, "Member 'VInventoryPlayerCharacter_SetInventoryPlayerEquipment::form' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetArmorPart
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetArmorPart final
{
public:
	EOriginalInventoryMenuArmorClothPart          NewArmorPart;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetArmorPart) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetArmorPart");
static_assert(sizeof(VItemDetailsViewModel_SetArmorPart) == 0x000001, "Wrong size on VItemDetailsViewModel_SetArmorPart");
static_assert(offsetof(VItemDetailsViewModel_SetArmorPart, NewArmorPart) == 0x000000, "Member 'VItemDetailsViewModel_SetArmorPart::NewArmorPart' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetBookType
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetBookType final
{
public:
	EOriginalInventoryMenuBookType                NewBookType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetBookType) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetBookType");
static_assert(sizeof(VItemDetailsViewModel_SetBookType) == 0x000001, "Wrong size on VItemDetailsViewModel_SetBookType");
static_assert(offsetof(VItemDetailsViewModel_SetBookType, NewBookType) == 0x000000, "Member 'VItemDetailsViewModel_SetBookType::NewBookType' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetClothPart
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetClothPart final
{
public:
	EOriginalInventoryMenuArmorClothPart          NewClothPart;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetClothPart) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetClothPart");
static_assert(sizeof(VItemDetailsViewModel_SetClothPart) == 0x000001, "Wrong size on VItemDetailsViewModel_SetClothPart");
static_assert(offsetof(VItemDetailsViewModel_SetClothPart, NewClothPart) == 0x000000, "Member 'VItemDetailsViewModel_SetClothPart::NewClothPart' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetHoveredObjectTESForm
// 0x0008 (0x0008 - 0x0000)
struct VItemDetailsViewModel_SetHoveredObjectTESForm final
{
public:
	class UTESForm*                               NewForm;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetHoveredObjectTESForm) == 0x000008, "Wrong alignment on VItemDetailsViewModel_SetHoveredObjectTESForm");
static_assert(sizeof(VItemDetailsViewModel_SetHoveredObjectTESForm) == 0x000008, "Wrong size on VItemDetailsViewModel_SetHoveredObjectTESForm");
static_assert(offsetof(VItemDetailsViewModel_SetHoveredObjectTESForm, NewForm) == 0x000000, "Member 'VItemDetailsViewModel_SetHoveredObjectTESForm::NewForm' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetIsAlchemyToolUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetIsAlchemyToolUsable final
{
public:
	bool                                          bNewIsUsable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetIsAlchemyToolUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetIsAlchemyToolUsable");
static_assert(sizeof(VItemDetailsViewModel_SetIsAlchemyToolUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_SetIsAlchemyToolUsable");
static_assert(offsetof(VItemDetailsViewModel_SetIsAlchemyToolUsable, bNewIsUsable) == 0x000000, "Member 'VItemDetailsViewModel_SetIsAlchemyToolUsable::bNewIsUsable' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetIsLightArmor
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetIsLightArmor final
{
public:
	bool                                          bNewIsLightArmor;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetIsLightArmor) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetIsLightArmor");
static_assert(sizeof(VItemDetailsViewModel_SetIsLightArmor) == 0x000001, "Wrong size on VItemDetailsViewModel_SetIsLightArmor");
static_assert(offsetof(VItemDetailsViewModel_SetIsLightArmor, bNewIsLightArmor) == 0x000000, "Member 'VItemDetailsViewModel_SetIsLightArmor::bNewIsLightArmor' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetIsRepairHammerUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetIsRepairHammerUsable final
{
public:
	bool                                          bNewIsUsable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetIsRepairHammerUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetIsRepairHammerUsable");
static_assert(sizeof(VItemDetailsViewModel_SetIsRepairHammerUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_SetIsRepairHammerUsable");
static_assert(offsetof(VItemDetailsViewModel_SetIsRepairHammerUsable, bNewIsUsable) == 0x000000, "Member 'VItemDetailsViewModel_SetIsRepairHammerUsable::bNewIsUsable' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetIsSoulgemUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetIsSoulgemUsable final
{
public:
	bool                                          bNewIsUsable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetIsSoulgemUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetIsSoulgemUsable");
static_assert(sizeof(VItemDetailsViewModel_SetIsSoulgemUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_SetIsSoulgemUsable");
static_assert(offsetof(VItemDetailsViewModel_SetIsSoulgemUsable, bNewIsUsable) == 0x000000, "Member 'VItemDetailsViewModel_SetIsSoulgemUsable::bNewIsUsable' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetIsStoneUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetIsStoneUsable final
{
public:
	bool                                          bNewIsUsable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetIsStoneUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetIsStoneUsable");
static_assert(sizeof(VItemDetailsViewModel_SetIsStoneUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_SetIsStoneUsable");
static_assert(offsetof(VItemDetailsViewModel_SetIsStoneUsable, bNewIsUsable) == 0x000000, "Member 'VItemDetailsViewModel_SetIsStoneUsable::bNewIsUsable' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetItemSkillInformations
// 0x0060 (0x0060 - 0x0000)
struct VItemDetailsViewModel_SetItemSkillInformations final
{
public:
	struct FOriginalInventoryMenuItemSkillInformations NewSkillInformations;                         // 0x0000(0x0060)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetItemSkillInformations) == 0x000008, "Wrong alignment on VItemDetailsViewModel_SetItemSkillInformations");
static_assert(sizeof(VItemDetailsViewModel_SetItemSkillInformations) == 0x000060, "Wrong size on VItemDetailsViewModel_SetItemSkillInformations");
static_assert(offsetof(VItemDetailsViewModel_SetItemSkillInformations, NewSkillInformations) == 0x000000, "Member 'VItemDetailsViewModel_SetItemSkillInformations::NewSkillInformations' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetPotionType
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_SetPotionType final
{
public:
	EOriginalInventoryMenuPotionType              NewPotionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetPotionType) == 0x000001, "Wrong alignment on VItemDetailsViewModel_SetPotionType");
static_assert(sizeof(VItemDetailsViewModel_SetPotionType) == 0x000001, "Wrong size on VItemDetailsViewModel_SetPotionType");
static_assert(offsetof(VItemDetailsViewModel_SetPotionType, NewPotionType) == 0x000000, "Member 'VItemDetailsViewModel_SetPotionType::NewPotionType' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetSoulgemCapacity
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_SetSoulgemCapacity final
{
public:
	int32                                         NewSoulgemCapacity;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetSoulgemCapacity) == 0x000004, "Wrong alignment on VItemDetailsViewModel_SetSoulgemCapacity");
static_assert(sizeof(VItemDetailsViewModel_SetSoulgemCapacity) == 0x000004, "Wrong size on VItemDetailsViewModel_SetSoulgemCapacity");
static_assert(offsetof(VItemDetailsViewModel_SetSoulgemCapacity, NewSoulgemCapacity) == 0x000000, "Member 'VItemDetailsViewModel_SetSoulgemCapacity::NewSoulgemCapacity' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetSoulgemLevel
// 0x0018 (0x0018 - 0x0000)
struct VItemDetailsViewModel_SetSoulgemLevel final
{
public:
	class FText                                   NewSoulgemLevel;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetSoulgemLevel) == 0x000008, "Wrong alignment on VItemDetailsViewModel_SetSoulgemLevel");
static_assert(sizeof(VItemDetailsViewModel_SetSoulgemLevel) == 0x000018, "Wrong size on VItemDetailsViewModel_SetSoulgemLevel");
static_assert(offsetof(VItemDetailsViewModel_SetSoulgemLevel, NewSoulgemLevel) == 0x000000, "Member 'VItemDetailsViewModel_SetSoulgemLevel::NewSoulgemLevel' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetSoulgemMaxCapacity
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_SetSoulgemMaxCapacity final
{
public:
	int32                                         NewSoulgemMaxCapacity;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetSoulgemMaxCapacity) == 0x000004, "Wrong alignment on VItemDetailsViewModel_SetSoulgemMaxCapacity");
static_assert(sizeof(VItemDetailsViewModel_SetSoulgemMaxCapacity) == 0x000004, "Wrong size on VItemDetailsViewModel_SetSoulgemMaxCapacity");
static_assert(offsetof(VItemDetailsViewModel_SetSoulgemMaxCapacity, NewSoulgemMaxCapacity) == 0x000000, "Member 'VItemDetailsViewModel_SetSoulgemMaxCapacity::NewSoulgemMaxCapacity' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetWeaponCharge
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_SetWeaponCharge final
{
public:
	int32                                         NewWeaponCharge;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetWeaponCharge) == 0x000004, "Wrong alignment on VItemDetailsViewModel_SetWeaponCharge");
static_assert(sizeof(VItemDetailsViewModel_SetWeaponCharge) == 0x000004, "Wrong size on VItemDetailsViewModel_SetWeaponCharge");
static_assert(offsetof(VItemDetailsViewModel_SetWeaponCharge, NewWeaponCharge) == 0x000000, "Member 'VItemDetailsViewModel_SetWeaponCharge::NewWeaponCharge' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetWeaponMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_SetWeaponMaxCharge final
{
public:
	int32                                         NewWeaponMaxCharge;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetWeaponMaxCharge) == 0x000004, "Wrong alignment on VItemDetailsViewModel_SetWeaponMaxCharge");
static_assert(sizeof(VItemDetailsViewModel_SetWeaponMaxCharge) == 0x000004, "Wrong size on VItemDetailsViewModel_SetWeaponMaxCharge");
static_assert(offsetof(VItemDetailsViewModel_SetWeaponMaxCharge, NewWeaponMaxCharge) == 0x000000, "Member 'VItemDetailsViewModel_SetWeaponMaxCharge::NewWeaponMaxCharge' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.SetWeaponUse
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_SetWeaponUse final
{
public:
	int32                                         NewWeaponUse;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_SetWeaponUse) == 0x000004, "Wrong alignment on VItemDetailsViewModel_SetWeaponUse");
static_assert(sizeof(VItemDetailsViewModel_SetWeaponUse) == 0x000004, "Wrong size on VItemDetailsViewModel_SetWeaponUse");
static_assert(offsetof(VItemDetailsViewModel_SetWeaponUse, NewWeaponUse) == 0x000000, "Member 'VItemDetailsViewModel_SetWeaponUse::NewWeaponUse' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetArmorPart
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetArmorPart final
{
public:
	EOriginalInventoryMenuArmorClothPart          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetArmorPart) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetArmorPart");
static_assert(sizeof(VItemDetailsViewModel_GetArmorPart) == 0x000001, "Wrong size on VItemDetailsViewModel_GetArmorPart");
static_assert(offsetof(VItemDetailsViewModel_GetArmorPart, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetArmorPart::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetBookType
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetBookType final
{
public:
	EOriginalInventoryMenuBookType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetBookType) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetBookType");
static_assert(sizeof(VItemDetailsViewModel_GetBookType) == 0x000001, "Wrong size on VItemDetailsViewModel_GetBookType");
static_assert(offsetof(VItemDetailsViewModel_GetBookType, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetBookType::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetClothPart
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetClothPart final
{
public:
	EOriginalInventoryMenuArmorClothPart          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetClothPart) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetClothPart");
static_assert(sizeof(VItemDetailsViewModel_GetClothPart) == 0x000001, "Wrong size on VItemDetailsViewModel_GetClothPart");
static_assert(offsetof(VItemDetailsViewModel_GetClothPart, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetClothPart::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetHoveredObjectTESForm
// 0x0008 (0x0008 - 0x0000)
struct VItemDetailsViewModel_GetHoveredObjectTESForm final
{
public:
	const class UTESForm*                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetHoveredObjectTESForm) == 0x000008, "Wrong alignment on VItemDetailsViewModel_GetHoveredObjectTESForm");
static_assert(sizeof(VItemDetailsViewModel_GetHoveredObjectTESForm) == 0x000008, "Wrong size on VItemDetailsViewModel_GetHoveredObjectTESForm");
static_assert(offsetof(VItemDetailsViewModel_GetHoveredObjectTESForm, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetHoveredObjectTESForm::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetHoveredWeaponDescriptionText
// 0x0120 (0x0120 - 0x0000)
struct VItemDetailsViewModel_GetHoveredWeaponDescriptionText final
{
public:
	class FText                                   DescriptionTextFormat;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FText>        WeaponSizeToTextMap;                               // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FText>        WeaponTypeToTextMap;                               // 0x0068(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FText>        WeaponSkillToTextMap;                              // 0x00B8(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0108(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText) == 0x000008, "Wrong alignment on VItemDetailsViewModel_GetHoveredWeaponDescriptionText");
static_assert(sizeof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText) == 0x000120, "Wrong size on VItemDetailsViewModel_GetHoveredWeaponDescriptionText");
static_assert(offsetof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText, DescriptionTextFormat) == 0x000000, "Member 'VItemDetailsViewModel_GetHoveredWeaponDescriptionText::DescriptionTextFormat' has a wrong offset!");
static_assert(offsetof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText, WeaponSizeToTextMap) == 0x000018, "Member 'VItemDetailsViewModel_GetHoveredWeaponDescriptionText::WeaponSizeToTextMap' has a wrong offset!");
static_assert(offsetof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText, WeaponTypeToTextMap) == 0x000068, "Member 'VItemDetailsViewModel_GetHoveredWeaponDescriptionText::WeaponTypeToTextMap' has a wrong offset!");
static_assert(offsetof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText, WeaponSkillToTextMap) == 0x0000B8, "Member 'VItemDetailsViewModel_GetHoveredWeaponDescriptionText::WeaponSkillToTextMap' has a wrong offset!");
static_assert(offsetof(VItemDetailsViewModel_GetHoveredWeaponDescriptionText, ReturnValue) == 0x000108, "Member 'VItemDetailsViewModel_GetHoveredWeaponDescriptionText::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetIsAlchemyToolUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetIsAlchemyToolUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetIsAlchemyToolUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetIsAlchemyToolUsable");
static_assert(sizeof(VItemDetailsViewModel_GetIsAlchemyToolUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_GetIsAlchemyToolUsable");
static_assert(offsetof(VItemDetailsViewModel_GetIsAlchemyToolUsable, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetIsAlchemyToolUsable::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetIsLightArmor
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetIsLightArmor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetIsLightArmor) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetIsLightArmor");
static_assert(sizeof(VItemDetailsViewModel_GetIsLightArmor) == 0x000001, "Wrong size on VItemDetailsViewModel_GetIsLightArmor");
static_assert(offsetof(VItemDetailsViewModel_GetIsLightArmor, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetIsLightArmor::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetIsRepairHammerUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetIsRepairHammerUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetIsRepairHammerUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetIsRepairHammerUsable");
static_assert(sizeof(VItemDetailsViewModel_GetIsRepairHammerUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_GetIsRepairHammerUsable");
static_assert(offsetof(VItemDetailsViewModel_GetIsRepairHammerUsable, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetIsRepairHammerUsable::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetIsSoulgemUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetIsSoulgemUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetIsSoulgemUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetIsSoulgemUsable");
static_assert(sizeof(VItemDetailsViewModel_GetIsSoulgemUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_GetIsSoulgemUsable");
static_assert(offsetof(VItemDetailsViewModel_GetIsSoulgemUsable, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetIsSoulgemUsable::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetIsStoneUsable
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetIsStoneUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetIsStoneUsable) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetIsStoneUsable");
static_assert(sizeof(VItemDetailsViewModel_GetIsStoneUsable) == 0x000001, "Wrong size on VItemDetailsViewModel_GetIsStoneUsable");
static_assert(offsetof(VItemDetailsViewModel_GetIsStoneUsable, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetIsStoneUsable::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetItemSkillInformations
// 0x0060 (0x0060 - 0x0000)
struct VItemDetailsViewModel_GetItemSkillInformations final
{
public:
	struct FOriginalInventoryMenuItemSkillInformations ReturnValue;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetItemSkillInformations) == 0x000008, "Wrong alignment on VItemDetailsViewModel_GetItemSkillInformations");
static_assert(sizeof(VItemDetailsViewModel_GetItemSkillInformations) == 0x000060, "Wrong size on VItemDetailsViewModel_GetItemSkillInformations");
static_assert(offsetof(VItemDetailsViewModel_GetItemSkillInformations, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetItemSkillInformations::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetPotionType
// 0x0001 (0x0001 - 0x0000)
struct VItemDetailsViewModel_GetPotionType final
{
public:
	EOriginalInventoryMenuPotionType              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetPotionType) == 0x000001, "Wrong alignment on VItemDetailsViewModel_GetPotionType");
static_assert(sizeof(VItemDetailsViewModel_GetPotionType) == 0x000001, "Wrong size on VItemDetailsViewModel_GetPotionType");
static_assert(offsetof(VItemDetailsViewModel_GetPotionType, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetPotionType::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetSoulgemCapacity
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_GetSoulgemCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetSoulgemCapacity) == 0x000004, "Wrong alignment on VItemDetailsViewModel_GetSoulgemCapacity");
static_assert(sizeof(VItemDetailsViewModel_GetSoulgemCapacity) == 0x000004, "Wrong size on VItemDetailsViewModel_GetSoulgemCapacity");
static_assert(offsetof(VItemDetailsViewModel_GetSoulgemCapacity, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetSoulgemCapacity::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetSoulgemLevel
// 0x0018 (0x0018 - 0x0000)
struct VItemDetailsViewModel_GetSoulgemLevel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetSoulgemLevel) == 0x000008, "Wrong alignment on VItemDetailsViewModel_GetSoulgemLevel");
static_assert(sizeof(VItemDetailsViewModel_GetSoulgemLevel) == 0x000018, "Wrong size on VItemDetailsViewModel_GetSoulgemLevel");
static_assert(offsetof(VItemDetailsViewModel_GetSoulgemLevel, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetSoulgemLevel::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetSoulgemMaxCapacity
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_GetSoulgemMaxCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetSoulgemMaxCapacity) == 0x000004, "Wrong alignment on VItemDetailsViewModel_GetSoulgemMaxCapacity");
static_assert(sizeof(VItemDetailsViewModel_GetSoulgemMaxCapacity) == 0x000004, "Wrong size on VItemDetailsViewModel_GetSoulgemMaxCapacity");
static_assert(offsetof(VItemDetailsViewModel_GetSoulgemMaxCapacity, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetSoulgemMaxCapacity::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetWeaponCharge
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_GetWeaponCharge final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetWeaponCharge) == 0x000004, "Wrong alignment on VItemDetailsViewModel_GetWeaponCharge");
static_assert(sizeof(VItemDetailsViewModel_GetWeaponCharge) == 0x000004, "Wrong size on VItemDetailsViewModel_GetWeaponCharge");
static_assert(offsetof(VItemDetailsViewModel_GetWeaponCharge, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetWeaponCharge::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetWeaponMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_GetWeaponMaxCharge final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetWeaponMaxCharge) == 0x000004, "Wrong alignment on VItemDetailsViewModel_GetWeaponMaxCharge");
static_assert(sizeof(VItemDetailsViewModel_GetWeaponMaxCharge) == 0x000004, "Wrong size on VItemDetailsViewModel_GetWeaponMaxCharge");
static_assert(offsetof(VItemDetailsViewModel_GetWeaponMaxCharge, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetWeaponMaxCharge::ReturnValue' has a wrong offset!");

// Function Altar.VItemDetailsViewModel.GetWeaponUse
// 0x0004 (0x0004 - 0x0000)
struct VItemDetailsViewModel_GetWeaponUse final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemDetailsViewModel_GetWeaponUse) == 0x000004, "Wrong alignment on VItemDetailsViewModel_GetWeaponUse");
static_assert(sizeof(VItemDetailsViewModel_GetWeaponUse) == 0x000004, "Wrong size on VItemDetailsViewModel_GetWeaponUse");
static_assert(offsetof(VItemDetailsViewModel_GetWeaponUse, ReturnValue) == 0x000000, "Member 'VItemDetailsViewModel_GetWeaponUse::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.RegisterSendTimeToWait
// 0x0004 (0x0004 - 0x0000)
struct VSleepWaitMenuViewModel_RegisterSendTimeToWait final
{
public:
	float                                         NewTimeToWait;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_RegisterSendTimeToWait) == 0x000004, "Wrong alignment on VSleepWaitMenuViewModel_RegisterSendTimeToWait");
static_assert(sizeof(VSleepWaitMenuViewModel_RegisterSendTimeToWait) == 0x000004, "Wrong size on VSleepWaitMenuViewModel_RegisterSendTimeToWait");
static_assert(offsetof(VSleepWaitMenuViewModel_RegisterSendTimeToWait, NewTimeToWait) == 0x000000, "Member 'VSleepWaitMenuViewModel_RegisterSendTimeToWait::NewTimeToWait' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.SetIsWaitingInProgress
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_SetIsWaitingInProgress final
{
public:
	bool                                          bNewIsWaitingInProgress;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_SetIsWaitingInProgress) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_SetIsWaitingInProgress");
static_assert(sizeof(VSleepWaitMenuViewModel_SetIsWaitingInProgress) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_SetIsWaitingInProgress");
static_assert(offsetof(VSleepWaitMenuViewModel_SetIsWaitingInProgress, bNewIsWaitingInProgress) == 0x000000, "Member 'VSleepWaitMenuViewModel_SetIsWaitingInProgress::bNewIsWaitingInProgress' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.SetScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VSleepWaitMenuViewModel_SetScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        NewScrollbarProperties;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_SetScrollbarProperties) == 0x000004, "Wrong alignment on VSleepWaitMenuViewModel_SetScrollbarProperties");
static_assert(sizeof(VSleepWaitMenuViewModel_SetScrollbarProperties) == 0x000010, "Wrong size on VSleepWaitMenuViewModel_SetScrollbarProperties");
static_assert(offsetof(VSleepWaitMenuViewModel_SetScrollbarProperties, NewScrollbarProperties) == 0x000000, "Member 'VSleepWaitMenuViewModel_SetScrollbarProperties::NewScrollbarProperties' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.SetShouldFadeOut
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_SetShouldFadeOut final
{
public:
	bool                                          bInShouldFadeOut;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_SetShouldFadeOut) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_SetShouldFadeOut");
static_assert(sizeof(VSleepWaitMenuViewModel_SetShouldFadeOut) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_SetShouldFadeOut");
static_assert(offsetof(VSleepWaitMenuViewModel_SetShouldFadeOut, bInShouldFadeOut) == 0x000000, "Member 'VSleepWaitMenuViewModel_SetShouldFadeOut::bInShouldFadeOut' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.SetSleepWaitGameInfo
// 0x0030 (0x0030 - 0x0000)
struct VSleepWaitMenuViewModel_SetSleepWaitGameInfo final
{
public:
	struct FLegacySleepWaitMenuGameInfo           NewSleepWaitGameInfo;                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_SetSleepWaitGameInfo) == 0x000008, "Wrong alignment on VSleepWaitMenuViewModel_SetSleepWaitGameInfo");
static_assert(sizeof(VSleepWaitMenuViewModel_SetSleepWaitGameInfo) == 0x000030, "Wrong size on VSleepWaitMenuViewModel_SetSleepWaitGameInfo");
static_assert(offsetof(VSleepWaitMenuViewModel_SetSleepWaitGameInfo, NewSleepWaitGameInfo) == 0x000000, "Member 'VSleepWaitMenuViewModel_SetSleepWaitGameInfo::NewSleepWaitGameInfo' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.SetTimeToWait
// 0x0004 (0x0004 - 0x0000)
struct VSleepWaitMenuViewModel_SetTimeToWait final
{
public:
	float                                         NewTimeToWait;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_SetTimeToWait) == 0x000004, "Wrong alignment on VSleepWaitMenuViewModel_SetTimeToWait");
static_assert(sizeof(VSleepWaitMenuViewModel_SetTimeToWait) == 0x000004, "Wrong size on VSleepWaitMenuViewModel_SetTimeToWait");
static_assert(offsetof(VSleepWaitMenuViewModel_SetTimeToWait, NewTimeToWait) == 0x000000, "Member 'VSleepWaitMenuViewModel_SetTimeToWait::NewTimeToWait' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_SetVisibility) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_SetVisibility");
static_assert(sizeof(VSleepWaitMenuViewModel_SetVisibility) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_SetVisibility");
static_assert(offsetof(VSleepWaitMenuViewModel_SetVisibility, bNewVisibility) == 0x000000, "Member 'VSleepWaitMenuViewModel_SetVisibility::bNewVisibility' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.GetIsSleep
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_GetIsSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_GetIsSleep) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_GetIsSleep");
static_assert(sizeof(VSleepWaitMenuViewModel_GetIsSleep) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_GetIsSleep");
static_assert(offsetof(VSleepWaitMenuViewModel_GetIsSleep, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_GetIsSleep::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.GetIsWaitingInProgress
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_GetIsWaitingInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_GetIsWaitingInProgress) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_GetIsWaitingInProgress");
static_assert(sizeof(VSleepWaitMenuViewModel_GetIsWaitingInProgress) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_GetIsWaitingInProgress");
static_assert(offsetof(VSleepWaitMenuViewModel_GetIsWaitingInProgress, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_GetIsWaitingInProgress::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.GetScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VSleepWaitMenuViewModel_GetScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_GetScrollbarProperties) == 0x000004, "Wrong alignment on VSleepWaitMenuViewModel_GetScrollbarProperties");
static_assert(sizeof(VSleepWaitMenuViewModel_GetScrollbarProperties) == 0x000010, "Wrong size on VSleepWaitMenuViewModel_GetScrollbarProperties");
static_assert(offsetof(VSleepWaitMenuViewModel_GetScrollbarProperties, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_GetScrollbarProperties::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.GetShouldFadeOut
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_GetShouldFadeOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_GetShouldFadeOut) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_GetShouldFadeOut");
static_assert(sizeof(VSleepWaitMenuViewModel_GetShouldFadeOut) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_GetShouldFadeOut");
static_assert(offsetof(VSleepWaitMenuViewModel_GetShouldFadeOut, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_GetShouldFadeOut::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.GetSleepWaitGameInfo
// 0x0030 (0x0030 - 0x0000)
struct VSleepWaitMenuViewModel_GetSleepWaitGameInfo final
{
public:
	struct FLegacySleepWaitMenuGameInfo           ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_GetSleepWaitGameInfo) == 0x000008, "Wrong alignment on VSleepWaitMenuViewModel_GetSleepWaitGameInfo");
static_assert(sizeof(VSleepWaitMenuViewModel_GetSleepWaitGameInfo) == 0x000030, "Wrong size on VSleepWaitMenuViewModel_GetSleepWaitGameInfo");
static_assert(offsetof(VSleepWaitMenuViewModel_GetSleepWaitGameInfo, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_GetSleepWaitGameInfo::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.GetTimeToWait
// 0x0004 (0x0004 - 0x0000)
struct VSleepWaitMenuViewModel_GetTimeToWait final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_GetTimeToWait) == 0x000004, "Wrong alignment on VSleepWaitMenuViewModel_GetTimeToWait");
static_assert(sizeof(VSleepWaitMenuViewModel_GetTimeToWait) == 0x000004, "Wrong size on VSleepWaitMenuViewModel_GetTimeToWait");
static_assert(offsetof(VSleepWaitMenuViewModel_GetTimeToWait, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_GetTimeToWait::ReturnValue' has a wrong offset!");

// Function Altar.VSleepWaitMenuViewModel.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct VSleepWaitMenuViewModel_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSleepWaitMenuViewModel_IsVisible) == 0x000001, "Wrong alignment on VSleepWaitMenuViewModel_IsVisible");
static_assert(sizeof(VSleepWaitMenuViewModel_IsVisible) == 0x000001, "Wrong size on VSleepWaitMenuViewModel_IsVisible");
static_assert(offsetof(VSleepWaitMenuViewModel_IsVisible, ReturnValue) == 0x000000, "Member 'VSleepWaitMenuViewModel_IsVisible::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuIngredientEffects.SetProperties
// 0x0028 (0x0028 - 0x0000)
struct VOriginalInventoryMenuIngredientEffects_SetProperties final
{
public:
	struct FOriginalInventoryMenuIngredientEffects Value;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuIngredientEffects_SetProperties) == 0x000008, "Wrong alignment on VOriginalInventoryMenuIngredientEffects_SetProperties");
static_assert(sizeof(VOriginalInventoryMenuIngredientEffects_SetProperties) == 0x000028, "Wrong size on VOriginalInventoryMenuIngredientEffects_SetProperties");
static_assert(offsetof(VOriginalInventoryMenuIngredientEffects_SetProperties, Value) == 0x000000, "Member 'VOriginalInventoryMenuIngredientEffects_SetProperties::Value' has a wrong offset!");

// Function Altar.VOriginalInventoryMenuIngredientEffects.GetProperties
// 0x0028 (0x0028 - 0x0000)
struct VOriginalInventoryMenuIngredientEffects_GetProperties final
{
public:
	struct FOriginalInventoryMenuIngredientEffects ReturnValue;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalInventoryMenuIngredientEffects_GetProperties) == 0x000008, "Wrong alignment on VOriginalInventoryMenuIngredientEffects_GetProperties");
static_assert(sizeof(VOriginalInventoryMenuIngredientEffects_GetProperties) == 0x000028, "Wrong size on VOriginalInventoryMenuIngredientEffects_GetProperties");
static_assert(offsetof(VOriginalInventoryMenuIngredientEffects_GetProperties, ReturnValue) == 0x000000, "Member 'VOriginalInventoryMenuIngredientEffects_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VItemEffectsViewModel.SetIngredientEffects
// 0x0010 (0x0010 - 0x0000)
struct VItemEffectsViewModel_SetIngredientEffects final
{
public:
	TArray<struct FOriginalInventoryMenuIngredientEffects> NewIngredientEffects;                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemEffectsViewModel_SetIngredientEffects) == 0x000008, "Wrong alignment on VItemEffectsViewModel_SetIngredientEffects");
static_assert(sizeof(VItemEffectsViewModel_SetIngredientEffects) == 0x000010, "Wrong size on VItemEffectsViewModel_SetIngredientEffects");
static_assert(offsetof(VItemEffectsViewModel_SetIngredientEffects, NewIngredientEffects) == 0x000000, "Member 'VItemEffectsViewModel_SetIngredientEffects::NewIngredientEffects' has a wrong offset!");

// Function Altar.VItemEffectsViewModel.SetItemEffects
// 0x0010 (0x0010 - 0x0000)
struct VItemEffectsViewModel_SetItemEffects final
{
public:
	TArray<struct FOriginalInventoryMenuItemEffects> NewItemEffects;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemEffectsViewModel_SetItemEffects) == 0x000008, "Wrong alignment on VItemEffectsViewModel_SetItemEffects");
static_assert(sizeof(VItemEffectsViewModel_SetItemEffects) == 0x000010, "Wrong size on VItemEffectsViewModel_SetItemEffects");
static_assert(offsetof(VItemEffectsViewModel_SetItemEffects, NewItemEffects) == 0x000000, "Member 'VItemEffectsViewModel_SetItemEffects::NewItemEffects' has a wrong offset!");

// Function Altar.VItemEffectsViewModel.SetSigilstoneEffects
// 0x0010 (0x0010 - 0x0000)
struct VItemEffectsViewModel_SetSigilstoneEffects final
{
public:
	TArray<struct FModernEffectItemData>          NewSigilstoneEffects;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemEffectsViewModel_SetSigilstoneEffects) == 0x000008, "Wrong alignment on VItemEffectsViewModel_SetSigilstoneEffects");
static_assert(sizeof(VItemEffectsViewModel_SetSigilstoneEffects) == 0x000010, "Wrong size on VItemEffectsViewModel_SetSigilstoneEffects");
static_assert(offsetof(VItemEffectsViewModel_SetSigilstoneEffects, NewSigilstoneEffects) == 0x000000, "Member 'VItemEffectsViewModel_SetSigilstoneEffects::NewSigilstoneEffects' has a wrong offset!");

// Function Altar.VItemEffectsViewModel.GetIngredientEffects
// 0x0010 (0x0010 - 0x0000)
struct VItemEffectsViewModel_GetIngredientEffects final
{
public:
	TArray<struct FOriginalInventoryMenuIngredientEffects> ReturnValue;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemEffectsViewModel_GetIngredientEffects) == 0x000008, "Wrong alignment on VItemEffectsViewModel_GetIngredientEffects");
static_assert(sizeof(VItemEffectsViewModel_GetIngredientEffects) == 0x000010, "Wrong size on VItemEffectsViewModel_GetIngredientEffects");
static_assert(offsetof(VItemEffectsViewModel_GetIngredientEffects, ReturnValue) == 0x000000, "Member 'VItemEffectsViewModel_GetIngredientEffects::ReturnValue' has a wrong offset!");

// Function Altar.VItemEffectsViewModel.GetItemEffects
// 0x0010 (0x0010 - 0x0000)
struct VItemEffectsViewModel_GetItemEffects final
{
public:
	TArray<struct FOriginalInventoryMenuItemEffects> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemEffectsViewModel_GetItemEffects) == 0x000008, "Wrong alignment on VItemEffectsViewModel_GetItemEffects");
static_assert(sizeof(VItemEffectsViewModel_GetItemEffects) == 0x000010, "Wrong size on VItemEffectsViewModel_GetItemEffects");
static_assert(offsetof(VItemEffectsViewModel_GetItemEffects, ReturnValue) == 0x000000, "Member 'VItemEffectsViewModel_GetItemEffects::ReturnValue' has a wrong offset!");

// Function Altar.VItemEffectsViewModel.GetSigilstoneEffects
// 0x0010 (0x0010 - 0x0000)
struct VItemEffectsViewModel_GetSigilstoneEffects final
{
public:
	TArray<struct FModernEffectItemData>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VItemEffectsViewModel_GetSigilstoneEffects) == 0x000008, "Wrong alignment on VItemEffectsViewModel_GetSigilstoneEffects");
static_assert(sizeof(VItemEffectsViewModel_GetSigilstoneEffects) == 0x000010, "Wrong size on VItemEffectsViewModel_GetSigilstoneEffects");
static_assert(offsetof(VItemEffectsViewModel_GetSigilstoneEffects, ReturnValue) == 0x000000, "Member 'VItemEffectsViewModel_GetSigilstoneEffects::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.SetEffectVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_SetEffectVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_SetEffectVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_SetEffectVolume");
static_assert(sizeof(VLegacyAudioMenu_SetEffectVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_SetEffectVolume");
static_assert(offsetof(VLegacyAudioMenu_SetEffectVolume, Value) == 0x000000, "Member 'VLegacyAudioMenu_SetEffectVolume::Value' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.SetFootVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_SetFootVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_SetFootVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_SetFootVolume");
static_assert(sizeof(VLegacyAudioMenu_SetFootVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_SetFootVolume");
static_assert(offsetof(VLegacyAudioMenu_SetFootVolume, Value) == 0x000000, "Member 'VLegacyAudioMenu_SetFootVolume::Value' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.SetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_SetMasterVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_SetMasterVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_SetMasterVolume");
static_assert(sizeof(VLegacyAudioMenu_SetMasterVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_SetMasterVolume");
static_assert(offsetof(VLegacyAudioMenu_SetMasterVolume, Value) == 0x000000, "Member 'VLegacyAudioMenu_SetMasterVolume::Value' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_SetMusicVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_SetMusicVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_SetMusicVolume");
static_assert(sizeof(VLegacyAudioMenu_SetMusicVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_SetMusicVolume");
static_assert(offsetof(VLegacyAudioMenu_SetMusicVolume, Value) == 0x000000, "Member 'VLegacyAudioMenu_SetMusicVolume::Value' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.SetSettings
// 0x0014 (0x0014 - 0x0000)
struct VLegacyAudioMenu_SetSettings final
{
public:
	struct FLegacyAudioSettings                   Value;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_SetSettings) == 0x000004, "Wrong alignment on VLegacyAudioMenu_SetSettings");
static_assert(sizeof(VLegacyAudioMenu_SetSettings) == 0x000014, "Wrong size on VLegacyAudioMenu_SetSettings");
static_assert(offsetof(VLegacyAudioMenu_SetSettings, Value) == 0x000000, "Member 'VLegacyAudioMenu_SetSettings::Value' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_SetVoiceVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_SetVoiceVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_SetVoiceVolume");
static_assert(sizeof(VLegacyAudioMenu_SetVoiceVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_SetVoiceVolume");
static_assert(offsetof(VLegacyAudioMenu_SetVoiceVolume, Value) == 0x000000, "Member 'VLegacyAudioMenu_SetVoiceVolume::Value' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.GetEffectVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_GetEffectVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_GetEffectVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_GetEffectVolume");
static_assert(sizeof(VLegacyAudioMenu_GetEffectVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_GetEffectVolume");
static_assert(offsetof(VLegacyAudioMenu_GetEffectVolume, ReturnValue) == 0x000000, "Member 'VLegacyAudioMenu_GetEffectVolume::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.GetFootVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_GetFootVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_GetFootVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_GetFootVolume");
static_assert(sizeof(VLegacyAudioMenu_GetFootVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_GetFootVolume");
static_assert(offsetof(VLegacyAudioMenu_GetFootVolume, ReturnValue) == 0x000000, "Member 'VLegacyAudioMenu_GetFootVolume::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_GetMasterVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_GetMasterVolume");
static_assert(sizeof(VLegacyAudioMenu_GetMasterVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_GetMasterVolume");
static_assert(offsetof(VLegacyAudioMenu_GetMasterVolume, ReturnValue) == 0x000000, "Member 'VLegacyAudioMenu_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_GetMusicVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_GetMusicVolume");
static_assert(sizeof(VLegacyAudioMenu_GetMusicVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_GetMusicVolume");
static_assert(offsetof(VLegacyAudioMenu_GetMusicVolume, ReturnValue) == 0x000000, "Member 'VLegacyAudioMenu_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.GetSettings
// 0x0014 (0x0014 - 0x0000)
struct VLegacyAudioMenu_GetSettings final
{
public:
	struct FLegacyAudioSettings                   ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_GetSettings) == 0x000004, "Wrong alignment on VLegacyAudioMenu_GetSettings");
static_assert(sizeof(VLegacyAudioMenu_GetSettings) == 0x000014, "Wrong size on VLegacyAudioMenu_GetSettings");
static_assert(offsetof(VLegacyAudioMenu_GetSettings, ReturnValue) == 0x000000, "Member 'VLegacyAudioMenu_GetSettings::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyAudioMenu.GetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct VLegacyAudioMenu_GetVoiceVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyAudioMenu_GetVoiceVolume) == 0x000004, "Wrong alignment on VLegacyAudioMenu_GetVoiceVolume");
static_assert(sizeof(VLegacyAudioMenu_GetVoiceVolume) == 0x000004, "Wrong size on VLegacyAudioMenu_GetVoiceVolume");
static_assert(offsetof(VLegacyAudioMenu_GetVoiceVolume, ReturnValue) == 0x000000, "Member 'VLegacyAudioMenu_GetVoiceVolume::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyBookMenu.ResetContainers
// 0x0001 (0x0001 - 0x0000)
struct VLegacyBookMenu_ResetContainers final
{
public:
	bool                                          bEmptyContainers;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyBookMenu_ResetContainers) == 0x000001, "Wrong alignment on VLegacyBookMenu_ResetContainers");
static_assert(sizeof(VLegacyBookMenu_ResetContainers) == 0x000001, "Wrong size on VLegacyBookMenu_ResetContainers");
static_assert(offsetof(VLegacyBookMenu_ResetContainers, bEmptyContainers) == 0x000000, "Member 'VLegacyBookMenu_ResetContainers::bEmptyContainers' has a wrong offset!");

// Function Altar.VLegacyBookMenu.SplitTextIntoTextLines
// 0x0010 (0x0010 - 0x0000)
struct VLegacyBookMenu_SplitTextIntoTextLines final
{
public:
	TArray<struct FLegacyBookStylizedText>        Texts;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyBookMenu_SplitTextIntoTextLines) == 0x000008, "Wrong alignment on VLegacyBookMenu_SplitTextIntoTextLines");
static_assert(sizeof(VLegacyBookMenu_SplitTextIntoTextLines) == 0x000010, "Wrong size on VLegacyBookMenu_SplitTextIntoTextLines");
static_assert(offsetof(VLegacyBookMenu_SplitTextIntoTextLines, Texts) == 0x000000, "Member 'VLegacyBookMenu_SplitTextIntoTextLines::Texts' has a wrong offset!");

// Function Altar.VSettingsPageInterface.DoesAllowNavigation
// 0x0001 (0x0001 - 0x0000)
struct VSettingsPageInterface_DoesAllowNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSettingsPageInterface_DoesAllowNavigation) == 0x000001, "Wrong alignment on VSettingsPageInterface_DoesAllowNavigation");
static_assert(sizeof(VSettingsPageInterface_DoesAllowNavigation) == 0x000001, "Wrong size on VSettingsPageInterface_DoesAllowNavigation");
static_assert(offsetof(VSettingsPageInterface_DoesAllowNavigation, ReturnValue) == 0x000000, "Member 'VSettingsPageInterface_DoesAllowNavigation::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.OnIsEntryEnabledUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated) == 0x000001, "Wrong alignment on VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated");
static_assert(sizeof(VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated) == 0x000001, "Wrong size on VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated");
static_assert(offsetof(VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_OnIsEntryEnabledUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.OnItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct VLegacyControlsMappingEntry_OnItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_OnItemObjectSet) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_OnItemObjectSet");
static_assert(sizeof(VLegacyControlsMappingEntry_OnItemObjectSet) == 0x000008, "Wrong size on VLegacyControlsMappingEntry_OnItemObjectSet");
static_assert(offsetof(VLegacyControlsMappingEntry_OnItemObjectSet, ListItemObject) == 0x000000, "Member 'VLegacyControlsMappingEntry_OnItemObjectSet::ListItemObject' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.OnLabelUpdated
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsMappingEntry_OnLabelUpdated final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_OnLabelUpdated) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_OnLabelUpdated");
static_assert(sizeof(VLegacyControlsMappingEntry_OnLabelUpdated) == 0x000018, "Wrong size on VLegacyControlsMappingEntry_OnLabelUpdated");
static_assert(offsetof(VLegacyControlsMappingEntry_OnLabelUpdated, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_OnLabelUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.OnMappingUpdated
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsMappingEntry_OnMappingUpdated final
{
public:
	struct FKey                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_OnMappingUpdated) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_OnMappingUpdated");
static_assert(sizeof(VLegacyControlsMappingEntry_OnMappingUpdated) == 0x000018, "Wrong size on VLegacyControlsMappingEntry_OnMappingUpdated");
static_assert(offsetof(VLegacyControlsMappingEntry_OnMappingUpdated, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_OnMappingUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.SetDevice
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMappingEntry_SetDevice final
{
public:
	EFLegacyControlsDevice                        Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_SetDevice) == 0x000001, "Wrong alignment on VLegacyControlsMappingEntry_SetDevice");
static_assert(sizeof(VLegacyControlsMappingEntry_SetDevice) == 0x000001, "Wrong size on VLegacyControlsMappingEntry_SetDevice");
static_assert(offsetof(VLegacyControlsMappingEntry_SetDevice, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_SetDevice::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.SetEntryEnabled
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMappingEntry_SetEntryEnabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_SetEntryEnabled) == 0x000001, "Wrong alignment on VLegacyControlsMappingEntry_SetEntryEnabled");
static_assert(sizeof(VLegacyControlsMappingEntry_SetEntryEnabled) == 0x000001, "Wrong size on VLegacyControlsMappingEntry_SetEntryEnabled");
static_assert(offsetof(VLegacyControlsMappingEntry_SetEntryEnabled, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_SetEntryEnabled::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsMappingEntry_SetLabel final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_SetLabel) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_SetLabel");
static_assert(sizeof(VLegacyControlsMappingEntry_SetLabel) == 0x000018, "Wrong size on VLegacyControlsMappingEntry_SetLabel");
static_assert(offsetof(VLegacyControlsMappingEntry_SetLabel, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_SetLabel::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.SetMapping
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsMappingEntry_SetMapping final
{
public:
	struct FKey                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_SetMapping) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_SetMapping");
static_assert(sizeof(VLegacyControlsMappingEntry_SetMapping) == 0x000018, "Wrong size on VLegacyControlsMappingEntry_SetMapping");
static_assert(offsetof(VLegacyControlsMappingEntry_SetMapping, Value) == 0x000000, "Member 'VLegacyControlsMappingEntry_SetMapping::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.GetDevice
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMappingEntry_GetDevice final
{
public:
	EFLegacyControlsDevice                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_GetDevice) == 0x000001, "Wrong alignment on VLegacyControlsMappingEntry_GetDevice");
static_assert(sizeof(VLegacyControlsMappingEntry_GetDevice) == 0x000001, "Wrong size on VLegacyControlsMappingEntry_GetDevice");
static_assert(offsetof(VLegacyControlsMappingEntry_GetDevice, ReturnValue) == 0x000000, "Member 'VLegacyControlsMappingEntry_GetDevice::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.GetEntryEnabled
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMappingEntry_GetEntryEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_GetEntryEnabled) == 0x000001, "Wrong alignment on VLegacyControlsMappingEntry_GetEntryEnabled");
static_assert(sizeof(VLegacyControlsMappingEntry_GetEntryEnabled) == 0x000001, "Wrong size on VLegacyControlsMappingEntry_GetEntryEnabled");
static_assert(offsetof(VLegacyControlsMappingEntry_GetEntryEnabled, ReturnValue) == 0x000000, "Member 'VLegacyControlsMappingEntry_GetEntryEnabled::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.GetLabel
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsMappingEntry_GetLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_GetLabel) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_GetLabel");
static_assert(sizeof(VLegacyControlsMappingEntry_GetLabel) == 0x000018, "Wrong size on VLegacyControlsMappingEntry_GetLabel");
static_assert(offsetof(VLegacyControlsMappingEntry_GetLabel, ReturnValue) == 0x000000, "Member 'VLegacyControlsMappingEntry_GetLabel::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMappingEntry.GetMapping
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsMappingEntry_GetMapping final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMappingEntry_GetMapping) == 0x000008, "Wrong alignment on VLegacyControlsMappingEntry_GetMapping");
static_assert(sizeof(VLegacyControlsMappingEntry_GetMapping) == 0x000018, "Wrong size on VLegacyControlsMappingEntry_GetMapping");
static_assert(offsetof(VLegacyControlsMappingEntry_GetMapping, ReturnValue) == 0x000000, "Member 'VLegacyControlsMappingEntry_GetMapping::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsInputMapping.Set
// 0x0038 (0x0038 - 0x0000)
struct VLegacyControlsInputMapping_Set final
{
public:
	struct FLegacyControlsInputMapping            Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFLegacyControlsDevice                        InDevice;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VLegacyControlsInputMapping_Set) == 0x000008, "Wrong alignment on VLegacyControlsInputMapping_Set");
static_assert(sizeof(VLegacyControlsInputMapping_Set) == 0x000038, "Wrong size on VLegacyControlsInputMapping_Set");
static_assert(offsetof(VLegacyControlsInputMapping_Set, Value) == 0x000000, "Member 'VLegacyControlsInputMapping_Set::Value' has a wrong offset!");
static_assert(offsetof(VLegacyControlsInputMapping_Set, InDevice) == 0x000030, "Member 'VLegacyControlsInputMapping_Set::InDevice' has a wrong offset!");

// Function Altar.VLegacyControlsInputMapping.SetMapping
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsInputMapping_SetMapping final
{
public:
	struct FKey                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsInputMapping_SetMapping) == 0x000008, "Wrong alignment on VLegacyControlsInputMapping_SetMapping");
static_assert(sizeof(VLegacyControlsInputMapping_SetMapping) == 0x000018, "Wrong size on VLegacyControlsInputMapping_SetMapping");
static_assert(offsetof(VLegacyControlsInputMapping_SetMapping, Value) == 0x000000, "Member 'VLegacyControlsInputMapping_SetMapping::Value' has a wrong offset!");

// Function Altar.VLegacyControlsInputMapping.GetAction
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsInputMapping_GetAction final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsInputMapping_GetAction) == 0x000008, "Wrong alignment on VLegacyControlsInputMapping_GetAction");
static_assert(sizeof(VLegacyControlsInputMapping_GetAction) == 0x000018, "Wrong size on VLegacyControlsInputMapping_GetAction");
static_assert(offsetof(VLegacyControlsInputMapping_GetAction, ReturnValue) == 0x000000, "Member 'VLegacyControlsInputMapping_GetAction::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsInputMapping.GetDevice
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsInputMapping_GetDevice final
{
public:
	EFLegacyControlsDevice                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsInputMapping_GetDevice) == 0x000001, "Wrong alignment on VLegacyControlsInputMapping_GetDevice");
static_assert(sizeof(VLegacyControlsInputMapping_GetDevice) == 0x000001, "Wrong size on VLegacyControlsInputMapping_GetDevice");
static_assert(offsetof(VLegacyControlsInputMapping_GetDevice, ReturnValue) == 0x000000, "Member 'VLegacyControlsInputMapping_GetDevice::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsInputMapping.GetMapping
// 0x0018 (0x0018 - 0x0000)
struct VLegacyControlsInputMapping_GetMapping final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsInputMapping_GetMapping) == 0x000008, "Wrong alignment on VLegacyControlsInputMapping_GetMapping");
static_assert(sizeof(VLegacyControlsInputMapping_GetMapping) == 0x000018, "Wrong size on VLegacyControlsInputMapping_GetMapping");
static_assert(offsetof(VLegacyControlsInputMapping_GetMapping, ReturnValue) == 0x000000, "Member 'VLegacyControlsInputMapping_GetMapping::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.OnDeviceMappingsUpdatedInternal
// 0x0010 (0x0010 - 0x0000)
struct VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal final
{
public:
	TArray<struct FLegacyControlsInputMapping>    Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal) == 0x000008, "Wrong alignment on VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal");
static_assert(sizeof(VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal) == 0x000010, "Wrong size on VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal");
static_assert(offsetof(VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal, Value) == 0x000000, "Member 'VLegacyControlsMenu_OnDeviceMappingsUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.OnIsJoystickDetectedUpdatedInternal
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal) == 0x000001, "Wrong alignment on VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal");
static_assert(sizeof(VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal) == 0x000001, "Wrong size on VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal");
static_assert(offsetof(VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal, Value) == 0x000000, "Member 'VLegacyControlsMenu_OnIsJoystickDetectedUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.OnSettingsUpdatedInternal
// 0x0008 (0x0008 - 0x0000)
struct VLegacyControlsMenu_OnSettingsUpdatedInternal final
{
public:
	struct FLegacyControlsSettings                Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_OnSettingsUpdatedInternal) == 0x000004, "Wrong alignment on VLegacyControlsMenu_OnSettingsUpdatedInternal");
static_assert(sizeof(VLegacyControlsMenu_OnSettingsUpdatedInternal) == 0x000008, "Wrong size on VLegacyControlsMenu_OnSettingsUpdatedInternal");
static_assert(offsetof(VLegacyControlsMenu_OnSettingsUpdatedInternal, Value) == 0x000000, "Member 'VLegacyControlsMenu_OnSettingsUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetDeviceMapping
// 0x0030 (0x0030 - 0x0000)
struct VLegacyControlsMenu_SetDeviceMapping final
{
public:
	struct FLegacyControlsInputMapping            Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetDeviceMapping) == 0x000008, "Wrong alignment on VLegacyControlsMenu_SetDeviceMapping");
static_assert(sizeof(VLegacyControlsMenu_SetDeviceMapping) == 0x000030, "Wrong size on VLegacyControlsMenu_SetDeviceMapping");
static_assert(offsetof(VLegacyControlsMenu_SetDeviceMapping, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetDeviceMapping::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetDeviceMappings
// 0x0010 (0x0010 - 0x0000)
struct VLegacyControlsMenu_SetDeviceMappings final
{
public:
	TArray<struct FLegacyControlsInputMapping>    Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetDeviceMappings) == 0x000008, "Wrong alignment on VLegacyControlsMenu_SetDeviceMappings");
static_assert(sizeof(VLegacyControlsMenu_SetDeviceMappings) == 0x000010, "Wrong size on VLegacyControlsMenu_SetDeviceMappings");
static_assert(offsetof(VLegacyControlsMenu_SetDeviceMappings, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetDeviceMappings::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetInvertYInternal
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMenu_SetInvertYInternal final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetInvertYInternal) == 0x000001, "Wrong alignment on VLegacyControlsMenu_SetInvertYInternal");
static_assert(sizeof(VLegacyControlsMenu_SetInvertYInternal) == 0x000001, "Wrong size on VLegacyControlsMenu_SetInvertYInternal");
static_assert(offsetof(VLegacyControlsMenu_SetInvertYInternal, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetInvertYInternal::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetIsJoystickDetected
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMenu_SetIsJoystickDetected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetIsJoystickDetected) == 0x000001, "Wrong alignment on VLegacyControlsMenu_SetIsJoystickDetected");
static_assert(sizeof(VLegacyControlsMenu_SetIsJoystickDetected) == 0x000001, "Wrong size on VLegacyControlsMenu_SetIsJoystickDetected");
static_assert(offsetof(VLegacyControlsMenu_SetIsJoystickDetected, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetIsJoystickDetected::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetMouseSensitivityInternal
// 0x0004 (0x0004 - 0x0000)
struct VLegacyControlsMenu_SetMouseSensitivityInternal final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetMouseSensitivityInternal) == 0x000004, "Wrong alignment on VLegacyControlsMenu_SetMouseSensitivityInternal");
static_assert(sizeof(VLegacyControlsMenu_SetMouseSensitivityInternal) == 0x000004, "Wrong size on VLegacyControlsMenu_SetMouseSensitivityInternal");
static_assert(offsetof(VLegacyControlsMenu_SetMouseSensitivityInternal, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetMouseSensitivityInternal::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetSettings
// 0x0008 (0x0008 - 0x0000)
struct VLegacyControlsMenu_SetSettings final
{
public:
	struct FLegacyControlsSettings                Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetSettings) == 0x000004, "Wrong alignment on VLegacyControlsMenu_SetSettings");
static_assert(sizeof(VLegacyControlsMenu_SetSettings) == 0x000008, "Wrong size on VLegacyControlsMenu_SetSettings");
static_assert(offsetof(VLegacyControlsMenu_SetSettings, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetSettings::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.SetSwapStickControlsInternal
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMenu_SetSwapStickControlsInternal final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_SetSwapStickControlsInternal) == 0x000001, "Wrong alignment on VLegacyControlsMenu_SetSwapStickControlsInternal");
static_assert(sizeof(VLegacyControlsMenu_SetSwapStickControlsInternal) == 0x000001, "Wrong size on VLegacyControlsMenu_SetSwapStickControlsInternal");
static_assert(offsetof(VLegacyControlsMenu_SetSwapStickControlsInternal, Value) == 0x000000, "Member 'VLegacyControlsMenu_SetSwapStickControlsInternal::Value' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.GetDeviceMappings
// 0x0010 (0x0010 - 0x0000)
struct VLegacyControlsMenu_GetDeviceMappings final
{
public:
	TArray<struct FLegacyControlsInputMapping>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_GetDeviceMappings) == 0x000008, "Wrong alignment on VLegacyControlsMenu_GetDeviceMappings");
static_assert(sizeof(VLegacyControlsMenu_GetDeviceMappings) == 0x000010, "Wrong size on VLegacyControlsMenu_GetDeviceMappings");
static_assert(offsetof(VLegacyControlsMenu_GetDeviceMappings, ReturnValue) == 0x000000, "Member 'VLegacyControlsMenu_GetDeviceMappings::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.GetIsJoystickDetected
// 0x0001 (0x0001 - 0x0000)
struct VLegacyControlsMenu_GetIsJoystickDetected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_GetIsJoystickDetected) == 0x000001, "Wrong alignment on VLegacyControlsMenu_GetIsJoystickDetected");
static_assert(sizeof(VLegacyControlsMenu_GetIsJoystickDetected) == 0x000001, "Wrong size on VLegacyControlsMenu_GetIsJoystickDetected");
static_assert(offsetof(VLegacyControlsMenu_GetIsJoystickDetected, ReturnValue) == 0x000000, "Member 'VLegacyControlsMenu_GetIsJoystickDetected::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyControlsMenu.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct VLegacyControlsMenu_GetSettings final
{
public:
	struct FLegacyControlsSettings                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyControlsMenu_GetSettings) == 0x000004, "Wrong alignment on VLegacyControlsMenu_GetSettings");
static_assert(sizeof(VLegacyControlsMenu_GetSettings) == 0x000008, "Wrong size on VLegacyControlsMenu_GetSettings");
static_assert(offsetof(VLegacyControlsMenu_GetSettings, ReturnValue) == 0x000000, "Member 'VLegacyControlsMenu_GetSettings::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyEditableText.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyEditableText_SetHintText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyEditableText_SetHintText) == 0x000008, "Wrong alignment on VLegacyEditableText_SetHintText");
static_assert(sizeof(VLegacyEditableText_SetHintText) == 0x000018, "Wrong size on VLegacyEditableText_SetHintText");
static_assert(offsetof(VLegacyEditableText_SetHintText, Value) == 0x000000, "Member 'VLegacyEditableText_SetHintText::Value' has a wrong offset!");

// Function Altar.VLegacyEditableText.SetText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyEditableText_SetText final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyEditableText_SetText) == 0x000008, "Wrong alignment on VLegacyEditableText_SetText");
static_assert(sizeof(VLegacyEditableText_SetText) == 0x000018, "Wrong size on VLegacyEditableText_SetText");
static_assert(offsetof(VLegacyEditableText_SetText, Value) == 0x000000, "Member 'VLegacyEditableText_SetText::Value' has a wrong offset!");

// Function Altar.VLegacyEditableText.GetHintText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyEditableText_GetHintText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyEditableText_GetHintText) == 0x000008, "Wrong alignment on VLegacyEditableText_GetHintText");
static_assert(sizeof(VLegacyEditableText_GetHintText) == 0x000018, "Wrong size on VLegacyEditableText_GetHintText");
static_assert(offsetof(VLegacyEditableText_GetHintText, ReturnValue) == 0x000000, "Member 'VLegacyEditableText_GetHintText::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyEditableText.GetText
// 0x0018 (0x0018 - 0x0000)
struct VLegacyEditableText_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyEditableText_GetText) == 0x000008, "Wrong alignment on VLegacyEditableText_GetText");
static_assert(sizeof(VLegacyEditableText_GetText) == 0x000018, "Wrong size on VLegacyEditableText_GetText");
static_assert(offsetof(VLegacyEditableText_GetText, ReturnValue) == 0x000000, "Member 'VLegacyEditableText_GetText::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudCompass.OnFrameVisibleUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudCompass_OnFrameVisibleUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudCompass_OnFrameVisibleUpdated) == 0x000001, "Wrong alignment on VLegacyHudCompass_OnFrameVisibleUpdated");
static_assert(sizeof(VLegacyHudCompass_OnFrameVisibleUpdated) == 0x000001, "Wrong size on VLegacyHudCompass_OnFrameVisibleUpdated");
static_assert(offsetof(VLegacyHudCompass_OnFrameVisibleUpdated, Value) == 0x000000, "Member 'VLegacyHudCompass_OnFrameVisibleUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudCompass.OnHeadingUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudCompass_OnHeadingUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudCompass_OnHeadingUpdated) == 0x000004, "Wrong alignment on VLegacyHudCompass_OnHeadingUpdated");
static_assert(sizeof(VLegacyHudCompass_OnHeadingUpdated) == 0x000004, "Wrong size on VLegacyHudCompass_OnHeadingUpdated");
static_assert(offsetof(VLegacyHudCompass_OnHeadingUpdated, Value) == 0x000000, "Member 'VLegacyHudCompass_OnHeadingUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudCompass.SetFrameVisible
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudCompass_SetFrameVisible final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudCompass_SetFrameVisible) == 0x000001, "Wrong alignment on VLegacyHudCompass_SetFrameVisible");
static_assert(sizeof(VLegacyHudCompass_SetFrameVisible) == 0x000001, "Wrong size on VLegacyHudCompass_SetFrameVisible");
static_assert(offsetof(VLegacyHudCompass_SetFrameVisible, Value) == 0x000000, "Member 'VLegacyHudCompass_SetFrameVisible::Value' has a wrong offset!");

// Function Altar.VLegacyHudCompass.SetHeading
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudCompass_SetHeading final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudCompass_SetHeading) == 0x000004, "Wrong alignment on VLegacyHudCompass_SetHeading");
static_assert(sizeof(VLegacyHudCompass_SetHeading) == 0x000004, "Wrong size on VLegacyHudCompass_SetHeading");
static_assert(offsetof(VLegacyHudCompass_SetHeading, Value) == 0x000000, "Member 'VLegacyHudCompass_SetHeading::Value' has a wrong offset!");

// Function Altar.VLegacyHudCompass.GetFrameVisible
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudCompass_GetFrameVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudCompass_GetFrameVisible) == 0x000001, "Wrong alignment on VLegacyHudCompass_GetFrameVisible");
static_assert(sizeof(VLegacyHudCompass_GetFrameVisible) == 0x000001, "Wrong size on VLegacyHudCompass_GetFrameVisible");
static_assert(offsetof(VLegacyHudCompass_GetFrameVisible, ReturnValue) == 0x000000, "Member 'VLegacyHudCompass_GetFrameVisible::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudCompass.GetHeading
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudCompass_GetHeading final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudCompass_GetHeading) == 0x000004, "Wrong alignment on VLegacyHudCompass_GetHeading");
static_assert(sizeof(VLegacyHudCompass_GetHeading) == 0x000004, "Wrong size on VLegacyHudCompass_GetHeading");
static_assert(offsetof(VLegacyHudCompass_GetHeading, ReturnValue) == 0x000000, "Member 'VLegacyHudCompass_GetHeading::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.OnCanCastUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudMagicIcon_OnCanCastUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_OnCanCastUpdated) == 0x000001, "Wrong alignment on VLegacyHudMagicIcon_OnCanCastUpdated");
static_assert(sizeof(VLegacyHudMagicIcon_OnCanCastUpdated) == 0x000001, "Wrong size on VLegacyHudMagicIcon_OnCanCastUpdated");
static_assert(offsetof(VLegacyHudMagicIcon_OnCanCastUpdated, Value) == 0x000000, "Member 'VLegacyHudMagicIcon_OnCanCastUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.OnMagicBrushUpdated
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyHudMagicIcon_OnMagicBrushUpdated final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_OnMagicBrushUpdated) == 0x000010, "Wrong alignment on VLegacyHudMagicIcon_OnMagicBrushUpdated");
static_assert(sizeof(VLegacyHudMagicIcon_OnMagicBrushUpdated) == 0x0000D0, "Wrong size on VLegacyHudMagicIcon_OnMagicBrushUpdated");
static_assert(offsetof(VLegacyHudMagicIcon_OnMagicBrushUpdated, Value) == 0x000000, "Member 'VLegacyHudMagicIcon_OnMagicBrushUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.SetCanCast
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudMagicIcon_SetCanCast final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_SetCanCast) == 0x000001, "Wrong alignment on VLegacyHudMagicIcon_SetCanCast");
static_assert(sizeof(VLegacyHudMagicIcon_SetCanCast) == 0x000001, "Wrong size on VLegacyHudMagicIcon_SetCanCast");
static_assert(offsetof(VLegacyHudMagicIcon_SetCanCast, Value) == 0x000000, "Member 'VLegacyHudMagicIcon_SetCanCast::Value' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.SetMagicBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyHudMagicIcon_SetMagicBrush final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_SetMagicBrush) == 0x000010, "Wrong alignment on VLegacyHudMagicIcon_SetMagicBrush");
static_assert(sizeof(VLegacyHudMagicIcon_SetMagicBrush) == 0x0000D0, "Wrong size on VLegacyHudMagicIcon_SetMagicBrush");
static_assert(offsetof(VLegacyHudMagicIcon_SetMagicBrush, Value) == 0x000000, "Member 'VLegacyHudMagicIcon_SetMagicBrush::Value' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.SetMagicTexture
// 0x0008 (0x0008 - 0x0000)
struct VLegacyHudMagicIcon_SetMagicTexture final
{
public:
	class UTexture2D*                             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_SetMagicTexture) == 0x000008, "Wrong alignment on VLegacyHudMagicIcon_SetMagicTexture");
static_assert(sizeof(VLegacyHudMagicIcon_SetMagicTexture) == 0x000008, "Wrong size on VLegacyHudMagicIcon_SetMagicTexture");
static_assert(offsetof(VLegacyHudMagicIcon_SetMagicTexture, Value) == 0x000000, "Member 'VLegacyHudMagicIcon_SetMagicTexture::Value' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.GetCanCast
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudMagicIcon_GetCanCast final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_GetCanCast) == 0x000001, "Wrong alignment on VLegacyHudMagicIcon_GetCanCast");
static_assert(sizeof(VLegacyHudMagicIcon_GetCanCast) == 0x000001, "Wrong size on VLegacyHudMagicIcon_GetCanCast");
static_assert(offsetof(VLegacyHudMagicIcon_GetCanCast, ReturnValue) == 0x000000, "Member 'VLegacyHudMagicIcon_GetCanCast::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudMagicIcon.GetMagicBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyHudMagicIcon_GetMagicBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMagicIcon_GetMagicBrush) == 0x000010, "Wrong alignment on VLegacyHudMagicIcon_GetMagicBrush");
static_assert(sizeof(VLegacyHudMagicIcon_GetMagicBrush) == 0x0000D0, "Wrong size on VLegacyHudMagicIcon_GetMagicBrush");
static_assert(offsetof(VLegacyHudMagicIcon_GetMagicBrush, ReturnValue) == 0x000000, "Member 'VLegacyHudMagicIcon_GetMagicBrush::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudMain.OnForcePlayerMenuPageUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudMain_OnForcePlayerMenuPageUpdated final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMain_OnForcePlayerMenuPageUpdated) == 0x000004, "Wrong alignment on VLegacyHudMain_OnForcePlayerMenuPageUpdated");
static_assert(sizeof(VLegacyHudMain_OnForcePlayerMenuPageUpdated) == 0x000004, "Wrong size on VLegacyHudMain_OnForcePlayerMenuPageUpdated");
static_assert(offsetof(VLegacyHudMain_OnForcePlayerMenuPageUpdated, Index_0) == 0x000000, "Member 'VLegacyHudMain_OnForcePlayerMenuPageUpdated::Index_0' has a wrong offset!");

// Function Altar.VLegacyHudMain.OnHUDVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct VLegacyHudMain_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudMain_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on VLegacyHudMain_OnHUDVisibilityChanged");
static_assert(sizeof(VLegacyHudMain_OnHUDVisibilityChanged) == 0x000002, "Wrong size on VLegacyHudMain_OnHUDVisibilityChanged");
static_assert(offsetof(VLegacyHudMain_OnHUDVisibilityChanged, Flag) == 0x000000, "Member 'VLegacyHudMain_OnHUDVisibilityChanged::Flag' has a wrong offset!");
static_assert(offsetof(VLegacyHudMain_OnHUDVisibilityChanged, bVisible) == 0x000001, "Member 'VLegacyHudMain_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Altar.VLegacyHudPrimaryLayout.OnHUDVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct VLegacyHudPrimaryLayout_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudPrimaryLayout_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on VLegacyHudPrimaryLayout_OnHUDVisibilityChanged");
static_assert(sizeof(VLegacyHudPrimaryLayout_OnHUDVisibilityChanged) == 0x000002, "Wrong size on VLegacyHudPrimaryLayout_OnHUDVisibilityChanged");
static_assert(offsetof(VLegacyHudPrimaryLayout_OnHUDVisibilityChanged, Flag) == 0x000000, "Member 'VLegacyHudPrimaryLayout_OnHUDVisibilityChanged::Flag' has a wrong offset!");
static_assert(offsetof(VLegacyHudPrimaryLayout_OnHUDVisibilityChanged, bVisible) == 0x000001, "Member 'VLegacyHudPrimaryLayout_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.OnFatigueProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_OnFatigueProgressUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_OnFatigueProgressUpdated) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_OnFatigueProgressUpdated");
static_assert(sizeof(VLegacyHudStatusBars_OnFatigueProgressUpdated) == 0x000004, "Wrong size on VLegacyHudStatusBars_OnFatigueProgressUpdated");
static_assert(offsetof(VLegacyHudStatusBars_OnFatigueProgressUpdated, Value) == 0x000000, "Member 'VLegacyHudStatusBars_OnFatigueProgressUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.OnHealthProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_OnHealthProgressUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_OnHealthProgressUpdated) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_OnHealthProgressUpdated");
static_assert(sizeof(VLegacyHudStatusBars_OnHealthProgressUpdated) == 0x000004, "Wrong size on VLegacyHudStatusBars_OnHealthProgressUpdated");
static_assert(offsetof(VLegacyHudStatusBars_OnHealthProgressUpdated, Value) == 0x000000, "Member 'VLegacyHudStatusBars_OnHealthProgressUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.OnMagickaProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_OnMagickaProgressUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_OnMagickaProgressUpdated) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_OnMagickaProgressUpdated");
static_assert(sizeof(VLegacyHudStatusBars_OnMagickaProgressUpdated) == 0x000004, "Wrong size on VLegacyHudStatusBars_OnMagickaProgressUpdated");
static_assert(offsetof(VLegacyHudStatusBars_OnMagickaProgressUpdated, Value) == 0x000000, "Member 'VLegacyHudStatusBars_OnMagickaProgressUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.SetFatigueProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_SetFatigueProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_SetFatigueProgress) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_SetFatigueProgress");
static_assert(sizeof(VLegacyHudStatusBars_SetFatigueProgress) == 0x000004, "Wrong size on VLegacyHudStatusBars_SetFatigueProgress");
static_assert(offsetof(VLegacyHudStatusBars_SetFatigueProgress, Value) == 0x000000, "Member 'VLegacyHudStatusBars_SetFatigueProgress::Value' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.SetHealthProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_SetHealthProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_SetHealthProgress) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_SetHealthProgress");
static_assert(sizeof(VLegacyHudStatusBars_SetHealthProgress) == 0x000004, "Wrong size on VLegacyHudStatusBars_SetHealthProgress");
static_assert(offsetof(VLegacyHudStatusBars_SetHealthProgress, Value) == 0x000000, "Member 'VLegacyHudStatusBars_SetHealthProgress::Value' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.SetMagickaProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_SetMagickaProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_SetMagickaProgress) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_SetMagickaProgress");
static_assert(sizeof(VLegacyHudStatusBars_SetMagickaProgress) == 0x000004, "Wrong size on VLegacyHudStatusBars_SetMagickaProgress");
static_assert(offsetof(VLegacyHudStatusBars_SetMagickaProgress, Value) == 0x000000, "Member 'VLegacyHudStatusBars_SetMagickaProgress::Value' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.GetFatigueProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_GetFatigueProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_GetFatigueProgress) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_GetFatigueProgress");
static_assert(sizeof(VLegacyHudStatusBars_GetFatigueProgress) == 0x000004, "Wrong size on VLegacyHudStatusBars_GetFatigueProgress");
static_assert(offsetof(VLegacyHudStatusBars_GetFatigueProgress, ReturnValue) == 0x000000, "Member 'VLegacyHudStatusBars_GetFatigueProgress::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.GetHealthProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_GetHealthProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_GetHealthProgress) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_GetHealthProgress");
static_assert(sizeof(VLegacyHudStatusBars_GetHealthProgress) == 0x000004, "Wrong size on VLegacyHudStatusBars_GetHealthProgress");
static_assert(offsetof(VLegacyHudStatusBars_GetHealthProgress, ReturnValue) == 0x000000, "Member 'VLegacyHudStatusBars_GetHealthProgress::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudStatusBars.GetMagickaProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudStatusBars_GetMagickaProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudStatusBars_GetMagickaProgress) == 0x000004, "Wrong alignment on VLegacyHudStatusBars_GetMagickaProgress");
static_assert(sizeof(VLegacyHudStatusBars_GetMagickaProgress) == 0x000004, "Wrong size on VLegacyHudStatusBars_GetMagickaProgress");
static_assert(offsetof(VLegacyHudStatusBars_GetMagickaProgress, ReturnValue) == 0x000000, "Member 'VLegacyHudStatusBars_GetMagickaProgress::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.OnAmmoCountUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_OnAmmoCountUpdated final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_OnAmmoCountUpdated) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_OnAmmoCountUpdated");
static_assert(sizeof(VLegacyHudWeaponIcon_OnAmmoCountUpdated) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_OnAmmoCountUpdated");
static_assert(offsetof(VLegacyHudWeaponIcon_OnAmmoCountUpdated, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_OnAmmoCountUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.OnHealthUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_OnHealthUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_OnHealthUpdated) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_OnHealthUpdated");
static_assert(sizeof(VLegacyHudWeaponIcon_OnHealthUpdated) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_OnHealthUpdated");
static_assert(offsetof(VLegacyHudWeaponIcon_OnHealthUpdated, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_OnHealthUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.OnIsAmmoVisibleUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated) == 0x000001, "Wrong alignment on VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated");
static_assert(sizeof(VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated) == 0x000001, "Wrong size on VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated");
static_assert(offsetof(VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_OnIsAmmoVisibleUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.OnStatusUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_OnStatusUpdated final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_OnStatusUpdated) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_OnStatusUpdated");
static_assert(sizeof(VLegacyHudWeaponIcon_OnStatusUpdated) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_OnStatusUpdated");
static_assert(offsetof(VLegacyHudWeaponIcon_OnStatusUpdated, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_OnStatusUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.OnWeaponBrushUpdated
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyHudWeaponIcon_OnWeaponBrushUpdated final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_OnWeaponBrushUpdated) == 0x000010, "Wrong alignment on VLegacyHudWeaponIcon_OnWeaponBrushUpdated");
static_assert(sizeof(VLegacyHudWeaponIcon_OnWeaponBrushUpdated) == 0x0000D0, "Wrong size on VLegacyHudWeaponIcon_OnWeaponBrushUpdated");
static_assert(offsetof(VLegacyHudWeaponIcon_OnWeaponBrushUpdated, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_OnWeaponBrushUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_SetAmmoCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetAmmoCount) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_SetAmmoCount");
static_assert(sizeof(VLegacyHudWeaponIcon_SetAmmoCount) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_SetAmmoCount");
static_assert(offsetof(VLegacyHudWeaponIcon_SetAmmoCount, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetAmmoCount::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_SetHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetHealth) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_SetHealth");
static_assert(sizeof(VLegacyHudWeaponIcon_SetHealth) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_SetHealth");
static_assert(offsetof(VLegacyHudWeaponIcon_SetHealth, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetHealth::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetIsAmmoVisible
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudWeaponIcon_SetIsAmmoVisible final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetIsAmmoVisible) == 0x000001, "Wrong alignment on VLegacyHudWeaponIcon_SetIsAmmoVisible");
static_assert(sizeof(VLegacyHudWeaponIcon_SetIsAmmoVisible) == 0x000001, "Wrong size on VLegacyHudWeaponIcon_SetIsAmmoVisible");
static_assert(offsetof(VLegacyHudWeaponIcon_SetIsAmmoVisible, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetIsAmmoVisible::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetStatus
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_SetStatus final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetStatus) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_SetStatus");
static_assert(sizeof(VLegacyHudWeaponIcon_SetStatus) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_SetStatus");
static_assert(offsetof(VLegacyHudWeaponIcon_SetStatus, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetStatus::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetStatusInternal
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_SetStatusInternal final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetStatusInternal) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_SetStatusInternal");
static_assert(sizeof(VLegacyHudWeaponIcon_SetStatusInternal) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_SetStatusInternal");
static_assert(offsetof(VLegacyHudWeaponIcon_SetStatusInternal, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetStatusInternal::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetWeaponBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyHudWeaponIcon_SetWeaponBrush final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetWeaponBrush) == 0x000010, "Wrong alignment on VLegacyHudWeaponIcon_SetWeaponBrush");
static_assert(sizeof(VLegacyHudWeaponIcon_SetWeaponBrush) == 0x0000D0, "Wrong size on VLegacyHudWeaponIcon_SetWeaponBrush");
static_assert(offsetof(VLegacyHudWeaponIcon_SetWeaponBrush, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetWeaponBrush::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.SetWeaponTexture
// 0x0008 (0x0008 - 0x0000)
struct VLegacyHudWeaponIcon_SetWeaponTexture final
{
public:
	class UTexture2D*                             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_SetWeaponTexture) == 0x000008, "Wrong alignment on VLegacyHudWeaponIcon_SetWeaponTexture");
static_assert(sizeof(VLegacyHudWeaponIcon_SetWeaponTexture) == 0x000008, "Wrong size on VLegacyHudWeaponIcon_SetWeaponTexture");
static_assert(offsetof(VLegacyHudWeaponIcon_SetWeaponTexture, Value) == 0x000000, "Member 'VLegacyHudWeaponIcon_SetWeaponTexture::Value' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.GetAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_GetAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_GetAmmoCount) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_GetAmmoCount");
static_assert(sizeof(VLegacyHudWeaponIcon_GetAmmoCount) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_GetAmmoCount");
static_assert(offsetof(VLegacyHudWeaponIcon_GetAmmoCount, ReturnValue) == 0x000000, "Member 'VLegacyHudWeaponIcon_GetAmmoCount::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_GetHealth) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_GetHealth");
static_assert(sizeof(VLegacyHudWeaponIcon_GetHealth) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_GetHealth");
static_assert(offsetof(VLegacyHudWeaponIcon_GetHealth, ReturnValue) == 0x000000, "Member 'VLegacyHudWeaponIcon_GetHealth::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.GetIsAmmoVisible
// 0x0001 (0x0001 - 0x0000)
struct VLegacyHudWeaponIcon_GetIsAmmoVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_GetIsAmmoVisible) == 0x000001, "Wrong alignment on VLegacyHudWeaponIcon_GetIsAmmoVisible");
static_assert(sizeof(VLegacyHudWeaponIcon_GetIsAmmoVisible) == 0x000001, "Wrong size on VLegacyHudWeaponIcon_GetIsAmmoVisible");
static_assert(offsetof(VLegacyHudWeaponIcon_GetIsAmmoVisible, ReturnValue) == 0x000000, "Member 'VLegacyHudWeaponIcon_GetIsAmmoVisible::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.GetStatus
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_GetStatus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_GetStatus) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_GetStatus");
static_assert(sizeof(VLegacyHudWeaponIcon_GetStatus) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_GetStatus");
static_assert(offsetof(VLegacyHudWeaponIcon_GetStatus, ReturnValue) == 0x000000, "Member 'VLegacyHudWeaponIcon_GetStatus::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.GetStatusInternal
// 0x0004 (0x0004 - 0x0000)
struct VLegacyHudWeaponIcon_GetStatusInternal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_GetStatusInternal) == 0x000004, "Wrong alignment on VLegacyHudWeaponIcon_GetStatusInternal");
static_assert(sizeof(VLegacyHudWeaponIcon_GetStatusInternal) == 0x000004, "Wrong size on VLegacyHudWeaponIcon_GetStatusInternal");
static_assert(offsetof(VLegacyHudWeaponIcon_GetStatusInternal, ReturnValue) == 0x000000, "Member 'VLegacyHudWeaponIcon_GetStatusInternal::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyHudWeaponIcon.GetWeaponBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyHudWeaponIcon_GetWeaponBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyHudWeaponIcon_GetWeaponBrush) == 0x000010, "Wrong alignment on VLegacyHudWeaponIcon_GetWeaponBrush");
static_assert(sizeof(VLegacyHudWeaponIcon_GetWeaponBrush) == 0x0000D0, "Wrong size on VLegacyHudWeaponIcon_GetWeaponBrush");
static_assert(offsetof(VLegacyHudWeaponIcon_GetWeaponBrush, ReturnValue) == 0x000000, "Member 'VLegacyHudWeaponIcon_GetWeaponBrush::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.FindOrAddGameThumbnailFromSlot
// 0x0018 (0x0018 - 0x0000)
struct VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot) == 0x000018, "Wrong size on VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_FindOrAddGameThumbnailFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.RegisterSendClickedItem
// 0x0020 (0x0020 - 0x0000)
struct VSaveLoadMenuViewModel_RegisterSendClickedItem final
{
public:
	int32                                         SaveIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SaveSlotName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsShiftPressed;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VSaveLoadMenuViewModel_RegisterSendClickedItem) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_RegisterSendClickedItem");
static_assert(sizeof(VSaveLoadMenuViewModel_RegisterSendClickedItem) == 0x000020, "Wrong size on VSaveLoadMenuViewModel_RegisterSendClickedItem");
static_assert(offsetof(VSaveLoadMenuViewModel_RegisterSendClickedItem, SaveIndex) == 0x000000, "Member 'VSaveLoadMenuViewModel_RegisterSendClickedItem::SaveIndex' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_RegisterSendClickedItem, SaveSlotName) == 0x000008, "Member 'VSaveLoadMenuViewModel_RegisterSendClickedItem::SaveSlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_RegisterSendClickedItem, InIsShiftPressed) == 0x000018, "Member 'VSaveLoadMenuViewModel_RegisterSendClickedItem::InIsShiftPressed' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.RegisterSendClickedUploadItem
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_RegisterSendClickedUploadItem final
{
public:
	int32                                         SaveIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SaveSlotName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveContext;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_RegisterSendClickedUploadItem) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_RegisterSendClickedUploadItem");
static_assert(sizeof(VSaveLoadMenuViewModel_RegisterSendClickedUploadItem) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_RegisterSendClickedUploadItem");
static_assert(offsetof(VSaveLoadMenuViewModel_RegisterSendClickedUploadItem, SaveIndex) == 0x000000, "Member 'VSaveLoadMenuViewModel_RegisterSendClickedUploadItem::SaveIndex' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_RegisterSendClickedUploadItem, SaveSlotName) == 0x000008, "Member 'VSaveLoadMenuViewModel_RegisterSendClickedUploadItem::SaveSlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_RegisterSendClickedUploadItem, SaveContext) == 0x000018, "Member 'VSaveLoadMenuViewModel_RegisterSendClickedUploadItem::SaveContext' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.SetCanBackOutMenu
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_SetCanBackOutMenu final
{
public:
	bool                                          bInNewValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_SetCanBackOutMenu) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_SetCanBackOutMenu");
static_assert(sizeof(VSaveLoadMenuViewModel_SetCanBackOutMenu) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_SetCanBackOutMenu");
static_assert(offsetof(VSaveLoadMenuViewModel_SetCanBackOutMenu, bInNewValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_SetCanBackOutMenu::bInNewValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.SetMenuIsBusy
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_SetMenuIsBusy final
{
public:
	bool                                          newMenuIsBusy;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_SetMenuIsBusy) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_SetMenuIsBusy");
static_assert(sizeof(VSaveLoadMenuViewModel_SetMenuIsBusy) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_SetMenuIsBusy");
static_assert(offsetof(VSaveLoadMenuViewModel_SetMenuIsBusy, newMenuIsBusy) == 0x000000, "Member 'VSaveLoadMenuViewModel_SetMenuIsBusy::newMenuIsBusy' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.SetSavesMetaData
// 0x0050 (0x0050 - 0x0000)
struct VSaveLoadMenuViewModel_SetSavesMetaData final
{
public:
	TMap<class FString, struct FVSaveGameDetails> NewSavesMetaData;                                  // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_SetSavesMetaData) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_SetSavesMetaData");
static_assert(sizeof(VSaveLoadMenuViewModel_SetSavesMetaData) == 0x000050, "Wrong size on VSaveLoadMenuViewModel_SetSavesMetaData");
static_assert(offsetof(VSaveLoadMenuViewModel_SetSavesMetaData, NewSavesMetaData) == 0x000000, "Member 'VSaveLoadMenuViewModel_SetSavesMetaData::NewSavesMetaData' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.SetShouldAllowListViewItemClicks
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks final
{
public:
	bool                                          bInNewValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks");
static_assert(sizeof(VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks");
static_assert(offsetof(VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks, bInNewValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_SetShouldAllowListViewItemClicks::bInNewValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.UpdateLoadingScreenDataFromSave
// 0x0010 (0x0010 - 0x0000)
struct VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave final
{
public:
	class FString                                 SaveSlotName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave");
static_assert(sizeof(VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave) == 0x000010, "Wrong size on VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave");
static_assert(offsetof(VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave, SaveSlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_UpdateLoadingScreenDataFromSave::SaveSlotName' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.CanBackOutMenu
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_CanBackOutMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_CanBackOutMenu) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_CanBackOutMenu");
static_assert(sizeof(VSaveLoadMenuViewModel_CanBackOutMenu) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_CanBackOutMenu");
static_assert(offsetof(VSaveLoadMenuViewModel_CanBackOutMenu, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_CanBackOutMenu::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetCurrentPlayerName
// 0x0010 (0x0010 - 0x0000)
struct VSaveLoadMenuViewModel_GetCurrentPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetCurrentPlayerName) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetCurrentPlayerName");
static_assert(sizeof(VSaveLoadMenuViewModel_GetCurrentPlayerName) == 0x000010, "Wrong size on VSaveLoadMenuViewModel_GetCurrentPlayerName");
static_assert(offsetof(VSaveLoadMenuViewModel_GetCurrentPlayerName, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetCurrentPlayerName::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetDisableAchievementFromSlot
// 0x0018 (0x0018 - 0x0000)
struct VSaveLoadMenuViewModel_GetDisableAchievementFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VSaveLoadMenuViewModel_GetDisableAchievementFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetDisableAchievementFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetDisableAchievementFromSlot) == 0x000018, "Wrong size on VSaveLoadMenuViewModel_GetDisableAchievementFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetDisableAchievementFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetDisableAchievementFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetDisableAchievementFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetDisableAchievementFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetFullSaveNameFromSlot
// 0x0020 (0x0020 - 0x0000)
struct VSaveLoadMenuViewModel_GetFullSaveNameFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetFullSaveNameFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetFullSaveNameFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetFullSaveNameFromSlot) == 0x000020, "Wrong size on VSaveLoadMenuViewModel_GetFullSaveNameFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetFullSaveNameFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetFullSaveNameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetFullSaveNameFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetFullSaveNameFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetGameDetailsFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetGameDetailsFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetGameDetailsFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetGameDetailsFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetGameDetailsFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetGameDetailsFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetGameDetailsFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetGameDetailsFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetGameDetailsFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetGameDetailsFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveDateFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveDateFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveDateFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveDateFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveDateFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveDateFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveDateFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveDateFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveDateFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveDateFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveDayFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveDayFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveDayFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveDayFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveDayFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveDayFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveDayFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveDayFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveDayFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveDayFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveLevelFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveLevelFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveLocationFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveLocationFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveNameFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveNameFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveNameFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveNameFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveNameFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveNameFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveNameFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveNameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveNameFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveNameFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSavePlayerNameFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSavePlayerNameFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveTimeFromSlot
// 0x0030 (0x0030 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFormat;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot) == 0x000030, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot, InFormat) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot::InFormat' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot, ReturnValue) == 0x000018, "Member 'VSaveLoadMenuViewModel_GetModernSaveTimeFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetModernSaveTypeFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetModernSaveTypeFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetSavesMetaData
// 0x0050 (0x0050 - 0x0000)
struct VSaveLoadMenuViewModel_GetSavesMetaData final
{
public:
	TMap<class FString, struct FVSaveGameDetails> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetSavesMetaData) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetSavesMetaData");
static_assert(sizeof(VSaveLoadMenuViewModel_GetSavesMetaData) == 0x000050, "Wrong size on VSaveLoadMenuViewModel_GetSavesMetaData");
static_assert(offsetof(VSaveLoadMenuViewModel_GetSavesMetaData, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetSavesMetaData::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.GetSaveTextFromSlot
// 0x0028 (0x0028 - 0x0000)
struct VSaveLoadMenuViewModel_GetSaveTextFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_GetSaveTextFromSlot) == 0x000008, "Wrong alignment on VSaveLoadMenuViewModel_GetSaveTextFromSlot");
static_assert(sizeof(VSaveLoadMenuViewModel_GetSaveTextFromSlot) == 0x000028, "Wrong size on VSaveLoadMenuViewModel_GetSaveTextFromSlot");
static_assert(offsetof(VSaveLoadMenuViewModel_GetSaveTextFromSlot, SlotName) == 0x000000, "Member 'VSaveLoadMenuViewModel_GetSaveTextFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(VSaveLoadMenuViewModel_GetSaveTextFromSlot, ReturnValue) == 0x000010, "Member 'VSaveLoadMenuViewModel_GetSaveTextFromSlot::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.IsSaveMenu
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_IsSaveMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_IsSaveMenu) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_IsSaveMenu");
static_assert(sizeof(VSaveLoadMenuViewModel_IsSaveMenu) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_IsSaveMenu");
static_assert(offsetof(VSaveLoadMenuViewModel_IsSaveMenu, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_IsSaveMenu::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.MenuIsBusy
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_MenuIsBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_MenuIsBusy) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_MenuIsBusy");
static_assert(sizeof(VSaveLoadMenuViewModel_MenuIsBusy) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_MenuIsBusy");
static_assert(offsetof(VSaveLoadMenuViewModel_MenuIsBusy, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_MenuIsBusy::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.MustShowUploadItemButton
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_MustShowUploadItemButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_MustShowUploadItemButton) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_MustShowUploadItemButton");
static_assert(sizeof(VSaveLoadMenuViewModel_MustShowUploadItemButton) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_MustShowUploadItemButton");
static_assert(offsetof(VSaveLoadMenuViewModel_MustShowUploadItemButton, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_MustShowUploadItemButton::ReturnValue' has a wrong offset!");

// Function Altar.VSaveLoadMenuViewModel.ShouldAllowListViewItemClicks
// 0x0001 (0x0001 - 0x0000)
struct VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks) == 0x000001, "Wrong alignment on VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks");
static_assert(sizeof(VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks) == 0x000001, "Wrong size on VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks");
static_assert(offsetof(VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks, ReturnValue) == 0x000000, "Member 'VSaveLoadMenuViewModel_ShouldAllowListViewItemClicks::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyImageTile.OnBrushUpdated
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyImageTile_OnBrushUpdated final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_OnBrushUpdated) == 0x000010, "Wrong alignment on VLegacyImageTile_OnBrushUpdated");
static_assert(sizeof(VLegacyImageTile_OnBrushUpdated) == 0x0000D0, "Wrong size on VLegacyImageTile_OnBrushUpdated");
static_assert(offsetof(VLegacyImageTile_OnBrushUpdated, Value) == 0x000000, "Member 'VLegacyImageTile_OnBrushUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyImageTile.OnCropUpdated
// 0x0010 (0x0010 - 0x0000)
struct VLegacyImageTile_OnCropUpdated final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_OnCropUpdated) == 0x000008, "Wrong alignment on VLegacyImageTile_OnCropUpdated");
static_assert(sizeof(VLegacyImageTile_OnCropUpdated) == 0x000010, "Wrong size on VLegacyImageTile_OnCropUpdated");
static_assert(offsetof(VLegacyImageTile_OnCropUpdated, Value) == 0x000000, "Member 'VLegacyImageTile_OnCropUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyImageTile.OnStretchImageUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyImageTile_OnStretchImageUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_OnStretchImageUpdated) == 0x000001, "Wrong alignment on VLegacyImageTile_OnStretchImageUpdated");
static_assert(sizeof(VLegacyImageTile_OnStretchImageUpdated) == 0x000001, "Wrong size on VLegacyImageTile_OnStretchImageUpdated");
static_assert(offsetof(VLegacyImageTile_OnStretchImageUpdated, Value) == 0x000000, "Member 'VLegacyImageTile_OnStretchImageUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyImageTile.SetBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyImageTile_SetBrush final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_SetBrush) == 0x000010, "Wrong alignment on VLegacyImageTile_SetBrush");
static_assert(sizeof(VLegacyImageTile_SetBrush) == 0x0000D0, "Wrong size on VLegacyImageTile_SetBrush");
static_assert(offsetof(VLegacyImageTile_SetBrush, Value) == 0x000000, "Member 'VLegacyImageTile_SetBrush::Value' has a wrong offset!");

// Function Altar.VLegacyImageTile.SetCrop
// 0x0010 (0x0010 - 0x0000)
struct VLegacyImageTile_SetCrop final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_SetCrop) == 0x000008, "Wrong alignment on VLegacyImageTile_SetCrop");
static_assert(sizeof(VLegacyImageTile_SetCrop) == 0x000010, "Wrong size on VLegacyImageTile_SetCrop");
static_assert(offsetof(VLegacyImageTile_SetCrop, Value) == 0x000000, "Member 'VLegacyImageTile_SetCrop::Value' has a wrong offset!");

// Function Altar.VLegacyImageTile.SetStretchImage
// 0x0001 (0x0001 - 0x0000)
struct VLegacyImageTile_SetStretchImage final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_SetStretchImage) == 0x000001, "Wrong alignment on VLegacyImageTile_SetStretchImage");
static_assert(sizeof(VLegacyImageTile_SetStretchImage) == 0x000001, "Wrong size on VLegacyImageTile_SetStretchImage");
static_assert(offsetof(VLegacyImageTile_SetStretchImage, Value) == 0x000000, "Member 'VLegacyImageTile_SetStretchImage::Value' has a wrong offset!");

// Function Altar.VLegacyImageTile.GetBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyImageTile_GetBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_GetBrush) == 0x000010, "Wrong alignment on VLegacyImageTile_GetBrush");
static_assert(sizeof(VLegacyImageTile_GetBrush) == 0x0000D0, "Wrong size on VLegacyImageTile_GetBrush");
static_assert(offsetof(VLegacyImageTile_GetBrush, ReturnValue) == 0x000000, "Member 'VLegacyImageTile_GetBrush::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyImageTile.GetCrop
// 0x0010 (0x0010 - 0x0000)
struct VLegacyImageTile_GetCrop final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_GetCrop) == 0x000008, "Wrong alignment on VLegacyImageTile_GetCrop");
static_assert(sizeof(VLegacyImageTile_GetCrop) == 0x000010, "Wrong size on VLegacyImageTile_GetCrop");
static_assert(offsetof(VLegacyImageTile_GetCrop, ReturnValue) == 0x000000, "Member 'VLegacyImageTile_GetCrop::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyImageTile.GetStretchImage
// 0x0001 (0x0001 - 0x0000)
struct VLegacyImageTile_GetStretchImage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyImageTile_GetStretchImage) == 0x000001, "Wrong alignment on VLegacyImageTile_GetStretchImage");
static_assert(sizeof(VLegacyImageTile_GetStretchImage) == 0x000001, "Wrong size on VLegacyImageTile_GetStretchImage");
static_assert(offsetof(VLegacyImageTile_GetStretchImage, ReturnValue) == 0x000000, "Member 'VLegacyImageTile_GetStretchImage::ReturnValue' has a wrong offset!");

// Function Altar.VTESObjectRefComponent.GetBossTag
// 0x0001 (0x0001 - 0x0000)
struct VTESObjectRefComponent_GetBossTag final
{
public:
	EVBossCategory                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTESObjectRefComponent_GetBossTag) == 0x000001, "Wrong alignment on VTESObjectRefComponent_GetBossTag");
static_assert(sizeof(VTESObjectRefComponent_GetBossTag) == 0x000001, "Wrong size on VTESObjectRefComponent_GetBossTag");
static_assert(offsetof(VTESObjectRefComponent_GetBossTag, ReturnValue) == 0x000000, "Member 'VTESObjectRefComponent_GetBossTag::ReturnValue' has a wrong offset!");

// Function Altar.VTESObjectRefComponent.GetHexFormRefID
// 0x0010 (0x0010 - 0x0000)
struct VTESObjectRefComponent_GetHexFormRefID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTESObjectRefComponent_GetHexFormRefID) == 0x000008, "Wrong alignment on VTESObjectRefComponent_GetHexFormRefID");
static_assert(sizeof(VTESObjectRefComponent_GetHexFormRefID) == 0x000010, "Wrong size on VTESObjectRefComponent_GetHexFormRefID");
static_assert(offsetof(VTESObjectRefComponent_GetHexFormRefID, ReturnValue) == 0x000000, "Member 'VTESObjectRefComponent_GetHexFormRefID::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyListViewEntryBase.OnItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct VLegacyListViewEntryBase_OnItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyListViewEntryBase_OnItemObjectSet) == 0x000008, "Wrong alignment on VLegacyListViewEntryBase_OnItemObjectSet");
static_assert(sizeof(VLegacyListViewEntryBase_OnItemObjectSet) == 0x000008, "Wrong size on VLegacyListViewEntryBase_OnItemObjectSet");
static_assert(offsetof(VLegacyListViewEntryBase_OnItemObjectSet, ListItemObject) == 0x000000, "Member 'VLegacyListViewEntryBase_OnItemObjectSet::ListItemObject' has a wrong offset!");

// Function Altar.VLegacyLoadingMenu.OnLoadingProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLoadingMenu_OnLoadingProgressUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLoadingMenu_OnLoadingProgressUpdated) == 0x000004, "Wrong alignment on VLegacyLoadingMenu_OnLoadingProgressUpdated");
static_assert(sizeof(VLegacyLoadingMenu_OnLoadingProgressUpdated) == 0x000004, "Wrong size on VLegacyLoadingMenu_OnLoadingProgressUpdated");
static_assert(offsetof(VLegacyLoadingMenu_OnLoadingProgressUpdated, Value) == 0x000000, "Member 'VLegacyLoadingMenu_OnLoadingProgressUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyLoadingMenu.OnLoadingScreenUpdated
// 0x0020 (0x0020 - 0x0000)
struct VLegacyLoadingMenu_OnLoadingScreenUpdated final
{
public:
	struct FLegacyLoadingMenuGameInfo             Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLoadingMenu_OnLoadingScreenUpdated) == 0x000008, "Wrong alignment on VLegacyLoadingMenu_OnLoadingScreenUpdated");
static_assert(sizeof(VLegacyLoadingMenu_OnLoadingScreenUpdated) == 0x000020, "Wrong size on VLegacyLoadingMenu_OnLoadingScreenUpdated");
static_assert(offsetof(VLegacyLoadingMenu_OnLoadingScreenUpdated, Value) == 0x000000, "Member 'VLegacyLoadingMenu_OnLoadingScreenUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyLoadingMenu.SetLoadingProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLoadingMenu_SetLoadingProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLoadingMenu_SetLoadingProgress) == 0x000004, "Wrong alignment on VLegacyLoadingMenu_SetLoadingProgress");
static_assert(sizeof(VLegacyLoadingMenu_SetLoadingProgress) == 0x000004, "Wrong size on VLegacyLoadingMenu_SetLoadingProgress");
static_assert(offsetof(VLegacyLoadingMenu_SetLoadingProgress, Value) == 0x000000, "Member 'VLegacyLoadingMenu_SetLoadingProgress::Value' has a wrong offset!");

// Function Altar.VLegacyLoadingMenu.SetLoadingScreen
// 0x0020 (0x0020 - 0x0000)
struct VLegacyLoadingMenu_SetLoadingScreen final
{
public:
	struct FLegacyLoadingMenuGameInfo             Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLoadingMenu_SetLoadingScreen) == 0x000008, "Wrong alignment on VLegacyLoadingMenu_SetLoadingScreen");
static_assert(sizeof(VLegacyLoadingMenu_SetLoadingScreen) == 0x000020, "Wrong size on VLegacyLoadingMenu_SetLoadingScreen");
static_assert(offsetof(VLegacyLoadingMenu_SetLoadingScreen, Value) == 0x000000, "Member 'VLegacyLoadingMenu_SetLoadingScreen::Value' has a wrong offset!");

// Function Altar.VLegacyLoadingMenu.GetLoadingProgress
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLoadingMenu_GetLoadingProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLoadingMenu_GetLoadingProgress) == 0x000004, "Wrong alignment on VLegacyLoadingMenu_GetLoadingProgress");
static_assert(sizeof(VLegacyLoadingMenu_GetLoadingProgress) == 0x000004, "Wrong size on VLegacyLoadingMenu_GetLoadingProgress");
static_assert(offsetof(VLegacyLoadingMenu_GetLoadingProgress, ReturnValue) == 0x000000, "Member 'VLegacyLoadingMenu_GetLoadingProgress::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLoadingMenu.GetLoadingScreen
// 0x0020 (0x0020 - 0x0000)
struct VLegacyLoadingMenu_GetLoadingScreen final
{
public:
	struct FLegacyLoadingMenuGameInfo             ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLoadingMenu_GetLoadingScreen) == 0x000008, "Wrong alignment on VLegacyLoadingMenu_GetLoadingScreen");
static_assert(sizeof(VLegacyLoadingMenu_GetLoadingScreen) == 0x000020, "Wrong size on VLegacyLoadingMenu_GetLoadingScreen");
static_assert(offsetof(VLegacyLoadingMenu_GetLoadingScreen, ReturnValue) == 0x000000, "Member 'VLegacyLoadingMenu_GetLoadingScreen::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.AttemptSolve
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickingMenuTumbler_AttemptSolve final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_AttemptSolve) == 0x000001, "Wrong alignment on VLegacyLockpickingMenuTumbler_AttemptSolve");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_AttemptSolve) == 0x000001, "Wrong size on VLegacyLockpickingMenuTumbler_AttemptSolve");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_AttemptSolve, ReturnValue) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_AttemptSolve::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.GetNextAnimationTime
// 0x0008 (0x0008 - 0x0000)
struct VLegacyLockpickingMenuTumbler_GetNextAnimationTime final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_GetNextAnimationTime) == 0x000004, "Wrong alignment on VLegacyLockpickingMenuTumbler_GetNextAnimationTime");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_GetNextAnimationTime) == 0x000008, "Wrong size on VLegacyLockpickingMenuTumbler_GetNextAnimationTime");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_GetNextAnimationTime, DeltaTime) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_GetNextAnimationTime::DeltaTime' has a wrong offset!");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_GetNextAnimationTime, ReturnValue) == 0x000004, "Member 'VLegacyLockpickingMenuTumbler_GetNextAnimationTime::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.SetInitialMovement
// 0x0010 (0x0010 - 0x0000)
struct VLegacyLockpickingMenuTumbler_SetInitialMovement final
{
public:
	struct FLegacyLockpickMenuTumblerProperties   Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_SetInitialMovement) == 0x000004, "Wrong alignment on VLegacyLockpickingMenuTumbler_SetInitialMovement");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_SetInitialMovement) == 0x000010, "Wrong size on VLegacyLockpickingMenuTumbler_SetInitialMovement");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_SetInitialMovement, Value) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_SetInitialMovement::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.SetIsSolved
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickingMenuTumbler_SetIsSolved final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_SetIsSolved) == 0x000001, "Wrong alignment on VLegacyLockpickingMenuTumbler_SetIsSolved");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_SetIsSolved) == 0x000001, "Wrong size on VLegacyLockpickingMenuTumbler_SetIsSolved");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_SetIsSolved, Value) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_SetIsSolved::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.SetIsTumbling
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickingMenuTumbler_SetIsTumbling final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_SetIsTumbling) == 0x000001, "Wrong alignment on VLegacyLockpickingMenuTumbler_SetIsTumbling");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_SetIsTumbling) == 0x000001, "Wrong size on VLegacyLockpickingMenuTumbler_SetIsTumbling");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_SetIsTumbling, Value) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_SetIsTumbling::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.UpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickingMenuTumbler_UpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_UpdateAnimation) == 0x000004, "Wrong alignment on VLegacyLockpickingMenuTumbler_UpdateAnimation");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_UpdateAnimation) == 0x000004, "Wrong size on VLegacyLockpickingMenuTumbler_UpdateAnimation");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_UpdateAnimation, DeltaTime) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_UpdateAnimation::DeltaTime' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.GetInitialMovement
// 0x0010 (0x0010 - 0x0000)
struct VLegacyLockpickingMenuTumbler_GetInitialMovement final
{
public:
	struct FLegacyLockpickMenuTumblerProperties   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_GetInitialMovement) == 0x000004, "Wrong alignment on VLegacyLockpickingMenuTumbler_GetInitialMovement");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_GetInitialMovement) == 0x000010, "Wrong size on VLegacyLockpickingMenuTumbler_GetInitialMovement");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_GetInitialMovement, ReturnValue) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_GetInitialMovement::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.GetIsSolved
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickingMenuTumbler_GetIsSolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_GetIsSolved) == 0x000001, "Wrong alignment on VLegacyLockpickingMenuTumbler_GetIsSolved");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_GetIsSolved) == 0x000001, "Wrong size on VLegacyLockpickingMenuTumbler_GetIsSolved");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_GetIsSolved, ReturnValue) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_GetIsSolved::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickingMenuTumbler.GetIsTumbling
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickingMenuTumbler_GetIsTumbling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickingMenuTumbler_GetIsTumbling) == 0x000001, "Wrong alignment on VLegacyLockpickingMenuTumbler_GetIsTumbling");
static_assert(sizeof(VLegacyLockpickingMenuTumbler_GetIsTumbling) == 0x000001, "Wrong size on VLegacyLockpickingMenuTumbler_GetIsTumbling");
static_assert(offsetof(VLegacyLockpickingMenuTumbler_GetIsTumbling, ReturnValue) == 0x000000, "Member 'VLegacyLockpickingMenuTumbler_GetIsTumbling::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenu.CheckMenuFocus
// 0x0010 (0x0010 - 0x0000)
struct VLegacyLockpickMenu_CheckMenuFocus final
{
public:
	struct FGameplayTag                           TopMostLayer;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidget*               TopMostWidget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenu_CheckMenuFocus) == 0x000008, "Wrong alignment on VLegacyLockpickMenu_CheckMenuFocus");
static_assert(sizeof(VLegacyLockpickMenu_CheckMenuFocus) == 0x000010, "Wrong size on VLegacyLockpickMenu_CheckMenuFocus");
static_assert(offsetof(VLegacyLockpickMenu_CheckMenuFocus, TopMostLayer) == 0x000000, "Member 'VLegacyLockpickMenu_CheckMenuFocus::TopMostLayer' has a wrong offset!");
static_assert(offsetof(VLegacyLockpickMenu_CheckMenuFocus, TopMostWidget) == 0x000008, "Member 'VLegacyLockpickMenu_CheckMenuFocus::TopMostWidget' has a wrong offset!");

// Function Altar.VLegacyLockpickMenu.InitialiseTumblerMovement
// 0x0030 (0x0030 - 0x0000)
struct VLegacyLockpickMenu_InitialiseTumblerMovement final
{
public:
	int32                                         TumblerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyLockpickMenuTumblerDefaultProperties TumblerDefaultProperties;                     // 0x0004(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLegacyLockpickMenuProperties          MenuProperties;                                    // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenu_InitialiseTumblerMovement) == 0x000004, "Wrong alignment on VLegacyLockpickMenu_InitialiseTumblerMovement");
static_assert(sizeof(VLegacyLockpickMenu_InitialiseTumblerMovement) == 0x000030, "Wrong size on VLegacyLockpickMenu_InitialiseTumblerMovement");
static_assert(offsetof(VLegacyLockpickMenu_InitialiseTumblerMovement, TumblerIndex) == 0x000000, "Member 'VLegacyLockpickMenu_InitialiseTumblerMovement::TumblerIndex' has a wrong offset!");
static_assert(offsetof(VLegacyLockpickMenu_InitialiseTumblerMovement, TumblerDefaultProperties) == 0x000004, "Member 'VLegacyLockpickMenu_InitialiseTumblerMovement::TumblerDefaultProperties' has a wrong offset!");
static_assert(offsetof(VLegacyLockpickMenu_InitialiseTumblerMovement, MenuProperties) == 0x000020, "Member 'VLegacyLockpickMenu_InitialiseTumblerMovement::MenuProperties' has a wrong offset!");

// Function Altar.VLegacyLockpickMenu.OnMenuFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenu_OnMenuFocusChanged final
{
public:
	bool                                          IsFocussed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenu_OnMenuFocusChanged) == 0x000001, "Wrong alignment on VLegacyLockpickMenu_OnMenuFocusChanged");
static_assert(sizeof(VLegacyLockpickMenu_OnMenuFocusChanged) == 0x000001, "Wrong size on VLegacyLockpickMenu_OnMenuFocusChanged");
static_assert(offsetof(VLegacyLockpickMenu_OnMenuFocusChanged, IsFocussed) == 0x000000, "Member 'VLegacyLockpickMenu_OnMenuFocusChanged::IsFocussed' has a wrong offset!");

// Function Altar.VLegacyLockpickMenu.OnTumberMovementInitialised
// 0x0014 (0x0014 - 0x0000)
struct VLegacyLockpickMenu_OnTumberMovementInitialised final
{
public:
	int32                                         TumblerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyLockpickMenuTumblerProperties   TumbleProperties;                                  // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenu_OnTumberMovementInitialised) == 0x000004, "Wrong alignment on VLegacyLockpickMenu_OnTumberMovementInitialised");
static_assert(sizeof(VLegacyLockpickMenu_OnTumberMovementInitialised) == 0x000014, "Wrong size on VLegacyLockpickMenu_OnTumberMovementInitialised");
static_assert(offsetof(VLegacyLockpickMenu_OnTumberMovementInitialised, TumblerIndex) == 0x000000, "Member 'VLegacyLockpickMenu_OnTumberMovementInitialised::TumblerIndex' has a wrong offset!");
static_assert(offsetof(VLegacyLockpickMenu_OnTumberMovementInitialised, TumbleProperties) == 0x000004, "Member 'VLegacyLockpickMenu_OnTumberMovementInitialised::TumbleProperties' has a wrong offset!");

// Function Altar.VLegacyLockpickMenu.SetDifficultyCurve
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenu_SetDifficultyCurve final
{
public:
	ELegacyLockpickMenuDifficulty                 Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenu_SetDifficultyCurve) == 0x000001, "Wrong alignment on VLegacyLockpickMenu_SetDifficultyCurve");
static_assert(sizeof(VLegacyLockpickMenu_SetDifficultyCurve) == 0x000001, "Wrong size on VLegacyLockpickMenu_SetDifficultyCurve");
static_assert(offsetof(VLegacyLockpickMenu_SetDifficultyCurve, Difficulty) == 0x000000, "Member 'VLegacyLockpickMenu_SetDifficultyCurve::Difficulty' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetMovementActionFromMouseMovement
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement final
{
public:
	ELegacyLockpickMenuPickMovement               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement");
static_assert(sizeof(VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement");
static_assert(offsetof(VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetMovementActionFromMouseMovement::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.MovePick
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_MovePick final
{
public:
	ELegacyLockpickMenuPickMovement               Action;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_MovePick) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_MovePick");
static_assert(sizeof(VLegacyLockpickMenuPick_MovePick) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_MovePick");
static_assert(offsetof(VLegacyLockpickMenuPick_MovePick, Action) == 0x000000, "Member 'VLegacyLockpickMenuPick_MovePick::Action' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.OnActiveTumblerUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_OnActiveTumblerUpdated final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_OnActiveTumblerUpdated) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_OnActiveTumblerUpdated");
static_assert(sizeof(VLegacyLockpickMenuPick_OnActiveTumblerUpdated) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_OnActiveTumblerUpdated");
static_assert(offsetof(VLegacyLockpickMenuPick_OnActiveTumblerUpdated, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_OnActiveTumblerUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.OnHandleTypeUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_OnHandleTypeUpdated final
{
public:
	ELegacyLockpickMenuHandleType                 Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_OnHandleTypeUpdated) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_OnHandleTypeUpdated");
static_assert(sizeof(VLegacyLockpickMenuPick_OnHandleTypeUpdated) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_OnHandleTypeUpdated");
static_assert(offsetof(VLegacyLockpickMenuPick_OnHandleTypeUpdated, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_OnHandleTypeUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.OnIsBrokenUpdated
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_OnIsBrokenUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_OnIsBrokenUpdated) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_OnIsBrokenUpdated");
static_assert(sizeof(VLegacyLockpickMenuPick_OnIsBrokenUpdated) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_OnIsBrokenUpdated");
static_assert(offsetof(VLegacyLockpickMenuPick_OnIsBrokenUpdated, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_OnIsBrokenUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.SetActiveTumbler
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_SetActiveTumbler final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_SetActiveTumbler) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_SetActiveTumbler");
static_assert(sizeof(VLegacyLockpickMenuPick_SetActiveTumbler) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_SetActiveTumbler");
static_assert(offsetof(VLegacyLockpickMenuPick_SetActiveTumbler, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_SetActiveTumbler::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.SetDeadZone
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_SetDeadZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_SetDeadZone) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_SetDeadZone");
static_assert(sizeof(VLegacyLockpickMenuPick_SetDeadZone) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_SetDeadZone");
static_assert(offsetof(VLegacyLockpickMenuPick_SetDeadZone, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_SetDeadZone::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.SetHandleType
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_SetHandleType final
{
public:
	ELegacyLockpickMenuHandleType                 Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_SetHandleType) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_SetHandleType");
static_assert(sizeof(VLegacyLockpickMenuPick_SetHandleType) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_SetHandleType");
static_assert(offsetof(VLegacyLockpickMenuPick_SetHandleType, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_SetHandleType::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.SetIsBroken
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_SetIsBroken final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_SetIsBroken) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_SetIsBroken");
static_assert(sizeof(VLegacyLockpickMenuPick_SetIsBroken) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_SetIsBroken");
static_assert(offsetof(VLegacyLockpickMenuPick_SetIsBroken, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_SetIsBroken::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.SetIsMovementDisabled
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_SetIsMovementDisabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_SetIsMovementDisabled) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_SetIsMovementDisabled");
static_assert(sizeof(VLegacyLockpickMenuPick_SetIsMovementDisabled) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_SetIsMovementDisabled");
static_assert(offsetof(VLegacyLockpickMenuPick_SetIsMovementDisabled, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_SetIsMovementDisabled::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.SetTumblerPositions
// 0x0010 (0x0010 - 0x0000)
struct VLegacyLockpickMenuPick_SetTumblerPositions final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_SetTumblerPositions) == 0x000008, "Wrong alignment on VLegacyLockpickMenuPick_SetTumblerPositions");
static_assert(sizeof(VLegacyLockpickMenuPick_SetTumblerPositions) == 0x000010, "Wrong size on VLegacyLockpickMenuPick_SetTumblerPositions");
static_assert(offsetof(VLegacyLockpickMenuPick_SetTumblerPositions, Value) == 0x000000, "Member 'VLegacyLockpickMenuPick_SetTumblerPositions::Value' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.CanPickMove
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_CanPickMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_CanPickMove) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_CanPickMove");
static_assert(sizeof(VLegacyLockpickMenuPick_CanPickMove) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_CanPickMove");
static_assert(offsetof(VLegacyLockpickMenuPick_CanPickMove, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_CanPickMove::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetActiveTumbler
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_GetActiveTumbler final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetActiveTumbler) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_GetActiveTumbler");
static_assert(sizeof(VLegacyLockpickMenuPick_GetActiveTumbler) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_GetActiveTumbler");
static_assert(offsetof(VLegacyLockpickMenuPick_GetActiveTumbler, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetActiveTumbler::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetActiveTumblerPosition
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_GetActiveTumblerPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetActiveTumblerPosition) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_GetActiveTumblerPosition");
static_assert(sizeof(VLegacyLockpickMenuPick_GetActiveTumblerPosition) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_GetActiveTumblerPosition");
static_assert(offsetof(VLegacyLockpickMenuPick_GetActiveTumblerPosition, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetActiveTumblerPosition::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetDeadZone
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_GetDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetDeadZone) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_GetDeadZone");
static_assert(sizeof(VLegacyLockpickMenuPick_GetDeadZone) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_GetDeadZone");
static_assert(offsetof(VLegacyLockpickMenuPick_GetDeadZone, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetDeadZone::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetHandleType
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_GetHandleType final
{
public:
	ELegacyLockpickMenuHandleType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetHandleType) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_GetHandleType");
static_assert(sizeof(VLegacyLockpickMenuPick_GetHandleType) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_GetHandleType");
static_assert(offsetof(VLegacyLockpickMenuPick_GetHandleType, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetHandleType::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetIsBroken
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_GetIsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetIsBroken) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_GetIsBroken");
static_assert(sizeof(VLegacyLockpickMenuPick_GetIsBroken) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_GetIsBroken");
static_assert(offsetof(VLegacyLockpickMenuPick_GetIsBroken, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetIsBroken::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetIsMovementDisabled
// 0x0001 (0x0001 - 0x0000)
struct VLegacyLockpickMenuPick_GetIsMovementDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetIsMovementDisabled) == 0x000001, "Wrong alignment on VLegacyLockpickMenuPick_GetIsMovementDisabled");
static_assert(sizeof(VLegacyLockpickMenuPick_GetIsMovementDisabled) == 0x000001, "Wrong size on VLegacyLockpickMenuPick_GetIsMovementDisabled");
static_assert(offsetof(VLegacyLockpickMenuPick_GetIsMovementDisabled, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetIsMovementDisabled::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetPreviousTumblerPosition
// 0x0004 (0x0004 - 0x0000)
struct VLegacyLockpickMenuPick_GetPreviousTumblerPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetPreviousTumblerPosition) == 0x000004, "Wrong alignment on VLegacyLockpickMenuPick_GetPreviousTumblerPosition");
static_assert(sizeof(VLegacyLockpickMenuPick_GetPreviousTumblerPosition) == 0x000004, "Wrong size on VLegacyLockpickMenuPick_GetPreviousTumblerPosition");
static_assert(offsetof(VLegacyLockpickMenuPick_GetPreviousTumblerPosition, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetPreviousTumblerPosition::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyLockpickMenuPick.GetTumblerPositions
// 0x0010 (0x0010 - 0x0000)
struct VLegacyLockpickMenuPick_GetTumblerPositions final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyLockpickMenuPick_GetTumblerPositions) == 0x000008, "Wrong alignment on VLegacyLockpickMenuPick_GetTumblerPositions");
static_assert(sizeof(VLegacyLockpickMenuPick_GetTumblerPositions) == 0x000010, "Wrong size on VLegacyLockpickMenuPick_GetTumblerPositions");
static_assert(offsetof(VLegacyLockpickMenuPick_GetTumblerPositions, ReturnValue) == 0x000000, "Member 'VLegacyLockpickMenuPick_GetTumblerPositions::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMagicMenu.MoveToNextPage
// 0x0001 (0x0001 - 0x0000)
struct VLegacyMagicMenu_MoveToNextPage final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenu_MoveToNextPage) == 0x000001, "Wrong alignment on VLegacyMagicMenu_MoveToNextPage");
static_assert(sizeof(VLegacyMagicMenu_MoveToNextPage) == 0x000001, "Wrong size on VLegacyMagicMenu_MoveToNextPage");
static_assert(offsetof(VLegacyMagicMenu_MoveToNextPage, bRight) == 0x000000, "Member 'VLegacyMagicMenu_MoveToNextPage::bRight' has a wrong offset!");

// Function Altar.VLegacyMagicMenu.GetMagicPopup
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMagicMenu_GetMagicPopup final
{
public:
	class UVLegacyMagicPopupMenu*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMagicMenu_GetMagicPopup) == 0x000008, "Wrong alignment on VLegacyMagicMenu_GetMagicPopup");
static_assert(sizeof(VLegacyMagicMenu_GetMagicPopup) == 0x000008, "Wrong size on VLegacyMagicMenu_GetMagicPopup");
static_assert(offsetof(VLegacyMagicMenu_GetMagicPopup, ReturnValue) == 0x000000, "Member 'VLegacyMagicMenu_GetMagicPopup::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenu.MoveToNextPage
// 0x0001 (0x0001 - 0x0000)
struct VLegacyMapMenu_MoveToNextPage final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenu_MoveToNextPage) == 0x000001, "Wrong alignment on VLegacyMapMenu_MoveToNextPage");
static_assert(sizeof(VLegacyMapMenu_MoveToNextPage) == 0x000001, "Wrong size on VLegacyMapMenu_MoveToNextPage");
static_assert(offsetof(VLegacyMapMenu_MoveToNextPage, bRight) == 0x000000, "Member 'VLegacyMapMenu_MoveToNextPage::bRight' has a wrong offset!");

// Function Altar.VLegacyMapMenu.GetLocalMapPage
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMapMenu_GetLocalMapPage final
{
public:
	class UVLegacyMapMenuMapPage*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenu_GetLocalMapPage) == 0x000008, "Wrong alignment on VLegacyMapMenu_GetLocalMapPage");
static_assert(sizeof(VLegacyMapMenu_GetLocalMapPage) == 0x000008, "Wrong size on VLegacyMapMenu_GetLocalMapPage");
static_assert(offsetof(VLegacyMapMenu_GetLocalMapPage, ReturnValue) == 0x000000, "Member 'VLegacyMapMenu_GetLocalMapPage::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenu.GetQuestsPage
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMapMenu_GetQuestsPage final
{
public:
	class UVLegacyMapMenuQuestsPage*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenu_GetQuestsPage) == 0x000008, "Wrong alignment on VLegacyMapMenu_GetQuestsPage");
static_assert(sizeof(VLegacyMapMenu_GetQuestsPage) == 0x000008, "Wrong size on VLegacyMapMenu_GetQuestsPage");
static_assert(offsetof(VLegacyMapMenu_GetQuestsPage, ReturnValue) == 0x000000, "Member 'VLegacyMapMenu_GetQuestsPage::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenu.GetWorldMapPage
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMapMenu_GetWorldMapPage final
{
public:
	class UVLegacyMapMenuMapPage*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenu_GetWorldMapPage) == 0x000008, "Wrong alignment on VLegacyMapMenu_GetWorldMapPage");
static_assert(sizeof(VLegacyMapMenu_GetWorldMapPage) == 0x000008, "Wrong size on VLegacyMapMenu_GetWorldMapPage");
static_assert(offsetof(VLegacyMapMenu_GetWorldMapPage, ReturnValue) == 0x000000, "Member 'VLegacyMapMenu_GetWorldMapPage::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyStatsMenuMiscItem.SetItem
// 0x0020 (0x0020 - 0x0000)
struct VLegacyStatsMenuMiscItem_SetItem final
{
public:
	struct FLegacyStatsMenuMiscItemProperties     Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuMiscItem_SetItem) == 0x000008, "Wrong alignment on VLegacyStatsMenuMiscItem_SetItem");
static_assert(sizeof(VLegacyStatsMenuMiscItem_SetItem) == 0x000020, "Wrong size on VLegacyStatsMenuMiscItem_SetItem");
static_assert(offsetof(VLegacyStatsMenuMiscItem_SetItem, Value) == 0x000000, "Member 'VLegacyStatsMenuMiscItem_SetItem::Value' has a wrong offset!");

// Function Altar.VLegacyStatsMenuMiscItem.GetItem
// 0x0020 (0x0020 - 0x0000)
struct VLegacyStatsMenuMiscItem_GetItem final
{
public:
	struct FLegacyStatsMenuMiscItemProperties     ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyStatsMenuMiscItem_GetItem) == 0x000008, "Wrong alignment on VLegacyStatsMenuMiscItem_GetItem");
static_assert(sizeof(VLegacyStatsMenuMiscItem_GetItem) == 0x000020, "Wrong size on VLegacyStatsMenuMiscItem_GetItem");
static_assert(offsetof(VLegacyStatsMenuMiscItem_GetItem, ReturnValue) == 0x000000, "Member 'VLegacyStatsMenuMiscItem_GetItem::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPageTab.SetIconBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyPageTab_SetIconBrush final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPageTab_SetIconBrush) == 0x000010, "Wrong alignment on VLegacyPageTab_SetIconBrush");
static_assert(sizeof(VLegacyPageTab_SetIconBrush) == 0x0000D0, "Wrong size on VLegacyPageTab_SetIconBrush");
static_assert(offsetof(VLegacyPageTab_SetIconBrush, Value) == 0x000000, "Member 'VLegacyPageTab_SetIconBrush::Value' has a wrong offset!");

// Function Altar.VLegacyPageTab.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VLegacyPageTab_SetIsSelected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPageTab_SetIsSelected) == 0x000001, "Wrong alignment on VLegacyPageTab_SetIsSelected");
static_assert(sizeof(VLegacyPageTab_SetIsSelected) == 0x000001, "Wrong size on VLegacyPageTab_SetIsSelected");
static_assert(offsetof(VLegacyPageTab_SetIsSelected, Value) == 0x000000, "Member 'VLegacyPageTab_SetIsSelected::Value' has a wrong offset!");

// Function Altar.VLegacyPageTab.GetIconBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VLegacyPageTab_GetIconBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPageTab_GetIconBrush) == 0x000010, "Wrong alignment on VLegacyPageTab_GetIconBrush");
static_assert(sizeof(VLegacyPageTab_GetIconBrush) == 0x0000D0, "Wrong size on VLegacyPageTab_GetIconBrush");
static_assert(offsetof(VLegacyPageTab_GetIconBrush, ReturnValue) == 0x000000, "Member 'VLegacyPageTab_GetIconBrush::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPageTab.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VLegacyPageTab_GetIsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPageTab_GetIsSelected) == 0x000001, "Wrong alignment on VLegacyPageTab_GetIsSelected");
static_assert(sizeof(VLegacyPageTab_GetIsSelected) == 0x000001, "Wrong size on VLegacyPageTab_GetIsSelected");
static_assert(offsetof(VLegacyPageTab_GetIsSelected, ReturnValue) == 0x000000, "Member 'VLegacyPageTab_GetIsSelected::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.MoveToNextMenuPage
// 0x0001 (0x0001 - 0x0000)
struct VLegacyPlayerMenu_MoveToNextMenuPage final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_MoveToNextMenuPage) == 0x000001, "Wrong alignment on VLegacyPlayerMenu_MoveToNextMenuPage");
static_assert(sizeof(VLegacyPlayerMenu_MoveToNextMenuPage) == 0x000001, "Wrong size on VLegacyPlayerMenu_MoveToNextMenuPage");
static_assert(offsetof(VLegacyPlayerMenu_MoveToNextMenuPage, bLeft) == 0x000000, "Member 'VLegacyPlayerMenu_MoveToNextMenuPage::bLeft' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.OnDisplayPlayerInInventory
// 0x0001 (0x0001 - 0x0000)
struct VLegacyPlayerMenu_OnDisplayPlayerInInventory final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_OnDisplayPlayerInInventory) == 0x000001, "Wrong alignment on VLegacyPlayerMenu_OnDisplayPlayerInInventory");
static_assert(sizeof(VLegacyPlayerMenu_OnDisplayPlayerInInventory) == 0x000001, "Wrong size on VLegacyPlayerMenu_OnDisplayPlayerInInventory");
static_assert(offsetof(VLegacyPlayerMenu_OnDisplayPlayerInInventory, bValue) == 0x000000, "Member 'VLegacyPlayerMenu_OnDisplayPlayerInInventory::bValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetCodex
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetCodex final
{
public:
	const class UCommonActivatableWidget*         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetCodex) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetCodex");
static_assert(sizeof(VLegacyPlayerMenu_GetCodex) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetCodex");
static_assert(offsetof(VLegacyPlayerMenu_GetCodex, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetCodex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetHudMain
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetHudMain final
{
public:
	const class UVLegacyHudMain*                  ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetHudMain) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetHudMain");
static_assert(sizeof(VLegacyPlayerMenu_GetHudMain) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetHudMain");
static_assert(offsetof(VLegacyPlayerMenu_GetHudMain, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetHudMain::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetInventoryMenu
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetInventoryMenu final
{
public:
	const class UVInventoryMenu*                  ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetInventoryMenu) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetInventoryMenu");
static_assert(sizeof(VLegacyPlayerMenu_GetInventoryMenu) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetInventoryMenu");
static_assert(offsetof(VLegacyPlayerMenu_GetInventoryMenu, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetInventoryMenu::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetMagicMenu
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetMagicMenu final
{
public:
	const class UVLegacyMagicMenu*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetMagicMenu) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetMagicMenu");
static_assert(sizeof(VLegacyPlayerMenu_GetMagicMenu) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetMagicMenu");
static_assert(offsetof(VLegacyPlayerMenu_GetMagicMenu, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetMagicMenu::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetMapMenu
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetMapMenu final
{
public:
	const class UVLegacyMapMenu*                  ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetMapMenu) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetMapMenu");
static_assert(sizeof(VLegacyPlayerMenu_GetMapMenu) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetMapMenu");
static_assert(offsetof(VLegacyPlayerMenu_GetMapMenu, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetMapMenu::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetMenuFromEnum
// 0x0010 (0x0010 - 0x0000)
struct VLegacyPlayerMenu_GetMenuFromEnum final
{
public:
	ELegacyPlayerMenuPage                         Page;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCommonActivatableWidget*         ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetMenuFromEnum) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetMenuFromEnum");
static_assert(sizeof(VLegacyPlayerMenu_GetMenuFromEnum) == 0x000010, "Wrong size on VLegacyPlayerMenu_GetMenuFromEnum");
static_assert(offsetof(VLegacyPlayerMenu_GetMenuFromEnum, Page) == 0x000000, "Member 'VLegacyPlayerMenu_GetMenuFromEnum::Page' has a wrong offset!");
static_assert(offsetof(VLegacyPlayerMenu_GetMenuFromEnum, ReturnValue) == 0x000008, "Member 'VLegacyPlayerMenu_GetMenuFromEnum::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetSettings final
{
public:
	const class UVLegacySettingsMenu*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetSettings) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetSettings");
static_assert(sizeof(VLegacyPlayerMenu_GetSettings) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetSettings");
static_assert(offsetof(VLegacyPlayerMenu_GetSettings, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetSettings::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetStatsMenu
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetStatsMenu final
{
public:
	const class UVLegacyStatsMenu*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetStatsMenu) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetStatsMenu");
static_assert(sizeof(VLegacyPlayerMenu_GetStatsMenu) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetStatsMenu");
static_assert(offsetof(VLegacyPlayerMenu_GetStatsMenu, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetStatsMenu::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyPlayerMenu.GetViewModelRef
// 0x0008 (0x0008 - 0x0000)
struct VLegacyPlayerMenu_GetViewModelRef final
{
public:
	const class UVPlayerMenuViewModel*            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyPlayerMenu_GetViewModelRef) == 0x000008, "Wrong alignment on VLegacyPlayerMenu_GetViewModelRef");
static_assert(sizeof(VLegacyPlayerMenu_GetViewModelRef) == 0x000008, "Wrong size on VLegacyPlayerMenu_GetViewModelRef");
static_assert(offsetof(VLegacyPlayerMenu_GetViewModelRef, ReturnValue) == 0x000000, "Member 'VLegacyPlayerMenu_GetViewModelRef::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyScrollbar.OnValueUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_OnValueUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_OnValueUpdated) == 0x000004, "Wrong alignment on VLegacyScrollbar_OnValueUpdated");
static_assert(sizeof(VLegacyScrollbar_OnValueUpdated) == 0x000004, "Wrong size on VLegacyScrollbar_OnValueUpdated");
static_assert(offsetof(VLegacyScrollbar_OnValueUpdated, Value) == 0x000000, "Member 'VLegacyScrollbar_OnValueUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.SetFocusBackgroundEnabled
// 0x0001 (0x0001 - 0x0000)
struct VLegacyScrollbar_SetFocusBackgroundEnabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_SetFocusBackgroundEnabled) == 0x000001, "Wrong alignment on VLegacyScrollbar_SetFocusBackgroundEnabled");
static_assert(sizeof(VLegacyScrollbar_SetFocusBackgroundEnabled) == 0x000001, "Wrong size on VLegacyScrollbar_SetFocusBackgroundEnabled");
static_assert(offsetof(VLegacyScrollbar_SetFocusBackgroundEnabled, Value) == 0x000000, "Member 'VLegacyScrollbar_SetFocusBackgroundEnabled::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.SetSliderLength
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_SetSliderLength final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_SetSliderLength) == 0x000004, "Wrong alignment on VLegacyScrollbar_SetSliderLength");
static_assert(sizeof(VLegacyScrollbar_SetSliderLength) == 0x000004, "Wrong size on VLegacyScrollbar_SetSliderLength");
static_assert(offsetof(VLegacyScrollbar_SetSliderLength, Value) == 0x000000, "Member 'VLegacyScrollbar_SetSliderLength::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.SetTextProperties
// 0x0014 (0x0014 - 0x0000)
struct VLegacyScrollbar_SetTextProperties final
{
public:
	struct FLegacyScrollbarTextProperties         Value;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_SetTextProperties) == 0x000004, "Wrong alignment on VLegacyScrollbar_SetTextProperties");
static_assert(sizeof(VLegacyScrollbar_SetTextProperties) == 0x000014, "Wrong size on VLegacyScrollbar_SetTextProperties");
static_assert(offsetof(VLegacyScrollbar_SetTextProperties, Value) == 0x000000, "Member 'VLegacyScrollbar_SetTextProperties::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.SetValue
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_SetValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_SetValue) == 0x000004, "Wrong alignment on VLegacyScrollbar_SetValue");
static_assert(sizeof(VLegacyScrollbar_SetValue) == 0x000004, "Wrong size on VLegacyScrollbar_SetValue");
static_assert(offsetof(VLegacyScrollbar_SetValue, Value) == 0x000000, "Member 'VLegacyScrollbar_SetValue::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.SetValueProperties
// 0x0010 (0x0010 - 0x0000)
struct VLegacyScrollbar_SetValueProperties final
{
public:
	struct FLegacyScrollbarValueProperties        Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_SetValueProperties) == 0x000004, "Wrong alignment on VLegacyScrollbar_SetValueProperties");
static_assert(sizeof(VLegacyScrollbar_SetValueProperties) == 0x000010, "Wrong size on VLegacyScrollbar_SetValueProperties");
static_assert(offsetof(VLegacyScrollbar_SetValueProperties, Value) == 0x000000, "Member 'VLegacyScrollbar_SetValueProperties::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.UpdateValueFromSlider
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_UpdateValueFromSlider final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_UpdateValueFromSlider) == 0x000004, "Wrong alignment on VLegacyScrollbar_UpdateValueFromSlider");
static_assert(sizeof(VLegacyScrollbar_UpdateValueFromSlider) == 0x000004, "Wrong size on VLegacyScrollbar_UpdateValueFromSlider");
static_assert(offsetof(VLegacyScrollbar_UpdateValueFromSlider, Value) == 0x000000, "Member 'VLegacyScrollbar_UpdateValueFromSlider::Value' has a wrong offset!");

// Function Altar.VLegacyScrollbar.GetFocusBackgroundEnabled
// 0x0001 (0x0001 - 0x0000)
struct VLegacyScrollbar_GetFocusBackgroundEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_GetFocusBackgroundEnabled) == 0x000001, "Wrong alignment on VLegacyScrollbar_GetFocusBackgroundEnabled");
static_assert(sizeof(VLegacyScrollbar_GetFocusBackgroundEnabled) == 0x000001, "Wrong size on VLegacyScrollbar_GetFocusBackgroundEnabled");
static_assert(offsetof(VLegacyScrollbar_GetFocusBackgroundEnabled, ReturnValue) == 0x000000, "Member 'VLegacyScrollbar_GetFocusBackgroundEnabled::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyScrollbar.GetSliderLength
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_GetSliderLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_GetSliderLength) == 0x000004, "Wrong alignment on VLegacyScrollbar_GetSliderLength");
static_assert(sizeof(VLegacyScrollbar_GetSliderLength) == 0x000004, "Wrong size on VLegacyScrollbar_GetSliderLength");
static_assert(offsetof(VLegacyScrollbar_GetSliderLength, ReturnValue) == 0x000000, "Member 'VLegacyScrollbar_GetSliderLength::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyScrollbar.GetTextProperties
// 0x0014 (0x0014 - 0x0000)
struct VLegacyScrollbar_GetTextProperties final
{
public:
	struct FLegacyScrollbarTextProperties         ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_GetTextProperties) == 0x000004, "Wrong alignment on VLegacyScrollbar_GetTextProperties");
static_assert(sizeof(VLegacyScrollbar_GetTextProperties) == 0x000014, "Wrong size on VLegacyScrollbar_GetTextProperties");
static_assert(offsetof(VLegacyScrollbar_GetTextProperties, ReturnValue) == 0x000000, "Member 'VLegacyScrollbar_GetTextProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyScrollbar.GetValue
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_GetValue) == 0x000004, "Wrong alignment on VLegacyScrollbar_GetValue");
static_assert(sizeof(VLegacyScrollbar_GetValue) == 0x000004, "Wrong size on VLegacyScrollbar_GetValue");
static_assert(offsetof(VLegacyScrollbar_GetValue, ReturnValue) == 0x000000, "Member 'VLegacyScrollbar_GetValue::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyScrollbar.GetValueAsPercentage
// 0x0004 (0x0004 - 0x0000)
struct VLegacyScrollbar_GetValueAsPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_GetValueAsPercentage) == 0x000004, "Wrong alignment on VLegacyScrollbar_GetValueAsPercentage");
static_assert(sizeof(VLegacyScrollbar_GetValueAsPercentage) == 0x000004, "Wrong size on VLegacyScrollbar_GetValueAsPercentage");
static_assert(offsetof(VLegacyScrollbar_GetValueAsPercentage, ReturnValue) == 0x000000, "Member 'VLegacyScrollbar_GetValueAsPercentage::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyScrollbar.GetValueProperties
// 0x0010 (0x0010 - 0x0000)
struct VLegacyScrollbar_GetValueProperties final
{
public:
	struct FLegacyScrollbarValueProperties        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyScrollbar_GetValueProperties) == 0x000004, "Wrong alignment on VLegacyScrollbar_GetValueProperties");
static_assert(sizeof(VLegacyScrollbar_GetValueProperties) == 0x000010, "Wrong size on VLegacyScrollbar_GetValueProperties");
static_assert(offsetof(VLegacyScrollbar_GetValueProperties, ReturnValue) == 0x000000, "Member 'VLegacyScrollbar_GetValueProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySleepWaitMenu.StartCameraFade
// 0x0001 (0x0001 - 0x0000)
struct VLegacySleepWaitMenu_StartCameraFade final
{
public:
	bool                                          bInFadeIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySleepWaitMenu_StartCameraFade) == 0x000001, "Wrong alignment on VLegacySleepWaitMenu_StartCameraFade");
static_assert(sizeof(VLegacySleepWaitMenu_StartCameraFade) == 0x000001, "Wrong size on VLegacySleepWaitMenu_StartCameraFade");
static_assert(offsetof(VLegacySleepWaitMenu_StartCameraFade, bInFadeIn) == 0x000000, "Member 'VLegacySleepWaitMenu_StartCameraFade::bInFadeIn' has a wrong offset!");

// Function Altar.VLegacySpellPurchaseMenu.OnPlayerMoneyUpdated
// 0x0004 (0x0004 - 0x0000)
struct VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated) == 0x000004, "Wrong alignment on VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated");
static_assert(sizeof(VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated) == 0x000004, "Wrong size on VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated");
static_assert(offsetof(VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated, Value) == 0x000000, "Member 'VLegacySpellPurchaseMenu_OnPlayerMoneyUpdated::Value' has a wrong offset!");

// Function Altar.VLegacySpellPurchaseMenu.OnSpellsUpdated
// 0x0010 (0x0010 - 0x0000)
struct VLegacySpellPurchaseMenu_OnSpellsUpdated final
{
public:
	TArray<struct FLegacySpellPurchaseMenuItemProperties> Value;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellPurchaseMenu_OnSpellsUpdated) == 0x000008, "Wrong alignment on VLegacySpellPurchaseMenu_OnSpellsUpdated");
static_assert(sizeof(VLegacySpellPurchaseMenu_OnSpellsUpdated) == 0x000010, "Wrong size on VLegacySpellPurchaseMenu_OnSpellsUpdated");
static_assert(offsetof(VLegacySpellPurchaseMenu_OnSpellsUpdated, Value) == 0x000000, "Member 'VLegacySpellPurchaseMenu_OnSpellsUpdated::Value' has a wrong offset!");

// Function Altar.VShieldHandPoseCharacterAnimInstance.SetupShieldHandPoseLayer
// 0x0018 (0x0018 - 0x0000)
struct VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer final
{
public:
	struct FShieldHandPoseSetup                   InHandPoseSetup;                                   // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer) == 0x000008, "Wrong alignment on VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer");
static_assert(sizeof(VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer) == 0x000018, "Wrong size on VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer");
static_assert(offsetof(VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer, InHandPoseSetup) == 0x000000, "Member 'VShieldHandPoseCharacterAnimInstance_SetupShieldHandPoseLayer::InHandPoseSetup' has a wrong offset!");

// Function Altar.VShieldHandPoseCharacterAnimInstance.IsShieldHandPoseActive
// 0x0001 (0x0001 - 0x0000)
struct VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive) == 0x000001, "Wrong alignment on VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive");
static_assert(sizeof(VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive) == 0x000001, "Wrong size on VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive");
static_assert(offsetof(VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive, ReturnValue) == 0x000000, "Member 'VShieldHandPoseCharacterAnimInstance_IsShieldHandPoseActive::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyValueSwitcher.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct VLegacyValueSwitcher_GetOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyValueSwitcher_GetOptions) == 0x000008, "Wrong alignment on VLegacyValueSwitcher_GetOptions");
static_assert(sizeof(VLegacyValueSwitcher_GetOptions) == 0x000010, "Wrong size on VLegacyValueSwitcher_GetOptions");
static_assert(offsetof(VLegacyValueSwitcher_GetOptions, ReturnValue) == 0x000000, "Member 'VLegacyValueSwitcher_GetOptions::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyValueSwitcher.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyValueSwitcher_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyValueSwitcher_GetSelectedIndex) == 0x000004, "Wrong alignment on VLegacyValueSwitcher_GetSelectedIndex");
static_assert(sizeof(VLegacyValueSwitcher_GetSelectedIndex) == 0x000004, "Wrong size on VLegacyValueSwitcher_GetSelectedIndex");
static_assert(offsetof(VLegacyValueSwitcher_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'VLegacyValueSwitcher_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyValueSwitcher.GetSelectedValue
// 0x0018 (0x0018 - 0x0000)
struct VLegacyValueSwitcher_GetSelectedValue final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyValueSwitcher_GetSelectedValue) == 0x000008, "Wrong alignment on VLegacyValueSwitcher_GetSelectedValue");
static_assert(sizeof(VLegacyValueSwitcher_GetSelectedValue) == 0x000018, "Wrong size on VLegacyValueSwitcher_GetSelectedValue");
static_assert(offsetof(VLegacyValueSwitcher_GetSelectedValue, ReturnValue) == 0x000000, "Member 'VLegacyValueSwitcher_GetSelectedValue::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyValueSwitcher.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct VLegacyValueSwitcher_SetOptions final
{
public:
	TArray<class FText>                           Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyValueSwitcher_SetOptions) == 0x000008, "Wrong alignment on VLegacyValueSwitcher_SetOptions");
static_assert(sizeof(VLegacyValueSwitcher_SetOptions) == 0x000010, "Wrong size on VLegacyValueSwitcher_SetOptions");
static_assert(offsetof(VLegacyValueSwitcher_SetOptions, Value) == 0x000000, "Member 'VLegacyValueSwitcher_SetOptions::Value' has a wrong offset!");

// Function Altar.VLegacyValueSwitcher.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyValueSwitcher_SetSelectedIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyValueSwitcher_SetSelectedIndex) == 0x000004, "Wrong alignment on VLegacyValueSwitcher_SetSelectedIndex");
static_assert(sizeof(VLegacyValueSwitcher_SetSelectedIndex) == 0x000004, "Wrong size on VLegacyValueSwitcher_SetSelectedIndex");
static_assert(offsetof(VLegacyValueSwitcher_SetSelectedIndex, Value) == 0x000000, "Member 'VLegacyValueSwitcher_SetSelectedIndex::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.OnSettingOptionsUpdated
// 0x0080 (0x0080 - 0x0000)
struct VLegacyVideoMenu_OnSettingOptionsUpdated final
{
public:
	struct FLegacyVideoTextSettingValues          Value;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_OnSettingOptionsUpdated) == 0x000008, "Wrong alignment on VLegacyVideoMenu_OnSettingOptionsUpdated");
static_assert(sizeof(VLegacyVideoMenu_OnSettingOptionsUpdated) == 0x000080, "Wrong size on VLegacyVideoMenu_OnSettingOptionsUpdated");
static_assert(offsetof(VLegacyVideoMenu_OnSettingOptionsUpdated, Value) == 0x000000, "Member 'VLegacyVideoMenu_OnSettingOptionsUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.OnSettingsUpdated
// 0x00A0 (0x00A0 - 0x0000)
struct VLegacyVideoMenu_OnSettingsUpdated final
{
public:
	struct FLegacyVideoSettings                   Value;                                             // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_OnSettingsUpdated) == 0x000008, "Wrong alignment on VLegacyVideoMenu_OnSettingsUpdated");
static_assert(sizeof(VLegacyVideoMenu_OnSettingsUpdated) == 0x0000A0, "Wrong size on VLegacyVideoMenu_OnSettingsUpdated");
static_assert(offsetof(VLegacyVideoMenu_OnSettingsUpdated, Value) == 0x000000, "Member 'VLegacyVideoMenu_OnSettingsUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.SetFloatSetting
// 0x0008 (0x0008 - 0x0000)
struct VLegacyVideoMenu_SetFloatSetting final
{
public:
	EFLegacyVideoSettingsEnum                     SettingName;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_SetFloatSetting) == 0x000004, "Wrong alignment on VLegacyVideoMenu_SetFloatSetting");
static_assert(sizeof(VLegacyVideoMenu_SetFloatSetting) == 0x000008, "Wrong size on VLegacyVideoMenu_SetFloatSetting");
static_assert(offsetof(VLegacyVideoMenu_SetFloatSetting, SettingName) == 0x000000, "Member 'VLegacyVideoMenu_SetFloatSetting::SettingName' has a wrong offset!");
static_assert(offsetof(VLegacyVideoMenu_SetFloatSetting, Value) == 0x000004, "Member 'VLegacyVideoMenu_SetFloatSetting::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.SetSettingOptions
// 0x0080 (0x0080 - 0x0000)
struct VLegacyVideoMenu_SetSettingOptions final
{
public:
	struct FLegacyVideoTextSettingValues          Value;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_SetSettingOptions) == 0x000008, "Wrong alignment on VLegacyVideoMenu_SetSettingOptions");
static_assert(sizeof(VLegacyVideoMenu_SetSettingOptions) == 0x000080, "Wrong size on VLegacyVideoMenu_SetSettingOptions");
static_assert(offsetof(VLegacyVideoMenu_SetSettingOptions, Value) == 0x000000, "Member 'VLegacyVideoMenu_SetSettingOptions::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.SetSettings
// 0x00A0 (0x00A0 - 0x0000)
struct VLegacyVideoMenu_SetSettings final
{
public:
	struct FLegacyVideoSettings                   Value;                                             // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_SetSettings) == 0x000008, "Wrong alignment on VLegacyVideoMenu_SetSettings");
static_assert(sizeof(VLegacyVideoMenu_SetSettings) == 0x0000A0, "Wrong size on VLegacyVideoMenu_SetSettings");
static_assert(offsetof(VLegacyVideoMenu_SetSettings, Value) == 0x000000, "Member 'VLegacyVideoMenu_SetSettings::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.SetUintSetting
// 0x0002 (0x0002 - 0x0000)
struct VLegacyVideoMenu_SetUintSetting final
{
public:
	EFLegacyVideoSettingsEnum                     SettingName;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_SetUintSetting) == 0x000001, "Wrong alignment on VLegacyVideoMenu_SetUintSetting");
static_assert(sizeof(VLegacyVideoMenu_SetUintSetting) == 0x000002, "Wrong size on VLegacyVideoMenu_SetUintSetting");
static_assert(offsetof(VLegacyVideoMenu_SetUintSetting, SettingName) == 0x000000, "Member 'VLegacyVideoMenu_SetUintSetting::SettingName' has a wrong offset!");
static_assert(offsetof(VLegacyVideoMenu_SetUintSetting, Value) == 0x000001, "Member 'VLegacyVideoMenu_SetUintSetting::Value' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.GetFloatSetting
// 0x0008 (0x0008 - 0x0000)
struct VLegacyVideoMenu_GetFloatSetting final
{
public:
	EFLegacyVideoSettingsEnum                     SettingName;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_GetFloatSetting) == 0x000004, "Wrong alignment on VLegacyVideoMenu_GetFloatSetting");
static_assert(sizeof(VLegacyVideoMenu_GetFloatSetting) == 0x000008, "Wrong size on VLegacyVideoMenu_GetFloatSetting");
static_assert(offsetof(VLegacyVideoMenu_GetFloatSetting, SettingName) == 0x000000, "Member 'VLegacyVideoMenu_GetFloatSetting::SettingName' has a wrong offset!");
static_assert(offsetof(VLegacyVideoMenu_GetFloatSetting, ReturnValue) == 0x000004, "Member 'VLegacyVideoMenu_GetFloatSetting::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.GetSettingOptions
// 0x0080 (0x0080 - 0x0000)
struct VLegacyVideoMenu_GetSettingOptions final
{
public:
	struct FLegacyVideoTextSettingValues          ReturnValue;                                       // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_GetSettingOptions) == 0x000008, "Wrong alignment on VLegacyVideoMenu_GetSettingOptions");
static_assert(sizeof(VLegacyVideoMenu_GetSettingOptions) == 0x000080, "Wrong size on VLegacyVideoMenu_GetSettingOptions");
static_assert(offsetof(VLegacyVideoMenu_GetSettingOptions, ReturnValue) == 0x000000, "Member 'VLegacyVideoMenu_GetSettingOptions::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.GetSettingOptionsFromType
// 0x0018 (0x0018 - 0x0000)
struct VLegacyVideoMenu_GetSettingOptionsFromType final
{
public:
	ELegacyVideoMenuOptionType                    OptionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_GetSettingOptionsFromType) == 0x000008, "Wrong alignment on VLegacyVideoMenu_GetSettingOptionsFromType");
static_assert(sizeof(VLegacyVideoMenu_GetSettingOptionsFromType) == 0x000018, "Wrong size on VLegacyVideoMenu_GetSettingOptionsFromType");
static_assert(offsetof(VLegacyVideoMenu_GetSettingOptionsFromType, OptionType) == 0x000000, "Member 'VLegacyVideoMenu_GetSettingOptionsFromType::OptionType' has a wrong offset!");
static_assert(offsetof(VLegacyVideoMenu_GetSettingOptionsFromType, ReturnValue) == 0x000008, "Member 'VLegacyVideoMenu_GetSettingOptionsFromType::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.GetSettings
// 0x00A0 (0x00A0 - 0x0000)
struct VLegacyVideoMenu_GetSettings final
{
public:
	struct FLegacyVideoSettings                   ReturnValue;                                       // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_GetSettings) == 0x000008, "Wrong alignment on VLegacyVideoMenu_GetSettings");
static_assert(sizeof(VLegacyVideoMenu_GetSettings) == 0x0000A0, "Wrong size on VLegacyVideoMenu_GetSettings");
static_assert(offsetof(VLegacyVideoMenu_GetSettings, ReturnValue) == 0x000000, "Member 'VLegacyVideoMenu_GetSettings::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.GetUintSetting
// 0x0002 (0x0002 - 0x0000)
struct VLegacyVideoMenu_GetUintSetting final
{
public:
	EFLegacyVideoSettingsEnum                     SettingName;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_GetUintSetting) == 0x000001, "Wrong alignment on VLegacyVideoMenu_GetUintSetting");
static_assert(sizeof(VLegacyVideoMenu_GetUintSetting) == 0x000002, "Wrong size on VLegacyVideoMenu_GetUintSetting");
static_assert(offsetof(VLegacyVideoMenu_GetUintSetting, SettingName) == 0x000000, "Member 'VLegacyVideoMenu_GetUintSetting::SettingName' has a wrong offset!");
static_assert(offsetof(VLegacyVideoMenu_GetUintSetting, ReturnValue) == 0x000001, "Member 'VLegacyVideoMenu_GetUintSetting::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoMenu.IsResolutionWidescreen
// 0x0001 (0x0001 - 0x0000)
struct VLegacyVideoMenu_IsResolutionWidescreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoMenu_IsResolutionWidescreen) == 0x000001, "Wrong alignment on VLegacyVideoMenu_IsResolutionWidescreen");
static_assert(sizeof(VLegacyVideoMenu_IsResolutionWidescreen) == 0x000001, "Wrong size on VLegacyVideoMenu_IsResolutionWidescreen");
static_assert(offsetof(VLegacyVideoMenu_IsResolutionWidescreen, ReturnValue) == 0x000000, "Member 'VLegacyVideoMenu_IsResolutionWidescreen::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct VLegacyVideoWidgetBase_GetOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_GetOptions) == 0x000008, "Wrong alignment on VLegacyVideoWidgetBase_GetOptions");
static_assert(sizeof(VLegacyVideoWidgetBase_GetOptions) == 0x000010, "Wrong size on VLegacyVideoWidgetBase_GetOptions");
static_assert(offsetof(VLegacyVideoWidgetBase_GetOptions, ReturnValue) == 0x000000, "Member 'VLegacyVideoWidgetBase_GetOptions::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.GetSettingName
// 0x0001 (0x0001 - 0x0000)
struct VLegacyVideoWidgetBase_GetSettingName final
{
public:
	EFLegacyVideoSettingsEnum                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_GetSettingName) == 0x000001, "Wrong alignment on VLegacyVideoWidgetBase_GetSettingName");
static_assert(sizeof(VLegacyVideoWidgetBase_GetSettingName) == 0x000001, "Wrong size on VLegacyVideoWidgetBase_GetSettingName");
static_assert(offsetof(VLegacyVideoWidgetBase_GetSettingName, ReturnValue) == 0x000000, "Member 'VLegacyVideoWidgetBase_GetSettingName::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.OnFloatValueUpdatedInternal
// 0x0004 (0x0004 - 0x0000)
struct VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal) == 0x000004, "Wrong alignment on VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal");
static_assert(sizeof(VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal) == 0x000004, "Wrong size on VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal");
static_assert(offsetof(VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_OnFloatValueUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.OnLabelUpdatedInternal
// 0x0018 (0x0018 - 0x0000)
struct VLegacyVideoWidgetBase_OnLabelUpdatedInternal final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_OnLabelUpdatedInternal) == 0x000008, "Wrong alignment on VLegacyVideoWidgetBase_OnLabelUpdatedInternal");
static_assert(sizeof(VLegacyVideoWidgetBase_OnLabelUpdatedInternal) == 0x000018, "Wrong size on VLegacyVideoWidgetBase_OnLabelUpdatedInternal");
static_assert(offsetof(VLegacyVideoWidgetBase_OnLabelUpdatedInternal, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_OnLabelUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.OnOptionsUpdatedInternal
// 0x0010 (0x0010 - 0x0000)
struct VLegacyVideoWidgetBase_OnOptionsUpdatedInternal final
{
public:
	TArray<class FText>                           Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_OnOptionsUpdatedInternal) == 0x000008, "Wrong alignment on VLegacyVideoWidgetBase_OnOptionsUpdatedInternal");
static_assert(sizeof(VLegacyVideoWidgetBase_OnOptionsUpdatedInternal) == 0x000010, "Wrong size on VLegacyVideoWidgetBase_OnOptionsUpdatedInternal");
static_assert(offsetof(VLegacyVideoWidgetBase_OnOptionsUpdatedInternal, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_OnOptionsUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.OnUintValueUpdatedInternal
// 0x0001 (0x0001 - 0x0000)
struct VLegacyVideoWidgetBase_OnUintValueUpdatedInternal final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_OnUintValueUpdatedInternal) == 0x000001, "Wrong alignment on VLegacyVideoWidgetBase_OnUintValueUpdatedInternal");
static_assert(sizeof(VLegacyVideoWidgetBase_OnUintValueUpdatedInternal) == 0x000001, "Wrong size on VLegacyVideoWidgetBase_OnUintValueUpdatedInternal");
static_assert(offsetof(VLegacyVideoWidgetBase_OnUintValueUpdatedInternal, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_OnUintValueUpdatedInternal::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.SetFloatValue
// 0x0004 (0x0004 - 0x0000)
struct VLegacyVideoWidgetBase_SetFloatValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_SetFloatValue) == 0x000004, "Wrong alignment on VLegacyVideoWidgetBase_SetFloatValue");
static_assert(sizeof(VLegacyVideoWidgetBase_SetFloatValue) == 0x000004, "Wrong size on VLegacyVideoWidgetBase_SetFloatValue");
static_assert(offsetof(VLegacyVideoWidgetBase_SetFloatValue, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_SetFloatValue::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct VLegacyVideoWidgetBase_SetLabel final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_SetLabel) == 0x000008, "Wrong alignment on VLegacyVideoWidgetBase_SetLabel");
static_assert(sizeof(VLegacyVideoWidgetBase_SetLabel) == 0x000018, "Wrong size on VLegacyVideoWidgetBase_SetLabel");
static_assert(offsetof(VLegacyVideoWidgetBase_SetLabel, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_SetLabel::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct VLegacyVideoWidgetBase_SetOptions final
{
public:
	TArray<class FText>                           Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_SetOptions) == 0x000008, "Wrong alignment on VLegacyVideoWidgetBase_SetOptions");
static_assert(sizeof(VLegacyVideoWidgetBase_SetOptions) == 0x000010, "Wrong size on VLegacyVideoWidgetBase_SetOptions");
static_assert(offsetof(VLegacyVideoWidgetBase_SetOptions, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_SetOptions::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.SetSettingName
// 0x0001 (0x0001 - 0x0000)
struct VLegacyVideoWidgetBase_SetSettingName final
{
public:
	EFLegacyVideoSettingsEnum                     Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_SetSettingName) == 0x000001, "Wrong alignment on VLegacyVideoWidgetBase_SetSettingName");
static_assert(sizeof(VLegacyVideoWidgetBase_SetSettingName) == 0x000001, "Wrong size on VLegacyVideoWidgetBase_SetSettingName");
static_assert(offsetof(VLegacyVideoWidgetBase_SetSettingName, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_SetSettingName::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.SetUintValue
// 0x0001 (0x0001 - 0x0000)
struct VLegacyVideoWidgetBase_SetUintValue final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_SetUintValue) == 0x000001, "Wrong alignment on VLegacyVideoWidgetBase_SetUintValue");
static_assert(sizeof(VLegacyVideoWidgetBase_SetUintValue) == 0x000001, "Wrong size on VLegacyVideoWidgetBase_SetUintValue");
static_assert(offsetof(VLegacyVideoWidgetBase_SetUintValue, Value) == 0x000000, "Member 'VLegacyVideoWidgetBase_SetUintValue::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.TriggerOnFloatUpdated
// 0x0008 (0x0008 - 0x0000)
struct VLegacyVideoWidgetBase_TriggerOnFloatUpdated final
{
public:
	EFLegacyVideoSettingsEnum                     Setting;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_TriggerOnFloatUpdated) == 0x000004, "Wrong alignment on VLegacyVideoWidgetBase_TriggerOnFloatUpdated");
static_assert(sizeof(VLegacyVideoWidgetBase_TriggerOnFloatUpdated) == 0x000008, "Wrong size on VLegacyVideoWidgetBase_TriggerOnFloatUpdated");
static_assert(offsetof(VLegacyVideoWidgetBase_TriggerOnFloatUpdated, Setting) == 0x000000, "Member 'VLegacyVideoWidgetBase_TriggerOnFloatUpdated::Setting' has a wrong offset!");
static_assert(offsetof(VLegacyVideoWidgetBase_TriggerOnFloatUpdated, Value) == 0x000004, "Member 'VLegacyVideoWidgetBase_TriggerOnFloatUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.TriggerOnUintUpdated
// 0x0002 (0x0002 - 0x0000)
struct VLegacyVideoWidgetBase_TriggerOnUintUpdated final
{
public:
	EFLegacyVideoSettingsEnum                     Setting;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_TriggerOnUintUpdated) == 0x000001, "Wrong alignment on VLegacyVideoWidgetBase_TriggerOnUintUpdated");
static_assert(sizeof(VLegacyVideoWidgetBase_TriggerOnUintUpdated) == 0x000002, "Wrong size on VLegacyVideoWidgetBase_TriggerOnUintUpdated");
static_assert(offsetof(VLegacyVideoWidgetBase_TriggerOnUintUpdated, Setting) == 0x000000, "Member 'VLegacyVideoWidgetBase_TriggerOnUintUpdated::Setting' has a wrong offset!");
static_assert(offsetof(VLegacyVideoWidgetBase_TriggerOnUintUpdated, Value) == 0x000001, "Member 'VLegacyVideoWidgetBase_TriggerOnUintUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyVideoWidgetBase.GetLabel
// 0x0018 (0x0018 - 0x0000)
struct VLegacyVideoWidgetBase_GetLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyVideoWidgetBase_GetLabel) == 0x000008, "Wrong alignment on VLegacyVideoWidgetBase_GetLabel");
static_assert(sizeof(VLegacyVideoWidgetBase_GetLabel) == 0x000018, "Wrong size on VLegacyVideoWidgetBase_GetLabel");
static_assert(offsetof(VLegacyVideoWidgetBase_GetLabel, ReturnValue) == 0x000000, "Member 'VLegacyVideoWidgetBase_GetLabel::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.OnControllerMappingsUpdated
// 0x0010 (0x0010 - 0x0000)
struct VLegacyXControlsMenu_OnControllerMappingsUpdated final
{
public:
	TArray<struct FLegacyControlsInputMapping>    Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_OnControllerMappingsUpdated) == 0x000008, "Wrong alignment on VLegacyXControlsMenu_OnControllerMappingsUpdated");
static_assert(sizeof(VLegacyXControlsMenu_OnControllerMappingsUpdated) == 0x000010, "Wrong size on VLegacyXControlsMenu_OnControllerMappingsUpdated");
static_assert(offsetof(VLegacyXControlsMenu_OnControllerMappingsUpdated, Value) == 0x000000, "Member 'VLegacyXControlsMenu_OnControllerMappingsUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.OnSettingsUpdated
// 0x000C (0x000C - 0x0000)
struct VLegacyXControlsMenu_OnSettingsUpdated final
{
public:
	struct FLegacyXControllerSettings             Value;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_OnSettingsUpdated) == 0x000004, "Wrong alignment on VLegacyXControlsMenu_OnSettingsUpdated");
static_assert(sizeof(VLegacyXControlsMenu_OnSettingsUpdated) == 0x00000C, "Wrong size on VLegacyXControlsMenu_OnSettingsUpdated");
static_assert(offsetof(VLegacyXControlsMenu_OnSettingsUpdated, Value) == 0x000000, "Member 'VLegacyXControlsMenu_OnSettingsUpdated::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetControllerMappings
// 0x0010 (0x0010 - 0x0000)
struct VLegacyXControlsMenu_SetControllerMappings final
{
public:
	TArray<struct FLegacyControlsInputMapping>    Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetControllerMappings) == 0x000008, "Wrong alignment on VLegacyXControlsMenu_SetControllerMappings");
static_assert(sizeof(VLegacyXControlsMenu_SetControllerMappings) == 0x000010, "Wrong size on VLegacyXControlsMenu_SetControllerMappings");
static_assert(offsetof(VLegacyXControlsMenu_SetControllerMappings, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetControllerMappings::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetHorizontalSensitivity
// 0x0004 (0x0004 - 0x0000)
struct VLegacyXControlsMenu_SetHorizontalSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetHorizontalSensitivity) == 0x000004, "Wrong alignment on VLegacyXControlsMenu_SetHorizontalSensitivity");
static_assert(sizeof(VLegacyXControlsMenu_SetHorizontalSensitivity) == 0x000004, "Wrong size on VLegacyXControlsMenu_SetHorizontalSensitivity");
static_assert(offsetof(VLegacyXControlsMenu_SetHorizontalSensitivity, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetHorizontalSensitivity::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetInvertY
// 0x0001 (0x0001 - 0x0000)
struct VLegacyXControlsMenu_SetInvertY final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetInvertY) == 0x000001, "Wrong alignment on VLegacyXControlsMenu_SetInvertY");
static_assert(sizeof(VLegacyXControlsMenu_SetInvertY) == 0x000001, "Wrong size on VLegacyXControlsMenu_SetInvertY");
static_assert(offsetof(VLegacyXControlsMenu_SetInvertY, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetInvertY::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetMapping
// 0x0030 (0x0030 - 0x0000)
struct VLegacyXControlsMenu_SetMapping final
{
public:
	struct FLegacyControlsInputMapping            Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetMapping) == 0x000008, "Wrong alignment on VLegacyXControlsMenu_SetMapping");
static_assert(sizeof(VLegacyXControlsMenu_SetMapping) == 0x000030, "Wrong size on VLegacyXControlsMenu_SetMapping");
static_assert(offsetof(VLegacyXControlsMenu_SetMapping, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetMapping::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetSettings
// 0x000C (0x000C - 0x0000)
struct VLegacyXControlsMenu_SetSettings final
{
public:
	struct FLegacyXControllerSettings             Value;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetSettings) == 0x000004, "Wrong alignment on VLegacyXControlsMenu_SetSettings");
static_assert(sizeof(VLegacyXControlsMenu_SetSettings) == 0x00000C, "Wrong size on VLegacyXControlsMenu_SetSettings");
static_assert(offsetof(VLegacyXControlsMenu_SetSettings, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetSettings::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetVerticalSensitivity
// 0x0004 (0x0004 - 0x0000)
struct VLegacyXControlsMenu_SetVerticalSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetVerticalSensitivity) == 0x000004, "Wrong alignment on VLegacyXControlsMenu_SetVerticalSensitivity");
static_assert(sizeof(VLegacyXControlsMenu_SetVerticalSensitivity) == 0x000004, "Wrong size on VLegacyXControlsMenu_SetVerticalSensitivity");
static_assert(offsetof(VLegacyXControlsMenu_SetVerticalSensitivity, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetVerticalSensitivity::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.SetVibration
// 0x0001 (0x0001 - 0x0000)
struct VLegacyXControlsMenu_SetVibration final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_SetVibration) == 0x000001, "Wrong alignment on VLegacyXControlsMenu_SetVibration");
static_assert(sizeof(VLegacyXControlsMenu_SetVibration) == 0x000001, "Wrong size on VLegacyXControlsMenu_SetVibration");
static_assert(offsetof(VLegacyXControlsMenu_SetVibration, Value) == 0x000000, "Member 'VLegacyXControlsMenu_SetVibration::Value' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.GetControllerMappings
// 0x0010 (0x0010 - 0x0000)
struct VLegacyXControlsMenu_GetControllerMappings final
{
public:
	TArray<struct FLegacyControlsInputMapping>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_GetControllerMappings) == 0x000008, "Wrong alignment on VLegacyXControlsMenu_GetControllerMappings");
static_assert(sizeof(VLegacyXControlsMenu_GetControllerMappings) == 0x000010, "Wrong size on VLegacyXControlsMenu_GetControllerMappings");
static_assert(offsetof(VLegacyXControlsMenu_GetControllerMappings, ReturnValue) == 0x000000, "Member 'VLegacyXControlsMenu_GetControllerMappings::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyXControlsMenu.GetSettings
// 0x000C (0x000C - 0x0000)
struct VLegacyXControlsMenu_GetSettings final
{
public:
	struct FLegacyXControllerSettings             ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyXControlsMenu_GetSettings) == 0x000004, "Wrong alignment on VLegacyXControlsMenu_GetSettings");
static_assert(sizeof(VLegacyXControlsMenu_GetSettings) == 0x00000C, "Wrong size on VLegacyXControlsMenu_GetSettings");
static_assert(offsetof(VLegacyXControlsMenu_GetSettings, ReturnValue) == 0x000000, "Member 'VLegacyXControlsMenu_GetSettings::ReturnValue' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.RegisterSendSelectAttributeHandler
// 0x0001 (0x0001 - 0x0000)
struct VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler final
{
public:
	EVAttribute                                   SelectedAttribute;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler) == 0x000001, "Wrong alignment on VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler");
static_assert(sizeof(VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler) == 0x000001, "Wrong size on VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler");
static_assert(offsetof(VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler, SelectedAttribute) == 0x000000, "Member 'VLevelUpMenuViewModel_RegisterSendSelectAttributeHandler::SelectedAttribute' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.SetBonusesArray
// 0x0010 (0x0010 - 0x0000)
struct VLevelUpMenuViewModel_SetBonusesArray final
{
public:
	TArray<int32>                                 NewBonusesArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_SetBonusesArray) == 0x000008, "Wrong alignment on VLevelUpMenuViewModel_SetBonusesArray");
static_assert(sizeof(VLevelUpMenuViewModel_SetBonusesArray) == 0x000010, "Wrong size on VLevelUpMenuViewModel_SetBonusesArray");
static_assert(offsetof(VLevelUpMenuViewModel_SetBonusesArray, NewBonusesArray) == 0x000000, "Member 'VLevelUpMenuViewModel_SetBonusesArray::NewBonusesArray' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.SetCurrentPointsNb
// 0x0004 (0x0004 - 0x0000)
struct VLevelUpMenuViewModel_SetCurrentPointsNb final
{
public:
	int32                                         NewPointsNb;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_SetCurrentPointsNb) == 0x000004, "Wrong alignment on VLevelUpMenuViewModel_SetCurrentPointsNb");
static_assert(sizeof(VLevelUpMenuViewModel_SetCurrentPointsNb) == 0x000004, "Wrong size on VLevelUpMenuViewModel_SetCurrentPointsNb");
static_assert(offsetof(VLevelUpMenuViewModel_SetCurrentPointsNb, NewPointsNb) == 0x000000, "Member 'VLevelUpMenuViewModel_SetCurrentPointsNb::NewPointsNb' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.SetModifiedAttributesIndexArray
// 0x0010 (0x0010 - 0x0000)
struct VLevelUpMenuViewModel_SetModifiedAttributesIndexArray final
{
public:
	TArray<int32>                                 NewModifiedAttributesIndexArray;                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_SetModifiedAttributesIndexArray) == 0x000008, "Wrong alignment on VLevelUpMenuViewModel_SetModifiedAttributesIndexArray");
static_assert(sizeof(VLevelUpMenuViewModel_SetModifiedAttributesIndexArray) == 0x000010, "Wrong size on VLevelUpMenuViewModel_SetModifiedAttributesIndexArray");
static_assert(offsetof(VLevelUpMenuViewModel_SetModifiedAttributesIndexArray, NewModifiedAttributesIndexArray) == 0x000000, "Member 'VLevelUpMenuViewModel_SetModifiedAttributesIndexArray::NewModifiedAttributesIndexArray' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.UpdateCurrentPointsNb
// 0x0008 (0x0008 - 0x0000)
struct VLevelUpMenuViewModel_UpdateCurrentPointsNb final
{
public:
	bool                                          IsPlus;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusCost;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_UpdateCurrentPointsNb) == 0x000004, "Wrong alignment on VLevelUpMenuViewModel_UpdateCurrentPointsNb");
static_assert(sizeof(VLevelUpMenuViewModel_UpdateCurrentPointsNb) == 0x000008, "Wrong size on VLevelUpMenuViewModel_UpdateCurrentPointsNb");
static_assert(offsetof(VLevelUpMenuViewModel_UpdateCurrentPointsNb, IsPlus) == 0x000000, "Member 'VLevelUpMenuViewModel_UpdateCurrentPointsNb::IsPlus' has a wrong offset!");
static_assert(offsetof(VLevelUpMenuViewModel_UpdateCurrentPointsNb, BonusCost) == 0x000004, "Member 'VLevelUpMenuViewModel_UpdateCurrentPointsNb::BonusCost' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.GetBonusesArray
// 0x0010 (0x0010 - 0x0000)
struct VLevelUpMenuViewModel_GetBonusesArray final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_GetBonusesArray) == 0x000008, "Wrong alignment on VLevelUpMenuViewModel_GetBonusesArray");
static_assert(sizeof(VLevelUpMenuViewModel_GetBonusesArray) == 0x000010, "Wrong size on VLevelUpMenuViewModel_GetBonusesArray");
static_assert(offsetof(VLevelUpMenuViewModel_GetBonusesArray, ReturnValue) == 0x000000, "Member 'VLevelUpMenuViewModel_GetBonusesArray::ReturnValue' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.GetCurrentPointsNb
// 0x0004 (0x0004 - 0x0000)
struct VLevelUpMenuViewModel_GetCurrentPointsNb final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_GetCurrentPointsNb) == 0x000004, "Wrong alignment on VLevelUpMenuViewModel_GetCurrentPointsNb");
static_assert(sizeof(VLevelUpMenuViewModel_GetCurrentPointsNb) == 0x000004, "Wrong size on VLevelUpMenuViewModel_GetCurrentPointsNb");
static_assert(offsetof(VLevelUpMenuViewModel_GetCurrentPointsNb, ReturnValue) == 0x000000, "Member 'VLevelUpMenuViewModel_GetCurrentPointsNb::ReturnValue' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.GetCurrentState
// 0x0018 (0x0018 - 0x0000)
struct VLevelUpMenuViewModel_GetCurrentState final
{
public:
	struct FLevelUpMenuState                      ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_GetCurrentState) == 0x000008, "Wrong alignment on VLevelUpMenuViewModel_GetCurrentState");
static_assert(sizeof(VLevelUpMenuViewModel_GetCurrentState) == 0x000018, "Wrong size on VLevelUpMenuViewModel_GetCurrentState");
static_assert(offsetof(VLevelUpMenuViewModel_GetCurrentState, ReturnValue) == 0x000000, "Member 'VLevelUpMenuViewModel_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.GetInitializationData
// 0x0038 (0x0038 - 0x0000)
struct VLevelUpMenuViewModel_GetInitializationData final
{
public:
	struct FLevelUpMenuInitializationData         ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_GetInitializationData) == 0x000008, "Wrong alignment on VLevelUpMenuViewModel_GetInitializationData");
static_assert(sizeof(VLevelUpMenuViewModel_GetInitializationData) == 0x000038, "Wrong size on VLevelUpMenuViewModel_GetInitializationData");
static_assert(offsetof(VLevelUpMenuViewModel_GetInitializationData, ReturnValue) == 0x000000, "Member 'VLevelUpMenuViewModel_GetInitializationData::ReturnValue' has a wrong offset!");

// Function Altar.VLevelUpMenuViewModel.GetModifiedAttributesIndexArray
// 0x0010 (0x0010 - 0x0000)
struct VLevelUpMenuViewModel_GetModifiedAttributesIndexArray final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLevelUpMenuViewModel_GetModifiedAttributesIndexArray) == 0x000008, "Wrong alignment on VLevelUpMenuViewModel_GetModifiedAttributesIndexArray");
static_assert(sizeof(VLevelUpMenuViewModel_GetModifiedAttributesIndexArray) == 0x000010, "Wrong size on VLevelUpMenuViewModel_GetModifiedAttributesIndexArray");
static_assert(offsetof(VLevelUpMenuViewModel_GetModifiedAttributesIndexArray, ReturnValue) == 0x000000, "Member 'VLevelUpMenuViewModel_GetModifiedAttributesIndexArray::ReturnValue' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.SetHints
// 0x0010 (0x0010 - 0x0000)
struct VLoadingScreenViewModel_SetHints final
{
public:
	TArray<struct FHintData>                      NewHints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_SetHints) == 0x000008, "Wrong alignment on VLoadingScreenViewModel_SetHints");
static_assert(sizeof(VLoadingScreenViewModel_SetHints) == 0x000010, "Wrong size on VLoadingScreenViewModel_SetHints");
static_assert(offsetof(VLoadingScreenViewModel_SetHints, NewHints) == 0x000000, "Member 'VLoadingScreenViewModel_SetHints::NewHints' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.SetLoadingScreenType
// 0x0001 (0x0001 - 0x0000)
struct VLoadingScreenViewModel_SetLoadingScreenType final
{
public:
	ELoadingScreenType                            NewLoadingScreenType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_SetLoadingScreenType) == 0x000001, "Wrong alignment on VLoadingScreenViewModel_SetLoadingScreenType");
static_assert(sizeof(VLoadingScreenViewModel_SetLoadingScreenType) == 0x000001, "Wrong size on VLoadingScreenViewModel_SetLoadingScreenType");
static_assert(offsetof(VLoadingScreenViewModel_SetLoadingScreenType, NewLoadingScreenType) == 0x000000, "Member 'VLoadingScreenViewModel_SetLoadingScreenType::NewLoadingScreenType' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.SetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct VLoadingScreenViewModel_SetPlayerData final
{
public:
	struct FLoadScreenPlayerData                  NewPlayerData;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_SetPlayerData) == 0x000008, "Wrong alignment on VLoadingScreenViewModel_SetPlayerData");
static_assert(sizeof(VLoadingScreenViewModel_SetPlayerData) == 0x000020, "Wrong size on VLoadingScreenViewModel_SetPlayerData");
static_assert(offsetof(VLoadingScreenViewModel_SetPlayerData, NewPlayerData) == 0x000000, "Member 'VLoadingScreenViewModel_SetPlayerData::NewPlayerData' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.GetHints
// 0x0010 (0x0010 - 0x0000)
struct VLoadingScreenViewModel_GetHints final
{
public:
	TArray<struct FHintData>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_GetHints) == 0x000008, "Wrong alignment on VLoadingScreenViewModel_GetHints");
static_assert(sizeof(VLoadingScreenViewModel_GetHints) == 0x000010, "Wrong size on VLoadingScreenViewModel_GetHints");
static_assert(offsetof(VLoadingScreenViewModel_GetHints, ReturnValue) == 0x000000, "Member 'VLoadingScreenViewModel_GetHints::ReturnValue' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.GetLoadingScreenType
// 0x0001 (0x0001 - 0x0000)
struct VLoadingScreenViewModel_GetLoadingScreenType final
{
public:
	ELoadingScreenType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_GetLoadingScreenType) == 0x000001, "Wrong alignment on VLoadingScreenViewModel_GetLoadingScreenType");
static_assert(sizeof(VLoadingScreenViewModel_GetLoadingScreenType) == 0x000001, "Wrong size on VLoadingScreenViewModel_GetLoadingScreenType");
static_assert(offsetof(VLoadingScreenViewModel_GetLoadingScreenType, ReturnValue) == 0x000000, "Member 'VLoadingScreenViewModel_GetLoadingScreenType::ReturnValue' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.GetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct VLoadingScreenViewModel_GetPlayerData final
{
public:
	struct FLoadScreenPlayerData                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_GetPlayerData) == 0x000008, "Wrong alignment on VLoadingScreenViewModel_GetPlayerData");
static_assert(sizeof(VLoadingScreenViewModel_GetPlayerData) == 0x000020, "Wrong size on VLoadingScreenViewModel_GetPlayerData");
static_assert(offsetof(VLoadingScreenViewModel_GetPlayerData, ReturnValue) == 0x000000, "Member 'VLoadingScreenViewModel_GetPlayerData::ReturnValue' has a wrong offset!");

// Function Altar.VLoadingScreenViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VLoadingScreenViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLoadingScreenViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VLoadingScreenViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VLoadingScreenViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VLoadingScreenViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VLoadingScreenViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VLoadingScreenViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VLockpickMenuViewModel.SetHasAutoAttemptWorked
// 0x0001 (0x0001 - 0x0000)
struct VLockpickMenuViewModel_SetHasAutoAttemptWorked final
{
public:
	EAttemptSuccess                               NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLockpickMenuViewModel_SetHasAutoAttemptWorked) == 0x000001, "Wrong alignment on VLockpickMenuViewModel_SetHasAutoAttemptWorked");
static_assert(sizeof(VLockpickMenuViewModel_SetHasAutoAttemptWorked) == 0x000001, "Wrong size on VLockpickMenuViewModel_SetHasAutoAttemptWorked");
static_assert(offsetof(VLockpickMenuViewModel_SetHasAutoAttemptWorked, NewValue) == 0x000000, "Member 'VLockpickMenuViewModel_SetHasAutoAttemptWorked::NewValue' has a wrong offset!");

// Function Altar.VLockpickMenuViewModel.SetMenuProperties
// 0x0010 (0x0010 - 0x0000)
struct VLockpickMenuViewModel_SetMenuProperties final
{
public:
	struct FLegacyLockpickMenuProperties          NewProperties;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLockpickMenuViewModel_SetMenuProperties) == 0x000004, "Wrong alignment on VLockpickMenuViewModel_SetMenuProperties");
static_assert(sizeof(VLockpickMenuViewModel_SetMenuProperties) == 0x000010, "Wrong size on VLockpickMenuViewModel_SetMenuProperties");
static_assert(offsetof(VLockpickMenuViewModel_SetMenuProperties, NewProperties) == 0x000000, "Member 'VLockpickMenuViewModel_SetMenuProperties::NewProperties' has a wrong offset!");

// Function Altar.VLockpickMenuViewModel.SetTumblerDefaultProperties
// 0x001C (0x001C - 0x0000)
struct VLockpickMenuViewModel_SetTumblerDefaultProperties final
{
public:
	struct FLegacyLockpickMenuTumblerDefaultProperties NewTumblerDefaultProperties;                  // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLockpickMenuViewModel_SetTumblerDefaultProperties) == 0x000004, "Wrong alignment on VLockpickMenuViewModel_SetTumblerDefaultProperties");
static_assert(sizeof(VLockpickMenuViewModel_SetTumblerDefaultProperties) == 0x00001C, "Wrong size on VLockpickMenuViewModel_SetTumblerDefaultProperties");
static_assert(offsetof(VLockpickMenuViewModel_SetTumblerDefaultProperties, NewTumblerDefaultProperties) == 0x000000, "Member 'VLockpickMenuViewModel_SetTumblerDefaultProperties::NewTumblerDefaultProperties' has a wrong offset!");

// Function Altar.VLockpickMenuViewModel.GetHasAutoAttemptWorked
// 0x0001 (0x0001 - 0x0000)
struct VLockpickMenuViewModel_GetHasAutoAttemptWorked final
{
public:
	EAttemptSuccess                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLockpickMenuViewModel_GetHasAutoAttemptWorked) == 0x000001, "Wrong alignment on VLockpickMenuViewModel_GetHasAutoAttemptWorked");
static_assert(sizeof(VLockpickMenuViewModel_GetHasAutoAttemptWorked) == 0x000001, "Wrong size on VLockpickMenuViewModel_GetHasAutoAttemptWorked");
static_assert(offsetof(VLockpickMenuViewModel_GetHasAutoAttemptWorked, ReturnValue) == 0x000000, "Member 'VLockpickMenuViewModel_GetHasAutoAttemptWorked::ReturnValue' has a wrong offset!");

// Function Altar.VLockpickMenuViewModel.GetMenuProperties
// 0x0010 (0x0010 - 0x0000)
struct VLockpickMenuViewModel_GetMenuProperties final
{
public:
	struct FLegacyLockpickMenuProperties          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLockpickMenuViewModel_GetMenuProperties) == 0x000004, "Wrong alignment on VLockpickMenuViewModel_GetMenuProperties");
static_assert(sizeof(VLockpickMenuViewModel_GetMenuProperties) == 0x000010, "Wrong size on VLockpickMenuViewModel_GetMenuProperties");
static_assert(offsetof(VLockpickMenuViewModel_GetMenuProperties, ReturnValue) == 0x000000, "Member 'VLockpickMenuViewModel_GetMenuProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLockpickMenuViewModel.GetTumblerDefaultProperties
// 0x001C (0x001C - 0x0000)
struct VLockpickMenuViewModel_GetTumblerDefaultProperties final
{
public:
	struct FLegacyLockpickMenuTumblerDefaultProperties ReturnValue;                                  // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLockpickMenuViewModel_GetTumblerDefaultProperties) == 0x000004, "Wrong alignment on VLockpickMenuViewModel_GetTumblerDefaultProperties");
static_assert(sizeof(VLockpickMenuViewModel_GetTumblerDefaultProperties) == 0x00001C, "Wrong size on VLockpickMenuViewModel_GetTumblerDefaultProperties");
static_assert(offsetof(VLockpickMenuViewModel_GetTumblerDefaultProperties, ReturnValue) == 0x000000, "Member 'VLockpickMenuViewModel_GetTumblerDefaultProperties::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionStandTurnAnimInstance.CanTurn
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionStandTurnAnimInstance_CanTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionStandTurnAnimInstance_CanTurn) == 0x000001, "Wrong alignment on VLocomotionStandTurnAnimInstance_CanTurn");
static_assert(sizeof(VLocomotionStandTurnAnimInstance_CanTurn) == 0x000001, "Wrong size on VLocomotionStandTurnAnimInstance_CanTurn");
static_assert(offsetof(VLocomotionStandTurnAnimInstance_CanTurn, ReturnValue) == 0x000000, "Member 'VLocomotionStandTurnAnimInstance_CanTurn::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionStandTurnAnimInstance.IsTurning
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionStandTurnAnimInstance_IsTurning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionStandTurnAnimInstance_IsTurning) == 0x000001, "Wrong alignment on VLocomotionStandTurnAnimInstance_IsTurning");
static_assert(sizeof(VLocomotionStandTurnAnimInstance_IsTurning) == 0x000001, "Wrong size on VLocomotionStandTurnAnimInstance_IsTurning");
static_assert(offsetof(VLocomotionStandTurnAnimInstance_IsTurning, ReturnValue) == 0x000000, "Member 'VLocomotionStandTurnAnimInstance_IsTurning::ReturnValue' has a wrong offset!");

// Function Altar.VLocomotionStandTurnAnimInstance.IsTurningLeft
// 0x0001 (0x0001 - 0x0000)
struct VLocomotionStandTurnAnimInstance_IsTurningLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLocomotionStandTurnAnimInstance_IsTurningLeft) == 0x000001, "Wrong alignment on VLocomotionStandTurnAnimInstance_IsTurningLeft");
static_assert(sizeof(VLocomotionStandTurnAnimInstance_IsTurningLeft) == 0x000001, "Wrong size on VLocomotionStandTurnAnimInstance_IsTurningLeft");
static_assert(offsetof(VLocomotionStandTurnAnimInstance_IsTurningLeft, ReturnValue) == 0x000000, "Member 'VLocomotionStandTurnAnimInstance_IsTurningLeft::ReturnValue' has a wrong offset!");

// Function Altar.VLookAtAnimInstance.IsSitting
// 0x0001 (0x0001 - 0x0000)
struct VLookAtAnimInstance_IsSitting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLookAtAnimInstance_IsSitting) == 0x000001, "Wrong alignment on VLookAtAnimInstance_IsSitting");
static_assert(sizeof(VLookAtAnimInstance_IsSitting) == 0x000001, "Wrong size on VLookAtAnimInstance_IsSitting");
static_assert(offsetof(VLookAtAnimInstance_IsSitting, ReturnValue) == 0x000000, "Member 'VLookAtAnimInstance_IsSitting::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.RegisterSendClickOnItemHandler
// 0x0004 (0x0004 - 0x0000)
struct VMagicMenuViewModel_RegisterSendClickOnItemHandler final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_RegisterSendClickOnItemHandler) == 0x000004, "Wrong alignment on VMagicMenuViewModel_RegisterSendClickOnItemHandler");
static_assert(sizeof(VMagicMenuViewModel_RegisterSendClickOnItemHandler) == 0x000004, "Wrong size on VMagicMenuViewModel_RegisterSendClickOnItemHandler");
static_assert(offsetof(VMagicMenuViewModel_RegisterSendClickOnItemHandler, InButtonIndex) == 0x000000, "Member 'VMagicMenuViewModel_RegisterSendClickOnItemHandler::InButtonIndex' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.RegisterSendItemHoverHandler
// 0x0004 (0x0004 - 0x0000)
struct VMagicMenuViewModel_RegisterSendItemHoverHandler final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_RegisterSendItemHoverHandler) == 0x000004, "Wrong alignment on VMagicMenuViewModel_RegisterSendItemHoverHandler");
static_assert(sizeof(VMagicMenuViewModel_RegisterSendItemHoverHandler) == 0x000004, "Wrong size on VMagicMenuViewModel_RegisterSendItemHoverHandler");
static_assert(offsetof(VMagicMenuViewModel_RegisterSendItemHoverHandler, ItemIndex) == 0x000000, "Member 'VMagicMenuViewModel_RegisterSendItemHoverHandler::ItemIndex' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.ReplaceCurrentPageInventory
// 0x0010 (0x0010 - 0x0000)
struct VMagicMenuViewModel_ReplaceCurrentPageInventory final
{
public:
	TArray<struct FLegacyMagicMenuItemProperties> NewItems;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_ReplaceCurrentPageInventory) == 0x000008, "Wrong alignment on VMagicMenuViewModel_ReplaceCurrentPageInventory");
static_assert(sizeof(VMagicMenuViewModel_ReplaceCurrentPageInventory) == 0x000010, "Wrong size on VMagicMenuViewModel_ReplaceCurrentPageInventory");
static_assert(offsetof(VMagicMenuViewModel_ReplaceCurrentPageInventory, NewItems) == 0x000000, "Member 'VMagicMenuViewModel_ReplaceCurrentPageInventory::NewItems' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_SetCurrentPage final
{
public:
	ELegacyMagicMenuPage                          NewPage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetCurrentPage) == 0x000001, "Wrong alignment on VMagicMenuViewModel_SetCurrentPage");
static_assert(sizeof(VMagicMenuViewModel_SetCurrentPage) == 0x000001, "Wrong size on VMagicMenuViewModel_SetCurrentPage");
static_assert(offsetof(VMagicMenuViewModel_SetCurrentPage, NewPage) == 0x000000, "Member 'VMagicMenuViewModel_SetCurrentPage::NewPage' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetCurrentSpellEquiped
// 0x0060 (0x0060 - 0x0000)
struct VMagicMenuViewModel_SetCurrentSpellEquiped final
{
public:
	struct FLegacyMagicMenuItemProperties         InSpellEquiped;                                    // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetCurrentSpellEquiped) == 0x000008, "Wrong alignment on VMagicMenuViewModel_SetCurrentSpellEquiped");
static_assert(sizeof(VMagicMenuViewModel_SetCurrentSpellEquiped) == 0x000060, "Wrong size on VMagicMenuViewModel_SetCurrentSpellEquiped");
static_assert(offsetof(VMagicMenuViewModel_SetCurrentSpellEquiped, InSpellEquiped) == 0x000000, "Member 'VMagicMenuViewModel_SetCurrentSpellEquiped::InSpellEquiped' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetInventory
// 0x0010 (0x0010 - 0x0000)
struct VMagicMenuViewModel_SetInventory final
{
public:
	TArray<struct FLegacyMagicMenuItemProperties> NewItems;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetInventory) == 0x000008, "Wrong alignment on VMagicMenuViewModel_SetInventory");
static_assert(sizeof(VMagicMenuViewModel_SetInventory) == 0x000010, "Wrong size on VMagicMenuViewModel_SetInventory");
static_assert(offsetof(VMagicMenuViewModel_SetInventory, NewItems) == 0x000000, "Member 'VMagicMenuViewModel_SetInventory::NewItems' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetInventoryForPage
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_SetInventoryForPage final
{
public:
	ELegacyMagicMenuPage                          Page;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetInventoryForPage) == 0x000001, "Wrong alignment on VMagicMenuViewModel_SetInventoryForPage");
static_assert(sizeof(VMagicMenuViewModel_SetInventoryForPage) == 0x000001, "Wrong size on VMagicMenuViewModel_SetInventoryForPage");
static_assert(offsetof(VMagicMenuViewModel_SetInventoryForPage, Page) == 0x000000, "Member 'VMagicMenuViewModel_SetInventoryForPage::Page' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          bNewIsSortReversed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VMagicMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VMagicMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VMagicMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VMagicMenuViewModel_SetIsSortReversed, bNewIsSortReversed) == 0x000000, "Member 'VMagicMenuViewModel_SetIsSortReversed::bNewIsSortReversed' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_SetSortType final
{
public:
	ELegacyMagicMenuSortType                      NewSortType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VMagicMenuViewModel_SetSortType");
static_assert(sizeof(VMagicMenuViewModel_SetSortType) == 0x000001, "Wrong size on VMagicMenuViewModel_SetSortType");
static_assert(offsetof(VMagicMenuViewModel_SetSortType, NewSortType) == 0x000000, "Member 'VMagicMenuViewModel_SetSortType::NewSortType' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetSpellEfectivenessExplanation
// 0x0048 (0x0048 - 0x0000)
struct VMagicMenuViewModel_SetSpellEfectivenessExplanation final
{
public:
	struct FModernSpellEffectivenessProperties    NewSpellEffectivenessExplanation;                  // 0x0000(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetSpellEfectivenessExplanation) == 0x000008, "Wrong alignment on VMagicMenuViewModel_SetSpellEfectivenessExplanation");
static_assert(sizeof(VMagicMenuViewModel_SetSpellEfectivenessExplanation) == 0x000048, "Wrong size on VMagicMenuViewModel_SetSpellEfectivenessExplanation");
static_assert(offsetof(VMagicMenuViewModel_SetSpellEfectivenessExplanation, NewSpellEffectivenessExplanation) == 0x000000, "Member 'VMagicMenuViewModel_SetSpellEfectivenessExplanation::NewSpellEffectivenessExplanation' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.SetSpellEffectiveness
// 0x0004 (0x0004 - 0x0000)
struct VMagicMenuViewModel_SetSpellEffectiveness final
{
public:
	float                                         NewSpellEffectiveness;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_SetSpellEffectiveness) == 0x000004, "Wrong alignment on VMagicMenuViewModel_SetSpellEffectiveness");
static_assert(sizeof(VMagicMenuViewModel_SetSpellEffectiveness) == 0x000004, "Wrong size on VMagicMenuViewModel_SetSpellEffectiveness");
static_assert(offsetof(VMagicMenuViewModel_SetSpellEffectiveness, NewSpellEffectiveness) == 0x000000, "Member 'VMagicMenuViewModel_SetSpellEffectiveness::NewSpellEffectiveness' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.ToggleFavoriteItem
// 0x0060 (0x0060 - 0x0000)
struct VMagicMenuViewModel_ToggleFavoriteItem final
{
public:
	struct FLegacyMagicMenuItemProperties         InItem;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_ToggleFavoriteItem) == 0x000008, "Wrong alignment on VMagicMenuViewModel_ToggleFavoriteItem");
static_assert(sizeof(VMagicMenuViewModel_ToggleFavoriteItem) == 0x000060, "Wrong size on VMagicMenuViewModel_ToggleFavoriteItem");
static_assert(offsetof(VMagicMenuViewModel_ToggleFavoriteItem, InItem) == 0x000000, "Member 'VMagicMenuViewModel_ToggleFavoriteItem::InItem' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_GetCurrentPage final
{
public:
	ELegacyMagicMenuPage                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetCurrentPage) == 0x000001, "Wrong alignment on VMagicMenuViewModel_GetCurrentPage");
static_assert(sizeof(VMagicMenuViewModel_GetCurrentPage) == 0x000001, "Wrong size on VMagicMenuViewModel_GetCurrentPage");
static_assert(offsetof(VMagicMenuViewModel_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetCurrentPageInventory
// 0x0010 (0x0010 - 0x0000)
struct VMagicMenuViewModel_GetCurrentPageInventory final
{
public:
	TArray<struct FLegacyMagicMenuItemProperties> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetCurrentPageInventory) == 0x000008, "Wrong alignment on VMagicMenuViewModel_GetCurrentPageInventory");
static_assert(sizeof(VMagicMenuViewModel_GetCurrentPageInventory) == 0x000010, "Wrong size on VMagicMenuViewModel_GetCurrentPageInventory");
static_assert(offsetof(VMagicMenuViewModel_GetCurrentPageInventory, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetCurrentPageInventory::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetCurrentSpellEquiped
// 0x0060 (0x0060 - 0x0000)
struct VMagicMenuViewModel_GetCurrentSpellEquiped final
{
public:
	struct FLegacyMagicMenuItemProperties         ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetCurrentSpellEquiped) == 0x000008, "Wrong alignment on VMagicMenuViewModel_GetCurrentSpellEquiped");
static_assert(sizeof(VMagicMenuViewModel_GetCurrentSpellEquiped) == 0x000060, "Wrong size on VMagicMenuViewModel_GetCurrentSpellEquiped");
static_assert(offsetof(VMagicMenuViewModel_GetCurrentSpellEquiped, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetCurrentSpellEquiped::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetFavoritesItems
// 0x0010 (0x0010 - 0x0000)
struct VMagicMenuViewModel_GetFavoritesItems final
{
public:
	TArray<struct FLegacyMagicMenuItemProperties> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetFavoritesItems) == 0x000008, "Wrong alignment on VMagicMenuViewModel_GetFavoritesItems");
static_assert(sizeof(VMagicMenuViewModel_GetFavoritesItems) == 0x000010, "Wrong size on VMagicMenuViewModel_GetFavoritesItems");
static_assert(offsetof(VMagicMenuViewModel_GetFavoritesItems, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetFavoritesItems::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetInventory
// 0x0010 (0x0010 - 0x0000)
struct VMagicMenuViewModel_GetInventory final
{
public:
	TArray<struct FLegacyMagicMenuItemProperties> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetInventory) == 0x000008, "Wrong alignment on VMagicMenuViewModel_GetInventory");
static_assert(sizeof(VMagicMenuViewModel_GetInventory) == 0x000010, "Wrong size on VMagicMenuViewModel_GetInventory");
static_assert(offsetof(VMagicMenuViewModel_GetInventory, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetInventory::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_GetSortType final
{
public:
	ELegacyMagicMenuSortType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VMagicMenuViewModel_GetSortType");
static_assert(sizeof(VMagicMenuViewModel_GetSortType) == 0x000001, "Wrong size on VMagicMenuViewModel_GetSortType");
static_assert(offsetof(VMagicMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetSpellEfectivenessExplanation
// 0x0048 (0x0048 - 0x0000)
struct VMagicMenuViewModel_GetSpellEfectivenessExplanation final
{
public:
	struct FModernSpellEffectivenessProperties    ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetSpellEfectivenessExplanation) == 0x000008, "Wrong alignment on VMagicMenuViewModel_GetSpellEfectivenessExplanation");
static_assert(sizeof(VMagicMenuViewModel_GetSpellEfectivenessExplanation) == 0x000048, "Wrong size on VMagicMenuViewModel_GetSpellEfectivenessExplanation");
static_assert(offsetof(VMagicMenuViewModel_GetSpellEfectivenessExplanation, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetSpellEfectivenessExplanation::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.GetSpellEffectiveness
// 0x0004 (0x0004 - 0x0000)
struct VMagicMenuViewModel_GetSpellEffectiveness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_GetSpellEffectiveness) == 0x000004, "Wrong alignment on VMagicMenuViewModel_GetSpellEffectiveness");
static_assert(sizeof(VMagicMenuViewModel_GetSpellEffectiveness) == 0x000004, "Wrong size on VMagicMenuViewModel_GetSpellEffectiveness");
static_assert(offsetof(VMagicMenuViewModel_GetSpellEffectiveness, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_GetSpellEffectiveness::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.IsItemTypeOnPage
// 0x0003 (0x0003 - 0x0000)
struct VMagicMenuViewModel_IsItemTypeOnPage final
{
public:
	ELegacyMagicMenuItemType                      Item;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELegacyMagicMenuPage                          Page;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_IsItemTypeOnPage) == 0x000001, "Wrong alignment on VMagicMenuViewModel_IsItemTypeOnPage");
static_assert(sizeof(VMagicMenuViewModel_IsItemTypeOnPage) == 0x000003, "Wrong size on VMagicMenuViewModel_IsItemTypeOnPage");
static_assert(offsetof(VMagicMenuViewModel_IsItemTypeOnPage, Item) == 0x000000, "Member 'VMagicMenuViewModel_IsItemTypeOnPage::Item' has a wrong offset!");
static_assert(offsetof(VMagicMenuViewModel_IsItemTypeOnPage, Page) == 0x000001, "Member 'VMagicMenuViewModel_IsItemTypeOnPage::Page' has a wrong offset!");
static_assert(offsetof(VMagicMenuViewModel_IsItemTypeOnPage, ReturnValue) == 0x000002, "Member 'VMagicMenuViewModel_IsItemTypeOnPage::ReturnValue' has a wrong offset!");

// Function Altar.VMagicMenuViewModel.IsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VMagicMenuViewModel_IsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicMenuViewModel_IsSortReversed) == 0x000001, "Wrong alignment on VMagicMenuViewModel_IsSortReversed");
static_assert(sizeof(VMagicMenuViewModel_IsSortReversed) == 0x000001, "Wrong size on VMagicMenuViewModel_IsSortReversed");
static_assert(offsetof(VMagicMenuViewModel_IsSortReversed, ReturnValue) == 0x000000, "Member 'VMagicMenuViewModel_IsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.SetEffects
// 0x0010 (0x0010 - 0x0000)
struct VMagicPopupMenuViewModel_SetEffects final
{
public:
	TArray<struct FLegacyMagicPopupEffectProperties> NewEffectsProperties;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_SetEffects) == 0x000008, "Wrong alignment on VMagicPopupMenuViewModel_SetEffects");
static_assert(sizeof(VMagicPopupMenuViewModel_SetEffects) == 0x000010, "Wrong size on VMagicPopupMenuViewModel_SetEffects");
static_assert(offsetof(VMagicPopupMenuViewModel_SetEffects, NewEffectsProperties) == 0x000000, "Member 'VMagicPopupMenuViewModel_SetEffects::NewEffectsProperties' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.SetIsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct VMagicPopupMenuViewModel_SetIsDisplayed final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_SetIsDisplayed) == 0x000001, "Wrong alignment on VMagicPopupMenuViewModel_SetIsDisplayed");
static_assert(sizeof(VMagicPopupMenuViewModel_SetIsDisplayed) == 0x000001, "Wrong size on VMagicPopupMenuViewModel_SetIsDisplayed");
static_assert(offsetof(VMagicPopupMenuViewModel_SetIsDisplayed, bNewValue) == 0x000000, "Member 'VMagicPopupMenuViewModel_SetIsDisplayed::bNewValue' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.SetRequires
// 0x0018 (0x0018 - 0x0000)
struct VMagicPopupMenuViewModel_SetRequires final
{
public:
	class FText                                   NewRequiresText;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_SetRequires) == 0x000008, "Wrong alignment on VMagicPopupMenuViewModel_SetRequires");
static_assert(sizeof(VMagicPopupMenuViewModel_SetRequires) == 0x000018, "Wrong size on VMagicPopupMenuViewModel_SetRequires");
static_assert(offsetof(VMagicPopupMenuViewModel_SetRequires, NewRequiresText) == 0x000000, "Member 'VMagicPopupMenuViewModel_SetRequires::NewRequiresText' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.SetTargetYOffset
// 0x0004 (0x0004 - 0x0000)
struct VMagicPopupMenuViewModel_SetTargetYOffset final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_SetTargetYOffset) == 0x000004, "Wrong alignment on VMagicPopupMenuViewModel_SetTargetYOffset");
static_assert(sizeof(VMagicPopupMenuViewModel_SetTargetYOffset) == 0x000004, "Wrong size on VMagicPopupMenuViewModel_SetTargetYOffset");
static_assert(offsetof(VMagicPopupMenuViewModel_SetTargetYOffset, NewValue) == 0x000000, "Member 'VMagicPopupMenuViewModel_SetTargetYOffset::NewValue' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.GetEffects
// 0x0010 (0x0010 - 0x0000)
struct VMagicPopupMenuViewModel_GetEffects final
{
public:
	TArray<struct FLegacyMagicPopupEffectProperties> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_GetEffects) == 0x000008, "Wrong alignment on VMagicPopupMenuViewModel_GetEffects");
static_assert(sizeof(VMagicPopupMenuViewModel_GetEffects) == 0x000010, "Wrong size on VMagicPopupMenuViewModel_GetEffects");
static_assert(offsetof(VMagicPopupMenuViewModel_GetEffects, ReturnValue) == 0x000000, "Member 'VMagicPopupMenuViewModel_GetEffects::ReturnValue' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.GetIsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct VMagicPopupMenuViewModel_GetIsDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_GetIsDisplayed) == 0x000001, "Wrong alignment on VMagicPopupMenuViewModel_GetIsDisplayed");
static_assert(sizeof(VMagicPopupMenuViewModel_GetIsDisplayed) == 0x000001, "Wrong size on VMagicPopupMenuViewModel_GetIsDisplayed");
static_assert(offsetof(VMagicPopupMenuViewModel_GetIsDisplayed, ReturnValue) == 0x000000, "Member 'VMagicPopupMenuViewModel_GetIsDisplayed::ReturnValue' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.GetRequires
// 0x0018 (0x0018 - 0x0000)
struct VMagicPopupMenuViewModel_GetRequires final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_GetRequires) == 0x000008, "Wrong alignment on VMagicPopupMenuViewModel_GetRequires");
static_assert(sizeof(VMagicPopupMenuViewModel_GetRequires) == 0x000018, "Wrong size on VMagicPopupMenuViewModel_GetRequires");
static_assert(offsetof(VMagicPopupMenuViewModel_GetRequires, ReturnValue) == 0x000000, "Member 'VMagicPopupMenuViewModel_GetRequires::ReturnValue' has a wrong offset!");

// Function Altar.VMagicPopupMenuViewModel.GetTargetYOffset
// 0x0004 (0x0004 - 0x0000)
struct VMagicPopupMenuViewModel_GetTargetYOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMagicPopupMenuViewModel_GetTargetYOffset) == 0x000004, "Wrong alignment on VMagicPopupMenuViewModel_GetTargetYOffset");
static_assert(sizeof(VMagicPopupMenuViewModel_GetTargetYOffset) == 0x000004, "Wrong size on VMagicPopupMenuViewModel_GetTargetYOffset");
static_assert(offsetof(VMagicPopupMenuViewModel_GetTargetYOffset, ReturnValue) == 0x000000, "Member 'VMagicPopupMenuViewModel_GetTargetYOffset::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.DockingTransitionUpdated
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_DockingTransitionUpdated final
{
public:
	bool                                          bIsUndockingTransition;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_DockingTransitionUpdated) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_DockingTransitionUpdated");
static_assert(sizeof(VMainCharacterAnimInstance_DockingTransitionUpdated) == 0x000001, "Wrong size on VMainCharacterAnimInstance_DockingTransitionUpdated");
static_assert(offsetof(VMainCharacterAnimInstance_DockingTransitionUpdated, bIsUndockingTransition) == 0x000000, "Member 'VMainCharacterAnimInstance_DockingTransitionUpdated::bIsUndockingTransition' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.OnCombatStateComplete
// 0x0020 (0x0020 - 0x0000)
struct VMainCharacterAnimInstance_OnCombatStateComplete final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_OnCombatStateComplete) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_OnCombatStateComplete");
static_assert(sizeof(VMainCharacterAnimInstance_OnCombatStateComplete) == 0x000020, "Wrong size on VMainCharacterAnimInstance_OnCombatStateComplete");
static_assert(offsetof(VMainCharacterAnimInstance_OnCombatStateComplete, Context) == 0x000000, "Member 'VMainCharacterAnimInstance_OnCombatStateComplete::Context' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_OnCombatStateComplete, Node) == 0x000010, "Member 'VMainCharacterAnimInstance_OnCombatStateComplete::Node' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.OnCombatStateExit
// 0x0020 (0x0020 - 0x0000)
struct VMainCharacterAnimInstance_OnCombatStateExit final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_OnCombatStateExit) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_OnCombatStateExit");
static_assert(sizeof(VMainCharacterAnimInstance_OnCombatStateExit) == 0x000020, "Wrong size on VMainCharacterAnimInstance_OnCombatStateExit");
static_assert(offsetof(VMainCharacterAnimInstance_OnCombatStateExit, Context) == 0x000000, "Member 'VMainCharacterAnimInstance_OnCombatStateExit::Context' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_OnCombatStateExit, Node) == 0x000010, "Member 'VMainCharacterAnimInstance_OnCombatStateExit::Node' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.OnCombatStateFullyBlendedIn
// 0x0020 (0x0020 - 0x0000)
struct VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn");
static_assert(sizeof(VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn) == 0x000020, "Wrong size on VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn");
static_assert(offsetof(VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn, Context) == 0x000000, "Member 'VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn::Context' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn, Node) == 0x000010, "Member 'VMainCharacterAnimInstance_OnCombatStateFullyBlendedIn::Node' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.SetLocomotionLinkTable
// 0x0010 (0x0010 - 0x0000)
struct VMainCharacterAnimInstance_SetLocomotionLinkTable final
{
public:
	TArray<struct FCharacterPropertyLinkTable>    InLocomotionLinkTable;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_SetLocomotionLinkTable) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_SetLocomotionLinkTable");
static_assert(sizeof(VMainCharacterAnimInstance_SetLocomotionLinkTable) == 0x000010, "Wrong size on VMainCharacterAnimInstance_SetLocomotionLinkTable");
static_assert(offsetof(VMainCharacterAnimInstance_SetLocomotionLinkTable, InLocomotionLinkTable) == 0x000000, "Member 'VMainCharacterAnimInstance_SetLocomotionLinkTable::InLocomotionLinkTable' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.SetPropertyLinkTable
// 0x0010 (0x0010 - 0x0000)
struct VMainCharacterAnimInstance_SetPropertyLinkTable final
{
public:
	TArray<struct FCharacterPropertyLinkTable>    InPropertyLinkTable;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_SetPropertyLinkTable) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_SetPropertyLinkTable");
static_assert(sizeof(VMainCharacterAnimInstance_SetPropertyLinkTable) == 0x000010, "Wrong size on VMainCharacterAnimInstance_SetPropertyLinkTable");
static_assert(offsetof(VMainCharacterAnimInstance_SetPropertyLinkTable, InPropertyLinkTable) == 0x000000, "Member 'VMainCharacterAnimInstance_SetPropertyLinkTable::InPropertyLinkTable' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.SpecialIdleAnimationStart
// 0x0008 (0x0008 - 0x0000)
struct VMainCharacterAnimInstance_SpecialIdleAnimationStart final
{
public:
	class UAnimSequenceBase*                      AnimationAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_SpecialIdleAnimationStart) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_SpecialIdleAnimationStart");
static_assert(sizeof(VMainCharacterAnimInstance_SpecialIdleAnimationStart) == 0x000008, "Wrong size on VMainCharacterAnimInstance_SpecialIdleAnimationStart");
static_assert(offsetof(VMainCharacterAnimInstance_SpecialIdleAnimationStart, AnimationAsset) == 0x000000, "Member 'VMainCharacterAnimInstance_SpecialIdleAnimationStart::AnimationAsset' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.StateMachineActionRequest
// 0x0008 (0x0008 - 0x0000)
struct VMainCharacterAnimInstance_StateMachineActionRequest final
{
public:
	class UVPawnAnimatedAction*                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_StateMachineActionRequest) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_StateMachineActionRequest");
static_assert(sizeof(VMainCharacterAnimInstance_StateMachineActionRequest) == 0x000008, "Wrong size on VMainCharacterAnimInstance_StateMachineActionRequest");
static_assert(offsetof(VMainCharacterAnimInstance_StateMachineActionRequest, Action) == 0x000000, "Member 'VMainCharacterAnimInstance_StateMachineActionRequest::Action' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.TryToLinkLayer
// 0x0010 (0x0010 - 0x0000)
struct VMainCharacterAnimInstance_TryToLinkLayer final
{
public:
	TSubclassOf<class UAnimInstance>              AnimLayerClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_TryToLinkLayer) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_TryToLinkLayer");
static_assert(sizeof(VMainCharacterAnimInstance_TryToLinkLayer) == 0x000010, "Wrong size on VMainCharacterAnimInstance_TryToLinkLayer");
static_assert(offsetof(VMainCharacterAnimInstance_TryToLinkLayer, AnimLayerClass) == 0x000000, "Member 'VMainCharacterAnimInstance_TryToLinkLayer::AnimLayerClass' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_TryToLinkLayer, ReturnValue) == 0x000008, "Member 'VMainCharacterAnimInstance_TryToLinkLayer::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.TryToLinkLayerAndUpdateLinkTable
// 0x0028 (0x0028 - 0x0000)
struct VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable final
{
public:
	TSubclassOf<class UAnimInstance>              AnimLayerClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterPropertyLinkTable            InPropertyLinkTable;                               // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable");
static_assert(sizeof(VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable) == 0x000028, "Wrong size on VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable");
static_assert(offsetof(VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable, AnimLayerClass) == 0x000000, "Member 'VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable::AnimLayerClass' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable, InPropertyLinkTable) == 0x000008, "Member 'VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable::InPropertyLinkTable' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable, ReturnValue) == 0x000020, "Member 'VMainCharacterAnimInstance_TryToLinkLayerAndUpdateLinkTable::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.UpdateLocomotionLinkTableStateNode
// 0x0020 (0x0020 - 0x0000)
struct VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode");
static_assert(sizeof(VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode) == 0x000020, "Wrong size on VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode");
static_assert(offsetof(VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode, Context) == 0x000000, "Member 'VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode::Context' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode, Node) == 0x000010, "Member 'VMainCharacterAnimInstance_UpdateLocomotionLinkTableStateNode::Node' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.HasActionRequest
// 0x000C (0x000C - 0x0000)
struct VMainCharacterAnimInstance_HasActionRequest final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VMainCharacterAnimInstance_HasActionRequest) == 0x000004, "Wrong alignment on VMainCharacterAnimInstance_HasActionRequest");
static_assert(sizeof(VMainCharacterAnimInstance_HasActionRequest) == 0x00000C, "Wrong size on VMainCharacterAnimInstance_HasActionRequest");
static_assert(offsetof(VMainCharacterAnimInstance_HasActionRequest, ActionTag) == 0x000000, "Member 'VMainCharacterAnimInstance_HasActionRequest::ActionTag' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_HasActionRequest, ReturnValue) == 0x000008, "Member 'VMainCharacterAnimInstance_HasActionRequest::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.HasActionRequestWithIndex
// 0x0010 (0x0010 - 0x0000)
struct VMainCharacterAnimInstance_HasActionRequestWithIndex final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VMainCharacterAnimInstance_HasActionRequestWithIndex) == 0x000004, "Wrong alignment on VMainCharacterAnimInstance_HasActionRequestWithIndex");
static_assert(sizeof(VMainCharacterAnimInstance_HasActionRequestWithIndex) == 0x000010, "Wrong size on VMainCharacterAnimInstance_HasActionRequestWithIndex");
static_assert(offsetof(VMainCharacterAnimInstance_HasActionRequestWithIndex, ActionTag) == 0x000000, "Member 'VMainCharacterAnimInstance_HasActionRequestWithIndex::ActionTag' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_HasActionRequestWithIndex, AnimIndex) == 0x000008, "Member 'VMainCharacterAnimInstance_HasActionRequestWithIndex::AnimIndex' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_HasActionRequestWithIndex, ReturnValue) == 0x00000C, "Member 'VMainCharacterAnimInstance_HasActionRequestWithIndex::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.HasAnyActionRequest
// 0x0028 (0x0028 - 0x0000)
struct VMainCharacterAnimInstance_HasAnyActionRequest final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VMainCharacterAnimInstance_HasAnyActionRequest) == 0x000008, "Wrong alignment on VMainCharacterAnimInstance_HasAnyActionRequest");
static_assert(sizeof(VMainCharacterAnimInstance_HasAnyActionRequest) == 0x000028, "Wrong size on VMainCharacterAnimInstance_HasAnyActionRequest");
static_assert(offsetof(VMainCharacterAnimInstance_HasAnyActionRequest, TagContainer) == 0x000000, "Member 'VMainCharacterAnimInstance_HasAnyActionRequest::TagContainer' has a wrong offset!");
static_assert(offsetof(VMainCharacterAnimInstance_HasAnyActionRequest, ReturnValue) == 0x000020, "Member 'VMainCharacterAnimInstance_HasAnyActionRequest::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsAttacking) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsAttacking");
static_assert(sizeof(VMainCharacterAnimInstance_IsAttacking) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsAttacking");
static_assert(offsetof(VMainCharacterAnimInstance_IsAttacking, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsAttacking::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsBlocking
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsBlocking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsBlocking) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsBlocking");
static_assert(sizeof(VMainCharacterAnimInstance_IsBlocking) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsBlocking");
static_assert(offsetof(VMainCharacterAnimInstance_IsBlocking, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsBlocking::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsDodging
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsDodging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsDodging) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsDodging");
static_assert(sizeof(VMainCharacterAnimInstance_IsDodging) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsDodging");
static_assert(offsetof(VMainCharacterAnimInstance_IsDodging, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsDodging::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsGrabbing
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsGrabbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsGrabbing) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsGrabbing");
static_assert(sizeof(VMainCharacterAnimInstance_IsGrabbing) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsGrabbing");
static_assert(offsetof(VMainCharacterAnimInstance_IsGrabbing, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsGrabbing::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsInAir) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsInAir");
static_assert(sizeof(VMainCharacterAnimInstance_IsInAir) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsInAir");
static_assert(offsetof(VMainCharacterAnimInstance_IsInAir, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsInAir::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsMoving) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsMoving");
static_assert(sizeof(VMainCharacterAnimInstance_IsMoving) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsMoving");
static_assert(offsetof(VMainCharacterAnimInstance_IsMoving, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsMoving::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsOnHorse
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsOnHorse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsOnHorse) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsOnHorse");
static_assert(sizeof(VMainCharacterAnimInstance_IsOnHorse) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsOnHorse");
static_assert(offsetof(VMainCharacterAnimInstance_IsOnHorse, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsOnHorse::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsRecoiling
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsRecoiling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsRecoiling) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsRecoiling");
static_assert(sizeof(VMainCharacterAnimInstance_IsRecoiling) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsRecoiling");
static_assert(offsetof(VMainCharacterAnimInstance_IsRecoiling, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsRecoiling::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsResurrecting
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsResurrecting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsResurrecting) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsResurrecting");
static_assert(sizeof(VMainCharacterAnimInstance_IsResurrecting) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsResurrecting");
static_assert(offsetof(VMainCharacterAnimInstance_IsResurrecting, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsResurrecting::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsRunning) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsRunning");
static_assert(sizeof(VMainCharacterAnimInstance_IsRunning) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsRunning");
static_assert(offsetof(VMainCharacterAnimInstance_IsRunning, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsRunning::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsSneaking");
static_assert(sizeof(VMainCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsSneaking");
static_assert(offsetof(VMainCharacterAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsStaggered
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsStaggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsStaggered) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsStaggered");
static_assert(sizeof(VMainCharacterAnimInstance_IsStaggered) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsStaggered");
static_assert(offsetof(VMainCharacterAnimInstance_IsStaggered, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsStaggered::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsStanding
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsStanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsStanding) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsStanding");
static_assert(sizeof(VMainCharacterAnimInstance_IsStanding) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsStanding");
static_assert(offsetof(VMainCharacterAnimInstance_IsStanding, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsStanding::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsSwimming
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsSwimming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsSwimming) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsSwimming");
static_assert(sizeof(VMainCharacterAnimInstance_IsSwimming) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsSwimming");
static_assert(offsetof(VMainCharacterAnimInstance_IsSwimming, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsSwimming::ReturnValue' has a wrong offset!");

// Function Altar.VMainCharacterAnimInstance.IsWeaponDrawn
// 0x0001 (0x0001 - 0x0000)
struct VMainCharacterAnimInstance_IsWeaponDrawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainCharacterAnimInstance_IsWeaponDrawn) == 0x000001, "Wrong alignment on VMainCharacterAnimInstance_IsWeaponDrawn");
static_assert(sizeof(VMainCharacterAnimInstance_IsWeaponDrawn) == 0x000001, "Wrong size on VMainCharacterAnimInstance_IsWeaponDrawn");
static_assert(offsetof(VMainCharacterAnimInstance_IsWeaponDrawn, ReturnValue) == 0x000000, "Member 'VMainCharacterAnimInstance_IsWeaponDrawn::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.IsBackgroundLoaded
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_IsBackgroundLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_IsBackgroundLoaded) == 0x000001, "Wrong alignment on VMainMenuViewModel_IsBackgroundLoaded");
static_assert(sizeof(VMainMenuViewModel_IsBackgroundLoaded) == 0x000001, "Wrong size on VMainMenuViewModel_IsBackgroundLoaded");
static_assert(offsetof(VMainMenuViewModel_IsBackgroundLoaded, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_IsBackgroundLoaded::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.LoadInstanceOfLevels
// 0x0008 (0x0008 - 0x0000)
struct VMainMenuViewModel_LoadInstanceOfLevels final
{
public:
	class UWorld*                                 CurrentWorld;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_LoadInstanceOfLevels) == 0x000008, "Wrong alignment on VMainMenuViewModel_LoadInstanceOfLevels");
static_assert(sizeof(VMainMenuViewModel_LoadInstanceOfLevels) == 0x000008, "Wrong size on VMainMenuViewModel_LoadInstanceOfLevels");
static_assert(offsetof(VMainMenuViewModel_LoadInstanceOfLevels, CurrentWorld) == 0x000000, "Member 'VMainMenuViewModel_LoadInstanceOfLevels::CurrentWorld' has a wrong offset!");

// Function Altar.VMainMenuViewModel.SetButtonsVisibility
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_SetButtonsVisibility final
{
public:
	EFLegacyMainMenuButtonVisibility              NewButtonsVisibility;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_SetButtonsVisibility) == 0x000001, "Wrong alignment on VMainMenuViewModel_SetButtonsVisibility");
static_assert(sizeof(VMainMenuViewModel_SetButtonsVisibility) == 0x000001, "Wrong size on VMainMenuViewModel_SetButtonsVisibility");
static_assert(offsetof(VMainMenuViewModel_SetButtonsVisibility, NewButtonsVisibility) == 0x000000, "Member 'VMainMenuViewModel_SetButtonsVisibility::NewButtonsVisibility' has a wrong offset!");

// Function Altar.VMainMenuViewModel.SetContinueVisibility
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_SetContinueVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_SetContinueVisibility) == 0x000001, "Wrong alignment on VMainMenuViewModel_SetContinueVisibility");
static_assert(sizeof(VMainMenuViewModel_SetContinueVisibility) == 0x000001, "Wrong size on VMainMenuViewModel_SetContinueVisibility");
static_assert(offsetof(VMainMenuViewModel_SetContinueVisibility, bVisibility) == 0x000000, "Member 'VMainMenuViewModel_SetContinueVisibility::bVisibility' has a wrong offset!");

// Function Altar.VMainMenuViewModel.SetIsMoviePlaying
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_SetIsMoviePlaying final
{
public:
	bool                                          bNewIsMoviePlaying;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_SetIsMoviePlaying) == 0x000001, "Wrong alignment on VMainMenuViewModel_SetIsMoviePlaying");
static_assert(sizeof(VMainMenuViewModel_SetIsMoviePlaying) == 0x000001, "Wrong size on VMainMenuViewModel_SetIsMoviePlaying");
static_assert(offsetof(VMainMenuViewModel_SetIsMoviePlaying, bNewIsMoviePlaying) == 0x000000, "Member 'VMainMenuViewModel_SetIsMoviePlaying::bNewIsMoviePlaying' has a wrong offset!");

// Function Altar.VMainMenuViewModel.SetVersionText
// 0x0018 (0x0018 - 0x0000)
struct VMainMenuViewModel_SetVersionText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_SetVersionText) == 0x000008, "Wrong alignment on VMainMenuViewModel_SetVersionText");
static_assert(sizeof(VMainMenuViewModel_SetVersionText) == 0x000018, "Wrong size on VMainMenuViewModel_SetVersionText");
static_assert(offsetof(VMainMenuViewModel_SetVersionText, NewText) == 0x000000, "Member 'VMainMenuViewModel_SetVersionText::NewText' has a wrong offset!");

// Function Altar.VMainMenuViewModel.UnloadInstanceLevels
// 0x0008 (0x0008 - 0x0000)
struct VMainMenuViewModel_UnloadInstanceLevels final
{
public:
	class UWorld*                                 CurrentWorld;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_UnloadInstanceLevels) == 0x000008, "Wrong alignment on VMainMenuViewModel_UnloadInstanceLevels");
static_assert(sizeof(VMainMenuViewModel_UnloadInstanceLevels) == 0x000008, "Wrong size on VMainMenuViewModel_UnloadInstanceLevels");
static_assert(offsetof(VMainMenuViewModel_UnloadInstanceLevels, CurrentWorld) == 0x000000, "Member 'VMainMenuViewModel_UnloadInstanceLevels::CurrentWorld' has a wrong offset!");

// Function Altar.VMainMenuViewModel.GetBuildInfo
// 0x0018 (0x0018 - 0x0000)
struct VMainMenuViewModel_GetBuildInfo final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_GetBuildInfo) == 0x000008, "Wrong alignment on VMainMenuViewModel_GetBuildInfo");
static_assert(sizeof(VMainMenuViewModel_GetBuildInfo) == 0x000018, "Wrong size on VMainMenuViewModel_GetBuildInfo");
static_assert(offsetof(VMainMenuViewModel_GetBuildInfo, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_GetBuildInfo::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.GetButtonsVisibility
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_GetButtonsVisibility final
{
public:
	EFLegacyMainMenuButtonVisibility              ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_GetButtonsVisibility) == 0x000001, "Wrong alignment on VMainMenuViewModel_GetButtonsVisibility");
static_assert(sizeof(VMainMenuViewModel_GetButtonsVisibility) == 0x000001, "Wrong size on VMainMenuViewModel_GetButtonsVisibility");
static_assert(offsetof(VMainMenuViewModel_GetButtonsVisibility, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_GetButtonsVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.GetContinueVisibility
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_GetContinueVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_GetContinueVisibility) == 0x000001, "Wrong alignment on VMainMenuViewModel_GetContinueVisibility");
static_assert(sizeof(VMainMenuViewModel_GetContinueVisibility) == 0x000001, "Wrong size on VMainMenuViewModel_GetContinueVisibility");
static_assert(offsetof(VMainMenuViewModel_GetContinueVisibility, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_GetContinueVisibility::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.GetDoesNeedOnboarding
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_GetDoesNeedOnboarding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_GetDoesNeedOnboarding) == 0x000001, "Wrong alignment on VMainMenuViewModel_GetDoesNeedOnboarding");
static_assert(sizeof(VMainMenuViewModel_GetDoesNeedOnboarding) == 0x000001, "Wrong size on VMainMenuViewModel_GetDoesNeedOnboarding");
static_assert(offsetof(VMainMenuViewModel_GetDoesNeedOnboarding, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_GetDoesNeedOnboarding::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.GetIsMoviePlaying
// 0x0001 (0x0001 - 0x0000)
struct VMainMenuViewModel_GetIsMoviePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_GetIsMoviePlaying) == 0x000001, "Wrong alignment on VMainMenuViewModel_GetIsMoviePlaying");
static_assert(sizeof(VMainMenuViewModel_GetIsMoviePlaying) == 0x000001, "Wrong size on VMainMenuViewModel_GetIsMoviePlaying");
static_assert(offsetof(VMainMenuViewModel_GetIsMoviePlaying, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_GetIsMoviePlaying::ReturnValue' has a wrong offset!");

// Function Altar.VMainMenuViewModel.GetVersionText
// 0x0018 (0x0018 - 0x0000)
struct VMainMenuViewModel_GetVersionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMainMenuViewModel_GetVersionText) == 0x000008, "Wrong alignment on VMainMenuViewModel_GetVersionText");
static_assert(sizeof(VMainMenuViewModel_GetVersionText) == 0x000018, "Wrong size on VMainMenuViewModel_GetVersionText");
static_assert(offsetof(VMainMenuViewModel_GetVersionText, ReturnValue) == 0x000000, "Member 'VMainMenuViewModel_GetVersionText::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItem
// 0x0038 (0x0038 - 0x0000)
struct VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem final
{
public:
	class FText                                   NewDate;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NewBody;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UVLegacyMapMenuQuestCarouselItem*       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem) == 0x000008, "Wrong alignment on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem");
static_assert(sizeof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem) == 0x000038, "Wrong size on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem, NewDate) == 0x000000, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem::NewDate' has a wrong offset!");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem, NewBody) == 0x000018, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem::NewBody' has a wrong offset!");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem, ReturnValue) == 0x000030, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItem::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItemFromQuest
// 0x00A0 (0x00A0 - 0x0000)
struct VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest final
{
public:
	struct FLegacyMapMenuQuestProperties          Quest;                                             // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UVLegacyMapMenuQuestCarouselItem*       ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest) == 0x000008, "Wrong alignment on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest");
static_assert(sizeof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest) == 0x0000A0, "Wrong size on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest, Quest) == 0x000000, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest::Quest' has a wrong offset!");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest, ReturnValue) == 0x000098, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemFromQuest::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItemLeftDecorator
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator final
{
public:
	class UVLegacyMapMenuQuestCarouselItem*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator) == 0x000008, "Wrong alignment on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator");
static_assert(sizeof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator) == 0x000008, "Wrong size on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator, ReturnValue) == 0x000000, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemLeftDecorator::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyMapMenuQuestCarouselItem.CreateQuestCarouselItemRightDecorator
// 0x0008 (0x0008 - 0x0000)
struct VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator final
{
public:
	class UVLegacyMapMenuQuestCarouselItem*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator) == 0x000008, "Wrong alignment on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator");
static_assert(sizeof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator) == 0x000008, "Wrong size on VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator");
static_assert(offsetof(VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator, ReturnValue) == 0x000000, "Member 'VLegacyMapMenuQuestCarouselItem_CreateQuestCarouselItemRightDecorator::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.RegisterSendHoverOnItemHandler
// 0x0008 (0x0008 - 0x0000)
struct VStatsMenuViewModel_RegisterSendHoverOnItemHandler final
{
public:
	ELegacyStatsMenuPage                          Page;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_RegisterSendHoverOnItemHandler) == 0x000004, "Wrong alignment on VStatsMenuViewModel_RegisterSendHoverOnItemHandler");
static_assert(sizeof(VStatsMenuViewModel_RegisterSendHoverOnItemHandler) == 0x000008, "Wrong size on VStatsMenuViewModel_RegisterSendHoverOnItemHandler");
static_assert(offsetof(VStatsMenuViewModel_RegisterSendHoverOnItemHandler, Page) == 0x000000, "Member 'VStatsMenuViewModel_RegisterSendHoverOnItemHandler::Page' has a wrong offset!");
static_assert(offsetof(VStatsMenuViewModel_RegisterSendHoverOnItemHandler, ItemIndex) == 0x000004, "Member 'VStatsMenuViewModel_RegisterSendHoverOnItemHandler::ItemIndex' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetAreDetailsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct VStatsMenuViewModel_SetAreDetailsDisplayed final
{
public:
	bool                                          NewAreDetailsDisplayed;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetAreDetailsDisplayed) == 0x000001, "Wrong alignment on VStatsMenuViewModel_SetAreDetailsDisplayed");
static_assert(sizeof(VStatsMenuViewModel_SetAreDetailsDisplayed) == 0x000001, "Wrong size on VStatsMenuViewModel_SetAreDetailsDisplayed");
static_assert(offsetof(VStatsMenuViewModel_SetAreDetailsDisplayed, NewAreDetailsDisplayed) == 0x000000, "Member 'VStatsMenuViewModel_SetAreDetailsDisplayed::NewAreDetailsDisplayed' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VStatsMenuViewModel_SetCurrentPage final
{
public:
	ELegacyStatsMenuPage                          NewCurrentPage;                                    // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetCurrentPage) == 0x000001, "Wrong alignment on VStatsMenuViewModel_SetCurrentPage");
static_assert(sizeof(VStatsMenuViewModel_SetCurrentPage) == 0x000001, "Wrong size on VStatsMenuViewModel_SetCurrentPage");
static_assert(offsetof(VStatsMenuViewModel_SetCurrentPage, NewCurrentPage) == 0x000000, "Member 'VStatsMenuViewModel_SetCurrentPage::NewCurrentPage' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetFactions
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_SetFactions final
{
public:
	TArray<struct FLegacyStatsMenuFactionProperties> NewFactions;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetFactions) == 0x000008, "Wrong alignment on VStatsMenuViewModel_SetFactions");
static_assert(sizeof(VStatsMenuViewModel_SetFactions) == 0x000010, "Wrong size on VStatsMenuViewModel_SetFactions");
static_assert(offsetof(VStatsMenuViewModel_SetFactions, NewFactions) == 0x000000, "Member 'VStatsMenuViewModel_SetFactions::NewFactions' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetFatigue
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_SetFatigue final
{
public:
	struct FLegacyStatsMenuPrimaryAttributeValues NewFatigue;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetFatigue) == 0x000004, "Wrong alignment on VStatsMenuViewModel_SetFatigue");
static_assert(sizeof(VStatsMenuViewModel_SetFatigue) == 0x00000C, "Wrong size on VStatsMenuViewModel_SetFatigue");
static_assert(offsetof(VStatsMenuViewModel_SetFatigue, NewFatigue) == 0x000000, "Member 'VStatsMenuViewModel_SetFatigue::NewFatigue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetHealth
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_SetHealth final
{
public:
	struct FLegacyStatsMenuPrimaryAttributeValues NewHealth;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetHealth) == 0x000004, "Wrong alignment on VStatsMenuViewModel_SetHealth");
static_assert(sizeof(VStatsMenuViewModel_SetHealth) == 0x00000C, "Wrong size on VStatsMenuViewModel_SetHealth");
static_assert(offsetof(VStatsMenuViewModel_SetHealth, NewHealth) == 0x000000, "Member 'VStatsMenuViewModel_SetHealth::NewHealth' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetLevelProgression
// 0x0008 (0x0008 - 0x0000)
struct VStatsMenuViewModel_SetLevelProgression final
{
public:
	struct FLegacyStatsMenuLevelProgression       NewLevelProgression;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetLevelProgression) == 0x000004, "Wrong alignment on VStatsMenuViewModel_SetLevelProgression");
static_assert(sizeof(VStatsMenuViewModel_SetLevelProgression) == 0x000008, "Wrong size on VStatsMenuViewModel_SetLevelProgression");
static_assert(offsetof(VStatsMenuViewModel_SetLevelProgression, NewLevelProgression) == 0x000000, "Member 'VStatsMenuViewModel_SetLevelProgression::NewLevelProgression' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetMagicka
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_SetMagicka final
{
public:
	struct FLegacyStatsMenuPrimaryAttributeValues NewMagicka;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetMagicka) == 0x000004, "Wrong alignment on VStatsMenuViewModel_SetMagicka");
static_assert(sizeof(VStatsMenuViewModel_SetMagicka) == 0x00000C, "Wrong size on VStatsMenuViewModel_SetMagicka");
static_assert(offsetof(VStatsMenuViewModel_SetMagicka, NewMagicka) == 0x000000, "Member 'VStatsMenuViewModel_SetMagicka::NewMagicka' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetMiscItems
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_SetMiscItems final
{
public:
	TArray<struct FLegacyStatsMenuMiscItemProperties> NewMiscItems;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetMiscItems) == 0x000008, "Wrong alignment on VStatsMenuViewModel_SetMiscItems");
static_assert(sizeof(VStatsMenuViewModel_SetMiscItems) == 0x000010, "Wrong size on VStatsMenuViewModel_SetMiscItems");
static_assert(offsetof(VStatsMenuViewModel_SetMiscItems, NewMiscItems) == 0x000000, "Member 'VStatsMenuViewModel_SetMiscItems::NewMiscItems' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetPlayerInfo
// 0x0070 (0x0070 - 0x0000)
struct VStatsMenuViewModel_SetPlayerInfo final
{
public:
	struct FLegacyStatsMenuPlayerInfo             NewPlayerInfo;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetPlayerInfo) == 0x000008, "Wrong alignment on VStatsMenuViewModel_SetPlayerInfo");
static_assert(sizeof(VStatsMenuViewModel_SetPlayerInfo) == 0x000070, "Wrong size on VStatsMenuViewModel_SetPlayerInfo");
static_assert(offsetof(VStatsMenuViewModel_SetPlayerInfo, NewPlayerInfo) == 0x000000, "Member 'VStatsMenuViewModel_SetPlayerInfo::NewPlayerInfo' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetPopupContent
// 0x0028 (0x0028 - 0x0000)
struct VStatsMenuViewModel_SetPopupContent final
{
public:
	struct FLegacyStatsMenuPopupContent           NewPopUpContent;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetPopupContent) == 0x000008, "Wrong alignment on VStatsMenuViewModel_SetPopupContent");
static_assert(sizeof(VStatsMenuViewModel_SetPopupContent) == 0x000028, "Wrong size on VStatsMenuViewModel_SetPopupContent");
static_assert(offsetof(VStatsMenuViewModel_SetPopupContent, NewPopUpContent) == 0x000000, "Member 'VStatsMenuViewModel_SetPopupContent::NewPopUpContent' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetSecondaryAttribute
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_SetSecondaryAttribute final
{
public:
	ELegacyStatsMenuPage2Items                    Item;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLegacyStatsMenuSecondaryAttribute     NewValue;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetSecondaryAttribute) == 0x000004, "Wrong alignment on VStatsMenuViewModel_SetSecondaryAttribute");
static_assert(sizeof(VStatsMenuViewModel_SetSecondaryAttribute) == 0x00000C, "Wrong size on VStatsMenuViewModel_SetSecondaryAttribute");
static_assert(offsetof(VStatsMenuViewModel_SetSecondaryAttribute, Item) == 0x000000, "Member 'VStatsMenuViewModel_SetSecondaryAttribute::Item' has a wrong offset!");
static_assert(offsetof(VStatsMenuViewModel_SetSecondaryAttribute, NewValue) == 0x000004, "Member 'VStatsMenuViewModel_SetSecondaryAttribute::NewValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetSecondaryAttributes
// 0x0050 (0x0050 - 0x0000)
struct VStatsMenuViewModel_SetSecondaryAttributes final
{
public:
	TMap<ELegacyStatsMenuPage2Items, struct FLegacyStatsMenuSecondaryAttribute> NewAttributes;       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetSecondaryAttributes) == 0x000008, "Wrong alignment on VStatsMenuViewModel_SetSecondaryAttributes");
static_assert(sizeof(VStatsMenuViewModel_SetSecondaryAttributes) == 0x000050, "Wrong size on VStatsMenuViewModel_SetSecondaryAttributes");
static_assert(offsetof(VStatsMenuViewModel_SetSecondaryAttributes, NewAttributes) == 0x000000, "Member 'VStatsMenuViewModel_SetSecondaryAttributes::NewAttributes' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetSkillItemProperties
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_SetSkillItemProperties final
{
public:
	TArray<struct FLegacyStatsMenuSkillItemProperties> NewSkillItemProperties;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetSkillItemProperties) == 0x000008, "Wrong alignment on VStatsMenuViewModel_SetSkillItemProperties");
static_assert(sizeof(VStatsMenuViewModel_SetSkillItemProperties) == 0x000010, "Wrong size on VStatsMenuViewModel_SetSkillItemProperties");
static_assert(offsetof(VStatsMenuViewModel_SetSkillItemProperties, NewSkillItemProperties) == 0x000000, "Member 'VStatsMenuViewModel_SetSkillItemProperties::NewSkillItemProperties' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.SetSkillItemUpdatableProperties
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_SetSkillItemUpdatableProperties final
{
public:
	struct FLegacyStatsMenuSkillItemUpdatableProperties NewSkillItemUpdatableProperties;             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_SetSkillItemUpdatableProperties) == 0x000004, "Wrong alignment on VStatsMenuViewModel_SetSkillItemUpdatableProperties");
static_assert(sizeof(VStatsMenuViewModel_SetSkillItemUpdatableProperties) == 0x000010, "Wrong size on VStatsMenuViewModel_SetSkillItemUpdatableProperties");
static_assert(offsetof(VStatsMenuViewModel_SetSkillItemUpdatableProperties, NewSkillItemUpdatableProperties) == 0x000000, "Member 'VStatsMenuViewModel_SetSkillItemUpdatableProperties::NewSkillItemUpdatableProperties' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.UpdateOneSkillItemProperties
// 0x0014 (0x0014 - 0x0000)
struct VStatsMenuViewModel_UpdateOneSkillItemProperties final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyStatsMenuSkillItemUpdatableProperties NewSkillItemProperties;                      // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_UpdateOneSkillItemProperties) == 0x000004, "Wrong alignment on VStatsMenuViewModel_UpdateOneSkillItemProperties");
static_assert(sizeof(VStatsMenuViewModel_UpdateOneSkillItemProperties) == 0x000014, "Wrong size on VStatsMenuViewModel_UpdateOneSkillItemProperties");
static_assert(offsetof(VStatsMenuViewModel_UpdateOneSkillItemProperties, Index_0) == 0x000000, "Member 'VStatsMenuViewModel_UpdateOneSkillItemProperties::Index_0' has a wrong offset!");
static_assert(offsetof(VStatsMenuViewModel_UpdateOneSkillItemProperties, NewSkillItemProperties) == 0x000004, "Member 'VStatsMenuViewModel_UpdateOneSkillItemProperties::NewSkillItemProperties' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetAreDetailsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct VStatsMenuViewModel_GetAreDetailsDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetAreDetailsDisplayed) == 0x000001, "Wrong alignment on VStatsMenuViewModel_GetAreDetailsDisplayed");
static_assert(sizeof(VStatsMenuViewModel_GetAreDetailsDisplayed) == 0x000001, "Wrong size on VStatsMenuViewModel_GetAreDetailsDisplayed");
static_assert(offsetof(VStatsMenuViewModel_GetAreDetailsDisplayed, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetAreDetailsDisplayed::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VStatsMenuViewModel_GetCurrentPage final
{
public:
	ELegacyStatsMenuPage                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetCurrentPage) == 0x000001, "Wrong alignment on VStatsMenuViewModel_GetCurrentPage");
static_assert(sizeof(VStatsMenuViewModel_GetCurrentPage) == 0x000001, "Wrong size on VStatsMenuViewModel_GetCurrentPage");
static_assert(offsetof(VStatsMenuViewModel_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetFactions
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_GetFactions final
{
public:
	TArray<struct FLegacyStatsMenuFactionProperties> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetFactions) == 0x000008, "Wrong alignment on VStatsMenuViewModel_GetFactions");
static_assert(sizeof(VStatsMenuViewModel_GetFactions) == 0x000010, "Wrong size on VStatsMenuViewModel_GetFactions");
static_assert(offsetof(VStatsMenuViewModel_GetFactions, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetFactions::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetFatigue
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_GetFatigue final
{
public:
	struct FLegacyStatsMenuPrimaryAttributeValues ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetFatigue) == 0x000004, "Wrong alignment on VStatsMenuViewModel_GetFatigue");
static_assert(sizeof(VStatsMenuViewModel_GetFatigue) == 0x00000C, "Wrong size on VStatsMenuViewModel_GetFatigue");
static_assert(offsetof(VStatsMenuViewModel_GetFatigue, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetFatigue::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetHealth
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_GetHealth final
{
public:
	struct FLegacyStatsMenuPrimaryAttributeValues ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetHealth) == 0x000004, "Wrong alignment on VStatsMenuViewModel_GetHealth");
static_assert(sizeof(VStatsMenuViewModel_GetHealth) == 0x00000C, "Wrong size on VStatsMenuViewModel_GetHealth");
static_assert(offsetof(VStatsMenuViewModel_GetHealth, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetHealth::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetLevelProgression
// 0x0008 (0x0008 - 0x0000)
struct VStatsMenuViewModel_GetLevelProgression final
{
public:
	struct FLegacyStatsMenuLevelProgression       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetLevelProgression) == 0x000004, "Wrong alignment on VStatsMenuViewModel_GetLevelProgression");
static_assert(sizeof(VStatsMenuViewModel_GetLevelProgression) == 0x000008, "Wrong size on VStatsMenuViewModel_GetLevelProgression");
static_assert(offsetof(VStatsMenuViewModel_GetLevelProgression, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetLevelProgression::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetMagicka
// 0x000C (0x000C - 0x0000)
struct VStatsMenuViewModel_GetMagicka final
{
public:
	struct FLegacyStatsMenuPrimaryAttributeValues ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetMagicka) == 0x000004, "Wrong alignment on VStatsMenuViewModel_GetMagicka");
static_assert(sizeof(VStatsMenuViewModel_GetMagicka) == 0x00000C, "Wrong size on VStatsMenuViewModel_GetMagicka");
static_assert(offsetof(VStatsMenuViewModel_GetMagicka, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetMagicka::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetMiscItems
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_GetMiscItems final
{
public:
	TArray<struct FLegacyStatsMenuMiscItemProperties> ReturnValue;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetMiscItems) == 0x000008, "Wrong alignment on VStatsMenuViewModel_GetMiscItems");
static_assert(sizeof(VStatsMenuViewModel_GetMiscItems) == 0x000010, "Wrong size on VStatsMenuViewModel_GetMiscItems");
static_assert(offsetof(VStatsMenuViewModel_GetMiscItems, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetMiscItems::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetPlayerInfo
// 0x0070 (0x0070 - 0x0000)
struct VStatsMenuViewModel_GetPlayerInfo final
{
public:
	struct FLegacyStatsMenuPlayerInfo             ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetPlayerInfo) == 0x000008, "Wrong alignment on VStatsMenuViewModel_GetPlayerInfo");
static_assert(sizeof(VStatsMenuViewModel_GetPlayerInfo) == 0x000070, "Wrong size on VStatsMenuViewModel_GetPlayerInfo");
static_assert(offsetof(VStatsMenuViewModel_GetPlayerInfo, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetPopUpContent
// 0x0028 (0x0028 - 0x0000)
struct VStatsMenuViewModel_GetPopUpContent final
{
public:
	struct FLegacyStatsMenuPopupContent           ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetPopUpContent) == 0x000008, "Wrong alignment on VStatsMenuViewModel_GetPopUpContent");
static_assert(sizeof(VStatsMenuViewModel_GetPopUpContent) == 0x000028, "Wrong size on VStatsMenuViewModel_GetPopUpContent");
static_assert(offsetof(VStatsMenuViewModel_GetPopUpContent, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetPopUpContent::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetSecondaryAttributes
// 0x0050 (0x0050 - 0x0000)
struct VStatsMenuViewModel_GetSecondaryAttributes final
{
public:
	TMap<ELegacyStatsMenuPage2Items, struct FLegacyStatsMenuSecondaryAttribute> ReturnValue;         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetSecondaryAttributes) == 0x000008, "Wrong alignment on VStatsMenuViewModel_GetSecondaryAttributes");
static_assert(sizeof(VStatsMenuViewModel_GetSecondaryAttributes) == 0x000050, "Wrong size on VStatsMenuViewModel_GetSecondaryAttributes");
static_assert(offsetof(VStatsMenuViewModel_GetSecondaryAttributes, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetSecondaryAttributes::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetSkillItemProperties
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_GetSkillItemProperties final
{
public:
	TArray<struct FLegacyStatsMenuSkillItemProperties> ReturnValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetSkillItemProperties) == 0x000008, "Wrong alignment on VStatsMenuViewModel_GetSkillItemProperties");
static_assert(sizeof(VStatsMenuViewModel_GetSkillItemProperties) == 0x000010, "Wrong size on VStatsMenuViewModel_GetSkillItemProperties");
static_assert(offsetof(VStatsMenuViewModel_GetSkillItemProperties, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetSkillItemProperties::ReturnValue' has a wrong offset!");

// Function Altar.VStatsMenuViewModel.GetSkillItemUpdatableProperties
// 0x0010 (0x0010 - 0x0000)
struct VStatsMenuViewModel_GetSkillItemUpdatableProperties final
{
public:
	struct FLegacyStatsMenuSkillItemUpdatableProperties ReturnValue;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VStatsMenuViewModel_GetSkillItemUpdatableProperties) == 0x000004, "Wrong alignment on VStatsMenuViewModel_GetSkillItemUpdatableProperties");
static_assert(sizeof(VStatsMenuViewModel_GetSkillItemUpdatableProperties) == 0x000010, "Wrong size on VStatsMenuViewModel_GetSkillItemUpdatableProperties");
static_assert(offsetof(VStatsMenuViewModel_GetSkillItemUpdatableProperties, ReturnValue) == 0x000000, "Member 'VStatsMenuViewModel_GetSkillItemUpdatableProperties::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.DelayFastTravelRequestUntilFadeEnd
// 0x0004 (0x0004 - 0x0000)
struct VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd final
{
public:
	EVFadeTransitionType                          InFadeTransitionType;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd) == 0x000004, "Wrong alignment on VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd");
static_assert(sizeof(VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd) == 0x000004, "Wrong size on VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd");
static_assert(offsetof(VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd, InFadeTransitionType) == 0x000000, "Member 'VMapMenuViewModel_DelayFastTravelRequestUntilFadeEnd::InFadeTransitionType' has a wrong offset!");

// Function Altar.VMapMenuViewModel.RegisterSendClickedCurrentQuestHistory
// 0x0004 (0x0004 - 0x0000)
struct VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory) == 0x000004, "Wrong alignment on VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory");
static_assert(sizeof(VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory) == 0x000004, "Wrong size on VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory");
static_assert(offsetof(VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory, Value) == 0x000000, "Member 'VMapMenuViewModel_RegisterSendClickedCurrentQuestHistory::Value' has a wrong offset!");

// Function Altar.VMapMenuViewModel.RegisterSendClickedDetailedQuest
// 0x0004 (0x0004 - 0x0000)
struct VMapMenuViewModel_RegisterSendClickedDetailedQuest final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_RegisterSendClickedDetailedQuest) == 0x000004, "Wrong alignment on VMapMenuViewModel_RegisterSendClickedDetailedQuest");
static_assert(sizeof(VMapMenuViewModel_RegisterSendClickedDetailedQuest) == 0x000004, "Wrong size on VMapMenuViewModel_RegisterSendClickedDetailedQuest");
static_assert(offsetof(VMapMenuViewModel_RegisterSendClickedDetailedQuest, Value) == 0x000000, "Member 'VMapMenuViewModel_RegisterSendClickedDetailedQuest::Value' has a wrong offset!");

// Function Altar.VMapMenuViewModel.RegisterSendClickedQuest
// 0x0004 (0x0004 - 0x0000)
struct VMapMenuViewModel_RegisterSendClickedQuest final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_RegisterSendClickedQuest) == 0x000004, "Wrong alignment on VMapMenuViewModel_RegisterSendClickedQuest");
static_assert(sizeof(VMapMenuViewModel_RegisterSendClickedQuest) == 0x000004, "Wrong size on VMapMenuViewModel_RegisterSendClickedQuest");
static_assert(offsetof(VMapMenuViewModel_RegisterSendClickedQuest, Value) == 0x000000, "Member 'VMapMenuViewModel_RegisterSendClickedQuest::Value' has a wrong offset!");

// Function Altar.VMapMenuViewModel.RegisterSendClickedQuestCompleted
// 0x0004 (0x0004 - 0x0000)
struct VMapMenuViewModel_RegisterSendClickedQuestCompleted final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_RegisterSendClickedQuestCompleted) == 0x000004, "Wrong alignment on VMapMenuViewModel_RegisterSendClickedQuestCompleted");
static_assert(sizeof(VMapMenuViewModel_RegisterSendClickedQuestCompleted) == 0x000004, "Wrong size on VMapMenuViewModel_RegisterSendClickedQuestCompleted");
static_assert(offsetof(VMapMenuViewModel_RegisterSendClickedQuestCompleted, Value) == 0x000000, "Member 'VMapMenuViewModel_RegisterSendClickedQuestCompleted::Value' has a wrong offset!");

// Function Altar.VMapMenuViewModel.RegisterSendCurrentPageUpdatedHandler
// 0x0001 (0x0001 - 0x0000)
struct VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler final
{
public:
	ELegacyMapMenuPage                            NewPage;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler) == 0x000001, "Wrong alignment on VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler");
static_assert(sizeof(VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler) == 0x000001, "Wrong size on VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler");
static_assert(offsetof(VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler, NewPage) == 0x000000, "Member 'VMapMenuViewModel_RegisterSendCurrentPageUpdatedHandler::NewPage' has a wrong offset!");

// Function Altar.VMapMenuViewModel.SetActiveQuestData
// 0x0098 (0x0098 - 0x0000)
struct VMapMenuViewModel_SetActiveQuestData final
{
public:
	struct FLegacyMapMenuQuestProperties          NewActiveQuestData;                                // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_SetActiveQuestData) == 0x000008, "Wrong alignment on VMapMenuViewModel_SetActiveQuestData");
static_assert(sizeof(VMapMenuViewModel_SetActiveQuestData) == 0x000098, "Wrong size on VMapMenuViewModel_SetActiveQuestData");
static_assert(offsetof(VMapMenuViewModel_SetActiveQuestData, NewActiveQuestData) == 0x000000, "Member 'VMapMenuViewModel_SetActiveQuestData::NewActiveQuestData' has a wrong offset!");

// Function Altar.VMapMenuViewModel.SetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VMapMenuViewModel_SetCurrentPage final
{
public:
	ELegacyMapMenuPage                            NewPage;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_SetCurrentPage) == 0x000001, "Wrong alignment on VMapMenuViewModel_SetCurrentPage");
static_assert(sizeof(VMapMenuViewModel_SetCurrentPage) == 0x000001, "Wrong size on VMapMenuViewModel_SetCurrentPage");
static_assert(offsetof(VMapMenuViewModel_SetCurrentPage, NewPage) == 0x000000, "Member 'VMapMenuViewModel_SetCurrentPage::NewPage' has a wrong offset!");

// Function Altar.VMapMenuViewModel.SetQuestHistory
// 0x0010 (0x0010 - 0x0000)
struct VMapMenuViewModel_SetQuestHistory final
{
public:
	TArray<struct FLegacyMapMenuQuestProperties>  NewQuestHistory;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_SetQuestHistory) == 0x000008, "Wrong alignment on VMapMenuViewModel_SetQuestHistory");
static_assert(sizeof(VMapMenuViewModel_SetQuestHistory) == 0x000010, "Wrong size on VMapMenuViewModel_SetQuestHistory");
static_assert(offsetof(VMapMenuViewModel_SetQuestHistory, NewQuestHistory) == 0x000000, "Member 'VMapMenuViewModel_SetQuestHistory::NewQuestHistory' has a wrong offset!");

// Function Altar.VMapMenuViewModel.SetQuests
// 0x0010 (0x0010 - 0x0000)
struct VMapMenuViewModel_SetQuests final
{
public:
	TArray<struct FLegacyMapMenuQuestProperties>  NewQuests;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_SetQuests) == 0x000008, "Wrong alignment on VMapMenuViewModel_SetQuests");
static_assert(sizeof(VMapMenuViewModel_SetQuests) == 0x000010, "Wrong size on VMapMenuViewModel_SetQuests");
static_assert(offsetof(VMapMenuViewModel_SetQuests, NewQuests) == 0x000000, "Member 'VMapMenuViewModel_SetQuests::NewQuests' has a wrong offset!");

// Function Altar.VMapMenuViewModel.SetTitleProperties
// 0x0030 (0x0030 - 0x0000)
struct VMapMenuViewModel_SetTitleProperties final
{
public:
	struct FLegacyMapMenuTitleProperties          NewTitleProperties;                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_SetTitleProperties) == 0x000008, "Wrong alignment on VMapMenuViewModel_SetTitleProperties");
static_assert(sizeof(VMapMenuViewModel_SetTitleProperties) == 0x000030, "Wrong size on VMapMenuViewModel_SetTitleProperties");
static_assert(offsetof(VMapMenuViewModel_SetTitleProperties, NewTitleProperties) == 0x000000, "Member 'VMapMenuViewModel_SetTitleProperties::NewTitleProperties' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetActiveQuestData
// 0x0098 (0x0098 - 0x0000)
struct VMapMenuViewModel_GetActiveQuestData final
{
public:
	struct FLegacyMapMenuQuestProperties          ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetActiveQuestData) == 0x000008, "Wrong alignment on VMapMenuViewModel_GetActiveQuestData");
static_assert(sizeof(VMapMenuViewModel_GetActiveQuestData) == 0x000098, "Wrong size on VMapMenuViewModel_GetActiveQuestData");
static_assert(offsetof(VMapMenuViewModel_GetActiveQuestData, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetActiveQuestData::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VMapMenuViewModel_GetCurrentPage final
{
public:
	ELegacyMapMenuPage                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetCurrentPage) == 0x000001, "Wrong alignment on VMapMenuViewModel_GetCurrentPage");
static_assert(sizeof(VMapMenuViewModel_GetCurrentPage) == 0x000001, "Wrong size on VMapMenuViewModel_GetCurrentPage");
static_assert(offsetof(VMapMenuViewModel_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetLocalMapMenuViewModel
// 0x0008 (0x0008 - 0x0000)
struct VMapMenuViewModel_GetLocalMapMenuViewModel final
{
public:
	class UVMapPageViewModel*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetLocalMapMenuViewModel) == 0x000008, "Wrong alignment on VMapMenuViewModel_GetLocalMapMenuViewModel");
static_assert(sizeof(VMapMenuViewModel_GetLocalMapMenuViewModel) == 0x000008, "Wrong size on VMapMenuViewModel_GetLocalMapMenuViewModel");
static_assert(offsetof(VMapMenuViewModel_GetLocalMapMenuViewModel, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetLocalMapMenuViewModel::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetQuestHistory
// 0x0010 (0x0010 - 0x0000)
struct VMapMenuViewModel_GetQuestHistory final
{
public:
	TArray<struct FLegacyMapMenuQuestProperties>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetQuestHistory) == 0x000008, "Wrong alignment on VMapMenuViewModel_GetQuestHistory");
static_assert(sizeof(VMapMenuViewModel_GetQuestHistory) == 0x000010, "Wrong size on VMapMenuViewModel_GetQuestHistory");
static_assert(offsetof(VMapMenuViewModel_GetQuestHistory, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetQuestHistory::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetQuests
// 0x0010 (0x0010 - 0x0000)
struct VMapMenuViewModel_GetQuests final
{
public:
	TArray<struct FLegacyMapMenuQuestProperties>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetQuests) == 0x000008, "Wrong alignment on VMapMenuViewModel_GetQuests");
static_assert(sizeof(VMapMenuViewModel_GetQuests) == 0x000010, "Wrong size on VMapMenuViewModel_GetQuests");
static_assert(offsetof(VMapMenuViewModel_GetQuests, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetQuests::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetTitleProperties
// 0x0030 (0x0030 - 0x0000)
struct VMapMenuViewModel_GetTitleProperties final
{
public:
	struct FLegacyMapMenuTitleProperties          ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetTitleProperties) == 0x000008, "Wrong alignment on VMapMenuViewModel_GetTitleProperties");
static_assert(sizeof(VMapMenuViewModel_GetTitleProperties) == 0x000030, "Wrong size on VMapMenuViewModel_GetTitleProperties");
static_assert(offsetof(VMapMenuViewModel_GetTitleProperties, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetTitleProperties::ReturnValue' has a wrong offset!");

// Function Altar.VMapMenuViewModel.GetWorldMapMenuViewModel
// 0x0008 (0x0008 - 0x0000)
struct VMapMenuViewModel_GetWorldMapMenuViewModel final
{
public:
	class UVMapPageViewModel*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapMenuViewModel_GetWorldMapMenuViewModel) == 0x000008, "Wrong alignment on VMapMenuViewModel_GetWorldMapMenuViewModel");
static_assert(sizeof(VMapMenuViewModel_GetWorldMapMenuViewModel) == 0x000008, "Wrong size on VMapMenuViewModel_GetWorldMapMenuViewModel");
static_assert(offsetof(VMapMenuViewModel_GetWorldMapMenuViewModel, ReturnValue) == 0x000000, "Member 'VMapMenuViewModel_GetWorldMapMenuViewModel::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.ForceSetMapPosition
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_ForceSetMapPosition final
{
public:
	struct FVector2D                              NewMapPosition;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_ForceSetMapPosition) == 0x000008, "Wrong alignment on VMapPageViewModel_ForceSetMapPosition");
static_assert(sizeof(VMapPageViewModel_ForceSetMapPosition) == 0x000010, "Wrong size on VMapPageViewModel_ForceSetMapPosition");
static_assert(offsetof(VMapPageViewModel_ForceSetMapPosition, NewMapPosition) == 0x000000, "Member 'VMapPageViewModel_ForceSetMapPosition::NewMapPosition' has a wrong offset!");

// Function Altar.VMapPageViewModel.RegisterSendCreatePlayerMarkerHandler
// 0x0028 (0x0028 - 0x0000)
struct VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler final
{
public:
	bool                                          IsWorldMap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MarkerPos;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OblivionWorldMarkerPos;                            // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler) == 0x000008, "Wrong alignment on VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler");
static_assert(sizeof(VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler) == 0x000028, "Wrong size on VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler");
static_assert(offsetof(VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler, IsWorldMap) == 0x000000, "Member 'VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler::IsWorldMap' has a wrong offset!");
static_assert(offsetof(VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler, MarkerPos) == 0x000008, "Member 'VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler::MarkerPos' has a wrong offset!");
static_assert(offsetof(VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler, OblivionWorldMarkerPos) == 0x000018, "Member 'VMapPageViewModel_RegisterSendCreatePlayerMarkerHandler::OblivionWorldMarkerPos' has a wrong offset!");

// Function Altar.VMapPageViewModel.RegisterSendWorldMapIconClickedHandlerAddress
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress) == 0x000008, "Wrong alignment on VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress");
static_assert(sizeof(VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress) == 0x000010, "Wrong size on VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress");
static_assert(offsetof(VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress, Address) == 0x000000, "Member 'VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerAddress::Address' has a wrong offset!");

// Function Altar.VMapPageViewModel.RegisterSendWorldMapIconClickedHandlerName
// 0x0008 (0x0008 - 0x0000)
struct VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName) == 0x000004, "Wrong alignment on VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName");
static_assert(sizeof(VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName) == 0x000008, "Wrong size on VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName");
static_assert(offsetof(VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName, Key) == 0x000000, "Member 'VMapPageViewModel_RegisterSendWorldMapIconClickedHandlerName::Key' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetHasTriedFastTravel
// 0x0001 (0x0001 - 0x0000)
struct VMapPageViewModel_SetHasTriedFastTravel final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetHasTriedFastTravel) == 0x000001, "Wrong alignment on VMapPageViewModel_SetHasTriedFastTravel");
static_assert(sizeof(VMapPageViewModel_SetHasTriedFastTravel) == 0x000001, "Wrong size on VMapPageViewModel_SetHasTriedFastTravel");
static_assert(offsetof(VMapPageViewModel_SetHasTriedFastTravel, bNewValue) == 0x000000, "Member 'VMapPageViewModel_SetHasTriedFastTravel::bNewValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetLocalMapProperties
// 0x0028 (0x0028 - 0x0000)
struct VMapPageViewModel_SetLocalMapProperties final
{
public:
	struct FLegacyMapMenuLocalMapProperties       NewMapProperties;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetLocalMapProperties) == 0x000008, "Wrong alignment on VMapPageViewModel_SetLocalMapProperties");
static_assert(sizeof(VMapPageViewModel_SetLocalMapProperties) == 0x000028, "Wrong size on VMapPageViewModel_SetLocalMapProperties");
static_assert(offsetof(VMapPageViewModel_SetLocalMapProperties, NewMapProperties) == 0x000000, "Member 'VMapPageViewModel_SetLocalMapProperties::NewMapProperties' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetLockingUpdatesDuringDelayedFastTravel
// 0x0001 (0x0001 - 0x0000)
struct VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel final
{
public:
	bool                                          InLockMapUpdates;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel) == 0x000001, "Wrong alignment on VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel");
static_assert(sizeof(VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel) == 0x000001, "Wrong size on VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel");
static_assert(offsetof(VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel, InLockMapUpdates) == 0x000000, "Member 'VMapPageViewModel_SetLockingUpdatesDuringDelayedFastTravel::InLockMapUpdates' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetMapIcons
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_SetMapIcons final
{
public:
	TArray<struct FLegacyMapMenuIconProperties>   NewIcons;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetMapIcons) == 0x000008, "Wrong alignment on VMapPageViewModel_SetMapIcons");
static_assert(sizeof(VMapPageViewModel_SetMapIcons) == 0x000010, "Wrong size on VMapPageViewModel_SetMapIcons");
static_assert(offsetof(VMapPageViewModel_SetMapIcons, NewIcons) == 0x000000, "Member 'VMapPageViewModel_SetMapIcons::NewIcons' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetMapPosition
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_SetMapPosition final
{
public:
	struct FVector2D                              NewMapPosition;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetMapPosition) == 0x000008, "Wrong alignment on VMapPageViewModel_SetMapPosition");
static_assert(sizeof(VMapPageViewModel_SetMapPosition) == 0x000010, "Wrong size on VMapPageViewModel_SetMapPosition");
static_assert(offsetof(VMapPageViewModel_SetMapPosition, NewMapPosition) == 0x000000, "Member 'VMapPageViewModel_SetMapPosition::NewMapPosition' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetMaxZoomValue
// 0x0004 (0x0004 - 0x0000)
struct VMapPageViewModel_SetMaxZoomValue final
{
public:
	float                                         NewMaxZoomValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetMaxZoomValue) == 0x000004, "Wrong alignment on VMapPageViewModel_SetMaxZoomValue");
static_assert(sizeof(VMapPageViewModel_SetMaxZoomValue) == 0x000004, "Wrong size on VMapPageViewModel_SetMaxZoomValue");
static_assert(offsetof(VMapPageViewModel_SetMaxZoomValue, NewMaxZoomValue) == 0x000000, "Member 'VMapPageViewModel_SetMaxZoomValue::NewMaxZoomValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetMinZoomValue
// 0x0004 (0x0004 - 0x0000)
struct VMapPageViewModel_SetMinZoomValue final
{
public:
	float                                         NewMinZoomValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetMinZoomValue) == 0x000004, "Wrong alignment on VMapPageViewModel_SetMinZoomValue");
static_assert(sizeof(VMapPageViewModel_SetMinZoomValue) == 0x000004, "Wrong size on VMapPageViewModel_SetMinZoomValue");
static_assert(offsetof(VMapPageViewModel_SetMinZoomValue, NewMinZoomValue) == 0x000000, "Member 'VMapPageViewModel_SetMinZoomValue::NewMinZoomValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetPlayerMarkerPosition
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_SetPlayerMarkerPosition final
{
public:
	struct FVector2D                              NewMapPosition;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetPlayerMarkerPosition) == 0x000008, "Wrong alignment on VMapPageViewModel_SetPlayerMarkerPosition");
static_assert(sizeof(VMapPageViewModel_SetPlayerMarkerPosition) == 0x000010, "Wrong size on VMapPageViewModel_SetPlayerMarkerPosition");
static_assert(offsetof(VMapPageViewModel_SetPlayerMarkerPosition, NewMapPosition) == 0x000000, "Member 'VMapPageViewModel_SetPlayerMarkerPosition::NewMapPosition' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetRenderTargetTextureFog
// 0x0008 (0x0008 - 0x0000)
struct VMapPageViewModel_SetRenderTargetTextureFog final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetRenderTargetTextureFog) == 0x000008, "Wrong alignment on VMapPageViewModel_SetRenderTargetTextureFog");
static_assert(sizeof(VMapPageViewModel_SetRenderTargetTextureFog) == 0x000008, "Wrong size on VMapPageViewModel_SetRenderTargetTextureFog");
static_assert(offsetof(VMapPageViewModel_SetRenderTargetTextureFog, RenderTarget) == 0x000000, "Member 'VMapPageViewModel_SetRenderTargetTextureFog::RenderTarget' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetWorldMapProperties
// 0x0020 (0x0020 - 0x0000)
struct VMapPageViewModel_SetWorldMapProperties final
{
public:
	struct FLegacyMapMenuWorldMapProperties       NewMapProperties;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetWorldMapProperties) == 0x000008, "Wrong alignment on VMapPageViewModel_SetWorldMapProperties");
static_assert(sizeof(VMapPageViewModel_SetWorldMapProperties) == 0x000020, "Wrong size on VMapPageViewModel_SetWorldMapProperties");
static_assert(offsetof(VMapPageViewModel_SetWorldMapProperties, NewMapProperties) == 0x000000, "Member 'VMapPageViewModel_SetWorldMapProperties::NewMapProperties' has a wrong offset!");

// Function Altar.VMapPageViewModel.SetZoom
// 0x0004 (0x0004 - 0x0000)
struct VMapPageViewModel_SetZoom final
{
public:
	float                                         NewZoom;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_SetZoom) == 0x000004, "Wrong alignment on VMapPageViewModel_SetZoom");
static_assert(sizeof(VMapPageViewModel_SetZoom) == 0x000004, "Wrong size on VMapPageViewModel_SetZoom");
static_assert(offsetof(VMapPageViewModel_SetZoom, NewZoom) == 0x000000, "Member 'VMapPageViewModel_SetZoom::NewZoom' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetHasTriedFastTravel
// 0x0001 (0x0001 - 0x0000)
struct VMapPageViewModel_GetHasTriedFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetHasTriedFastTravel) == 0x000001, "Wrong alignment on VMapPageViewModel_GetHasTriedFastTravel");
static_assert(sizeof(VMapPageViewModel_GetHasTriedFastTravel) == 0x000001, "Wrong size on VMapPageViewModel_GetHasTriedFastTravel");
static_assert(offsetof(VMapPageViewModel_GetHasTriedFastTravel, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetHasTriedFastTravel::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetLocalMapProperties
// 0x0028 (0x0028 - 0x0000)
struct VMapPageViewModel_GetLocalMapProperties final
{
public:
	struct FLegacyMapMenuLocalMapProperties       ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetLocalMapProperties) == 0x000008, "Wrong alignment on VMapPageViewModel_GetLocalMapProperties");
static_assert(sizeof(VMapPageViewModel_GetLocalMapProperties) == 0x000028, "Wrong size on VMapPageViewModel_GetLocalMapProperties");
static_assert(offsetof(VMapPageViewModel_GetLocalMapProperties, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetLocalMapProperties::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetLockingUpdatesDuringDelayedFastTravel
// 0x0001 (0x0001 - 0x0000)
struct VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel) == 0x000001, "Wrong alignment on VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel");
static_assert(sizeof(VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel) == 0x000001, "Wrong size on VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel");
static_assert(offsetof(VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetLockingUpdatesDuringDelayedFastTravel::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetMapIcons
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_GetMapIcons final
{
public:
	TArray<struct FLegacyMapMenuIconProperties>   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetMapIcons) == 0x000008, "Wrong alignment on VMapPageViewModel_GetMapIcons");
static_assert(sizeof(VMapPageViewModel_GetMapIcons) == 0x000010, "Wrong size on VMapPageViewModel_GetMapIcons");
static_assert(offsetof(VMapPageViewModel_GetMapIcons, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetMapIcons::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetMapPosition
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_GetMapPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetMapPosition) == 0x000008, "Wrong alignment on VMapPageViewModel_GetMapPosition");
static_assert(sizeof(VMapPageViewModel_GetMapPosition) == 0x000010, "Wrong size on VMapPageViewModel_GetMapPosition");
static_assert(offsetof(VMapPageViewModel_GetMapPosition, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetMapPosition::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetMaxZoomValue
// 0x0004 (0x0004 - 0x0000)
struct VMapPageViewModel_GetMaxZoomValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetMaxZoomValue) == 0x000004, "Wrong alignment on VMapPageViewModel_GetMaxZoomValue");
static_assert(sizeof(VMapPageViewModel_GetMaxZoomValue) == 0x000004, "Wrong size on VMapPageViewModel_GetMaxZoomValue");
static_assert(offsetof(VMapPageViewModel_GetMaxZoomValue, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetMaxZoomValue::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetMinZoomValue
// 0x0004 (0x0004 - 0x0000)
struct VMapPageViewModel_GetMinZoomValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetMinZoomValue) == 0x000004, "Wrong alignment on VMapPageViewModel_GetMinZoomValue");
static_assert(sizeof(VMapPageViewModel_GetMinZoomValue) == 0x000004, "Wrong size on VMapPageViewModel_GetMinZoomValue");
static_assert(offsetof(VMapPageViewModel_GetMinZoomValue, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetMinZoomValue::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetPlayerMarkerPosition
// 0x0010 (0x0010 - 0x0000)
struct VMapPageViewModel_GetPlayerMarkerPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetPlayerMarkerPosition) == 0x000008, "Wrong alignment on VMapPageViewModel_GetPlayerMarkerPosition");
static_assert(sizeof(VMapPageViewModel_GetPlayerMarkerPosition) == 0x000010, "Wrong size on VMapPageViewModel_GetPlayerMarkerPosition");
static_assert(offsetof(VMapPageViewModel_GetPlayerMarkerPosition, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetPlayerMarkerPosition::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetWorldMapProperties
// 0x0020 (0x0020 - 0x0000)
struct VMapPageViewModel_GetWorldMapProperties final
{
public:
	struct FLegacyMapMenuWorldMapProperties       ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetWorldMapProperties) == 0x000008, "Wrong alignment on VMapPageViewModel_GetWorldMapProperties");
static_assert(sizeof(VMapPageViewModel_GetWorldMapProperties) == 0x000020, "Wrong size on VMapPageViewModel_GetWorldMapProperties");
static_assert(offsetof(VMapPageViewModel_GetWorldMapProperties, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetWorldMapProperties::ReturnValue' has a wrong offset!");

// Function Altar.VMapPageViewModel.GetZoom
// 0x0004 (0x0004 - 0x0000)
struct VMapPageViewModel_GetZoom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMapPageViewModel_GetZoom) == 0x000004, "Wrong alignment on VMapPageViewModel_GetZoom");
static_assert(sizeof(VMapPageViewModel_GetZoom) == 0x000004, "Wrong size on VMapPageViewModel_GetZoom");
static_assert(offsetof(VMapPageViewModel_GetZoom, ReturnValue) == 0x000000, "Member 'VMapPageViewModel_GetZoom::ReturnValue' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.RegisterSendClickedButton
// 0x0004 (0x0004 - 0x0000)
struct VMessageMenuViewModel_RegisterSendClickedButton final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_RegisterSendClickedButton) == 0x000004, "Wrong alignment on VMessageMenuViewModel_RegisterSendClickedButton");
static_assert(sizeof(VMessageMenuViewModel_RegisterSendClickedButton) == 0x000004, "Wrong size on VMessageMenuViewModel_RegisterSendClickedButton");
static_assert(offsetof(VMessageMenuViewModel_RegisterSendClickedButton, InButtonIndex) == 0x000000, "Member 'VMessageMenuViewModel_RegisterSendClickedButton::InButtonIndex' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.SetButtonsText
// 0x0010 (0x0010 - 0x0000)
struct VMessageMenuViewModel_SetButtonsText final
{
public:
	TArray<class FText>                           NewButtonsText;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_SetButtonsText) == 0x000008, "Wrong alignment on VMessageMenuViewModel_SetButtonsText");
static_assert(sizeof(VMessageMenuViewModel_SetButtonsText) == 0x000010, "Wrong size on VMessageMenuViewModel_SetButtonsText");
static_assert(offsetof(VMessageMenuViewModel_SetButtonsText, NewButtonsText) == 0x000000, "Member 'VMessageMenuViewModel_SetButtonsText::NewButtonsText' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.SetMenuType
// 0x0001 (0x0001 - 0x0000)
struct VMessageMenuViewModel_SetMenuType final
{
public:
	EModalMenuLayoutType                          NewMenuType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_SetMenuType) == 0x000001, "Wrong alignment on VMessageMenuViewModel_SetMenuType");
static_assert(sizeof(VMessageMenuViewModel_SetMenuType) == 0x000001, "Wrong size on VMessageMenuViewModel_SetMenuType");
static_assert(offsetof(VMessageMenuViewModel_SetMenuType, NewMenuType) == 0x000000, "Member 'VMessageMenuViewModel_SetMenuType::NewMenuType' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct VMessageMenuViewModel_SetMessage final
{
public:
	class FText                                   NewMessage;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_SetMessage) == 0x000008, "Wrong alignment on VMessageMenuViewModel_SetMessage");
static_assert(sizeof(VMessageMenuViewModel_SetMessage) == 0x000018, "Wrong size on VMessageMenuViewModel_SetMessage");
static_assert(offsetof(VMessageMenuViewModel_SetMessage, NewMessage) == 0x000000, "Member 'VMessageMenuViewModel_SetMessage::NewMessage' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.GetButtonsText
// 0x0010 (0x0010 - 0x0000)
struct VMessageMenuViewModel_GetButtonsText final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_GetButtonsText) == 0x000008, "Wrong alignment on VMessageMenuViewModel_GetButtonsText");
static_assert(sizeof(VMessageMenuViewModel_GetButtonsText) == 0x000010, "Wrong size on VMessageMenuViewModel_GetButtonsText");
static_assert(offsetof(VMessageMenuViewModel_GetButtonsText, ReturnValue) == 0x000000, "Member 'VMessageMenuViewModel_GetButtonsText::ReturnValue' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.GetMenuType
// 0x0001 (0x0001 - 0x0000)
struct VMessageMenuViewModel_GetMenuType final
{
public:
	EModalMenuLayoutType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_GetMenuType) == 0x000001, "Wrong alignment on VMessageMenuViewModel_GetMenuType");
static_assert(sizeof(VMessageMenuViewModel_GetMenuType) == 0x000001, "Wrong size on VMessageMenuViewModel_GetMenuType");
static_assert(offsetof(VMessageMenuViewModel_GetMenuType, ReturnValue) == 0x000000, "Member 'VMessageMenuViewModel_GetMenuType::ReturnValue' has a wrong offset!");

// Function Altar.VMessageMenuViewModel.GetMessage
// 0x0018 (0x0018 - 0x0000)
struct VMessageMenuViewModel_GetMessage final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMessageMenuViewModel_GetMessage) == 0x000008, "Wrong alignment on VMessageMenuViewModel_GetMessage");
static_assert(sizeof(VMessageMenuViewModel_GetMessage) == 0x000018, "Wrong size on VMessageMenuViewModel_GetMessage");
static_assert(offsetof(VMessageMenuViewModel_GetMessage, ReturnValue) == 0x000000, "Member 'VMessageMenuViewModel_GetMessage::ReturnValue' has a wrong offset!");

// Function Altar.VModernGamepadRebindWidget.OnGamepadKeySelectorKeySelected
// 0x0020 (0x0020 - 0x0000)
struct VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected final
{
public:
	struct FInputChord                            NewInputChord;                                     // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected) == 0x000008, "Wrong alignment on VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected");
static_assert(sizeof(VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected) == 0x000020, "Wrong size on VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected");
static_assert(offsetof(VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected, NewInputChord) == 0x000000, "Member 'VModernGamepadRebindWidget_OnGamepadKeySelectorKeySelected::NewInputChord' has a wrong offset!");

// Function Altar.VModernHelpMenu.CreateListData
// 0x0050 (0x0050 - 0x0000)
struct VModernHelpMenu_CreateListData final
{
public:
	TMap<class FString, struct FHelpEntryCategoryData> DataPerCategory;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_CreateListData) == 0x000008, "Wrong alignment on VModernHelpMenu_CreateListData");
static_assert(sizeof(VModernHelpMenu_CreateListData) == 0x000050, "Wrong size on VModernHelpMenu_CreateListData");
static_assert(offsetof(VModernHelpMenu_CreateListData, DataPerCategory) == 0x000000, "Member 'VModernHelpMenu_CreateListData::DataPerCategory' has a wrong offset!");

// Function Altar.VModernHelpMenu.OnListEntriesUpdated
// 0x0010 (0x0010 - 0x0000)
struct VModernHelpMenu_OnListEntriesUpdated final
{
public:
	TArray<class UHelpMenuListEntryData*>         InListData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_OnListEntriesUpdated) == 0x000008, "Wrong alignment on VModernHelpMenu_OnListEntriesUpdated");
static_assert(sizeof(VModernHelpMenu_OnListEntriesUpdated) == 0x000010, "Wrong size on VModernHelpMenu_OnListEntriesUpdated");
static_assert(offsetof(VModernHelpMenu_OnListEntriesUpdated, InListData) == 0x000000, "Member 'VModernHelpMenu_OnListEntriesUpdated::InListData' has a wrong offset!");

// Function Altar.VModernHelpMenu.OnNavigateEntry
// 0x0008 (0x0008 - 0x0000)
struct VModernHelpMenu_OnNavigateEntry final
{
public:
	class UHelpMenuListEntryData*                 Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_OnNavigateEntry) == 0x000008, "Wrong alignment on VModernHelpMenu_OnNavigateEntry");
static_assert(sizeof(VModernHelpMenu_OnNavigateEntry) == 0x000008, "Wrong size on VModernHelpMenu_OnNavigateEntry");
static_assert(offsetof(VModernHelpMenu_OnNavigateEntry, Entry) == 0x000000, "Member 'VModernHelpMenu_OnNavigateEntry::Entry' has a wrong offset!");

// Function Altar.VModernHelpMenu.ProcessTutorials
// 0x0008 (0x0008 - 0x0000)
struct VModernHelpMenu_ProcessTutorials final
{
public:
	const class UDataTable*                       Tutorials;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_ProcessTutorials) == 0x000008, "Wrong alignment on VModernHelpMenu_ProcessTutorials");
static_assert(sizeof(VModernHelpMenu_ProcessTutorials) == 0x000008, "Wrong size on VModernHelpMenu_ProcessTutorials");
static_assert(offsetof(VModernHelpMenu_ProcessTutorials, Tutorials) == 0x000000, "Member 'VModernHelpMenu_ProcessTutorials::Tutorials' has a wrong offset!");

// Function Altar.VModernHelpMenu.ShowLess
// 0x0001 (0x0001 - 0x0000)
struct VModernHelpMenu_ShowLess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_ShowLess) == 0x000001, "Wrong alignment on VModernHelpMenu_ShowLess");
static_assert(sizeof(VModernHelpMenu_ShowLess) == 0x000001, "Wrong size on VModernHelpMenu_ShowLess");
static_assert(offsetof(VModernHelpMenu_ShowLess, ReturnValue) == 0x000000, "Member 'VModernHelpMenu_ShowLess::ReturnValue' has a wrong offset!");

// Function Altar.VModernHelpMenu.ToggleCategory
// 0x0008 (0x0008 - 0x0000)
struct VModernHelpMenu_ToggleCategory final
{
public:
	class UHelpMenuListEntryData*                 Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_ToggleCategory) == 0x000008, "Wrong alignment on VModernHelpMenu_ToggleCategory");
static_assert(sizeof(VModernHelpMenu_ToggleCategory) == 0x000008, "Wrong size on VModernHelpMenu_ToggleCategory");
static_assert(offsetof(VModernHelpMenu_ToggleCategory, Entry) == 0x000000, "Member 'VModernHelpMenu_ToggleCategory::Entry' has a wrong offset!");

// Function Altar.VModernHelpMenu.ToggleData
// 0x0010 (0x0010 - 0x0000)
struct VModernHelpMenu_ToggleData final
{
public:
	class UHelpMenuListEntryData*                 Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             Tutorials;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_ToggleData) == 0x000008, "Wrong alignment on VModernHelpMenu_ToggleData");
static_assert(sizeof(VModernHelpMenu_ToggleData) == 0x000010, "Wrong size on VModernHelpMenu_ToggleData");
static_assert(offsetof(VModernHelpMenu_ToggleData, Entry) == 0x000000, "Member 'VModernHelpMenu_ToggleData::Entry' has a wrong offset!");
static_assert(offsetof(VModernHelpMenu_ToggleData, Tutorials) == 0x000008, "Member 'VModernHelpMenu_ToggleData::Tutorials' has a wrong offset!");

// Function Altar.VModernHelpMenu.GetCurrentDataAdjustedIndex
// 0x0004 (0x0004 - 0x0000)
struct VModernHelpMenu_GetCurrentDataAdjustedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_GetCurrentDataAdjustedIndex) == 0x000004, "Wrong alignment on VModernHelpMenu_GetCurrentDataAdjustedIndex");
static_assert(sizeof(VModernHelpMenu_GetCurrentDataAdjustedIndex) == 0x000004, "Wrong size on VModernHelpMenu_GetCurrentDataAdjustedIndex");
static_assert(offsetof(VModernHelpMenu_GetCurrentDataAdjustedIndex, ReturnValue) == 0x000000, "Member 'VModernHelpMenu_GetCurrentDataAdjustedIndex::ReturnValue' has a wrong offset!");

// Function Altar.VModernHelpMenu.GetDetailIndexText
// 0x0018 (0x0018 - 0x0000)
struct VModernHelpMenu_GetDetailIndexText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHelpMenu_GetDetailIndexText) == 0x000008, "Wrong alignment on VModernHelpMenu_GetDetailIndexText");
static_assert(sizeof(VModernHelpMenu_GetDetailIndexText) == 0x000018, "Wrong size on VModernHelpMenu_GetDetailIndexText");
static_assert(offsetof(VModernHelpMenu_GetDetailIndexText, ReturnValue) == 0x000000, "Member 'VModernHelpMenu_GetDetailIndexText::ReturnValue' has a wrong offset!");

// Function Altar.VModernHudMain.OnForcePlayerMenuPageUpdated
// 0x0004 (0x0004 - 0x0000)
struct VModernHudMain_OnForcePlayerMenuPageUpdated final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHudMain_OnForcePlayerMenuPageUpdated) == 0x000004, "Wrong alignment on VModernHudMain_OnForcePlayerMenuPageUpdated");
static_assert(sizeof(VModernHudMain_OnForcePlayerMenuPageUpdated) == 0x000004, "Wrong size on VModernHudMain_OnForcePlayerMenuPageUpdated");
static_assert(offsetof(VModernHudMain_OnForcePlayerMenuPageUpdated, Index_0) == 0x000000, "Member 'VModernHudMain_OnForcePlayerMenuPageUpdated::Index_0' has a wrong offset!");

// Function Altar.VModernHudMain.OnHUDVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct VModernHudMain_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHudMain_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on VModernHudMain_OnHUDVisibilityChanged");
static_assert(sizeof(VModernHudMain_OnHUDVisibilityChanged) == 0x000002, "Wrong size on VModernHudMain_OnHUDVisibilityChanged");
static_assert(offsetof(VModernHudMain_OnHUDVisibilityChanged, Flag) == 0x000000, "Member 'VModernHudMain_OnHUDVisibilityChanged::Flag' has a wrong offset!");
static_assert(offsetof(VModernHudMain_OnHUDVisibilityChanged, bVisible) == 0x000001, "Member 'VModernHudMain_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Altar.VModernHudPrimaryLayout.OnHUDGlobalVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged) == 0x000001, "Wrong alignment on VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged");
static_assert(sizeof(VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged) == 0x000001, "Wrong size on VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged");
static_assert(offsetof(VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged, bVisible) == 0x000000, "Member 'VModernHudPrimaryLayout_OnHUDGlobalVisibilityChanged::bVisible' has a wrong offset!");

// Function Altar.VModernHudPrimaryLayout.OnHUDVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct VModernHudPrimaryLayout_OnHUDVisibilityChanged final
{
public:
	EHUDVisibility                                Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernHudPrimaryLayout_OnHUDVisibilityChanged) == 0x000001, "Wrong alignment on VModernHudPrimaryLayout_OnHUDVisibilityChanged");
static_assert(sizeof(VModernHudPrimaryLayout_OnHUDVisibilityChanged) == 0x000002, "Wrong size on VModernHudPrimaryLayout_OnHUDVisibilityChanged");
static_assert(offsetof(VModernHudPrimaryLayout_OnHUDVisibilityChanged, Flag) == 0x000000, "Member 'VModernHudPrimaryLayout_OnHUDVisibilityChanged::Flag' has a wrong offset!");
static_assert(offsetof(VModernHudPrimaryLayout_OnHUDVisibilityChanged, bVisible) == 0x000001, "Member 'VModernHudPrimaryLayout_OnHUDVisibilityChanged::bVisible' has a wrong offset!");

// Function Altar.VModernHudReticle.CheckForBehaviorTypeUpdate
// 0x0018 (0x0018 - 0x0000)
struct VModernHudReticle_CheckForBehaviorTypeUpdate final
{
public:
	struct FGameplayTag                           WeaponTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVHUDReticleViewModel*                  ViewModel;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernHudReticle_CheckForBehaviorTypeUpdate) == 0x000008, "Wrong alignment on VModernHudReticle_CheckForBehaviorTypeUpdate");
static_assert(sizeof(VModernHudReticle_CheckForBehaviorTypeUpdate) == 0x000018, "Wrong size on VModernHudReticle_CheckForBehaviorTypeUpdate");
static_assert(offsetof(VModernHudReticle_CheckForBehaviorTypeUpdate, WeaponTag) == 0x000000, "Member 'VModernHudReticle_CheckForBehaviorTypeUpdate::WeaponTag' has a wrong offset!");
static_assert(offsetof(VModernHudReticle_CheckForBehaviorTypeUpdate, ViewModel) == 0x000008, "Member 'VModernHudReticle_CheckForBehaviorTypeUpdate::ViewModel' has a wrong offset!");
static_assert(offsetof(VModernHudReticle_CheckForBehaviorTypeUpdate, ReturnValue) == 0x000010, "Member 'VModernHudReticle_CheckForBehaviorTypeUpdate::ReturnValue' has a wrong offset!");

// Function Altar.VModernKeyboardRebindWidget.OnPrimaryKeyboardKeySelectorKeySelected
// 0x0020 (0x0020 - 0x0000)
struct VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected final
{
public:
	struct FInputChord                            NewInputChord;                                     // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected) == 0x000008, "Wrong alignment on VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected");
static_assert(sizeof(VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected) == 0x000020, "Wrong size on VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected");
static_assert(offsetof(VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected, NewInputChord) == 0x000000, "Member 'VModernKeyboardRebindWidget_OnPrimaryKeyboardKeySelectorKeySelected::NewInputChord' has a wrong offset!");

// Function Altar.VModernKeyboardRebindWidget.OnSecondaryKeyboardKeySelectorKeySelected
// 0x0020 (0x0020 - 0x0000)
struct VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected final
{
public:
	struct FInputChord                            NewInputChord;                                     // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected) == 0x000008, "Wrong alignment on VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected");
static_assert(sizeof(VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected) == 0x000020, "Wrong size on VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected");
static_assert(offsetof(VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected, NewInputChord) == 0x000000, "Member 'VModernKeyboardRebindWidget_OnSecondaryKeyboardKeySelectorKeySelected::NewInputChord' has a wrong offset!");

// Function Altar.VModernListView.OnListViewScrollbarChangedInternal
// 0x0010 (0x0010 - 0x0000)
struct VModernListView_OnListViewScrollbarChangedInternal final
{
public:
	float                                         MinScrollbarValue;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScrollbarValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScrollbarValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThumbFractionSize;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernListView_OnListViewScrollbarChangedInternal) == 0x000004, "Wrong alignment on VModernListView_OnListViewScrollbarChangedInternal");
static_assert(sizeof(VModernListView_OnListViewScrollbarChangedInternal) == 0x000010, "Wrong size on VModernListView_OnListViewScrollbarChangedInternal");
static_assert(offsetof(VModernListView_OnListViewScrollbarChangedInternal, MinScrollbarValue) == 0x000000, "Member 'VModernListView_OnListViewScrollbarChangedInternal::MinScrollbarValue' has a wrong offset!");
static_assert(offsetof(VModernListView_OnListViewScrollbarChangedInternal, MaxScrollbarValue) == 0x000004, "Member 'VModernListView_OnListViewScrollbarChangedInternal::MaxScrollbarValue' has a wrong offset!");
static_assert(offsetof(VModernListView_OnListViewScrollbarChangedInternal, CurrentScrollbarValue) == 0x000008, "Member 'VModernListView_OnListViewScrollbarChangedInternal::CurrentScrollbarValue' has a wrong offset!");
static_assert(offsetof(VModernListView_OnListViewScrollbarChangedInternal, ThumbFractionSize) == 0x00000C, "Member 'VModernListView_OnListViewScrollbarChangedInternal::ThumbFractionSize' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.AttemptSolve
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickingMenuTumbler_AttemptSolve final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_AttemptSolve) == 0x000001, "Wrong alignment on VModernLockpickingMenuTumbler_AttemptSolve");
static_assert(sizeof(VModernLockpickingMenuTumbler_AttemptSolve) == 0x000001, "Wrong size on VModernLockpickingMenuTumbler_AttemptSolve");
static_assert(offsetof(VModernLockpickingMenuTumbler_AttemptSolve, ReturnValue) == 0x000000, "Member 'VModernLockpickingMenuTumbler_AttemptSolve::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.GetNextAnimationTime
// 0x0008 (0x0008 - 0x0000)
struct VModernLockpickingMenuTumbler_GetNextAnimationTime final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_GetNextAnimationTime) == 0x000004, "Wrong alignment on VModernLockpickingMenuTumbler_GetNextAnimationTime");
static_assert(sizeof(VModernLockpickingMenuTumbler_GetNextAnimationTime) == 0x000008, "Wrong size on VModernLockpickingMenuTumbler_GetNextAnimationTime");
static_assert(offsetof(VModernLockpickingMenuTumbler_GetNextAnimationTime, DeltaTime) == 0x000000, "Member 'VModernLockpickingMenuTumbler_GetNextAnimationTime::DeltaTime' has a wrong offset!");
static_assert(offsetof(VModernLockpickingMenuTumbler_GetNextAnimationTime, ReturnValue) == 0x000004, "Member 'VModernLockpickingMenuTumbler_GetNextAnimationTime::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.SetInitialMovement
// 0x0010 (0x0010 - 0x0000)
struct VModernLockpickingMenuTumbler_SetInitialMovement final
{
public:
	struct FModernLockpickMenuTumblerProperties   Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_SetInitialMovement) == 0x000004, "Wrong alignment on VModernLockpickingMenuTumbler_SetInitialMovement");
static_assert(sizeof(VModernLockpickingMenuTumbler_SetInitialMovement) == 0x000010, "Wrong size on VModernLockpickingMenuTumbler_SetInitialMovement");
static_assert(offsetof(VModernLockpickingMenuTumbler_SetInitialMovement, Value) == 0x000000, "Member 'VModernLockpickingMenuTumbler_SetInitialMovement::Value' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.SetIsSolved
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickingMenuTumbler_SetIsSolved final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_SetIsSolved) == 0x000001, "Wrong alignment on VModernLockpickingMenuTumbler_SetIsSolved");
static_assert(sizeof(VModernLockpickingMenuTumbler_SetIsSolved) == 0x000001, "Wrong size on VModernLockpickingMenuTumbler_SetIsSolved");
static_assert(offsetof(VModernLockpickingMenuTumbler_SetIsSolved, Value) == 0x000000, "Member 'VModernLockpickingMenuTumbler_SetIsSolved::Value' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.SetIsTumbling
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickingMenuTumbler_SetIsTumbling final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_SetIsTumbling) == 0x000001, "Wrong alignment on VModernLockpickingMenuTumbler_SetIsTumbling");
static_assert(sizeof(VModernLockpickingMenuTumbler_SetIsTumbling) == 0x000001, "Wrong size on VModernLockpickingMenuTumbler_SetIsTumbling");
static_assert(offsetof(VModernLockpickingMenuTumbler_SetIsTumbling, Value) == 0x000000, "Member 'VModernLockpickingMenuTumbler_SetIsTumbling::Value' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.UpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct VModernLockpickingMenuTumbler_UpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_UpdateAnimation) == 0x000004, "Wrong alignment on VModernLockpickingMenuTumbler_UpdateAnimation");
static_assert(sizeof(VModernLockpickingMenuTumbler_UpdateAnimation) == 0x000004, "Wrong size on VModernLockpickingMenuTumbler_UpdateAnimation");
static_assert(offsetof(VModernLockpickingMenuTumbler_UpdateAnimation, DeltaTime) == 0x000000, "Member 'VModernLockpickingMenuTumbler_UpdateAnimation::DeltaTime' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.GetInitialMovement
// 0x0010 (0x0010 - 0x0000)
struct VModernLockpickingMenuTumbler_GetInitialMovement final
{
public:
	struct FModernLockpickMenuTumblerProperties   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_GetInitialMovement) == 0x000004, "Wrong alignment on VModernLockpickingMenuTumbler_GetInitialMovement");
static_assert(sizeof(VModernLockpickingMenuTumbler_GetInitialMovement) == 0x000010, "Wrong size on VModernLockpickingMenuTumbler_GetInitialMovement");
static_assert(offsetof(VModernLockpickingMenuTumbler_GetInitialMovement, ReturnValue) == 0x000000, "Member 'VModernLockpickingMenuTumbler_GetInitialMovement::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.GetIsSolved
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickingMenuTumbler_GetIsSolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_GetIsSolved) == 0x000001, "Wrong alignment on VModernLockpickingMenuTumbler_GetIsSolved");
static_assert(sizeof(VModernLockpickingMenuTumbler_GetIsSolved) == 0x000001, "Wrong size on VModernLockpickingMenuTumbler_GetIsSolved");
static_assert(offsetof(VModernLockpickingMenuTumbler_GetIsSolved, ReturnValue) == 0x000000, "Member 'VModernLockpickingMenuTumbler_GetIsSolved::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickingMenuTumbler.GetIsTumbling
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickingMenuTumbler_GetIsTumbling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickingMenuTumbler_GetIsTumbling) == 0x000001, "Wrong alignment on VModernLockpickingMenuTumbler_GetIsTumbling");
static_assert(sizeof(VModernLockpickingMenuTumbler_GetIsTumbling) == 0x000001, "Wrong size on VModernLockpickingMenuTumbler_GetIsTumbling");
static_assert(offsetof(VModernLockpickingMenuTumbler_GetIsTumbling, ReturnValue) == 0x000000, "Member 'VModernLockpickingMenuTumbler_GetIsTumbling::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickMenu.GetTumblersToReset
// 0x0008 (0x0008 - 0x0000)
struct VModernLockpickMenu_GetTumblersToReset final
{
public:
	int32                                         SecuritySkillLevel;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenu_GetTumblersToReset) == 0x000004, "Wrong alignment on VModernLockpickMenu_GetTumblersToReset");
static_assert(sizeof(VModernLockpickMenu_GetTumblersToReset) == 0x000008, "Wrong size on VModernLockpickMenu_GetTumblersToReset");
static_assert(offsetof(VModernLockpickMenu_GetTumblersToReset, SecuritySkillLevel) == 0x000000, "Member 'VModernLockpickMenu_GetTumblersToReset::SecuritySkillLevel' has a wrong offset!");
static_assert(offsetof(VModernLockpickMenu_GetTumblersToReset, ReturnValue) == 0x000004, "Member 'VModernLockpickMenu_GetTumblersToReset::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickMenu.InitialiseTumblerMovement
// 0x0030 (0x0030 - 0x0000)
struct VModernLockpickMenu_InitialiseTumblerMovement final
{
public:
	int32                                         TumblerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyLockpickMenuTumblerDefaultProperties TumblerDefaultProperties;                     // 0x0004(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLegacyLockpickMenuProperties          MenuProperties;                                    // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenu_InitialiseTumblerMovement) == 0x000004, "Wrong alignment on VModernLockpickMenu_InitialiseTumblerMovement");
static_assert(sizeof(VModernLockpickMenu_InitialiseTumblerMovement) == 0x000030, "Wrong size on VModernLockpickMenu_InitialiseTumblerMovement");
static_assert(offsetof(VModernLockpickMenu_InitialiseTumblerMovement, TumblerIndex) == 0x000000, "Member 'VModernLockpickMenu_InitialiseTumblerMovement::TumblerIndex' has a wrong offset!");
static_assert(offsetof(VModernLockpickMenu_InitialiseTumblerMovement, TumblerDefaultProperties) == 0x000004, "Member 'VModernLockpickMenu_InitialiseTumblerMovement::TumblerDefaultProperties' has a wrong offset!");
static_assert(offsetof(VModernLockpickMenu_InitialiseTumblerMovement, MenuProperties) == 0x000020, "Member 'VModernLockpickMenu_InitialiseTumblerMovement::MenuProperties' has a wrong offset!");

// Function Altar.VModernLockpickMenu.OnTumberMovementInitialised
// 0x0014 (0x0014 - 0x0000)
struct VModernLockpickMenu_OnTumberMovementInitialised final
{
public:
	int32                                         TumblerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModernLockpickMenuTumblerProperties   TumbleProperties;                                  // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenu_OnTumberMovementInitialised) == 0x000004, "Wrong alignment on VModernLockpickMenu_OnTumberMovementInitialised");
static_assert(sizeof(VModernLockpickMenu_OnTumberMovementInitialised) == 0x000014, "Wrong size on VModernLockpickMenu_OnTumberMovementInitialised");
static_assert(offsetof(VModernLockpickMenu_OnTumberMovementInitialised, TumblerIndex) == 0x000000, "Member 'VModernLockpickMenu_OnTumberMovementInitialised::TumblerIndex' has a wrong offset!");
static_assert(offsetof(VModernLockpickMenu_OnTumberMovementInitialised, TumbleProperties) == 0x000004, "Member 'VModernLockpickMenu_OnTumberMovementInitialised::TumbleProperties' has a wrong offset!");

// Function Altar.VModernLockpickMenu.SetDifficultyCurve
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickMenu_SetDifficultyCurve final
{
public:
	ELegacyLockpickMenuDifficulty                 Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenu_SetDifficultyCurve) == 0x000001, "Wrong alignment on VModernLockpickMenu_SetDifficultyCurve");
static_assert(sizeof(VModernLockpickMenu_SetDifficultyCurve) == 0x000001, "Wrong size on VModernLockpickMenu_SetDifficultyCurve");
static_assert(offsetof(VModernLockpickMenu_SetDifficultyCurve, Difficulty) == 0x000000, "Member 'VModernLockpickMenu_SetDifficultyCurve::Difficulty' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.GetMovementActionFromMouseMovement
// 0x0080 (0x0080 - 0x0000)
struct VModernLockpickMenuPick_GetMovementActionFromMouseMovement final
{
public:
	struct FPointerEvent                          Input;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EModernLockpickMenuPickMovement               ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernLockpickMenuPick_GetMovementActionFromMouseMovement) == 0x000008, "Wrong alignment on VModernLockpickMenuPick_GetMovementActionFromMouseMovement");
static_assert(sizeof(VModernLockpickMenuPick_GetMovementActionFromMouseMovement) == 0x000080, "Wrong size on VModernLockpickMenuPick_GetMovementActionFromMouseMovement");
static_assert(offsetof(VModernLockpickMenuPick_GetMovementActionFromMouseMovement, Input) == 0x000000, "Member 'VModernLockpickMenuPick_GetMovementActionFromMouseMovement::Input' has a wrong offset!");
static_assert(offsetof(VModernLockpickMenuPick_GetMovementActionFromMouseMovement, ReturnValue) == 0x000078, "Member 'VModernLockpickMenuPick_GetMovementActionFromMouseMovement::ReturnValue' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.MovePick
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickMenuPick_MovePick final
{
public:
	EModernLockpickMenuPickMovement               Action;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_MovePick) == 0x000001, "Wrong alignment on VModernLockpickMenuPick_MovePick");
static_assert(sizeof(VModernLockpickMenuPick_MovePick) == 0x000001, "Wrong size on VModernLockpickMenuPick_MovePick");
static_assert(offsetof(VModernLockpickMenuPick_MovePick, Action) == 0x000000, "Member 'VModernLockpickMenuPick_MovePick::Action' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.OnActiveTumblerUpdated
// 0x0004 (0x0004 - 0x0000)
struct VModernLockpickMenuPick_OnActiveTumblerUpdated final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_OnActiveTumblerUpdated) == 0x000004, "Wrong alignment on VModernLockpickMenuPick_OnActiveTumblerUpdated");
static_assert(sizeof(VModernLockpickMenuPick_OnActiveTumblerUpdated) == 0x000004, "Wrong size on VModernLockpickMenuPick_OnActiveTumblerUpdated");
static_assert(offsetof(VModernLockpickMenuPick_OnActiveTumblerUpdated, Value) == 0x000000, "Member 'VModernLockpickMenuPick_OnActiveTumblerUpdated::Value' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.OnHandleTypeUpdated
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickMenuPick_OnHandleTypeUpdated final
{
public:
	EModernLockpickMenuHandleType                 Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_OnHandleTypeUpdated) == 0x000001, "Wrong alignment on VModernLockpickMenuPick_OnHandleTypeUpdated");
static_assert(sizeof(VModernLockpickMenuPick_OnHandleTypeUpdated) == 0x000001, "Wrong size on VModernLockpickMenuPick_OnHandleTypeUpdated");
static_assert(offsetof(VModernLockpickMenuPick_OnHandleTypeUpdated, Value) == 0x000000, "Member 'VModernLockpickMenuPick_OnHandleTypeUpdated::Value' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.OnIsBrokenUpdated
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickMenuPick_OnIsBrokenUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_OnIsBrokenUpdated) == 0x000001, "Wrong alignment on VModernLockpickMenuPick_OnIsBrokenUpdated");
static_assert(sizeof(VModernLockpickMenuPick_OnIsBrokenUpdated) == 0x000001, "Wrong size on VModernLockpickMenuPick_OnIsBrokenUpdated");
static_assert(offsetof(VModernLockpickMenuPick_OnIsBrokenUpdated, Value) == 0x000000, "Member 'VModernLockpickMenuPick_OnIsBrokenUpdated::Value' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.SetActiveTumbler
// 0x0004 (0x0004 - 0x0000)
struct VModernLockpickMenuPick_SetActiveTumbler final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_SetActiveTumbler) == 0x000004, "Wrong alignment on VModernLockpickMenuPick_SetActiveTumbler");
static_assert(sizeof(VModernLockpickMenuPick_SetActiveTumbler) == 0x000004, "Wrong size on VModernLockpickMenuPick_SetActiveTumbler");
static_assert(offsetof(VModernLockpickMenuPick_SetActiveTumbler, Value) == 0x000000, "Member 'VModernLockpickMenuPick_SetActiveTumbler::Value' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.SetCycledMousePosition
// 0x0078 (0x0078 - 0x0000)
struct VModernLockpickMenuPick_SetCycledMousePosition final
{
public:
	struct FPointerEvent                          Input;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_SetCycledMousePosition) == 0x000008, "Wrong alignment on VModernLockpickMenuPick_SetCycledMousePosition");
static_assert(sizeof(VModernLockpickMenuPick_SetCycledMousePosition) == 0x000078, "Wrong size on VModernLockpickMenuPick_SetCycledMousePosition");
static_assert(offsetof(VModernLockpickMenuPick_SetCycledMousePosition, Input) == 0x000000, "Member 'VModernLockpickMenuPick_SetCycledMousePosition::Input' has a wrong offset!");

// Function Altar.VModernLockpickMenuPick.CanPickMove
// 0x0001 (0x0001 - 0x0000)
struct VModernLockpickMenuPick_CanPickMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernLockpickMenuPick_CanPickMove) == 0x000001, "Wrong alignment on VModernLockpickMenuPick_CanPickMove");
static_assert(sizeof(VModernLockpickMenuPick_CanPickMove) == 0x000001, "Wrong size on VModernLockpickMenuPick_CanPickMove");
static_assert(offsetof(VModernLockpickMenuPick_CanPickMove, ReturnValue) == 0x000000, "Member 'VModernLockpickMenuPick_CanPickMove::ReturnValue' has a wrong offset!");

// Function Altar.VModernMagicFilter.ActivateFilter
// 0x0008 (0x0008 - 0x0000)
struct VModernMagicFilter_ActivateFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMagicFilter_ActivateFilter) == 0x000008, "Wrong alignment on VModernMagicFilter_ActivateFilter");
static_assert(sizeof(VModernMagicFilter_ActivateFilter) == 0x000008, "Wrong size on VModernMagicFilter_ActivateFilter");
static_assert(offsetof(VModernMagicFilter_ActivateFilter, Activator) == 0x000000, "Member 'VModernMagicFilter_ActivateFilter::Activator' has a wrong offset!");

// Function Altar.VModernMagicFilter.OnFilterIconCreated
// 0x09B0 (0x09B0 - 0x0000)
struct VModernMagicFilter_OnFilterIconCreated final
{
public:
	class UCommonUserWidget*                      NewFilter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModernMagicFilterTableRow             FilterDesign;                                      // 0x0010(0x09A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMagicFilter_OnFilterIconCreated) == 0x000010, "Wrong alignment on VModernMagicFilter_OnFilterIconCreated");
static_assert(sizeof(VModernMagicFilter_OnFilterIconCreated) == 0x0009B0, "Wrong size on VModernMagicFilter_OnFilterIconCreated");
static_assert(offsetof(VModernMagicFilter_OnFilterIconCreated, NewFilter) == 0x000000, "Member 'VModernMagicFilter_OnFilterIconCreated::NewFilter' has a wrong offset!");
static_assert(offsetof(VModernMagicFilter_OnFilterIconCreated, FilterDesign) == 0x000010, "Member 'VModernMagicFilter_OnFilterIconCreated::FilterDesign' has a wrong offset!");

// Function Altar.VModernMagicFilter.RequestUpdateFilterWidget
// 0x0010 (0x0010 - 0x0000)
struct VModernMagicFilter_RequestUpdateFilterWidget final
{
public:
	class UCommonUserWidget*                      Filter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisplayed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernMagicFilter_RequestUpdateFilterWidget) == 0x000008, "Wrong alignment on VModernMagicFilter_RequestUpdateFilterWidget");
static_assert(sizeof(VModernMagicFilter_RequestUpdateFilterWidget) == 0x000010, "Wrong size on VModernMagicFilter_RequestUpdateFilterWidget");
static_assert(offsetof(VModernMagicFilter_RequestUpdateFilterWidget, Filter) == 0x000000, "Member 'VModernMagicFilter_RequestUpdateFilterWidget::Filter' has a wrong offset!");
static_assert(offsetof(VModernMagicFilter_RequestUpdateFilterWidget, bIsDisplayed) == 0x000008, "Member 'VModernMagicFilter_RequestUpdateFilterWidget::bIsDisplayed' has a wrong offset!");
static_assert(offsetof(VModernMagicFilter_RequestUpdateFilterWidget, bIsEnable) == 0x000009, "Member 'VModernMagicFilter_RequestUpdateFilterWidget::bIsEnable' has a wrong offset!");

// Function Altar.VModernMagicFilter.SetActiveFilter
// 0x0001 (0x0001 - 0x0000)
struct VModernMagicFilter_SetActiveFilter final
{
public:
	ELegacyMagicMenuSortType                      ActiveFilterEnum;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMagicFilter_SetActiveFilter) == 0x000001, "Wrong alignment on VModernMagicFilter_SetActiveFilter");
static_assert(sizeof(VModernMagicFilter_SetActiveFilter) == 0x000001, "Wrong size on VModernMagicFilter_SetActiveFilter");
static_assert(offsetof(VModernMagicFilter_SetActiveFilter, ActiveFilterEnum) == 0x000000, "Member 'VModernMagicFilter_SetActiveFilter::ActiveFilterEnum' has a wrong offset!");

// Function Altar.VModernMagicFilter.SetEnabledFilters
// 0x0010 (0x0010 - 0x0000)
struct VModernMagicFilter_SetEnabledFilters final
{
public:
	TArray<ELegacyMagicMenuSortType>              EnabledFilterEnums;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernMagicFilter_SetEnabledFilters) == 0x000008, "Wrong alignment on VModernMagicFilter_SetEnabledFilters");
static_assert(sizeof(VModernMagicFilter_SetEnabledFilters) == 0x000010, "Wrong size on VModernMagicFilter_SetEnabledFilters");
static_assert(offsetof(VModernMagicFilter_SetEnabledFilters, EnabledFilterEnums) == 0x000000, "Member 'VModernMagicFilter_SetEnabledFilters::EnabledFilterEnums' has a wrong offset!");

// Function Altar.VModernOnboardingFunctionLibrary.IsEULAAccepted
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingFunctionLibrary_IsEULAAccepted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingFunctionLibrary_IsEULAAccepted) == 0x000001, "Wrong alignment on VModernOnboardingFunctionLibrary_IsEULAAccepted");
static_assert(sizeof(VModernOnboardingFunctionLibrary_IsEULAAccepted) == 0x000001, "Wrong size on VModernOnboardingFunctionLibrary_IsEULAAccepted");
static_assert(offsetof(VModernOnboardingFunctionLibrary_IsEULAAccepted, ReturnValue) == 0x000000, "Member 'VModernOnboardingFunctionLibrary_IsEULAAccepted::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingFunctionLibrary.IsOnboardingSettingsDone
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone) == 0x000001, "Wrong alignment on VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone");
static_assert(sizeof(VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone) == 0x000001, "Wrong size on VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone");
static_assert(offsetof(VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone, ReturnValue) == 0x000000, "Member 'VModernOnboardingFunctionLibrary_IsOnboardingSettingsDone::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingFunctionLibrary.IsOnPC
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingFunctionLibrary_IsOnPC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingFunctionLibrary_IsOnPC) == 0x000001, "Wrong alignment on VModernOnboardingFunctionLibrary_IsOnPC");
static_assert(sizeof(VModernOnboardingFunctionLibrary_IsOnPC) == 0x000001, "Wrong size on VModernOnboardingFunctionLibrary_IsOnPC");
static_assert(offsetof(VModernOnboardingFunctionLibrary_IsOnPC, ReturnValue) == 0x000000, "Member 'VModernOnboardingFunctionLibrary_IsOnPC::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingPage.IsOnPC
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingPage_IsOnPC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingPage_IsOnPC) == 0x000001, "Wrong alignment on VModernOnboardingPage_IsOnPC");
static_assert(sizeof(VModernOnboardingPage_IsOnPC) == 0x000001, "Wrong size on VModernOnboardingPage_IsOnPC");
static_assert(offsetof(VModernOnboardingPage_IsOnPC, ReturnValue) == 0x000000, "Member 'VModernOnboardingPage_IsOnPC::ReturnValue' has a wrong offset!");

// Function Altar.VModernOnboardingPage.IsOnPlaystation
// 0x0001 (0x0001 - 0x0000)
struct VModernOnboardingPage_IsOnPlaystation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernOnboardingPage_IsOnPlaystation) == 0x000001, "Wrong alignment on VModernOnboardingPage_IsOnPlaystation");
static_assert(sizeof(VModernOnboardingPage_IsOnPlaystation) == 0x000001, "Wrong size on VModernOnboardingPage_IsOnPlaystation");
static_assert(offsetof(VModernOnboardingPage_IsOnPlaystation, ReturnValue) == 0x000000, "Member 'VModernOnboardingPage_IsOnPlaystation::ReturnValue' has a wrong offset!");

// Function Altar.VModernQuickKeysMenu.ComputeKeyIDOnMouseMove
// 0x00B8 (0x00B8 - 0x0000)
struct VModernQuickKeysMenu_ComputeKeyIDOnMouseMove final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernQuickKeysMenu_ComputeKeyIDOnMouseMove) == 0x000008, "Wrong alignment on VModernQuickKeysMenu_ComputeKeyIDOnMouseMove");
static_assert(sizeof(VModernQuickKeysMenu_ComputeKeyIDOnMouseMove) == 0x0000B8, "Wrong size on VModernQuickKeysMenu_ComputeKeyIDOnMouseMove");
static_assert(offsetof(VModernQuickKeysMenu_ComputeKeyIDOnMouseMove, InGeometry) == 0x000000, "Member 'VModernQuickKeysMenu_ComputeKeyIDOnMouseMove::InGeometry' has a wrong offset!");
static_assert(offsetof(VModernQuickKeysMenu_ComputeKeyIDOnMouseMove, InMouseEvent) == 0x000038, "Member 'VModernQuickKeysMenu_ComputeKeyIDOnMouseMove::InMouseEvent' has a wrong offset!");
static_assert(offsetof(VModernQuickKeysMenu_ComputeKeyIDOnMouseMove, ReturnValue) == 0x0000B0, "Member 'VModernQuickKeysMenu_ComputeKeyIDOnMouseMove::ReturnValue' has a wrong offset!");

// Function Altar.VModernQuickKeysMenu.ComputeKeyIDWithCenterToCursor
// 0x0018 (0x0018 - 0x0000)
struct VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor final
{
public:
	struct FVector2D                              CenterToCursor;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor) == 0x000008, "Wrong alignment on VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor");
static_assert(sizeof(VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor) == 0x000018, "Wrong size on VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor");
static_assert(offsetof(VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor, CenterToCursor) == 0x000000, "Member 'VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor::CenterToCursor' has a wrong offset!");
static_assert(offsetof(VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor, ReturnValue) == 0x000010, "Member 'VModernQuickKeysMenu_ComputeKeyIDWithCenterToCursor::ReturnValue' has a wrong offset!");

// Function Altar.VModernQuickKeysMenu.SetQuickKeyByIndex
// 0x0010 (0x0010 - 0x0000)
struct VModernQuickKeysMenu_SetQuickKeyByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernQuickKeysMenu_SetQuickKeyByIndex) == 0x000008, "Wrong alignment on VModernQuickKeysMenu_SetQuickKeyByIndex");
static_assert(sizeof(VModernQuickKeysMenu_SetQuickKeyByIndex) == 0x000010, "Wrong size on VModernQuickKeysMenu_SetQuickKeyByIndex");
static_assert(offsetof(VModernQuickKeysMenu_SetQuickKeyByIndex, Index_0) == 0x000000, "Member 'VModernQuickKeysMenu_SetQuickKeyByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(VModernQuickKeysMenu_SetQuickKeyByIndex, Texture) == 0x000008, "Member 'VModernQuickKeysMenu_SetQuickKeyByIndex::Texture' has a wrong offset!");

// Function Altar.VModernQuickKeysMenu.SetVisibilityByIndex
// 0x0008 (0x0008 - 0x0000)
struct VModernQuickKeysMenu_SetVisibilityByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernQuickKeysMenu_SetVisibilityByIndex) == 0x000004, "Wrong alignment on VModernQuickKeysMenu_SetVisibilityByIndex");
static_assert(sizeof(VModernQuickKeysMenu_SetVisibilityByIndex) == 0x000008, "Wrong size on VModernQuickKeysMenu_SetVisibilityByIndex");
static_assert(offsetof(VModernQuickKeysMenu_SetVisibilityByIndex, Index_0) == 0x000000, "Member 'VModernQuickKeysMenu_SetVisibilityByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(VModernQuickKeysMenu_SetVisibilityByIndex, bVisibility) == 0x000004, "Member 'VModernQuickKeysMenu_SetVisibilityByIndex::bVisibility' has a wrong offset!");

// Function Altar.VModernQuickKeysMenu.UpdateIcons
// 0x0010 (0x0010 - 0x0000)
struct VModernQuickKeysMenu_UpdateIcons final
{
public:
	TArray<class UTexture2D*>                     NewArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernQuickKeysMenu_UpdateIcons) == 0x000008, "Wrong alignment on VModernQuickKeysMenu_UpdateIcons");
static_assert(sizeof(VModernQuickKeysMenu_UpdateIcons) == 0x000010, "Wrong size on VModernQuickKeysMenu_UpdateIcons");
static_assert(offsetof(VModernQuickKeysMenu_UpdateIcons, NewArray) == 0x000000, "Member 'VModernQuickKeysMenu_UpdateIcons::NewArray' has a wrong offset!");

// Function Altar.VModernScrollBox.OnScrollboxScrollbarChangedInternal
// 0x0010 (0x0010 - 0x0000)
struct VModernScrollBox_OnScrollboxScrollbarChangedInternal final
{
public:
	float                                         MinScrollbarValue;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScrollbarValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScrollbarValue;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThumbFractionSize;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernScrollBox_OnScrollboxScrollbarChangedInternal) == 0x000004, "Wrong alignment on VModernScrollBox_OnScrollboxScrollbarChangedInternal");
static_assert(sizeof(VModernScrollBox_OnScrollboxScrollbarChangedInternal) == 0x000010, "Wrong size on VModernScrollBox_OnScrollboxScrollbarChangedInternal");
static_assert(offsetof(VModernScrollBox_OnScrollboxScrollbarChangedInternal, MinScrollbarValue) == 0x000000, "Member 'VModernScrollBox_OnScrollboxScrollbarChangedInternal::MinScrollbarValue' has a wrong offset!");
static_assert(offsetof(VModernScrollBox_OnScrollboxScrollbarChangedInternal, MaxScrollbarValue) == 0x000004, "Member 'VModernScrollBox_OnScrollboxScrollbarChangedInternal::MaxScrollbarValue' has a wrong offset!");
static_assert(offsetof(VModernScrollBox_OnScrollboxScrollbarChangedInternal, CurrentScrollbarValue) == 0x000008, "Member 'VModernScrollBox_OnScrollboxScrollbarChangedInternal::CurrentScrollbarValue' has a wrong offset!");
static_assert(offsetof(VModernScrollBox_OnScrollboxScrollbarChangedInternal, ThumbFractionSize) == 0x00000C, "Member 'VModernScrollBox_OnScrollboxScrollbarChangedInternal::ThumbFractionSize' has a wrong offset!");

// Function Altar.VModernSettingCategoryWidget.GetSettingCategoryRow
// 0x0028 (0x0028 - 0x0000)
struct VModernSettingCategoryWidget_GetSettingCategoryRow final
{
public:
	struct FModernSettingCategoryTableRow         ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingCategoryWidget_GetSettingCategoryRow) == 0x000008, "Wrong alignment on VModernSettingCategoryWidget_GetSettingCategoryRow");
static_assert(sizeof(VModernSettingCategoryWidget_GetSettingCategoryRow) == 0x000028, "Wrong size on VModernSettingCategoryWidget_GetSettingCategoryRow");
static_assert(offsetof(VModernSettingCategoryWidget_GetSettingCategoryRow, ReturnValue) == 0x000000, "Member 'VModernSettingCategoryWidget_GetSettingCategoryRow::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingCategoryWidget.OnSettingCategoryChanged
// 0x0028 (0x0028 - 0x0000)
struct VModernSettingCategoryWidget_OnSettingCategoryChanged final
{
public:
	struct FModernSettingCategoryTableRow         NewSettingCategoryRow;                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingCategoryWidget_OnSettingCategoryChanged) == 0x000008, "Wrong alignment on VModernSettingCategoryWidget_OnSettingCategoryChanged");
static_assert(sizeof(VModernSettingCategoryWidget_OnSettingCategoryChanged) == 0x000028, "Wrong size on VModernSettingCategoryWidget_OnSettingCategoryChanged");
static_assert(offsetof(VModernSettingCategoryWidget_OnSettingCategoryChanged, NewSettingCategoryRow) == 0x000000, "Member 'VModernSettingCategoryWidget_OnSettingCategoryChanged::NewSettingCategoryRow' has a wrong offset!");

// Function Altar.VModernSettingCategoryWidget.SetSettingCategoryRow
// 0x0028 (0x0028 - 0x0000)
struct VModernSettingCategoryWidget_SetSettingCategoryRow final
{
public:
	struct FModernSettingCategoryTableRow         NewSettingCategoryRow;                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingCategoryWidget_SetSettingCategoryRow) == 0x000008, "Wrong alignment on VModernSettingCategoryWidget_SetSettingCategoryRow");
static_assert(sizeof(VModernSettingCategoryWidget_SetSettingCategoryRow) == 0x000028, "Wrong size on VModernSettingCategoryWidget_SetSettingCategoryRow");
static_assert(offsetof(VModernSettingCategoryWidget_SetSettingCategoryRow, NewSettingCategoryRow) == 0x000000, "Member 'VModernSettingCategoryWidget_SetSettingCategoryRow::NewSettingCategoryRow' has a wrong offset!");

// Function Altar.VModernSettingComboBoxItem.SetOption
// 0x0018 (0x0018 - 0x0000)
struct VModernSettingComboBoxItem_SetOption final
{
public:
	class FText                                   NewOption;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingComboBoxItem_SetOption) == 0x000008, "Wrong alignment on VModernSettingComboBoxItem_SetOption");
static_assert(sizeof(VModernSettingComboBoxItem_SetOption) == 0x000018, "Wrong size on VModernSettingComboBoxItem_SetOption");
static_assert(offsetof(VModernSettingComboBoxItem_SetOption, NewOption) == 0x000000, "Member 'VModernSettingComboBoxItem_SetOption::NewOption' has a wrong offset!");

// Function Altar.VModernSettingComboBoxItem.GetOption
// 0x0018 (0x0018 - 0x0000)
struct VModernSettingComboBoxItem_GetOption final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingComboBoxItem_GetOption) == 0x000008, "Wrong alignment on VModernSettingComboBoxItem_GetOption");
static_assert(sizeof(VModernSettingComboBoxItem_GetOption) == 0x000018, "Wrong size on VModernSettingComboBoxItem_GetOption");
static_assert(offsetof(VModernSettingComboBoxItem_GetOption, ReturnValue) == 0x000000, "Member 'VModernSettingComboBoxItem_GetOption::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.CreateCommand
// 0x0030 (0x0030 - 0x0000)
struct VModernSettingsFunctionLibrary_CreateCommand final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingsFunctionLibrary_CreateCommand) == 0x000008, "Wrong alignment on VModernSettingsFunctionLibrary_CreateCommand");
static_assert(sizeof(VModernSettingsFunctionLibrary_CreateCommand) == 0x000030, "Wrong size on VModernSettingsFunctionLibrary_CreateCommand");
static_assert(offsetof(VModernSettingsFunctionLibrary_CreateCommand, CommandName) == 0x000000, "Member 'VModernSettingsFunctionLibrary_CreateCommand::CommandName' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_CreateCommand, CommandValue) == 0x000010, "Member 'VModernSettingsFunctionLibrary_CreateCommand::CommandValue' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_CreateCommand, ReturnValue) == 0x000020, "Member 'VModernSettingsFunctionLibrary_CreateCommand::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.FixBooleen
// 0x0020 (0x0020 - 0x0000)
struct VModernSettingsFunctionLibrary_FixBooleen final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingsFunctionLibrary_FixBooleen) == 0x000008, "Wrong alignment on VModernSettingsFunctionLibrary_FixBooleen");
static_assert(sizeof(VModernSettingsFunctionLibrary_FixBooleen) == 0x000020, "Wrong size on VModernSettingsFunctionLibrary_FixBooleen");
static_assert(offsetof(VModernSettingsFunctionLibrary_FixBooleen, Input) == 0x000000, "Member 'VModernSettingsFunctionLibrary_FixBooleen::Input' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_FixBooleen, ReturnValue) == 0x000010, "Member 'VModernSettingsFunctionLibrary_FixBooleen::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.GetCommandFloatValue
// 0x0018 (0x0018 - 0x0000)
struct VModernSettingsFunctionLibrary_GetCommandFloatValue final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernSettingsFunctionLibrary_GetCommandFloatValue) == 0x000008, "Wrong alignment on VModernSettingsFunctionLibrary_GetCommandFloatValue");
static_assert(sizeof(VModernSettingsFunctionLibrary_GetCommandFloatValue) == 0x000018, "Wrong size on VModernSettingsFunctionLibrary_GetCommandFloatValue");
static_assert(offsetof(VModernSettingsFunctionLibrary_GetCommandFloatValue, CommandName) == 0x000000, "Member 'VModernSettingsFunctionLibrary_GetCommandFloatValue::CommandName' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_GetCommandFloatValue, ReturnValue) == 0x000010, "Member 'VModernSettingsFunctionLibrary_GetCommandFloatValue::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.GetCommandIntegerValue
// 0x0018 (0x0018 - 0x0000)
struct VModernSettingsFunctionLibrary_GetCommandIntegerValue final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernSettingsFunctionLibrary_GetCommandIntegerValue) == 0x000008, "Wrong alignment on VModernSettingsFunctionLibrary_GetCommandIntegerValue");
static_assert(sizeof(VModernSettingsFunctionLibrary_GetCommandIntegerValue) == 0x000018, "Wrong size on VModernSettingsFunctionLibrary_GetCommandIntegerValue");
static_assert(offsetof(VModernSettingsFunctionLibrary_GetCommandIntegerValue, CommandName) == 0x000000, "Member 'VModernSettingsFunctionLibrary_GetCommandIntegerValue::CommandName' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_GetCommandIntegerValue, ReturnValue) == 0x000010, "Member 'VModernSettingsFunctionLibrary_GetCommandIntegerValue::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.GetCommandValue
// 0x0020 (0x0020 - 0x0000)
struct VModernSettingsFunctionLibrary_GetCommandValue final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingsFunctionLibrary_GetCommandValue) == 0x000008, "Wrong alignment on VModernSettingsFunctionLibrary_GetCommandValue");
static_assert(sizeof(VModernSettingsFunctionLibrary_GetCommandValue) == 0x000020, "Wrong size on VModernSettingsFunctionLibrary_GetCommandValue");
static_assert(offsetof(VModernSettingsFunctionLibrary_GetCommandValue, CommandName) == 0x000000, "Member 'VModernSettingsFunctionLibrary_GetCommandValue::CommandName' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_GetCommandValue, ReturnValue) == 0x000010, "Member 'VModernSettingsFunctionLibrary_GetCommandValue::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.IsPlatformValidForSetting
// 0x0008 (0x0008 - 0x0000)
struct VModernSettingsFunctionLibrary_IsPlatformValidForSetting final
{
public:
	int32                                         ModernCategoryPlatormFlag;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernSettingsFunctionLibrary_IsPlatformValidForSetting) == 0x000004, "Wrong alignment on VModernSettingsFunctionLibrary_IsPlatformValidForSetting");
static_assert(sizeof(VModernSettingsFunctionLibrary_IsPlatformValidForSetting) == 0x000008, "Wrong size on VModernSettingsFunctionLibrary_IsPlatformValidForSetting");
static_assert(offsetof(VModernSettingsFunctionLibrary_IsPlatformValidForSetting, ModernCategoryPlatormFlag) == 0x000000, "Member 'VModernSettingsFunctionLibrary_IsPlatformValidForSetting::ModernCategoryPlatormFlag' has a wrong offset!");
static_assert(offsetof(VModernSettingsFunctionLibrary_IsPlatformValidForSetting, ReturnValue) == 0x000004, "Member 'VModernSettingsFunctionLibrary_IsPlatformValidForSetting::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.IsRunningOnSteam
// 0x0001 (0x0001 - 0x0000)
struct VModernSettingsFunctionLibrary_IsRunningOnSteam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingsFunctionLibrary_IsRunningOnSteam) == 0x000001, "Wrong alignment on VModernSettingsFunctionLibrary_IsRunningOnSteam");
static_assert(sizeof(VModernSettingsFunctionLibrary_IsRunningOnSteam) == 0x000001, "Wrong size on VModernSettingsFunctionLibrary_IsRunningOnSteam");
static_assert(offsetof(VModernSettingsFunctionLibrary_IsRunningOnSteam, ReturnValue) == 0x000000, "Member 'VModernSettingsFunctionLibrary_IsRunningOnSteam::ReturnValue' has a wrong offset!");

// Function Altar.VModernSettingsFunctionLibrary.IsRunningOnSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct VModernSettingsFunctionLibrary_IsRunningOnSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModernSettingsFunctionLibrary_IsRunningOnSteamDeck) == 0x000001, "Wrong alignment on VModernSettingsFunctionLibrary_IsRunningOnSteamDeck");
static_assert(sizeof(VModernSettingsFunctionLibrary_IsRunningOnSteamDeck) == 0x000001, "Wrong size on VModernSettingsFunctionLibrary_IsRunningOnSteamDeck");
static_assert(offsetof(VModernSettingsFunctionLibrary_IsRunningOnSteamDeck, ReturnValue) == 0x000000, "Member 'VModernSettingsFunctionLibrary_IsRunningOnSteamDeck::ReturnValue' has a wrong offset!");

// Function Altar.VModern_CharacCreationGenericSettingInterface.GetRow
// 0x0108 (0x0108 - 0x0000)
struct VModern_CharacCreationGenericSettingInterface_GetRow final
{
public:
	struct FLegacyRaceSexMenuTableRow             ReturnValue;                                       // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationGenericSettingInterface_GetRow) == 0x000008, "Wrong alignment on VModern_CharacCreationGenericSettingInterface_GetRow");
static_assert(sizeof(VModern_CharacCreationGenericSettingInterface_GetRow) == 0x000108, "Wrong size on VModern_CharacCreationGenericSettingInterface_GetRow");
static_assert(offsetof(VModern_CharacCreationGenericSettingInterface_GetRow, ReturnValue) == 0x000000, "Member 'VModern_CharacCreationGenericSettingInterface_GetRow::ReturnValue' has a wrong offset!");

// Function Altar.VModern_CharacCreationNavigableRaceScrollbar.ScrollBody
// 0x0008 (0x0008 - 0x0000)
struct VModern_CharacCreationNavigableRaceScrollbar_ScrollBody final
{
public:
	float                                         ScrollDelta;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerTime;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_CharacCreationNavigableRaceScrollbar_ScrollBody) == 0x000004, "Wrong alignment on VModern_CharacCreationNavigableRaceScrollbar_ScrollBody");
static_assert(sizeof(VModern_CharacCreationNavigableRaceScrollbar_ScrollBody) == 0x000008, "Wrong size on VModern_CharacCreationNavigableRaceScrollbar_ScrollBody");
static_assert(offsetof(VModern_CharacCreationNavigableRaceScrollbar_ScrollBody, ScrollDelta) == 0x000000, "Member 'VModern_CharacCreationNavigableRaceScrollbar_ScrollBody::ScrollDelta' has a wrong offset!");
static_assert(offsetof(VModern_CharacCreationNavigableRaceScrollbar_ScrollBody, TriggerTime) == 0x000004, "Member 'VModern_CharacCreationNavigableRaceScrollbar_ScrollBody::TriggerTime' has a wrong offset!");

// Function Altar.VModern_ColorPickerItem.SetColorOption
// 0x0004 (0x0004 - 0x0000)
struct VModern_ColorPickerItem_SetColorOption final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_ColorPickerItem_SetColorOption) == 0x000004, "Wrong alignment on VModern_ColorPickerItem_SetColorOption");
static_assert(sizeof(VModern_ColorPickerItem_SetColorOption) == 0x000004, "Wrong size on VModern_ColorPickerItem_SetColorOption");
static_assert(offsetof(VModern_ColorPickerItem_SetColorOption, Value) == 0x000000, "Member 'VModern_ColorPickerItem_SetColorOption::Value' has a wrong offset!");

// Function Altar.VModern_ColorPickerItem.SetIsDefaultColor
// 0x0001 (0x0001 - 0x0000)
struct VModern_ColorPickerItem_SetIsDefaultColor final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_ColorPickerItem_SetIsDefaultColor) == 0x000001, "Wrong alignment on VModern_ColorPickerItem_SetIsDefaultColor");
static_assert(sizeof(VModern_ColorPickerItem_SetIsDefaultColor) == 0x000001, "Wrong size on VModern_ColorPickerItem_SetIsDefaultColor");
static_assert(offsetof(VModern_ColorPickerItem_SetIsDefaultColor, Value) == 0x000000, "Member 'VModern_ColorPickerItem_SetIsDefaultColor::Value' has a wrong offset!");

// Function Altar.VModern_ColorPickerItem.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModern_ColorPickerItem_SetIsSelected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_ColorPickerItem_SetIsSelected) == 0x000001, "Wrong alignment on VModern_ColorPickerItem_SetIsSelected");
static_assert(sizeof(VModern_ColorPickerItem_SetIsSelected) == 0x000001, "Wrong size on VModern_ColorPickerItem_SetIsSelected");
static_assert(offsetof(VModern_ColorPickerItem_SetIsSelected, Value) == 0x000000, "Member 'VModern_ColorPickerItem_SetIsSelected::Value' has a wrong offset!");

// Function Altar.VModern_ColorPickerItem.GetColorOption
// 0x0004 (0x0004 - 0x0000)
struct VModern_ColorPickerItem_GetColorOption final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_ColorPickerItem_GetColorOption) == 0x000004, "Wrong alignment on VModern_ColorPickerItem_GetColorOption");
static_assert(sizeof(VModern_ColorPickerItem_GetColorOption) == 0x000004, "Wrong size on VModern_ColorPickerItem_GetColorOption");
static_assert(offsetof(VModern_ColorPickerItem_GetColorOption, ReturnValue) == 0x000000, "Member 'VModern_ColorPickerItem_GetColorOption::ReturnValue' has a wrong offset!");

// Function Altar.VModern_ColorPickerItem.IsDefaultColor
// 0x0001 (0x0001 - 0x0000)
struct VModern_ColorPickerItem_IsDefaultColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_ColorPickerItem_IsDefaultColor) == 0x000001, "Wrong alignment on VModern_ColorPickerItem_IsDefaultColor");
static_assert(sizeof(VModern_ColorPickerItem_IsDefaultColor) == 0x000001, "Wrong size on VModern_ColorPickerItem_IsDefaultColor");
static_assert(offsetof(VModern_ColorPickerItem_IsDefaultColor, ReturnValue) == 0x000000, "Member 'VModern_ColorPickerItem_IsDefaultColor::ReturnValue' has a wrong offset!");

// Function Altar.VModern_ColorPickerItem.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModern_ColorPickerItem_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_ColorPickerItem_IsSelected) == 0x000001, "Wrong alignment on VModern_ColorPickerItem_IsSelected");
static_assert(sizeof(VModern_ColorPickerItem_IsSelected) == 0x000001, "Wrong size on VModern_ColorPickerItem_IsSelected");
static_assert(offsetof(VModern_ColorPickerItem_IsSelected, ReturnValue) == 0x000000, "Member 'VModern_ColorPickerItem_IsSelected::ReturnValue' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconProperties
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconProperties final
{
public:
	class USizeBox*                               SizeBox;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconProperties) == 0x000008, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconProperties");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconProperties) == 0x000008, "Wrong size on VModern_MapIconCommonUserWidget_SetIconProperties");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconProperties, SizeBox) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconProperties::SizeBox' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconSize
// 0x0004 (0x0004 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconSize final
{
public:
	float                                         IconSize;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconSize) == 0x000004, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconSize");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconSize) == 0x000004, "Wrong size on VModern_MapIconCommonUserWidget_SetIconSize");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconSize, IconSize) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconSize::IconSize' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconSizeGivenZoomFactor
// 0x0004 (0x0004 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor final
{
public:
	float                                         ZoomFactor;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor) == 0x000004, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor) == 0x000004, "Wrong size on VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor, ZoomFactor) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomFactor::ZoomFactor' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconSizeGivenZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel final
{
public:
	int32                                         ZoomLevel;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel) == 0x000004, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel) == 0x000004, "Wrong size on VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel, ZoomLevel) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconSizeGivenZoomLevel::ZoomLevel' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconSizeSmoothlyGivenZoomLevel
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel final
{
public:
	int32                                         ZoomLevel;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconSizeAlpha;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel) == 0x000004, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel) == 0x000008, "Wrong size on VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel, ZoomLevel) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel::ZoomLevel' has a wrong offset!");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel, IconSizeAlpha) == 0x000004, "Member 'VModern_MapIconCommonUserWidget_SetIconSizeSmoothlyGivenZoomLevel::IconSizeAlpha' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconStartingSizeAccordingToMapType
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType final
{
public:
	bool                                          bIsWorldMap;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType) == 0x000001, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType) == 0x000001, "Wrong size on VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType, bIsWorldMap) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconStartingSizeAccordingToMapType::bIsWorldMap' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconStartingSizeOnMapSetup
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup final
{
public:
	bool                                          bIsWorldMap;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup) == 0x000001, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup) == 0x000001, "Wrong size on VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup, bIsWorldMap) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSetup::bIsWorldMap' has a wrong offset!");

// Function Altar.VModern_MapIconCommonUserWidget.SetIconStartingSizeOnMapSwitch
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch final
{
public:
	bool                                          bIsWorldMap;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch) == 0x000001, "Wrong alignment on VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch");
static_assert(sizeof(VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch) == 0x000001, "Wrong size on VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch");
static_assert(offsetof(VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch, bIsWorldMap) == 0x000000, "Member 'VModern_MapIconCommonUserWidget_SetIconStartingSizeOnMapSwitch::bIsWorldMap' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.ActivateControlFilter
// 0x0010 (0x0010 - 0x0000)
struct VModern_MapIconFilter_ActivateControlFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAll;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_MapIconFilter_ActivateControlFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_ActivateControlFilter");
static_assert(sizeof(VModern_MapIconFilter_ActivateControlFilter) == 0x000010, "Wrong size on VModern_MapIconFilter_ActivateControlFilter");
static_assert(offsetof(VModern_MapIconFilter_ActivateControlFilter, Activator) == 0x000000, "Member 'VModern_MapIconFilter_ActivateControlFilter::Activator' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_ActivateControlFilter, bIsAll) == 0x000008, "Member 'VModern_MapIconFilter_ActivateControlFilter::bIsAll' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.ActivateControlFilterFromEnum
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconFilter_ActivateControlFilterFromEnum final
{
public:
	ELegacyMapMenuIcon                            ActivatorEnum;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_ActivateControlFilterFromEnum) == 0x000001, "Wrong alignment on VModern_MapIconFilter_ActivateControlFilterFromEnum");
static_assert(sizeof(VModern_MapIconFilter_ActivateControlFilterFromEnum) == 0x000001, "Wrong size on VModern_MapIconFilter_ActivateControlFilterFromEnum");
static_assert(offsetof(VModern_MapIconFilter_ActivateControlFilterFromEnum, ActivatorEnum) == 0x000000, "Member 'VModern_MapIconFilter_ActivateControlFilterFromEnum::ActivatorEnum' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.ActivateFilter
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconFilter_ActivateFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_ActivateFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_ActivateFilter");
static_assert(sizeof(VModern_MapIconFilter_ActivateFilter) == 0x000008, "Wrong size on VModern_MapIconFilter_ActivateFilter");
static_assert(offsetof(VModern_MapIconFilter_ActivateFilter, Activator) == 0x000000, "Member 'VModern_MapIconFilter_ActivateFilter::Activator' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.ActivateIconFilter
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconFilter_ActivateIconFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_ActivateIconFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_ActivateIconFilter");
static_assert(sizeof(VModern_MapIconFilter_ActivateIconFilter) == 0x000008, "Wrong size on VModern_MapIconFilter_ActivateIconFilter");
static_assert(offsetof(VModern_MapIconFilter_ActivateIconFilter, Activator) == 0x000000, "Member 'VModern_MapIconFilter_ActivateIconFilter::Activator' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.ActivateSpecificFilterFromEnum
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconFilter_ActivateSpecificFilterFromEnum final
{
public:
	ELegacyMapMenuIcon                            ActivatorEnum;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_ActivateSpecificFilterFromEnum) == 0x000001, "Wrong alignment on VModern_MapIconFilter_ActivateSpecificFilterFromEnum");
static_assert(sizeof(VModern_MapIconFilter_ActivateSpecificFilterFromEnum) == 0x000001, "Wrong size on VModern_MapIconFilter_ActivateSpecificFilterFromEnum");
static_assert(offsetof(VModern_MapIconFilter_ActivateSpecificFilterFromEnum, ActivatorEnum) == 0x000000, "Member 'VModern_MapIconFilter_ActivateSpecificFilterFromEnum::ActivatorEnum' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.DesactivateFilter
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconFilter_DesactivateFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_DesactivateFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_DesactivateFilter");
static_assert(sizeof(VModern_MapIconFilter_DesactivateFilter) == 0x000008, "Wrong size on VModern_MapIconFilter_DesactivateFilter");
static_assert(offsetof(VModern_MapIconFilter_DesactivateFilter, Activator) == 0x000000, "Member 'VModern_MapIconFilter_DesactivateFilter::Activator' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.DesactivateIconFilter
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconFilter_DesactivateIconFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_DesactivateIconFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_DesactivateIconFilter");
static_assert(sizeof(VModern_MapIconFilter_DesactivateIconFilter) == 0x000008, "Wrong size on VModern_MapIconFilter_DesactivateIconFilter");
static_assert(offsetof(VModern_MapIconFilter_DesactivateIconFilter, Activator) == 0x000000, "Member 'VModern_MapIconFilter_DesactivateIconFilter::Activator' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.IsFilterHasAtLeastOneDisplayedIcon
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon) == 0x000001, "Wrong alignment on VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon");
static_assert(sizeof(VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon) == 0x000001, "Wrong size on VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon");
static_assert(offsetof(VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon, ReturnValue) == 0x000000, "Member 'VModern_MapIconFilter_IsFilterHasAtLeastOneDisplayedIcon::ReturnValue' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.OnFilterIconCreated
// 0x0DD0 (0x0DD0 - 0x0000)
struct VModern_MapIconFilter_OnFilterIconCreated final
{
public:
	class UCommonUserWidget*                      NewFilter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModern_AltarMapIconDesignTableRow     FilterDesign;                                      // 0x0010(0x0DB0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsControlFilter;                                  // 0x0DC0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC1[0xF];                                      // 0x0DC1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_MapIconFilter_OnFilterIconCreated) == 0x000010, "Wrong alignment on VModern_MapIconFilter_OnFilterIconCreated");
static_assert(sizeof(VModern_MapIconFilter_OnFilterIconCreated) == 0x000DD0, "Wrong size on VModern_MapIconFilter_OnFilterIconCreated");
static_assert(offsetof(VModern_MapIconFilter_OnFilterIconCreated, NewFilter) == 0x000000, "Member 'VModern_MapIconFilter_OnFilterIconCreated::NewFilter' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_OnFilterIconCreated, FilterDesign) == 0x000010, "Member 'VModern_MapIconFilter_OnFilterIconCreated::FilterDesign' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_OnFilterIconCreated, bIsControlFilter) == 0x000DC0, "Member 'VModern_MapIconFilter_OnFilterIconCreated::bIsControlFilter' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.OnWidgetRegisterToFilter
// 0x0018 (0x0018 - 0x0000)
struct VModern_MapIconFilter_OnWidgetRegisterToFilter final
{
public:
	class UCommonUserWidget*                      Filter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonUserWidget*                      NewWidgetToFilter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfFilteredObjects;                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_MapIconFilter_OnWidgetRegisterToFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_OnWidgetRegisterToFilter");
static_assert(sizeof(VModern_MapIconFilter_OnWidgetRegisterToFilter) == 0x000018, "Wrong size on VModern_MapIconFilter_OnWidgetRegisterToFilter");
static_assert(offsetof(VModern_MapIconFilter_OnWidgetRegisterToFilter, Filter) == 0x000000, "Member 'VModern_MapIconFilter_OnWidgetRegisterToFilter::Filter' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_OnWidgetRegisterToFilter, NewWidgetToFilter) == 0x000008, "Member 'VModern_MapIconFilter_OnWidgetRegisterToFilter::NewWidgetToFilter' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_OnWidgetRegisterToFilter, NumberOfFilteredObjects) == 0x000010, "Member 'VModern_MapIconFilter_OnWidgetRegisterToFilter::NumberOfFilteredObjects' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.OnWidgetUnregisterToFilter
// 0x0018 (0x0018 - 0x0000)
struct VModern_MapIconFilter_OnWidgetUnregisterToFilter final
{
public:
	class UCommonUserWidget*                      Filter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonUserWidget*                      RemovedWidget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfFilteredObjects;                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_MapIconFilter_OnWidgetUnregisterToFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_OnWidgetUnregisterToFilter");
static_assert(sizeof(VModern_MapIconFilter_OnWidgetUnregisterToFilter) == 0x000018, "Wrong size on VModern_MapIconFilter_OnWidgetUnregisterToFilter");
static_assert(offsetof(VModern_MapIconFilter_OnWidgetUnregisterToFilter, Filter) == 0x000000, "Member 'VModern_MapIconFilter_OnWidgetUnregisterToFilter::Filter' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_OnWidgetUnregisterToFilter, RemovedWidget) == 0x000008, "Member 'VModern_MapIconFilter_OnWidgetUnregisterToFilter::RemovedWidget' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_OnWidgetUnregisterToFilter, NumberOfFilteredObjects) == 0x000010, "Member 'VModern_MapIconFilter_OnWidgetUnregisterToFilter::NumberOfFilteredObjects' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.RequestUpdateFilteredWidget
// 0x0010 (0x0010 - 0x0000)
struct VModern_MapIconFilter_RequestUpdateFilteredWidget final
{
public:
	class UCommonUserWidget*                      FilteredWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeDisplay;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_MapIconFilter_RequestUpdateFilteredWidget) == 0x000008, "Wrong alignment on VModern_MapIconFilter_RequestUpdateFilteredWidget");
static_assert(sizeof(VModern_MapIconFilter_RequestUpdateFilteredWidget) == 0x000010, "Wrong size on VModern_MapIconFilter_RequestUpdateFilteredWidget");
static_assert(offsetof(VModern_MapIconFilter_RequestUpdateFilteredWidget, FilteredWidget) == 0x000000, "Member 'VModern_MapIconFilter_RequestUpdateFilteredWidget::FilteredWidget' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_RequestUpdateFilteredWidget, bCanBeDisplay) == 0x000008, "Member 'VModern_MapIconFilter_RequestUpdateFilteredWidget::bCanBeDisplay' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.RequestUpdateFilterWidget
// 0x0010 (0x0010 - 0x0000)
struct VModern_MapIconFilter_RequestUpdateFilterWidget final
{
public:
	class UCommonUserWidget*                      Filter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_MapIconFilter_RequestUpdateFilterWidget) == 0x000008, "Wrong alignment on VModern_MapIconFilter_RequestUpdateFilterWidget");
static_assert(sizeof(VModern_MapIconFilter_RequestUpdateFilterWidget) == 0x000010, "Wrong size on VModern_MapIconFilter_RequestUpdateFilterWidget");
static_assert(offsetof(VModern_MapIconFilter_RequestUpdateFilterWidget, Filter) == 0x000000, "Member 'VModern_MapIconFilter_RequestUpdateFilterWidget::Filter' has a wrong offset!");
static_assert(offsetof(VModern_MapIconFilter_RequestUpdateFilterWidget, bIsEnable) == 0x000008, "Member 'VModern_MapIconFilter_RequestUpdateFilterWidget::bIsEnable' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.GetControlFilter
// 0x0008 (0x0008 - 0x0000)
struct VModern_MapIconFilter_GetControlFilter final
{
public:
	class UCommonUserWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_GetControlFilter) == 0x000008, "Wrong alignment on VModern_MapIconFilter_GetControlFilter");
static_assert(sizeof(VModern_MapIconFilter_GetControlFilter) == 0x000008, "Wrong size on VModern_MapIconFilter_GetControlFilter");
static_assert(offsetof(VModern_MapIconFilter_GetControlFilter, ReturnValue) == 0x000000, "Member 'VModern_MapIconFilter_GetControlFilter::ReturnValue' has a wrong offset!");

// Function Altar.VModern_MapIconFilter.IsFilterFlagAll
// 0x0001 (0x0001 - 0x0000)
struct VModern_MapIconFilter_IsFilterFlagAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapIconFilter_IsFilterFlagAll) == 0x000001, "Wrong alignment on VModern_MapIconFilter_IsFilterFlagAll");
static_assert(sizeof(VModern_MapIconFilter_IsFilterFlagAll) == 0x000001, "Wrong size on VModern_MapIconFilter_IsFilterFlagAll");
static_assert(offsetof(VModern_MapIconFilter_IsFilterFlagAll, ReturnValue) == 0x000000, "Member 'VModern_MapIconFilter_IsFilterFlagAll::ReturnValue' has a wrong offset!");

// Function Altar.VModern_MapZoomSlider.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct VModern_MapZoomSlider_SetLevel final
{
public:
	int32                                         newLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapZoomSlider_SetLevel) == 0x000004, "Wrong alignment on VModern_MapZoomSlider_SetLevel");
static_assert(sizeof(VModern_MapZoomSlider_SetLevel) == 0x000004, "Wrong size on VModern_MapZoomSlider_SetLevel");
static_assert(offsetof(VModern_MapZoomSlider_SetLevel, newLevel) == 0x000000, "Member 'VModern_MapZoomSlider_SetLevel::newLevel' has a wrong offset!");

// Function Altar.VModern_MapZoomSlider.GetCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct VModern_MapZoomSlider_GetCurrentLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapZoomSlider_GetCurrentLevel) == 0x000004, "Wrong alignment on VModern_MapZoomSlider_GetCurrentLevel");
static_assert(sizeof(VModern_MapZoomSlider_GetCurrentLevel) == 0x000004, "Wrong size on VModern_MapZoomSlider_GetCurrentLevel");
static_assert(offsetof(VModern_MapZoomSlider_GetCurrentLevel, ReturnValue) == 0x000000, "Member 'VModern_MapZoomSlider_GetCurrentLevel::ReturnValue' has a wrong offset!");

// Function Altar.VModern_MapZoomSlider.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct VModern_MapZoomSlider_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_MapZoomSlider_GetMaxLevel) == 0x000004, "Wrong alignment on VModern_MapZoomSlider_GetMaxLevel");
static_assert(sizeof(VModern_MapZoomSlider_GetMaxLevel) == 0x000004, "Wrong size on VModern_MapZoomSlider_GetMaxLevel");
static_assert(offsetof(VModern_MapZoomSlider_GetMaxLevel, ReturnValue) == 0x000000, "Member 'VModern_MapZoomSlider_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.AddMapZoom
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_AddMapZoom final
{
public:
	float                                         ZoomDelta;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_AddMapZoom) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_AddMapZoom");
static_assert(sizeof(VModern_NavigableMapWidget_AddMapZoom) == 0x000004, "Wrong size on VModern_NavigableMapWidget_AddMapZoom");
static_assert(offsetof(VModern_NavigableMapWidget_AddMapZoom, ZoomDelta) == 0x000000, "Member 'VModern_NavigableMapWidget_AddMapZoom::ZoomDelta' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.HandleMouseMove
// 0x00B0 (0x00B0 - 0x0000)
struct VModern_NavigableMapWidget_HandleMouseMove final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_HandleMouseMove) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_HandleMouseMove");
static_assert(sizeof(VModern_NavigableMapWidget_HandleMouseMove) == 0x0000B0, "Wrong size on VModern_NavigableMapWidget_HandleMouseMove");
static_assert(offsetof(VModern_NavigableMapWidget_HandleMouseMove, InGeometry) == 0x000000, "Member 'VModern_NavigableMapWidget_HandleMouseMove::InGeometry' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_HandleMouseMove, InMouseEvent) == 0x000038, "Member 'VModern_NavigableMapWidget_HandleMouseMove::InMouseEvent' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.InitializeMapWidget_LocalMap
// 0x0028 (0x0028 - 0x0000)
struct VModern_NavigableMapWidget_InitializeMapWidget_LocalMap final
{
public:
	struct FLegacyMapMenuLocalMapProperties       LocalMapData;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_InitializeMapWidget_LocalMap) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_InitializeMapWidget_LocalMap");
static_assert(sizeof(VModern_NavigableMapWidget_InitializeMapWidget_LocalMap) == 0x000028, "Wrong size on VModern_NavigableMapWidget_InitializeMapWidget_LocalMap");
static_assert(offsetof(VModern_NavigableMapWidget_InitializeMapWidget_LocalMap, LocalMapData) == 0x000000, "Member 'VModern_NavigableMapWidget_InitializeMapWidget_LocalMap::LocalMapData' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.InitializeMapWidget_WorldMap
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_InitializeMapWidget_WorldMap final
{
public:
	struct FLegacyMapMenuWorldMapProperties       WorldMapData;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_InitializeMapWidget_WorldMap) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_InitializeMapWidget_WorldMap");
static_assert(sizeof(VModern_NavigableMapWidget_InitializeMapWidget_WorldMap) == 0x000020, "Wrong size on VModern_NavigableMapWidget_InitializeMapWidget_WorldMap");
static_assert(offsetof(VModern_NavigableMapWidget_InitializeMapWidget_WorldMap, WorldMapData) == 0x000000, "Member 'VModern_NavigableMapWidget_InitializeMapWidget_WorldMap::WorldMapData' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadBaseColorRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadBaseColorRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadBaseColorRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadBaseColorRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_LoadBaseColorRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadBaseColorRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_LoadBaseColorRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadBaseColorRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadFogMaterial
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadFogMaterial final
{
public:
	class UMaterial*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadFogMaterial) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadFogMaterial");
static_assert(sizeof(VModern_NavigableMapWidget_LoadFogMaterial) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadFogMaterial");
static_assert(offsetof(VModern_NavigableMapWidget_LoadFogMaterial, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadFogMaterial::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadFogRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadFogRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadFogRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadFogRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_LoadFogRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadFogRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_LoadFogRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadFogRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadLocalMapMaterial
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadLocalMapMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadLocalMapMaterial) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadLocalMapMaterial");
static_assert(sizeof(VModern_NavigableMapWidget_LoadLocalMapMaterial) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadLocalMapMaterial");
static_assert(offsetof(VModern_NavigableMapWidget_LoadLocalMapMaterial, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadLocalMapMaterial::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadLocalMapSobelMaterial
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadLocalMapSobelMaterial final
{
public:
	class UMaterial*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadLocalMapSobelMaterial) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadLocalMapSobelMaterial");
static_assert(sizeof(VModern_NavigableMapWidget_LoadLocalMapSobelMaterial) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadLocalMapSobelMaterial");
static_assert(offsetof(VModern_NavigableMapWidget_LoadLocalMapSobelMaterial, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadLocalMapSobelMaterial::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadSceneDepthRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadSceneDepthRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadSceneDepthRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadSceneDepthRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_LoadSceneDepthRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadSceneDepthRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_LoadSceneDepthRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadSceneDepthRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LoadSecondPassRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_LoadSecondPassRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_LoadSecondPassRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LoadSecondPassRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_LoadSecondPassRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_LoadSecondPassRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_LoadSecondPassRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_LoadSecondPassRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.MapZoomSmoothInternal
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_MapZoomSmoothInternal final
{
public:
	float                                         InNewZoomValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_MapZoomSmoothInternal) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_MapZoomSmoothInternal");
static_assert(sizeof(VModern_NavigableMapWidget_MapZoomSmoothInternal) == 0x000004, "Wrong size on VModern_NavigableMapWidget_MapZoomSmoothInternal");
static_assert(offsetof(VModern_NavigableMapWidget_MapZoomSmoothInternal, InNewZoomValue) == 0x000000, "Member 'VModern_NavigableMapWidget_MapZoomSmoothInternal::InNewZoomValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.MouseDrag
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_MouseDrag final
{
public:
	struct FVector2D                              MousePosition;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_MouseDrag) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_MouseDrag");
static_assert(sizeof(VModern_NavigableMapWidget_MouseDrag) == 0x000010, "Wrong size on VModern_NavigableMapWidget_MouseDrag");
static_assert(offsetof(VModern_NavigableMapWidget_MouseDrag, MousePosition) == 0x000000, "Member 'VModern_NavigableMapWidget_MouseDrag::MousePosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnCursorHoverIcon
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_OnCursorHoverIcon final
{
public:
	class UCommonUserWidget*                      HoveredIcon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnCursorHoverIcon) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnCursorHoverIcon");
static_assert(sizeof(VModern_NavigableMapWidget_OnCursorHoverIcon) == 0x000008, "Wrong size on VModern_NavigableMapWidget_OnCursorHoverIcon");
static_assert(offsetof(VModern_NavigableMapWidget_OnCursorHoverIcon, HoveredIcon) == 0x000000, "Member 'VModern_NavigableMapWidget_OnCursorHoverIcon::HoveredIcon' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnCursorPositionChanged
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_OnCursorPositionChanged final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnCursorPositionChanged) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnCursorPositionChanged");
static_assert(sizeof(VModern_NavigableMapWidget_OnCursorPositionChanged) == 0x000010, "Wrong size on VModern_NavigableMapWidget_OnCursorPositionChanged");
static_assert(offsetof(VModern_NavigableMapWidget_OnCursorPositionChanged, NewPosition) == 0x000000, "Member 'VModern_NavigableMapWidget_OnCursorPositionChanged::NewPosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnCursorUnhoverIcon
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_OnCursorUnhoverIcon final
{
public:
	class UCommonUserWidget*                      UnhoveredIcon;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnCursorUnhoverIcon) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnCursorUnhoverIcon");
static_assert(sizeof(VModern_NavigableMapWidget_OnCursorUnhoverIcon) == 0x000008, "Wrong size on VModern_NavigableMapWidget_OnCursorUnhoverIcon");
static_assert(offsetof(VModern_NavigableMapWidget_OnCursorUnhoverIcon, UnhoveredIcon) == 0x000000, "Member 'VModern_NavigableMapWidget_OnCursorUnhoverIcon::UnhoveredIcon' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnIconCreated
// 0x0058 (0x0058 - 0x0000)
struct VModern_NavigableMapWidget_OnIconCreated final
{
public:
	class UCommonUserWidget*                      NewMapIcon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyMapMenuIconProperties           Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnIconCreated) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnIconCreated");
static_assert(sizeof(VModern_NavigableMapWidget_OnIconCreated) == 0x000058, "Wrong size on VModern_NavigableMapWidget_OnIconCreated");
static_assert(offsetof(VModern_NavigableMapWidget_OnIconCreated, NewMapIcon) == 0x000000, "Member 'VModern_NavigableMapWidget_OnIconCreated::NewMapIcon' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_OnIconCreated, Data) == 0x000008, "Member 'VModern_NavigableMapWidget_OnIconCreated::Data' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnMapInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_OnMapInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnMapInputMethodChanged) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_OnMapInputMethodChanged");
static_assert(sizeof(VModern_NavigableMapWidget_OnMapInputMethodChanged) == 0x000001, "Wrong size on VModern_NavigableMapWidget_OnMapInputMethodChanged");
static_assert(offsetof(VModern_NavigableMapWidget_OnMapInputMethodChanged, NewInputType) == 0x000000, "Member 'VModern_NavigableMapWidget_OnMapInputMethodChanged::NewInputType' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnMapPivotChanged
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_OnMapPivotChanged final
{
public:
	struct FVector2D                              NewPivot;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnMapPivotChanged) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnMapPivotChanged");
static_assert(sizeof(VModern_NavigableMapWidget_OnMapPivotChanged) == 0x000010, "Wrong size on VModern_NavigableMapWidget_OnMapPivotChanged");
static_assert(offsetof(VModern_NavigableMapWidget_OnMapPivotChanged, NewPivot) == 0x000000, "Member 'VModern_NavigableMapWidget_OnMapPivotChanged::NewPivot' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnMapPositionChanged
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_OnMapPositionChanged final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnMapPositionChanged) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnMapPositionChanged");
static_assert(sizeof(VModern_NavigableMapWidget_OnMapPositionChanged) == 0x000010, "Wrong size on VModern_NavigableMapWidget_OnMapPositionChanged");
static_assert(offsetof(VModern_NavigableMapWidget_OnMapPositionChanged, NewPosition) == 0x000000, "Member 'VModern_NavigableMapWidget_OnMapPositionChanged::NewPosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnMapSetup
// 0x0018 (0x0018 - 0x0000)
struct VModern_NavigableMapWidget_OnMapSetup final
{
public:
	const class UObject*                          MapBrushObject;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OriginalMapSize;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnMapSetup) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnMapSetup");
static_assert(sizeof(VModern_NavigableMapWidget_OnMapSetup) == 0x000018, "Wrong size on VModern_NavigableMapWidget_OnMapSetup");
static_assert(offsetof(VModern_NavigableMapWidget_OnMapSetup, MapBrushObject) == 0x000000, "Member 'VModern_NavigableMapWidget_OnMapSetup::MapBrushObject' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_OnMapSetup, OriginalMapSize) == 0x000008, "Member 'VModern_NavigableMapWidget_OnMapSetup::OriginalMapSize' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnMouseDrag
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_OnMouseDrag final
{
public:
	struct FVector2D                              DragDelta;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnMouseDrag) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OnMouseDrag");
static_assert(sizeof(VModern_NavigableMapWidget_OnMouseDrag) == 0x000010, "Wrong size on VModern_NavigableMapWidget_OnMouseDrag");
static_assert(offsetof(VModern_NavigableMapWidget_OnMouseDrag, DragDelta) == 0x000000, "Member 'VModern_NavigableMapWidget_OnMouseDrag::DragDelta' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnSwitchInputMode
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_OnSwitchInputMode final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnSwitchInputMode) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_OnSwitchInputMode");
static_assert(sizeof(VModern_NavigableMapWidget_OnSwitchInputMode) == 0x000001, "Wrong size on VModern_NavigableMapWidget_OnSwitchInputMode");
static_assert(offsetof(VModern_NavigableMapWidget_OnSwitchInputMode, InputType) == 0x000000, "Member 'VModern_NavigableMapWidget_OnSwitchInputMode::InputType' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OnZoomChanged
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_OnZoomChanged final
{
public:
	float                                         NewZoom;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OnZoomChanged) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_OnZoomChanged");
static_assert(sizeof(VModern_NavigableMapWidget_OnZoomChanged) == 0x000004, "Wrong size on VModern_NavigableMapWidget_OnZoomChanged");
static_assert(offsetof(VModern_NavigableMapWidget_OnZoomChanged, NewZoom) == 0x000000, "Member 'VModern_NavigableMapWidget_OnZoomChanged::NewZoom' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.RemapCircleToSquare
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_RemapCircleToSquare final
{
public:
	struct FVector2D                              DirectionalVector;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_RemapCircleToSquare) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_RemapCircleToSquare");
static_assert(sizeof(VModern_NavigableMapWidget_RemapCircleToSquare) == 0x000020, "Wrong size on VModern_NavigableMapWidget_RemapCircleToSquare");
static_assert(offsetof(VModern_NavigableMapWidget_RemapCircleToSquare, DirectionalVector) == 0x000000, "Member 'VModern_NavigableMapWidget_RemapCircleToSquare::DirectionalVector' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_RemapCircleToSquare, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_RemapCircleToSquare::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.RequestMapPositionUpdateWithGeometryValidation
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation final
{
public:
	struct FVector2D                              NewPositionVector;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation");
static_assert(sizeof(VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation) == 0x000010, "Wrong size on VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation");
static_assert(offsetof(VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation, NewPositionVector) == 0x000000, "Member 'VModern_NavigableMapWidget_RequestMapPositionUpdateWithGeometryValidation::NewPositionVector' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.SetCursorPosition
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_SetCursorPosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_SetCursorPosition) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_SetCursorPosition");
static_assert(sizeof(VModern_NavigableMapWidget_SetCursorPosition) == 0x000010, "Wrong size on VModern_NavigableMapWidget_SetCursorPosition");
static_assert(offsetof(VModern_NavigableMapWidget_SetCursorPosition, NewPosition) == 0x000000, "Member 'VModern_NavigableMapWidget_SetCursorPosition::NewPosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.SetMapPivot
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_SetMapPivot final
{
public:
	struct FVector2D                              PivotValue;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_SetMapPivot) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_SetMapPivot");
static_assert(sizeof(VModern_NavigableMapWidget_SetMapPivot) == 0x000010, "Wrong size on VModern_NavigableMapWidget_SetMapPivot");
static_assert(offsetof(VModern_NavigableMapWidget_SetMapPivot, PivotValue) == 0x000000, "Member 'VModern_NavigableMapWidget_SetMapPivot::PivotValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.SetMapPosition
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_SetMapPosition final
{
public:
	struct FVector2D                              NewPositionVector;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_SetMapPosition) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_SetMapPosition");
static_assert(sizeof(VModern_NavigableMapWidget_SetMapPosition) == 0x000010, "Wrong size on VModern_NavigableMapWidget_SetMapPosition");
static_assert(offsetof(VModern_NavigableMapWidget_SetMapPosition, NewPositionVector) == 0x000000, "Member 'VModern_NavigableMapWidget_SetMapPosition::NewPositionVector' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.SetMapZoom
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_SetMapZoom final
{
public:
	float                                         ZoomValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsZoomingOnMouse;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_NavigableMapWidget_SetMapZoom) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_SetMapZoom");
static_assert(sizeof(VModern_NavigableMapWidget_SetMapZoom) == 0x000008, "Wrong size on VModern_NavigableMapWidget_SetMapZoom");
static_assert(offsetof(VModern_NavigableMapWidget_SetMapZoom, ZoomValue) == 0x000000, "Member 'VModern_NavigableMapWidget_SetMapZoom::ZoomValue' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_SetMapZoom, bIsZoomingOnMouse) == 0x000004, "Member 'VModern_NavigableMapWidget_SetMapZoom::bIsZoomingOnMouse' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.SetMapZoomSmooth
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_SetMapZoomSmooth final
{
public:
	float                                         InNewZoomValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_SetMapZoomSmooth) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_SetMapZoomSmooth");
static_assert(sizeof(VModern_NavigableMapWidget_SetMapZoomSmooth) == 0x000004, "Wrong size on VModern_NavigableMapWidget_SetMapZoomSmooth");
static_assert(offsetof(VModern_NavigableMapWidget_SetMapZoomSmooth, InNewZoomValue) == 0x000000, "Member 'VModern_NavigableMapWidget_SetMapZoomSmooth::InNewZoomValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.StartMouseDrag
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_StartMouseDrag final
{
public:
	struct FVector2D                              MousePosition;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_StartMouseDrag) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_StartMouseDrag");
static_assert(sizeof(VModern_NavigableMapWidget_StartMouseDrag) == 0x000010, "Wrong size on VModern_NavigableMapWidget_StartMouseDrag");
static_assert(offsetof(VModern_NavigableMapWidget_StartMouseDrag, MousePosition) == 0x000000, "Member 'VModern_NavigableMapWidget_StartMouseDrag::MousePosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.TranslateCursor
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_TranslateCursor final
{
public:
	struct FVector2D                              DirectionVector;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_TranslateCursor) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_TranslateCursor");
static_assert(sizeof(VModern_NavigableMapWidget_TranslateCursor) == 0x000010, "Wrong size on VModern_NavigableMapWidget_TranslateCursor");
static_assert(offsetof(VModern_NavigableMapWidget_TranslateCursor, DirectionVector) == 0x000000, "Member 'VModern_NavigableMapWidget_TranslateCursor::DirectionVector' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.TranslateMap
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_TranslateMap final
{
public:
	struct FVector2D                              DirectionVector;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_TranslateMap) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_TranslateMap");
static_assert(sizeof(VModern_NavigableMapWidget_TranslateMap) == 0x000010, "Wrong size on VModern_NavigableMapWidget_TranslateMap");
static_assert(offsetof(VModern_NavigableMapWidget_TranslateMap, DirectionVector) == 0x000000, "Member 'VModern_NavigableMapWidget_TranslateMap::DirectionVector' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdateIconsSizeOnMapSetup
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup final
{
public:
	bool                                          bIsWorldMap;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup");
static_assert(sizeof(VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup) == 0x000001, "Wrong size on VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup, bIsWorldMap) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdateIconsSizeOnMapSetup::bIsWorldMap' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdateIconsSizeOnMapSwitch
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch final
{
public:
	bool                                          bIsWorldMap;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch");
static_assert(sizeof(VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch) == 0x000001, "Wrong size on VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch, bIsWorldMap) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdateIconsSizeOnMapSwitch::bIsWorldMap' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdateIconsSizeSmoothly
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_UpdateIconsSizeSmoothly final
{
public:
	bool                                          bSmooth;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_UpdateIconsSizeSmoothly) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_UpdateIconsSizeSmoothly");
static_assert(sizeof(VModern_NavigableMapWidget_UpdateIconsSizeSmoothly) == 0x000001, "Wrong size on VModern_NavigableMapWidget_UpdateIconsSizeSmoothly");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateIconsSizeSmoothly, bSmooth) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdateIconsSizeSmoothly::bSmooth' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdateMapIconPosition
// 0x0018 (0x0018 - 0x0000)
struct VModern_NavigableMapWidget_UpdateMapIconPosition final
{
public:
	class UCommonUserWidget*                      MapIcon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NewPosition;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_UpdateMapIconPosition) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_UpdateMapIconPosition");
static_assert(sizeof(VModern_NavigableMapWidget_UpdateMapIconPosition) == 0x000018, "Wrong size on VModern_NavigableMapWidget_UpdateMapIconPosition");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateMapIconPosition, MapIcon) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdateMapIconPosition::MapIcon' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateMapIconPosition, NewPosition) == 0x000008, "Member 'VModern_NavigableMapWidget_UpdateMapIconPosition::NewPosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdateOrCreateMapIcon
// 0x0058 (0x0058 - 0x0000)
struct VModern_NavigableMapWidget_UpdateOrCreateMapIcon final
{
public:
	struct FLegacyMapMenuIconProperties           IconData;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalMap;                                       // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_NavigableMapWidget_UpdateOrCreateMapIcon) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_UpdateOrCreateMapIcon");
static_assert(sizeof(VModern_NavigableMapWidget_UpdateOrCreateMapIcon) == 0x000058, "Wrong size on VModern_NavigableMapWidget_UpdateOrCreateMapIcon");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateOrCreateMapIcon, IconData) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdateOrCreateMapIcon::IconData' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateOrCreateMapIcon, bIsLocalMap) == 0x000050, "Member 'VModern_NavigableMapWidget_UpdateOrCreateMapIcon::bIsLocalMap' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdateOrCreateMapIcons
// 0x0018 (0x0018 - 0x0000)
struct VModern_NavigableMapWidget_UpdateOrCreateMapIcons final
{
public:
	TArray<struct FLegacyMapMenuIconProperties>   IconsData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsLocalMap;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_NavigableMapWidget_UpdateOrCreateMapIcons) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_UpdateOrCreateMapIcons");
static_assert(sizeof(VModern_NavigableMapWidget_UpdateOrCreateMapIcons) == 0x000018, "Wrong size on VModern_NavigableMapWidget_UpdateOrCreateMapIcons");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateOrCreateMapIcons, IconsData) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdateOrCreateMapIcons::IconsData' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_UpdateOrCreateMapIcons, bIsLocalMap) == 0x000010, "Member 'VModern_NavigableMapWidget_UpdateOrCreateMapIcons::bIsLocalMap' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.UpdatePlayerMarkerPosition
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_UpdatePlayerMarkerPosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_UpdatePlayerMarkerPosition) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_UpdatePlayerMarkerPosition");
static_assert(sizeof(VModern_NavigableMapWidget_UpdatePlayerMarkerPosition) == 0x000010, "Wrong size on VModern_NavigableMapWidget_UpdatePlayerMarkerPosition");
static_assert(offsetof(VModern_NavigableMapWidget_UpdatePlayerMarkerPosition, NewPosition) == 0x000000, "Member 'VModern_NavigableMapWidget_UpdatePlayerMarkerPosition::NewPosition' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.AbsoluteSpaceToMapSpace
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace final
{
public:
	struct FVector2D                              AbsoluteSpace;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace");
static_assert(sizeof(VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace) == 0x000020, "Wrong size on VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace");
static_assert(offsetof(VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace, AbsoluteSpace) == 0x000000, "Member 'VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace::AbsoluteSpace' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_AbsoluteSpaceToMapSpace::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.ClampZoomValue
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_ClampZoomValue final
{
public:
	float                                         NewZoomValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_ClampZoomValue) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_ClampZoomValue");
static_assert(sizeof(VModern_NavigableMapWidget_ClampZoomValue) == 0x000008, "Wrong size on VModern_NavigableMapWidget_ClampZoomValue");
static_assert(offsetof(VModern_NavigableMapWidget_ClampZoomValue, NewZoomValue) == 0x000000, "Member 'VModern_NavigableMapWidget_ClampZoomValue::NewZoomValue' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_ClampZoomValue, ReturnValue) == 0x000004, "Member 'VModern_NavigableMapWidget_ClampZoomValue::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetBaseColorRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetBaseColorRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetBaseColorRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetBaseColorRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_GetBaseColorRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetBaseColorRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_GetBaseColorRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetBaseColorRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetCurrentZoomValue
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_GetCurrentZoomValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetCurrentZoomValue) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_GetCurrentZoomValue");
static_assert(sizeof(VModern_NavigableMapWidget_GetCurrentZoomValue) == 0x000004, "Wrong size on VModern_NavigableMapWidget_GetCurrentZoomValue");
static_assert(offsetof(VModern_NavigableMapWidget_GetCurrentZoomValue, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetCurrentZoomValue::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetDPIScaling
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_GetDPIScaling final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetDPIScaling) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_GetDPIScaling");
static_assert(sizeof(VModern_NavigableMapWidget_GetDPIScaling) == 0x000004, "Wrong size on VModern_NavigableMapWidget_GetDPIScaling");
static_assert(offsetof(VModern_NavigableMapWidget_GetDPIScaling, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetDPIScaling::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetFogMaterial
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetFogMaterial final
{
public:
	class UMaterial*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetFogMaterial) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetFogMaterial");
static_assert(sizeof(VModern_NavigableMapWidget_GetFogMaterial) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetFogMaterial");
static_assert(offsetof(VModern_NavigableMapWidget_GetFogMaterial, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetFogMaterial::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetFogRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetFogRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetFogRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetFogRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_GetFogRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetFogRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_GetFogRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetFogRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetIsPaintSpaceGeometryValid
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid");
static_assert(sizeof(VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid) == 0x000001, "Wrong size on VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid");
static_assert(offsetof(VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetIsPaintSpaceGeometryValid::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetLocalMapMaterial
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetLocalMapMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetLocalMapMaterial) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetLocalMapMaterial");
static_assert(sizeof(VModern_NavigableMapWidget_GetLocalMapMaterial) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetLocalMapMaterial");
static_assert(offsetof(VModern_NavigableMapWidget_GetLocalMapMaterial, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetLocalMapMaterial::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetLocalMapSobelMaterial
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetLocalMapSobelMaterial final
{
public:
	class UMaterial*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetLocalMapSobelMaterial) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetLocalMapSobelMaterial");
static_assert(sizeof(VModern_NavigableMapWidget_GetLocalMapSobelMaterial) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetLocalMapSobelMaterial");
static_assert(offsetof(VModern_NavigableMapWidget_GetLocalMapSobelMaterial, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetLocalMapSobelMaterial::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetOriginalMapSize
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_GetOriginalMapSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetOriginalMapSize) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetOriginalMapSize");
static_assert(sizeof(VModern_NavigableMapWidget_GetOriginalMapSize) == 0x000010, "Wrong size on VModern_NavigableMapWidget_GetOriginalMapSize");
static_assert(offsetof(VModern_NavigableMapWidget_GetOriginalMapSize, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetOriginalMapSize::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetPlayerPosition
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_GetPlayerPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetPlayerPosition) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetPlayerPosition");
static_assert(sizeof(VModern_NavigableMapWidget_GetPlayerPosition) == 0x000010, "Wrong size on VModern_NavigableMapWidget_GetPlayerPosition");
static_assert(offsetof(VModern_NavigableMapWidget_GetPlayerPosition, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetPlayerPosition::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetResolution
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_GetResolution final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetResolution) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetResolution");
static_assert(sizeof(VModern_NavigableMapWidget_GetResolution) == 0x000010, "Wrong size on VModern_NavigableMapWidget_GetResolution");
static_assert(offsetof(VModern_NavigableMapWidget_GetResolution, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetResolution::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetSceneDepthRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetSceneDepthRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetSceneDepthRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetSceneDepthRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_GetSceneDepthRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetSceneDepthRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_GetSceneDepthRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetSceneDepthRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetSecondPassRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct VModern_NavigableMapWidget_GetSecondPassRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetSecondPassRenderTarget) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetSecondPassRenderTarget");
static_assert(sizeof(VModern_NavigableMapWidget_GetSecondPassRenderTarget) == 0x000008, "Wrong size on VModern_NavigableMapWidget_GetSecondPassRenderTarget");
static_assert(offsetof(VModern_NavigableMapWidget_GetSecondPassRenderTarget, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetSecondPassRenderTarget::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetSmallestPossibleZoomValue
// 0x0004 (0x0004 - 0x0000)
struct VModern_NavigableMapWidget_GetSmallestPossibleZoomValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetSmallestPossibleZoomValue) == 0x000004, "Wrong alignment on VModern_NavigableMapWidget_GetSmallestPossibleZoomValue");
static_assert(sizeof(VModern_NavigableMapWidget_GetSmallestPossibleZoomValue) == 0x000004, "Wrong size on VModern_NavigableMapWidget_GetSmallestPossibleZoomValue");
static_assert(offsetof(VModern_NavigableMapWidget_GetSmallestPossibleZoomValue, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetSmallestPossibleZoomValue::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetViewSize
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_GetViewSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetViewSize) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetViewSize");
static_assert(sizeof(VModern_NavigableMapWidget_GetViewSize) == 0x000010, "Wrong size on VModern_NavigableMapWidget_GetViewSize");
static_assert(offsetof(VModern_NavigableMapWidget_GetViewSize, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetViewSize::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.GetZoomedMapSize
// 0x0010 (0x0010 - 0x0000)
struct VModern_NavigableMapWidget_GetZoomedMapSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_GetZoomedMapSize) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_GetZoomedMapSize");
static_assert(sizeof(VModern_NavigableMapWidget_GetZoomedMapSize) == 0x000010, "Wrong size on VModern_NavigableMapWidget_GetZoomedMapSize");
static_assert(offsetof(VModern_NavigableMapWidget_GetZoomedMapSize, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_GetZoomedMapSize::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.IsAskingForPlayerMarker
// 0x0001 (0x0001 - 0x0000)
struct VModern_NavigableMapWidget_IsAskingForPlayerMarker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_IsAskingForPlayerMarker) == 0x000001, "Wrong alignment on VModern_NavigableMapWidget_IsAskingForPlayerMarker");
static_assert(sizeof(VModern_NavigableMapWidget_IsAskingForPlayerMarker) == 0x000001, "Wrong size on VModern_NavigableMapWidget_IsAskingForPlayerMarker");
static_assert(offsetof(VModern_NavigableMapWidget_IsAskingForPlayerMarker, ReturnValue) == 0x000000, "Member 'VModern_NavigableMapWidget_IsAskingForPlayerMarker::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.IsIconInLeftHalfOfView
// 0x0018 (0x0018 - 0x0000)
struct VModern_NavigableMapWidget_IsIconInLeftHalfOfView final
{
public:
	struct FVector2D                              IconPosition;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_NavigableMapWidget_IsIconInLeftHalfOfView) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_IsIconInLeftHalfOfView");
static_assert(sizeof(VModern_NavigableMapWidget_IsIconInLeftHalfOfView) == 0x000018, "Wrong size on VModern_NavigableMapWidget_IsIconInLeftHalfOfView");
static_assert(offsetof(VModern_NavigableMapWidget_IsIconInLeftHalfOfView, IconPosition) == 0x000000, "Member 'VModern_NavigableMapWidget_IsIconInLeftHalfOfView::IconPosition' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_IsIconInLeftHalfOfView, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_IsIconInLeftHalfOfView::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.LocalMapToOblivionWorld
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_LocalMapToOblivionWorld final
{
public:
	struct FVector2D                              IconPosition;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModern_NavigableMapWidget_LocalMapToOblivionWorld) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_LocalMapToOblivionWorld");
static_assert(sizeof(VModern_NavigableMapWidget_LocalMapToOblivionWorld) == 0x000020, "Wrong size on VModern_NavigableMapWidget_LocalMapToOblivionWorld");
static_assert(offsetof(VModern_NavigableMapWidget_LocalMapToOblivionWorld, IconPosition) == 0x000000, "Member 'VModern_NavigableMapWidget_LocalMapToOblivionWorld::IconPosition' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_LocalMapToOblivionWorld, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_LocalMapToOblivionWorld::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.OTAMapCoord
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_OTAMapCoord final
{
public:
	struct FVector2D                              OMapCoord;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_OTAMapCoord) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_OTAMapCoord");
static_assert(sizeof(VModern_NavigableMapWidget_OTAMapCoord) == 0x000020, "Wrong size on VModern_NavigableMapWidget_OTAMapCoord");
static_assert(offsetof(VModern_NavigableMapWidget_OTAMapCoord, OMapCoord) == 0x000000, "Member 'VModern_NavigableMapWidget_OTAMapCoord::OMapCoord' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_OTAMapCoord, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_OTAMapCoord::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.ViewSpaceToAbsoluteSpace
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace final
{
public:
	struct FVector2D                              ViewSpace;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace");
static_assert(sizeof(VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace) == 0x000020, "Wrong size on VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace");
static_assert(offsetof(VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace, ViewSpace) == 0x000000, "Member 'VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace::ViewSpace' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_ViewSpaceToAbsoluteSpace::ReturnValue' has a wrong offset!");

// Function Altar.VModern_NavigableMapWidget.ViewSpaceToMapSpace
// 0x0020 (0x0020 - 0x0000)
struct VModern_NavigableMapWidget_ViewSpaceToMapSpace final
{
public:
	struct FVector2D                              ViewSpace;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_NavigableMapWidget_ViewSpaceToMapSpace) == 0x000008, "Wrong alignment on VModern_NavigableMapWidget_ViewSpaceToMapSpace");
static_assert(sizeof(VModern_NavigableMapWidget_ViewSpaceToMapSpace) == 0x000020, "Wrong size on VModern_NavigableMapWidget_ViewSpaceToMapSpace");
static_assert(offsetof(VModern_NavigableMapWidget_ViewSpaceToMapSpace, ViewSpace) == 0x000000, "Member 'VModern_NavigableMapWidget_ViewSpaceToMapSpace::ViewSpace' has a wrong offset!");
static_assert(offsetof(VModern_NavigableMapWidget_ViewSpaceToMapSpace, ReturnValue) == 0x000010, "Member 'VModern_NavigableMapWidget_ViewSpaceToMapSpace::ReturnValue' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModern_RacePortraitItem_SetIsSelected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_SetIsSelected) == 0x000001, "Wrong alignment on VModern_RacePortraitItem_SetIsSelected");
static_assert(sizeof(VModern_RacePortraitItem_SetIsSelected) == 0x000001, "Wrong size on VModern_RacePortraitItem_SetIsSelected");
static_assert(offsetof(VModern_RacePortraitItem_SetIsSelected, Value) == 0x000000, "Member 'VModern_RacePortraitItem_SetIsSelected::Value' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.SetName
// 0x0010 (0x0010 - 0x0000)
struct VModern_RacePortraitItem_SetName final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_SetName) == 0x000008, "Wrong alignment on VModern_RacePortraitItem_SetName");
static_assert(sizeof(VModern_RacePortraitItem_SetName) == 0x000010, "Wrong size on VModern_RacePortraitItem_SetName");
static_assert(offsetof(VModern_RacePortraitItem_SetName, Value) == 0x000000, "Member 'VModern_RacePortraitItem_SetName::Value' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.SetProperties
// 0x0008 (0x0008 - 0x0000)
struct VModern_RacePortraitItem_SetProperties final
{
public:
	class UTexture2D*                             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_SetProperties) == 0x000008, "Wrong alignment on VModern_RacePortraitItem_SetProperties");
static_assert(sizeof(VModern_RacePortraitItem_SetProperties) == 0x000008, "Wrong size on VModern_RacePortraitItem_SetProperties");
static_assert(offsetof(VModern_RacePortraitItem_SetProperties, Value) == 0x000000, "Member 'VModern_RacePortraitItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.SetPropertiesHover
// 0x0008 (0x0008 - 0x0000)
struct VModern_RacePortraitItem_SetPropertiesHover final
{
public:
	class UTexture2D*                             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_SetPropertiesHover) == 0x000008, "Wrong alignment on VModern_RacePortraitItem_SetPropertiesHover");
static_assert(sizeof(VModern_RacePortraitItem_SetPropertiesHover) == 0x000008, "Wrong size on VModern_RacePortraitItem_SetPropertiesHover");
static_assert(offsetof(VModern_RacePortraitItem_SetPropertiesHover, Value) == 0x000000, "Member 'VModern_RacePortraitItem_SetPropertiesHover::Value' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.GetName
// 0x0010 (0x0010 - 0x0000)
struct VModern_RacePortraitItem_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_GetName) == 0x000008, "Wrong alignment on VModern_RacePortraitItem_GetName");
static_assert(sizeof(VModern_RacePortraitItem_GetName) == 0x000010, "Wrong size on VModern_RacePortraitItem_GetName");
static_assert(offsetof(VModern_RacePortraitItem_GetName, ReturnValue) == 0x000000, "Member 'VModern_RacePortraitItem_GetName::ReturnValue' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.GetProperties
// 0x0008 (0x0008 - 0x0000)
struct VModern_RacePortraitItem_GetProperties final
{
public:
	const class UTexture2D*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_GetProperties) == 0x000008, "Wrong alignment on VModern_RacePortraitItem_GetProperties");
static_assert(sizeof(VModern_RacePortraitItem_GetProperties) == 0x000008, "Wrong size on VModern_RacePortraitItem_GetProperties");
static_assert(offsetof(VModern_RacePortraitItem_GetProperties, ReturnValue) == 0x000000, "Member 'VModern_RacePortraitItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.GetPropertiesHover
// 0x0008 (0x0008 - 0x0000)
struct VModern_RacePortraitItem_GetPropertiesHover final
{
public:
	const class UTexture2D*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_GetPropertiesHover) == 0x000008, "Wrong alignment on VModern_RacePortraitItem_GetPropertiesHover");
static_assert(sizeof(VModern_RacePortraitItem_GetPropertiesHover) == 0x000008, "Wrong size on VModern_RacePortraitItem_GetPropertiesHover");
static_assert(offsetof(VModern_RacePortraitItem_GetPropertiesHover, ReturnValue) == 0x000000, "Member 'VModern_RacePortraitItem_GetPropertiesHover::ReturnValue' has a wrong offset!");

// Function Altar.VModern_RacePortraitItem.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct VModern_RacePortraitItem_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VModern_RacePortraitItem_IsSelected) == 0x000001, "Wrong alignment on VModern_RacePortraitItem_IsSelected");
static_assert(sizeof(VModern_RacePortraitItem_IsSelected) == 0x000001, "Wrong size on VModern_RacePortraitItem_IsSelected");
static_assert(offsetof(VModern_RacePortraitItem_IsSelected, ReturnValue) == 0x000000, "Member 'VModern_RacePortraitItem_IsSelected::ReturnValue' has a wrong offset!");

// Function Altar.VAmuletModularBodyPart.UpdateChestSnappingAlpha
// 0x0004 (0x0004 - 0x0000)
struct VAmuletModularBodyPart_UpdateChestSnappingAlpha final
{
public:
	float                                         NewAlpha;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAmuletModularBodyPart_UpdateChestSnappingAlpha) == 0x000004, "Wrong alignment on VAmuletModularBodyPart_UpdateChestSnappingAlpha");
static_assert(sizeof(VAmuletModularBodyPart_UpdateChestSnappingAlpha) == 0x000004, "Wrong size on VAmuletModularBodyPart_UpdateChestSnappingAlpha");
static_assert(offsetof(VAmuletModularBodyPart_UpdateChestSnappingAlpha, NewAlpha) == 0x000000, "Member 'VAmuletModularBodyPart_UpdateChestSnappingAlpha::NewAlpha' has a wrong offset!");

// Function Altar.VMusicPlayer.OnMusicSuccessEnded
// 0x0010 (0x0010 - 0x0000)
struct VMusicPlayer_OnMusicSuccessEnded final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VMusicPlayer_OnMusicSuccessEnded) == 0x000008, "Wrong alignment on VMusicPlayer_OnMusicSuccessEnded");
static_assert(sizeof(VMusicPlayer_OnMusicSuccessEnded) == 0x000010, "Wrong size on VMusicPlayer_OnMusicSuccessEnded");
static_assert(offsetof(VMusicPlayer_OnMusicSuccessEnded, CallbackType) == 0x000000, "Member 'VMusicPlayer_OnMusicSuccessEnded::CallbackType' has a wrong offset!");
static_assert(offsetof(VMusicPlayer_OnMusicSuccessEnded, CallbackInfo) == 0x000008, "Member 'VMusicPlayer_OnMusicSuccessEnded::CallbackInfo' has a wrong offset!");

// Function Altar.VNegotiateMenuViewModel.RegisterSendConfirmHaggleHandler
// 0x0004 (0x0004 - 0x0000)
struct VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler final
{
public:
	int32                                         HagglePercentValue;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler) == 0x000004, "Wrong alignment on VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler");
static_assert(sizeof(VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler) == 0x000004, "Wrong size on VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler");
static_assert(offsetof(VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler, HagglePercentValue) == 0x000000, "Member 'VNegotiateMenuViewModel_RegisterSendConfirmHaggleHandler::HagglePercentValue' has a wrong offset!");

// Function Altar.VNegotiateMenuViewModel.GetInitializationData
// 0x0048 (0x0048 - 0x0000)
struct VNegotiateMenuViewModel_GetInitializationData final
{
public:
	struct FNegotiateMenuInitializationData       ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VNegotiateMenuViewModel_GetInitializationData) == 0x000008, "Wrong alignment on VNegotiateMenuViewModel_GetInitializationData");
static_assert(sizeof(VNegotiateMenuViewModel_GetInitializationData) == 0x000048, "Wrong size on VNegotiateMenuViewModel_GetInitializationData");
static_assert(offsetof(VNegotiateMenuViewModel_GetInitializationData, ReturnValue) == 0x000000, "Member 'VNegotiateMenuViewModel_GetInitializationData::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionCharacterAnimInstance.OnAnimationStateChange
// 0x0038 (0x0038 - 0x0000)
struct VOblivionCharacterAnimInstance_OnAnimationStateChange final
{
public:
	struct FOblivionSourcedCharacterAnimationState OldState;                                         // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOblivionSourcedCharacterAnimationState NewState;                                         // 0x001C(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionCharacterAnimInstance_OnAnimationStateChange) == 0x000004, "Wrong alignment on VOblivionCharacterAnimInstance_OnAnimationStateChange");
static_assert(sizeof(VOblivionCharacterAnimInstance_OnAnimationStateChange) == 0x000038, "Wrong size on VOblivionCharacterAnimInstance_OnAnimationStateChange");
static_assert(offsetof(VOblivionCharacterAnimInstance_OnAnimationStateChange, OldState) == 0x000000, "Member 'VOblivionCharacterAnimInstance_OnAnimationStateChange::OldState' has a wrong offset!");
static_assert(offsetof(VOblivionCharacterAnimInstance_OnAnimationStateChange, NewState) == 0x00001C, "Member 'VOblivionCharacterAnimInstance_OnAnimationStateChange::NewState' has a wrong offset!");

// Function Altar.VOblivionCharacterAnimInstance.SetCombatMoveset
// 0x0001 (0x0001 - 0x0000)
struct VOblivionCharacterAnimInstance_SetCombatMoveset final
{
public:
	EOblivionCombatMoveset                        Moveset;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionCharacterAnimInstance_SetCombatMoveset) == 0x000001, "Wrong alignment on VOblivionCharacterAnimInstance_SetCombatMoveset");
static_assert(sizeof(VOblivionCharacterAnimInstance_SetCombatMoveset) == 0x000001, "Wrong size on VOblivionCharacterAnimInstance_SetCombatMoveset");
static_assert(offsetof(VOblivionCharacterAnimInstance_SetCombatMoveset, Moveset) == 0x000000, "Member 'VOblivionCharacterAnimInstance_SetCombatMoveset::Moveset' has a wrong offset!");

// Function Altar.VOblivionCharacterAnimInstance.SetForcePosePairing
// 0x0001 (0x0001 - 0x0000)
struct VOblivionCharacterAnimInstance_SetForcePosePairing final
{
public:
	bool                                          ForcePosePairing;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionCharacterAnimInstance_SetForcePosePairing) == 0x000001, "Wrong alignment on VOblivionCharacterAnimInstance_SetForcePosePairing");
static_assert(sizeof(VOblivionCharacterAnimInstance_SetForcePosePairing) == 0x000001, "Wrong size on VOblivionCharacterAnimInstance_SetForcePosePairing");
static_assert(offsetof(VOblivionCharacterAnimInstance_SetForcePosePairing, ForcePosePairing) == 0x000000, "Member 'VOblivionCharacterAnimInstance_SetForcePosePairing::ForcePosePairing' has a wrong offset!");

// Function Altar.VOblivionGate.ShouldComputeDistanceWithPlayer
// 0x0001 (0x0001 - 0x0000)
struct VOblivionGate_ShouldComputeDistanceWithPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionGate_ShouldComputeDistanceWithPlayer) == 0x000001, "Wrong alignment on VOblivionGate_ShouldComputeDistanceWithPlayer");
static_assert(sizeof(VOblivionGate_ShouldComputeDistanceWithPlayer) == 0x000001, "Wrong size on VOblivionGate_ShouldComputeDistanceWithPlayer");
static_assert(offsetof(VOblivionGate_ShouldComputeDistanceWithPlayer, ReturnValue) == 0x000000, "Member 'VOblivionGate_ShouldComputeDistanceWithPlayer::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.GetLastHitObjectRefComponent
// 0x0008 (0x0008 - 0x0000)
struct VOblivionPlayerCharacter_GetLastHitObjectRefComponent final
{
public:
	class UVTESObjectRefComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_GetLastHitObjectRefComponent) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_GetLastHitObjectRefComponent");
static_assert(sizeof(VOblivionPlayerCharacter_GetLastHitObjectRefComponent) == 0x000008, "Wrong size on VOblivionPlayerCharacter_GetLastHitObjectRefComponent");
static_assert(offsetof(VOblivionPlayerCharacter_GetLastHitObjectRefComponent, ReturnValue) == 0x000000, "Member 'VOblivionPlayerCharacter_GetLastHitObjectRefComponent::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnGameplayCameraContextChanged
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_OnGameplayCameraContextChanged final
{
public:
	EGameplayCameraContext                        GameplayCameraContext;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_OnGameplayCameraContextChanged) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_OnGameplayCameraContextChanged");
static_assert(sizeof(VOblivionPlayerCharacter_OnGameplayCameraContextChanged) == 0x000001, "Wrong size on VOblivionPlayerCharacter_OnGameplayCameraContextChanged");
static_assert(offsetof(VOblivionPlayerCharacter_OnGameplayCameraContextChanged, GameplayCameraContext) == 0x000000, "Member 'VOblivionPlayerCharacter_OnGameplayCameraContextChanged::GameplayCameraContext' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnGameplayCameraFocusOnPoint
// 0x0030 (0x0030 - 0x0000)
struct VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint final
{
public:
	struct FVector                                FromPosition;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ToPosition;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint");
static_assert(sizeof(VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint) == 0x000030, "Wrong size on VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint");
static_assert(offsetof(VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint, FromPosition) == 0x000000, "Member 'VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint::FromPosition' has a wrong offset!");
static_assert(offsetof(VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint, ToPosition) == 0x000018, "Member 'VOblivionPlayerCharacter_OnGameplayCameraFocusOnPoint::ToPosition' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnPlayFailCastSound
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_OnPlayFailCastSound final
{
public:
	EMagicSchool                                  MagicSchool;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_OnPlayFailCastSound) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_OnPlayFailCastSound");
static_assert(sizeof(VOblivionPlayerCharacter_OnPlayFailCastSound) == 0x000001, "Wrong size on VOblivionPlayerCharacter_OnPlayFailCastSound");
static_assert(offsetof(VOblivionPlayerCharacter_OnPlayFailCastSound, MagicSchool) == 0x000000, "Member 'VOblivionPlayerCharacter_OnPlayFailCastSound::MagicSchool' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnQuiverChanged
// 0x0010 (0x0010 - 0x0000)
struct VOblivionPlayerCharacter_OnQuiverChanged final
{
public:
	const class AVQuiver*                         QuiverActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VOblivionPlayerCharacter_OnQuiverChanged) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_OnQuiverChanged");
static_assert(sizeof(VOblivionPlayerCharacter_OnQuiverChanged) == 0x000010, "Wrong size on VOblivionPlayerCharacter_OnQuiverChanged");
static_assert(offsetof(VOblivionPlayerCharacter_OnQuiverChanged, QuiverActor) == 0x000000, "Member 'VOblivionPlayerCharacter_OnQuiverChanged::QuiverActor' has a wrong offset!");
static_assert(offsetof(VOblivionPlayerCharacter_OnQuiverChanged, bEquipping) == 0x000008, "Member 'VOblivionPlayerCharacter_OnQuiverChanged::bEquipping' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnStartGrabAction
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_OnStartGrabAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_OnStartGrabAction) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_OnStartGrabAction");
static_assert(sizeof(VOblivionPlayerCharacter_OnStartGrabAction) == 0x000001, "Wrong size on VOblivionPlayerCharacter_OnStartGrabAction");
static_assert(offsetof(VOblivionPlayerCharacter_OnStartGrabAction, ReturnValue) == 0x000000, "Member 'VOblivionPlayerCharacter_OnStartGrabAction::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnStartTelekinesisAction
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_OnStartTelekinesisAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_OnStartTelekinesisAction) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_OnStartTelekinesisAction");
static_assert(sizeof(VOblivionPlayerCharacter_OnStartTelekinesisAction) == 0x000001, "Wrong size on VOblivionPlayerCharacter_OnStartTelekinesisAction");
static_assert(offsetof(VOblivionPlayerCharacter_OnStartTelekinesisAction, ReturnValue) == 0x000000, "Member 'VOblivionPlayerCharacter_OnStartTelekinesisAction::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.OnTorchChanged
// 0x0010 (0x0010 - 0x0000)
struct VOblivionPlayerCharacter_OnTorchChanged final
{
public:
	const class AActor*                           TorchActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VOblivionPlayerCharacter_OnTorchChanged) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_OnTorchChanged");
static_assert(sizeof(VOblivionPlayerCharacter_OnTorchChanged) == 0x000010, "Wrong size on VOblivionPlayerCharacter_OnTorchChanged");
static_assert(offsetof(VOblivionPlayerCharacter_OnTorchChanged, TorchActor) == 0x000000, "Member 'VOblivionPlayerCharacter_OnTorchChanged::TorchActor' has a wrong offset!");
static_assert(offsetof(VOblivionPlayerCharacter_OnTorchChanged, bEquipping) == 0x000008, "Member 'VOblivionPlayerCharacter_OnTorchChanged::bEquipping' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.RefreshFPSClippingFixFirstPersonBody
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody final
{
public:
	bool                                          bShoudForceRefresh;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody");
static_assert(sizeof(VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody) == 0x000001, "Wrong size on VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody");
static_assert(offsetof(VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody, bShoudForceRefresh) == 0x000000, "Member 'VOblivionPlayerCharacter_RefreshFPSClippingFixFirstPersonBody::bShoudForceRefresh' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.SetLastHitObjectRefComponent
// 0x0008 (0x0008 - 0x0000)
struct VOblivionPlayerCharacter_SetLastHitObjectRefComponent final
{
public:
	class UVTESObjectRefComponent*                Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_SetLastHitObjectRefComponent) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_SetLastHitObjectRefComponent");
static_assert(sizeof(VOblivionPlayerCharacter_SetLastHitObjectRefComponent) == 0x000008, "Wrong size on VOblivionPlayerCharacter_SetLastHitObjectRefComponent");
static_assert(offsetof(VOblivionPlayerCharacter_SetLastHitObjectRefComponent, Component) == 0x000000, "Member 'VOblivionPlayerCharacter_SetLastHitObjectRefComponent::Component' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.SetUseBowAimingRotation
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_SetUseBowAimingRotation final
{
public:
	bool                                          bUseBowRotation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_SetUseBowAimingRotation) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_SetUseBowAimingRotation");
static_assert(sizeof(VOblivionPlayerCharacter_SetUseBowAimingRotation) == 0x000001, "Wrong size on VOblivionPlayerCharacter_SetUseBowAimingRotation");
static_assert(offsetof(VOblivionPlayerCharacter_SetUseBowAimingRotation, bUseBowRotation) == 0x000000, "Member 'VOblivionPlayerCharacter_SetUseBowAimingRotation::bUseBowRotation' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.CanTryInteract
// 0x0001 (0x0001 - 0x0000)
struct VOblivionPlayerCharacter_CanTryInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_CanTryInteract) == 0x000001, "Wrong alignment on VOblivionPlayerCharacter_CanTryInteract");
static_assert(sizeof(VOblivionPlayerCharacter_CanTryInteract) == 0x000001, "Wrong size on VOblivionPlayerCharacter_CanTryInteract");
static_assert(offsetof(VOblivionPlayerCharacter_CanTryInteract, ReturnValue) == 0x000000, "Member 'VOblivionPlayerCharacter_CanTryInteract::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.GetInventoryPlayer
// 0x0008 (0x0008 - 0x0000)
struct VOblivionPlayerCharacter_GetInventoryPlayer final
{
public:
	class AVInventoryPlayerCharacter*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_GetInventoryPlayer) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_GetInventoryPlayer");
static_assert(sizeof(VOblivionPlayerCharacter_GetInventoryPlayer) == 0x000008, "Wrong size on VOblivionPlayerCharacter_GetInventoryPlayer");
static_assert(offsetof(VOblivionPlayerCharacter_GetInventoryPlayer, ReturnValue) == 0x000000, "Member 'VOblivionPlayerCharacter_GetInventoryPlayer::ReturnValue' has a wrong offset!");

// Function Altar.VOblivionPlayerCharacter.GetSubLevelName
// 0x0010 (0x0010 - 0x0000)
struct VOblivionPlayerCharacter_GetSubLevelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOblivionPlayerCharacter_GetSubLevelName) == 0x000008, "Wrong alignment on VOblivionPlayerCharacter_GetSubLevelName");
static_assert(sizeof(VOblivionPlayerCharacter_GetSubLevelName) == 0x000010, "Wrong size on VOblivionPlayerCharacter_GetSubLevelName");
static_assert(offsetof(VOblivionPlayerCharacter_GetSubLevelName, ReturnValue) == 0x000000, "Member 'VOblivionPlayerCharacter_GetSubLevelName::ReturnValue' has a wrong offset!");

// Function Altar.VOnboardingPageInterface.OnExit
// 0x0001 (0x0001 - 0x0000)
struct VOnboardingPageInterface_OnExit final
{
public:
	bool                                          Forward;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOnboardingPageInterface_OnExit) == 0x000001, "Wrong alignment on VOnboardingPageInterface_OnExit");
static_assert(sizeof(VOnboardingPageInterface_OnExit) == 0x000001, "Wrong size on VOnboardingPageInterface_OnExit");
static_assert(offsetof(VOnboardingPageInterface_OnExit, Forward) == 0x000000, "Member 'VOnboardingPageInterface_OnExit::Forward' has a wrong offset!");

// Function Altar.VOnboardingPageInterface.CanBeSkiped
// 0x0001 (0x0001 - 0x0000)
struct VOnboardingPageInterface_CanBeSkiped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOnboardingPageInterface_CanBeSkiped) == 0x000001, "Wrong alignment on VOnboardingPageInterface_CanBeSkiped");
static_assert(sizeof(VOnboardingPageInterface_CanBeSkiped) == 0x000001, "Wrong size on VOnboardingPageInterface_CanBeSkiped");
static_assert(offsetof(VOnboardingPageInterface_CanBeSkiped, ReturnValue) == 0x000000, "Member 'VOnboardingPageInterface_CanBeSkiped::ReturnValue' has a wrong offset!");

// Function Altar.VOnboardingPageInterface.CanEnter
// 0x0001 (0x0001 - 0x0000)
struct VOnboardingPageInterface_CanEnter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOnboardingPageInterface_CanEnter) == 0x000001, "Wrong alignment on VOnboardingPageInterface_CanEnter");
static_assert(sizeof(VOnboardingPageInterface_CanEnter) == 0x000001, "Wrong size on VOnboardingPageInterface_CanEnter");
static_assert(offsetof(VOnboardingPageInterface_CanEnter, ReturnValue) == 0x000000, "Member 'VOnboardingPageInterface_CanEnter::ReturnValue' has a wrong offset!");

// Function Altar.VOnboardingPageInterface.CanExit
// 0x0001 (0x0001 - 0x0000)
struct VOnboardingPageInterface_CanExit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOnboardingPageInterface_CanExit) == 0x000001, "Wrong alignment on VOnboardingPageInterface_CanExit");
static_assert(sizeof(VOnboardingPageInterface_CanExit) == 0x000001, "Wrong size on VOnboardingPageInterface_CanExit");
static_assert(offsetof(VOnboardingPageInterface_CanExit, ReturnValue) == 0x000000, "Member 'VOnboardingPageInterface_CanExit::ReturnValue' has a wrong offset!");

// Function Altar.VOnboardingPageInterface.DoesNeedEnterAnimation
// 0x0001 (0x0001 - 0x0000)
struct VOnboardingPageInterface_DoesNeedEnterAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOnboardingPageInterface_DoesNeedEnterAnimation) == 0x000001, "Wrong alignment on VOnboardingPageInterface_DoesNeedEnterAnimation");
static_assert(sizeof(VOnboardingPageInterface_DoesNeedEnterAnimation) == 0x000001, "Wrong size on VOnboardingPageInterface_DoesNeedEnterAnimation");
static_assert(offsetof(VOnboardingPageInterface_DoesNeedEnterAnimation, ReturnValue) == 0x000000, "Member 'VOnboardingPageInterface_DoesNeedEnterAnimation::ReturnValue' has a wrong offset!");

// Function Altar.VOnboardingPageInterface.DoesNeedExitAnimation
// 0x0001 (0x0001 - 0x0000)
struct VOnboardingPageInterface_DoesNeedExitAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOnboardingPageInterface_DoesNeedExitAnimation) == 0x000001, "Wrong alignment on VOnboardingPageInterface_DoesNeedExitAnimation");
static_assert(sizeof(VOnboardingPageInterface_DoesNeedExitAnimation) == 0x000001, "Wrong size on VOnboardingPageInterface_DoesNeedExitAnimation");
static_assert(offsetof(VOnboardingPageInterface_DoesNeedExitAnimation, ReturnValue) == 0x000000, "Member 'VOnboardingPageInterface_DoesNeedExitAnimation::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalImageTile.GetCeilPowerOfTwo
// 0x0008 (0x0008 - 0x0000)
struct VOriginalImageTile_GetCeilPowerOfTwo final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_GetCeilPowerOfTwo) == 0x000004, "Wrong alignment on VOriginalImageTile_GetCeilPowerOfTwo");
static_assert(sizeof(VOriginalImageTile_GetCeilPowerOfTwo) == 0x000008, "Wrong size on VOriginalImageTile_GetCeilPowerOfTwo");
static_assert(offsetof(VOriginalImageTile_GetCeilPowerOfTwo, Value) == 0x000000, "Member 'VOriginalImageTile_GetCeilPowerOfTwo::Value' has a wrong offset!");
static_assert(offsetof(VOriginalImageTile_GetCeilPowerOfTwo, ReturnValue) == 0x000004, "Member 'VOriginalImageTile_GetCeilPowerOfTwo::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalImageTile.GetFixedOffsetPowerOfTwo
// 0x0100 (0x0100 - 0x0000)
struct VOriginalImageTile_GetFixedOffsetPowerOfTwo final
{
public:
	struct FImageCorrectionData                   Data;                                              // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x00F0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_GetFixedOffsetPowerOfTwo) == 0x000010, "Wrong alignment on VOriginalImageTile_GetFixedOffsetPowerOfTwo");
static_assert(sizeof(VOriginalImageTile_GetFixedOffsetPowerOfTwo) == 0x000100, "Wrong size on VOriginalImageTile_GetFixedOffsetPowerOfTwo");
static_assert(offsetof(VOriginalImageTile_GetFixedOffsetPowerOfTwo, Data) == 0x000000, "Member 'VOriginalImageTile_GetFixedOffsetPowerOfTwo::Data' has a wrong offset!");
static_assert(offsetof(VOriginalImageTile_GetFixedOffsetPowerOfTwo, ReturnValue) == 0x0000F0, "Member 'VOriginalImageTile_GetFixedOffsetPowerOfTwo::ReturnValue' has a wrong offset!");

// Function Altar.VOriginalImageTile.OnBrushUpdated
// 0x00D0 (0x00D0 - 0x0000)
struct VOriginalImageTile_OnBrushUpdated final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_OnBrushUpdated) == 0x000010, "Wrong alignment on VOriginalImageTile_OnBrushUpdated");
static_assert(sizeof(VOriginalImageTile_OnBrushUpdated) == 0x0000D0, "Wrong size on VOriginalImageTile_OnBrushUpdated");
static_assert(offsetof(VOriginalImageTile_OnBrushUpdated, Value) == 0x000000, "Member 'VOriginalImageTile_OnBrushUpdated::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.OnCorrectionDataUpdated
// 0x00F0 (0x00F0 - 0x0000)
struct VOriginalImageTile_OnCorrectionDataUpdated final
{
public:
	struct FImageCorrectionData                   Value;                                             // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_OnCorrectionDataUpdated) == 0x000010, "Wrong alignment on VOriginalImageTile_OnCorrectionDataUpdated");
static_assert(sizeof(VOriginalImageTile_OnCorrectionDataUpdated) == 0x0000F0, "Wrong size on VOriginalImageTile_OnCorrectionDataUpdated");
static_assert(offsetof(VOriginalImageTile_OnCorrectionDataUpdated, Value) == 0x000000, "Member 'VOriginalImageTile_OnCorrectionDataUpdated::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.OnFixPowerOfTwoOffsetsUpdated
// 0x0001 (0x0001 - 0x0000)
struct VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated) == 0x000001, "Wrong alignment on VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated");
static_assert(sizeof(VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated) == 0x000001, "Wrong size on VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated");
static_assert(offsetof(VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated, Value) == 0x000000, "Member 'VOriginalImageTile_OnFixPowerOfTwoOffsetsUpdated::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.OnOriginalImageSizeUpdated
// 0x0010 (0x0010 - 0x0000)
struct VOriginalImageTile_OnOriginalImageSizeUpdated final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_OnOriginalImageSizeUpdated) == 0x000008, "Wrong alignment on VOriginalImageTile_OnOriginalImageSizeUpdated");
static_assert(sizeof(VOriginalImageTile_OnOriginalImageSizeUpdated) == 0x000010, "Wrong size on VOriginalImageTile_OnOriginalImageSizeUpdated");
static_assert(offsetof(VOriginalImageTile_OnOriginalImageSizeUpdated, Value) == 0x000000, "Member 'VOriginalImageTile_OnOriginalImageSizeUpdated::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.SetBrush
// 0x00D0 (0x00D0 - 0x0000)
struct VOriginalImageTile_SetBrush final
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_SetBrush) == 0x000010, "Wrong alignment on VOriginalImageTile_SetBrush");
static_assert(sizeof(VOriginalImageTile_SetBrush) == 0x0000D0, "Wrong size on VOriginalImageTile_SetBrush");
static_assert(offsetof(VOriginalImageTile_SetBrush, Value) == 0x000000, "Member 'VOriginalImageTile_SetBrush::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.SetCorrectionData
// 0x00F0 (0x00F0 - 0x0000)
struct VOriginalImageTile_SetCorrectionData final
{
public:
	struct FImageCorrectionData                   Value;                                             // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_SetCorrectionData) == 0x000010, "Wrong alignment on VOriginalImageTile_SetCorrectionData");
static_assert(sizeof(VOriginalImageTile_SetCorrectionData) == 0x0000F0, "Wrong size on VOriginalImageTile_SetCorrectionData");
static_assert(offsetof(VOriginalImageTile_SetCorrectionData, Value) == 0x000000, "Member 'VOriginalImageTile_SetCorrectionData::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.SetFixPowerOfTwoOffsets
// 0x0001 (0x0001 - 0x0000)
struct VOriginalImageTile_SetFixPowerOfTwoOffsets final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_SetFixPowerOfTwoOffsets) == 0x000001, "Wrong alignment on VOriginalImageTile_SetFixPowerOfTwoOffsets");
static_assert(sizeof(VOriginalImageTile_SetFixPowerOfTwoOffsets) == 0x000001, "Wrong size on VOriginalImageTile_SetFixPowerOfTwoOffsets");
static_assert(offsetof(VOriginalImageTile_SetFixPowerOfTwoOffsets, Value) == 0x000000, "Member 'VOriginalImageTile_SetFixPowerOfTwoOffsets::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.SetOriginalImageSize
// 0x0010 (0x0010 - 0x0000)
struct VOriginalImageTile_SetOriginalImageSize final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_SetOriginalImageSize) == 0x000008, "Wrong alignment on VOriginalImageTile_SetOriginalImageSize");
static_assert(sizeof(VOriginalImageTile_SetOriginalImageSize) == 0x000010, "Wrong size on VOriginalImageTile_SetOriginalImageSize");
static_assert(offsetof(VOriginalImageTile_SetOriginalImageSize, Value) == 0x000000, "Member 'VOriginalImageTile_SetOriginalImageSize::Value' has a wrong offset!");

// Function Altar.VOriginalImageTile.GetCorrectionData
// 0x00F0 (0x00F0 - 0x0000)
struct VOriginalImageTile_GetCorrectionData final
{
public:
	struct FImageCorrectionData                   ReturnValue;                                       // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginalImageTile_GetCorrectionData) == 0x000010, "Wrong alignment on VOriginalImageTile_GetCorrectionData");
static_assert(sizeof(VOriginalImageTile_GetCorrectionData) == 0x0000F0, "Wrong size on VOriginalImageTile_GetCorrectionData");
static_assert(offsetof(VOriginalImageTile_GetCorrectionData, ReturnValue) == 0x000000, "Member 'VOriginalImageTile_GetCorrectionData::ReturnValue' has a wrong offset!");

// Function Altar.VOriginal_InventoryFilter.ActivateFilter
// 0x0008 (0x0008 - 0x0000)
struct VOriginal_InventoryFilter_ActivateFilter final
{
public:
	class UCommonUserWidget*                      Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginal_InventoryFilter_ActivateFilter) == 0x000008, "Wrong alignment on VOriginal_InventoryFilter_ActivateFilter");
static_assert(sizeof(VOriginal_InventoryFilter_ActivateFilter) == 0x000008, "Wrong size on VOriginal_InventoryFilter_ActivateFilter");
static_assert(offsetof(VOriginal_InventoryFilter_ActivateFilter, Activator) == 0x000000, "Member 'VOriginal_InventoryFilter_ActivateFilter::Activator' has a wrong offset!");

// Function Altar.VOriginal_InventoryFilter.OnFilterIconCreated
// 0x09B0 (0x09B0 - 0x0000)
struct VOriginal_InventoryFilter_OnFilterIconCreated final
{
public:
	class UCommonUserWidget*                      NewFilter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOriginal_InventoryFilterTableRow      FilterDesign;                                      // 0x0010(0x09A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginal_InventoryFilter_OnFilterIconCreated) == 0x000010, "Wrong alignment on VOriginal_InventoryFilter_OnFilterIconCreated");
static_assert(sizeof(VOriginal_InventoryFilter_OnFilterIconCreated) == 0x0009B0, "Wrong size on VOriginal_InventoryFilter_OnFilterIconCreated");
static_assert(offsetof(VOriginal_InventoryFilter_OnFilterIconCreated, NewFilter) == 0x000000, "Member 'VOriginal_InventoryFilter_OnFilterIconCreated::NewFilter' has a wrong offset!");
static_assert(offsetof(VOriginal_InventoryFilter_OnFilterIconCreated, FilterDesign) == 0x000010, "Member 'VOriginal_InventoryFilter_OnFilterIconCreated::FilterDesign' has a wrong offset!");

// Function Altar.VOriginal_InventoryFilter.RequestUpdateFilterWidget
// 0x0010 (0x0010 - 0x0000)
struct VOriginal_InventoryFilter_RequestUpdateFilterWidget final
{
public:
	class UCommonUserWidget*                      Filter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisplayed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VOriginal_InventoryFilter_RequestUpdateFilterWidget) == 0x000008, "Wrong alignment on VOriginal_InventoryFilter_RequestUpdateFilterWidget");
static_assert(sizeof(VOriginal_InventoryFilter_RequestUpdateFilterWidget) == 0x000010, "Wrong size on VOriginal_InventoryFilter_RequestUpdateFilterWidget");
static_assert(offsetof(VOriginal_InventoryFilter_RequestUpdateFilterWidget, Filter) == 0x000000, "Member 'VOriginal_InventoryFilter_RequestUpdateFilterWidget::Filter' has a wrong offset!");
static_assert(offsetof(VOriginal_InventoryFilter_RequestUpdateFilterWidget, bIsDisplayed) == 0x000008, "Member 'VOriginal_InventoryFilter_RequestUpdateFilterWidget::bIsDisplayed' has a wrong offset!");
static_assert(offsetof(VOriginal_InventoryFilter_RequestUpdateFilterWidget, bIsEnable) == 0x000009, "Member 'VOriginal_InventoryFilter_RequestUpdateFilterWidget::bIsEnable' has a wrong offset!");

// Function Altar.VOriginal_InventoryFilter.SetActiveFilter
// 0x0001 (0x0001 - 0x0000)
struct VOriginal_InventoryFilter_SetActiveFilter final
{
public:
	EOriginalInventoryMenuSortType                ActiveFilterEnum;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginal_InventoryFilter_SetActiveFilter) == 0x000001, "Wrong alignment on VOriginal_InventoryFilter_SetActiveFilter");
static_assert(sizeof(VOriginal_InventoryFilter_SetActiveFilter) == 0x000001, "Wrong size on VOriginal_InventoryFilter_SetActiveFilter");
static_assert(offsetof(VOriginal_InventoryFilter_SetActiveFilter, ActiveFilterEnum) == 0x000000, "Member 'VOriginal_InventoryFilter_SetActiveFilter::ActiveFilterEnum' has a wrong offset!");

// Function Altar.VOriginal_InventoryFilter.SetEnabledFilters
// 0x0010 (0x0010 - 0x0000)
struct VOriginal_InventoryFilter_SetEnabledFilters final
{
public:
	TArray<EOriginalInventoryMenuSortType>        EnabledFilterEnums;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VOriginal_InventoryFilter_SetEnabledFilters) == 0x000008, "Wrong alignment on VOriginal_InventoryFilter_SetEnabledFilters");
static_assert(sizeof(VOriginal_InventoryFilter_SetEnabledFilters) == 0x000010, "Wrong size on VOriginal_InventoryFilter_SetEnabledFilters");
static_assert(offsetof(VOriginal_InventoryFilter_SetEnabledFilters, EnabledFilterEnums) == 0x000000, "Member 'VOriginal_InventoryFilter_SetEnabledFilters::EnabledFilterEnums' has a wrong offset!");

// Function Altar.VPairedAssetsLoadingSubsystem.RegisterPreloadRequestFromForm
// 0x0020 (0x0020 - 0x0000)
struct VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm final
{
public:
	const class UTESForm*                         InPairedActorForm;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVPreloadPriority                             InPriority;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         InOwnerInstanceFormID;                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm) == 0x000008, "Wrong alignment on VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm");
static_assert(sizeof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm) == 0x000020, "Wrong size on VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm, InPairedActorForm) == 0x000000, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm::InPairedActorForm' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm, InPriority) == 0x000008, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm::InPriority' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm, InOwnerInstanceFormID) == 0x000010, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm::InOwnerInstanceFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm, ReturnValue) == 0x000018, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromForm::ReturnValue' has a wrong offset!");

// Function Altar.VPairedAssetsLoadingSubsystem.RegisterPreloadRequestFromFormID
// 0x0020 (0x0020 - 0x0000)
struct VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID final
{
public:
	int64                                         InPairedActorFormID;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVPreloadPriority                             InPriority;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         InOwnerInstanceFormID;                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID) == 0x000008, "Wrong alignment on VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID");
static_assert(sizeof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID) == 0x000020, "Wrong size on VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID, InPairedActorFormID) == 0x000000, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID::InPairedActorFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID, InPriority) == 0x000008, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID::InPriority' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID, InOwnerInstanceFormID) == 0x000010, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID::InOwnerInstanceFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID, ReturnValue) == 0x000018, "Member 'VPairedAssetsLoadingSubsystem_RegisterPreloadRequestFromFormID::ReturnValue' has a wrong offset!");

// Function Altar.VPairedAssetsLoadingSubsystem.UnregisterPreloadRequestFromForm
// 0x0018 (0x0018 - 0x0000)
struct VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm final
{
public:
	const class UTESForm*                         InPairedActorForm;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InOwnerInstanceFormID;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm) == 0x000008, "Wrong alignment on VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm");
static_assert(sizeof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm) == 0x000018, "Wrong size on VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm, InPairedActorForm) == 0x000000, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm::InPairedActorForm' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm, InOwnerInstanceFormID) == 0x000008, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm::InOwnerInstanceFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm, ReturnValue) == 0x000010, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromForm::ReturnValue' has a wrong offset!");

// Function Altar.VPairedAssetsLoadingSubsystem.UnregisterPreloadRequestFromFormID
// 0x0018 (0x0018 - 0x0000)
struct VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID final
{
public:
	int64                                         InPairedActorFormID;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InOwnerInstanceFormID;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID) == 0x000008, "Wrong alignment on VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID");
static_assert(sizeof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID) == 0x000018, "Wrong size on VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID, InPairedActorFormID) == 0x000000, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID::InPairedActorFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID, InOwnerInstanceFormID) == 0x000008, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID::InOwnerInstanceFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID, ReturnValue) == 0x000010, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromFormID::ReturnValue' has a wrong offset!");

// Function Altar.VPairedAssetsLoadingSubsystem.UnregisterPreloadRequestFromRequestID
// 0x0018 (0x0018 - 0x0000)
struct VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID final
{
public:
	int64                                         InPreloadRequestID;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InOwnerInstanceFormID;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID) == 0x000008, "Wrong alignment on VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID");
static_assert(sizeof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID) == 0x000018, "Wrong size on VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID, InPreloadRequestID) == 0x000000, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID::InPreloadRequestID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID, InOwnerInstanceFormID) == 0x000008, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID::InOwnerInstanceFormID' has a wrong offset!");
static_assert(offsetof(VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID, ReturnValue) == 0x000010, "Member 'VPairedAssetsLoadingSubsystem_UnregisterPreloadRequestFromRequestID::ReturnValue' has a wrong offset!");

// Function Altar.AnimNotifyActionEventInfo.GetNotifyDuration
// 0x0004 (0x0004 - 0x0000)
struct AnimNotifyActionEventInfo_GetNotifyDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyActionEventInfo_GetNotifyDuration) == 0x000004, "Wrong alignment on AnimNotifyActionEventInfo_GetNotifyDuration");
static_assert(sizeof(AnimNotifyActionEventInfo_GetNotifyDuration) == 0x000004, "Wrong size on AnimNotifyActionEventInfo_GetNotifyDuration");
static_assert(offsetof(AnimNotifyActionEventInfo_GetNotifyDuration, ReturnValue) == 0x000000, "Member 'AnimNotifyActionEventInfo_GetNotifyDuration::ReturnValue' has a wrong offset!");

// Function Altar.VPawnAnimatedAction.IsValid
// 0x0001 (0x0001 - 0x0000)
struct VPawnAnimatedAction_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPawnAnimatedAction_IsValid) == 0x000001, "Wrong alignment on VPawnAnimatedAction_IsValid");
static_assert(sizeof(VPawnAnimatedAction_IsValid) == 0x000001, "Wrong size on VPawnAnimatedAction_IsValid");
static_assert(offsetof(VPawnAnimatedAction_IsValid, ReturnValue) == 0x000000, "Member 'VPawnAnimatedAction_IsValid::ReturnValue' has a wrong offset!");

// Function Altar.VSpellCastSingleAnimInstance.OnCastSelfLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastSingleAnimInstance_OnCastSelfLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastSingleAnimInstance_OnCastSelfLeftEnter) == 0x000008, "Wrong alignment on VSpellCastSingleAnimInstance_OnCastSelfLeftEnter");
static_assert(sizeof(VSpellCastSingleAnimInstance_OnCastSelfLeftEnter) == 0x000020, "Wrong size on VSpellCastSingleAnimInstance_OnCastSelfLeftEnter");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastSelfLeftEnter, Context) == 0x000000, "Member 'VSpellCastSingleAnimInstance_OnCastSelfLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastSelfLeftEnter, Node) == 0x000010, "Member 'VSpellCastSingleAnimInstance_OnCastSelfLeftEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastSingleAnimInstance.OnCastSelfRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastSingleAnimInstance_OnCastSelfRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastSingleAnimInstance_OnCastSelfRightEnter) == 0x000008, "Wrong alignment on VSpellCastSingleAnimInstance_OnCastSelfRightEnter");
static_assert(sizeof(VSpellCastSingleAnimInstance_OnCastSelfRightEnter) == 0x000020, "Wrong size on VSpellCastSingleAnimInstance_OnCastSelfRightEnter");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastSelfRightEnter, Context) == 0x000000, "Member 'VSpellCastSingleAnimInstance_OnCastSelfRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastSelfRightEnter, Node) == 0x000010, "Member 'VSpellCastSingleAnimInstance_OnCastSelfRightEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastSingleAnimInstance.OnCastTargeRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastSingleAnimInstance_OnCastTargeRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastSingleAnimInstance_OnCastTargeRightEnter) == 0x000008, "Wrong alignment on VSpellCastSingleAnimInstance_OnCastTargeRightEnter");
static_assert(sizeof(VSpellCastSingleAnimInstance_OnCastTargeRightEnter) == 0x000020, "Wrong size on VSpellCastSingleAnimInstance_OnCastTargeRightEnter");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTargeRightEnter, Context) == 0x000000, "Member 'VSpellCastSingleAnimInstance_OnCastTargeRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTargeRightEnter, Node) == 0x000010, "Member 'VSpellCastSingleAnimInstance_OnCastTargeRightEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastSingleAnimInstance.OnCastTargetLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastSingleAnimInstance_OnCastTargetLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastSingleAnimInstance_OnCastTargetLeftEnter) == 0x000008, "Wrong alignment on VSpellCastSingleAnimInstance_OnCastTargetLeftEnter");
static_assert(sizeof(VSpellCastSingleAnimInstance_OnCastTargetLeftEnter) == 0x000020, "Wrong size on VSpellCastSingleAnimInstance_OnCastTargetLeftEnter");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTargetLeftEnter, Context) == 0x000000, "Member 'VSpellCastSingleAnimInstance_OnCastTargetLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTargetLeftEnter, Node) == 0x000010, "Member 'VSpellCastSingleAnimInstance_OnCastTargetLeftEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastSingleAnimInstance.OnCastTouchLeftEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastSingleAnimInstance_OnCastTouchLeftEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastSingleAnimInstance_OnCastTouchLeftEnter) == 0x000008, "Wrong alignment on VSpellCastSingleAnimInstance_OnCastTouchLeftEnter");
static_assert(sizeof(VSpellCastSingleAnimInstance_OnCastTouchLeftEnter) == 0x000020, "Wrong size on VSpellCastSingleAnimInstance_OnCastTouchLeftEnter");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTouchLeftEnter, Context) == 0x000000, "Member 'VSpellCastSingleAnimInstance_OnCastTouchLeftEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTouchLeftEnter, Node) == 0x000010, "Member 'VSpellCastSingleAnimInstance_OnCastTouchLeftEnter::Node' has a wrong offset!");

// Function Altar.VSpellCastSingleAnimInstance.OnCastTouchRightEnter
// 0x0020 (0x0020 - 0x0000)
struct VSpellCastSingleAnimInstance_OnCastTouchRightEnter final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellCastSingleAnimInstance_OnCastTouchRightEnter) == 0x000008, "Wrong alignment on VSpellCastSingleAnimInstance_OnCastTouchRightEnter");
static_assert(sizeof(VSpellCastSingleAnimInstance_OnCastTouchRightEnter) == 0x000020, "Wrong size on VSpellCastSingleAnimInstance_OnCastTouchRightEnter");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTouchRightEnter, Context) == 0x000000, "Member 'VSpellCastSingleAnimInstance_OnCastTouchRightEnter::Context' has a wrong offset!");
static_assert(offsetof(VSpellCastSingleAnimInstance_OnCastTouchRightEnter, Node) == 0x000010, "Member 'VSpellCastSingleAnimInstance_OnCastTouchRightEnter::Node' has a wrong offset!");

// Function Altar.VAltarAIBlackboard.ClearValue
// 0x0008 (0x0008 - 0x0000)
struct VAltarAIBlackboard_ClearValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarAIBlackboard_ClearValue) == 0x000004, "Wrong alignment on VAltarAIBlackboard_ClearValue");
static_assert(sizeof(VAltarAIBlackboard_ClearValue) == 0x000008, "Wrong size on VAltarAIBlackboard_ClearValue");
static_assert(offsetof(VAltarAIBlackboard_ClearValue, Tag) == 0x000000, "Member 'VAltarAIBlackboard_ClearValue::Tag' has a wrong offset!");

// Function Altar.VAltarAIBlackboard.SetScalarValue
// 0x000C (0x000C - 0x0000)
struct VAltarAIBlackboard_SetScalarValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarAIBlackboard_SetScalarValue) == 0x000004, "Wrong alignment on VAltarAIBlackboard_SetScalarValue");
static_assert(sizeof(VAltarAIBlackboard_SetScalarValue) == 0x00000C, "Wrong size on VAltarAIBlackboard_SetScalarValue");
static_assert(offsetof(VAltarAIBlackboard_SetScalarValue, Tag) == 0x000000, "Member 'VAltarAIBlackboard_SetScalarValue::Tag' has a wrong offset!");
static_assert(offsetof(VAltarAIBlackboard_SetScalarValue, Value) == 0x000008, "Member 'VAltarAIBlackboard_SetScalarValue::Value' has a wrong offset!");

// Function Altar.VAltarAIBlackboard.HasValue
// 0x000C (0x000C - 0x0000)
struct VAltarAIBlackboard_HasValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VAltarAIBlackboard_HasValue) == 0x000004, "Wrong alignment on VAltarAIBlackboard_HasValue");
static_assert(sizeof(VAltarAIBlackboard_HasValue) == 0x00000C, "Wrong size on VAltarAIBlackboard_HasValue");
static_assert(offsetof(VAltarAIBlackboard_HasValue, Tag) == 0x000000, "Member 'VAltarAIBlackboard_HasValue::Tag' has a wrong offset!");
static_assert(offsetof(VAltarAIBlackboard_HasValue, ReturnValue) == 0x000008, "Member 'VAltarAIBlackboard_HasValue::ReturnValue' has a wrong offset!");

// Function Altar.VAltarAIBlackboard.ReadScalarValue
// 0x000C (0x000C - 0x0000)
struct VAltarAIBlackboard_ReadScalarValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VAltarAIBlackboard_ReadScalarValue) == 0x000004, "Wrong alignment on VAltarAIBlackboard_ReadScalarValue");
static_assert(sizeof(VAltarAIBlackboard_ReadScalarValue) == 0x00000C, "Wrong size on VAltarAIBlackboard_ReadScalarValue");
static_assert(offsetof(VAltarAIBlackboard_ReadScalarValue, Tag) == 0x000000, "Member 'VAltarAIBlackboard_ReadScalarValue::Tag' has a wrong offset!");
static_assert(offsetof(VAltarAIBlackboard_ReadScalarValue, ReturnValue) == 0x000008, "Member 'VAltarAIBlackboard_ReadScalarValue::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnAIController.OnControlledPawnWeaponChanged
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawnAIController_OnControlledPawnWeaponChanged final
{
public:
	const class AVWeapon*                         NewWeaponForm;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnAIController_OnControlledPawnWeaponChanged) == 0x000008, "Wrong alignment on VPairedPawnAIController_OnControlledPawnWeaponChanged");
static_assert(sizeof(VPairedPawnAIController_OnControlledPawnWeaponChanged) == 0x000008, "Wrong size on VPairedPawnAIController_OnControlledPawnWeaponChanged");
static_assert(offsetof(VPairedPawnAIController_OnControlledPawnWeaponChanged, NewWeaponForm) == 0x000000, "Member 'VPairedPawnAIController_OnControlledPawnWeaponChanged::NewWeaponForm' has a wrong offset!");

// Function Altar.VPairedPawnAIController.ComputePackageRadius
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawnAIController_ComputePackageRadius final
{
public:
	int32                                         RadiusTypeIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnAIController_ComputePackageRadius) == 0x000004, "Wrong alignment on VPairedPawnAIController_ComputePackageRadius");
static_assert(sizeof(VPairedPawnAIController_ComputePackageRadius) == 0x000008, "Wrong size on VPairedPawnAIController_ComputePackageRadius");
static_assert(offsetof(VPairedPawnAIController_ComputePackageRadius, RadiusTypeIndex) == 0x000000, "Member 'VPairedPawnAIController_ComputePackageRadius::RadiusTypeIndex' has a wrong offset!");
static_assert(offsetof(VPairedPawnAIController_ComputePackageRadius, ReturnValue) == 0x000004, "Member 'VPairedPawnAIController_ComputePackageRadius::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnAIController.GetDynamicTargetActor
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawnAIController_GetDynamicTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnAIController_GetDynamicTargetActor) == 0x000008, "Wrong alignment on VPairedPawnAIController_GetDynamicTargetActor");
static_assert(sizeof(VPairedPawnAIController_GetDynamicTargetActor) == 0x000008, "Wrong size on VPairedPawnAIController_GetDynamicTargetActor");
static_assert(offsetof(VPairedPawnAIController_GetDynamicTargetActor, ReturnValue) == 0x000000, "Member 'VPairedPawnAIController_GetDynamicTargetActor::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnAIController.HasDynamicTarget
// 0x0001 (0x0001 - 0x0000)
struct VPairedPawnAIController_HasDynamicTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnAIController_HasDynamicTarget) == 0x000001, "Wrong alignment on VPairedPawnAIController_HasDynamicTarget");
static_assert(sizeof(VPairedPawnAIController_HasDynamicTarget) == 0x000001, "Wrong size on VPairedPawnAIController_HasDynamicTarget");
static_assert(offsetof(VPairedPawnAIController_HasDynamicTarget, ReturnValue) == 0x000000, "Member 'VPairedPawnAIController_HasDynamicTarget::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnStateMachineComponent.GetActionState
// 0x0010 (0x0010 - 0x0000)
struct VPairedPawnStateMachineComponent_GetActionState final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnStateMachineComponent_GetActionState) == 0x000008, "Wrong alignment on VPairedPawnStateMachineComponent_GetActionState");
static_assert(sizeof(VPairedPawnStateMachineComponent_GetActionState) == 0x000010, "Wrong size on VPairedPawnStateMachineComponent_GetActionState");
static_assert(offsetof(VPairedPawnStateMachineComponent_GetActionState, ReturnValue) == 0x000000, "Member 'VPairedPawnStateMachineComponent_GetActionState::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnStateMachineComponent.GetActionStateDuration
// 0x0004 (0x0004 - 0x0000)
struct VPairedPawnStateMachineComponent_GetActionStateDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnStateMachineComponent_GetActionStateDuration) == 0x000004, "Wrong alignment on VPairedPawnStateMachineComponent_GetActionStateDuration");
static_assert(sizeof(VPairedPawnStateMachineComponent_GetActionStateDuration) == 0x000004, "Wrong size on VPairedPawnStateMachineComponent_GetActionStateDuration");
static_assert(offsetof(VPairedPawnStateMachineComponent_GetActionStateDuration, ReturnValue) == 0x000000, "Member 'VPairedPawnStateMachineComponent_GetActionStateDuration::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnStateMachineComponent.GetActionStateTag
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawnStateMachineComponent_GetActionStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnStateMachineComponent_GetActionStateTag) == 0x000004, "Wrong alignment on VPairedPawnStateMachineComponent_GetActionStateTag");
static_assert(sizeof(VPairedPawnStateMachineComponent_GetActionStateTag) == 0x000008, "Wrong size on VPairedPawnStateMachineComponent_GetActionStateTag");
static_assert(offsetof(VPairedPawnStateMachineComponent_GetActionStateTag, ReturnValue) == 0x000000, "Member 'VPairedPawnStateMachineComponent_GetActionStateTag::ReturnValue' has a wrong offset!");

// Function Altar.VPairedPawnStateMachineComponent.GetLocomotionStateTag
// 0x0008 (0x0008 - 0x0000)
struct VPairedPawnStateMachineComponent_GetLocomotionStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPairedPawnStateMachineComponent_GetLocomotionStateTag) == 0x000004, "Wrong alignment on VPairedPawnStateMachineComponent_GetLocomotionStateTag");
static_assert(sizeof(VPairedPawnStateMachineComponent_GetLocomotionStateTag) == 0x000008, "Wrong size on VPairedPawnStateMachineComponent_GetLocomotionStateTag");
static_assert(offsetof(VPairedPawnStateMachineComponent_GetLocomotionStateTag, ReturnValue) == 0x000000, "Member 'VPairedPawnStateMachineComponent_GetLocomotionStateTag::ReturnValue' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.AttachVFX
// 0x0018 (0x0018 - 0x0000)
struct VParticleEffectPairingComponent_AttachVFX final
{
public:
	class FString                                 VisualEffectKey;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         VisualEffect;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_AttachVFX) == 0x000008, "Wrong alignment on VParticleEffectPairingComponent_AttachVFX");
static_assert(sizeof(VParticleEffectPairingComponent_AttachVFX) == 0x000018, "Wrong size on VParticleEffectPairingComponent_AttachVFX");
static_assert(offsetof(VParticleEffectPairingComponent_AttachVFX, VisualEffectKey) == 0x000000, "Member 'VParticleEffectPairingComponent_AttachVFX::VisualEffectKey' has a wrong offset!");
static_assert(offsetof(VParticleEffectPairingComponent_AttachVFX, VisualEffect) == 0x000010, "Member 'VParticleEffectPairingComponent_AttachVFX::VisualEffect' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.OrderActorDestruction
// 0x0001 (0x0001 - 0x0000)
struct VParticleEffectPairingComponent_OrderActorDestruction final
{
public:
	bool                                          bDoesStopEmitting;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_OrderActorDestruction) == 0x000001, "Wrong alignment on VParticleEffectPairingComponent_OrderActorDestruction");
static_assert(sizeof(VParticleEffectPairingComponent_OrderActorDestruction) == 0x000001, "Wrong size on VParticleEffectPairingComponent_OrderActorDestruction");
static_assert(offsetof(VParticleEffectPairingComponent_OrderActorDestruction, bDoesStopEmitting) == 0x000000, "Member 'VParticleEffectPairingComponent_OrderActorDestruction::bDoesStopEmitting' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.SetAutoplay
// 0x0001 (0x0001 - 0x0000)
struct VParticleEffectPairingComponent_SetAutoplay final
{
public:
	bool                                          bInDoesAutoplay;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_SetAutoplay) == 0x000001, "Wrong alignment on VParticleEffectPairingComponent_SetAutoplay");
static_assert(sizeof(VParticleEffectPairingComponent_SetAutoplay) == 0x000001, "Wrong size on VParticleEffectPairingComponent_SetAutoplay");
static_assert(offsetof(VParticleEffectPairingComponent_SetAutoplay, bInDoesAutoplay) == 0x000000, "Member 'VParticleEffectPairingComponent_SetAutoplay::bInDoesAutoplay' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.SetCanBeDestroyed
// 0x0001 (0x0001 - 0x0000)
struct VParticleEffectPairingComponent_SetCanBeDestroyed final
{
public:
	bool                                          bInCanBeDestroyed;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_SetCanBeDestroyed) == 0x000001, "Wrong alignment on VParticleEffectPairingComponent_SetCanBeDestroyed");
static_assert(sizeof(VParticleEffectPairingComponent_SetCanBeDestroyed) == 0x000001, "Wrong size on VParticleEffectPairingComponent_SetCanBeDestroyed");
static_assert(offsetof(VParticleEffectPairingComponent_SetCanBeDestroyed, bInCanBeDestroyed) == 0x000000, "Member 'VParticleEffectPairingComponent_SetCanBeDestroyed::bInCanBeDestroyed' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.StopVFX
// 0x0001 (0x0001 - 0x0000)
struct VParticleEffectPairingComponent_StopVFX final
{
public:
	bool                                          bDoesStopImmediately;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_StopVFX) == 0x000001, "Wrong alignment on VParticleEffectPairingComponent_StopVFX");
static_assert(sizeof(VParticleEffectPairingComponent_StopVFX) == 0x000001, "Wrong size on VParticleEffectPairingComponent_StopVFX");
static_assert(offsetof(VParticleEffectPairingComponent_StopVFX, bDoesStopImmediately) == 0x000000, "Member 'VParticleEffectPairingComponent_StopVFX::bDoesStopImmediately' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.TriggerVFX
// 0x0010 (0x0010 - 0x0000)
struct VParticleEffectPairingComponent_TriggerVFX final
{
public:
	class FString                                 SequenceName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_TriggerVFX) == 0x000008, "Wrong alignment on VParticleEffectPairingComponent_TriggerVFX");
static_assert(sizeof(VParticleEffectPairingComponent_TriggerVFX) == 0x000010, "Wrong size on VParticleEffectPairingComponent_TriggerVFX");
static_assert(offsetof(VParticleEffectPairingComponent_TriggerVFX, SequenceName) == 0x000000, "Member 'VParticleEffectPairingComponent_TriggerVFX::SequenceName' has a wrong offset!");

// Function Altar.VParticleEffectPairingComponent.GetNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct VParticleEffectPairingComponent_GetNiagaraComponent final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VParticleEffectPairingComponent_GetNiagaraComponent) == 0x000008, "Wrong alignment on VParticleEffectPairingComponent_GetNiagaraComponent");
static_assert(sizeof(VParticleEffectPairingComponent_GetNiagaraComponent) == 0x000008, "Wrong size on VParticleEffectPairingComponent_GetNiagaraComponent");
static_assert(offsetof(VParticleEffectPairingComponent_GetNiagaraComponent, ReturnValue) == 0x000000, "Member 'VParticleEffectPairingComponent_GetNiagaraComponent::ReturnValue' has a wrong offset!");

// Function Altar.VPawnSparkVFXBlueprint.OnStartPlay
// 0x0020 (0x0020 - 0x0000)
struct VPawnSparkVFXBlueprint_OnStartPlay final
{
public:
	bool                                          bIsBlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Damages;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Attacker;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesBeginInFirstPerson;                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceType                               HitSourceType;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVHitSourceMaterial                           HitSourceMaterial;                                 // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPawnSparkVFXBlueprint_OnStartPlay) == 0x000008, "Wrong alignment on VPawnSparkVFXBlueprint_OnStartPlay");
static_assert(sizeof(VPawnSparkVFXBlueprint_OnStartPlay) == 0x000020, "Wrong size on VPawnSparkVFXBlueprint_OnStartPlay");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, bIsBlocked) == 0x000000, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::bIsBlocked' has a wrong offset!");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, Damages) == 0x000004, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::Damages' has a wrong offset!");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, Target) == 0x000008, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::Target' has a wrong offset!");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, Attacker) == 0x000010, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::Attacker' has a wrong offset!");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, bDoesBeginInFirstPerson) == 0x000018, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::bDoesBeginInFirstPerson' has a wrong offset!");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, HitSourceType) == 0x000019, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::HitSourceType' has a wrong offset!");
static_assert(offsetof(VPawnSparkVFXBlueprint_OnStartPlay, HitSourceMaterial) == 0x00001A, "Member 'VPawnSparkVFXBlueprint_OnStartPlay::HitSourceMaterial' has a wrong offset!");

// Function Altar.VPhysicsControllableWidget.UpdateDisplayedData
// 0x00E0 (0x00E0 - 0x0000)
struct VPhysicsControllableWidget_UpdateDisplayedData final
{
public:
	struct FVPhysicsControllableDebugData         ControllableDebugData;                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsControllableWidget_UpdateDisplayedData) == 0x000010, "Wrong alignment on VPhysicsControllableWidget_UpdateDisplayedData");
static_assert(sizeof(VPhysicsControllableWidget_UpdateDisplayedData) == 0x0000E0, "Wrong size on VPhysicsControllableWidget_UpdateDisplayedData");
static_assert(offsetof(VPhysicsControllableWidget_UpdateDisplayedData, ControllableDebugData) == 0x000000, "Member 'VPhysicsControllableWidget_UpdateDisplayedData::ControllableDebugData' has a wrong offset!");
static_assert(offsetof(VPhysicsControllableWidget_UpdateDisplayedData, DataIndex) == 0x0000D0, "Member 'VPhysicsControllableWidget_UpdateDisplayedData::DataIndex' has a wrong offset!");

// Function Altar.VPhysicsControllableWidget.UpdateEntries
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllableWidget_UpdateEntries final
{
public:
	TArray<class UVControllableEntry*>            ControllableEntries;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllableWidget_UpdateEntries) == 0x000008, "Wrong alignment on VPhysicsControllableWidget_UpdateEntries");
static_assert(sizeof(VPhysicsControllableWidget_UpdateEntries) == 0x000010, "Wrong size on VPhysicsControllableWidget_UpdateEntries");
static_assert(offsetof(VPhysicsControllableWidget_UpdateEntries, ControllableEntries) == 0x000000, "Member 'VPhysicsControllableWidget_UpdateEntries::ControllableEntries' has a wrong offset!");

// Function Altar.VPhysicsControllableWidget.GetCurrentMapName
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllableWidget_GetCurrentMapName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllableWidget_GetCurrentMapName) == 0x000008, "Wrong alignment on VPhysicsControllableWidget_GetCurrentMapName");
static_assert(sizeof(VPhysicsControllableWidget_GetCurrentMapName) == 0x000010, "Wrong size on VPhysicsControllableWidget_GetCurrentMapName");
static_assert(offsetof(VPhysicsControllableWidget_GetCurrentMapName, ReturnValue) == 0x000000, "Member 'VPhysicsControllableWidget_GetCurrentMapName::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.ChangeDampingValues
// 0x0004 (0x0004 - 0x0000)
struct VPhysicsControllerComponent_ChangeDampingValues final
{
public:
	float                                         DampingValuesMultiplier;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_ChangeDampingValues) == 0x000004, "Wrong alignment on VPhysicsControllerComponent_ChangeDampingValues");
static_assert(sizeof(VPhysicsControllerComponent_ChangeDampingValues) == 0x000004, "Wrong size on VPhysicsControllerComponent_ChangeDampingValues");
static_assert(offsetof(VPhysicsControllerComponent_ChangeDampingValues, DampingValuesMultiplier) == 0x000000, "Member 'VPhysicsControllerComponent_ChangeDampingValues::DampingValuesMultiplier' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.ClearWaterBodyInfo
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllerComponent_ClearWaterBodyInfo final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_ClearWaterBodyInfo) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_ClearWaterBodyInfo");
static_assert(sizeof(VPhysicsControllerComponent_ClearWaterBodyInfo) == 0x000010, "Wrong size on VPhysicsControllerComponent_ClearWaterBodyInfo");
static_assert(offsetof(VPhysicsControllerComponent_ClearWaterBodyInfo, OverlappedActor) == 0x000000, "Member 'VPhysicsControllerComponent_ClearWaterBodyInfo::OverlappedActor' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_ClearWaterBodyInfo, OtherActor) == 0x000008, "Member 'VPhysicsControllerComponent_ClearWaterBodyInfo::OtherActor' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.HandleCollisionSoundOnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnusedOtherBox;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnusedSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             EmptyHitResult;                                    // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap");
static_assert(sizeof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap) == 0x000108, "Wrong size on VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap, SourceComp) == 0x000000, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap::SourceComp' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap, TargetActor) == 0x000008, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap::TargetActor' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap, TargetComp) == 0x000010, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap::TargetComp' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap, UnusedOtherBox) == 0x000018, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap::UnusedOtherBox' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap, UnusedSweep) == 0x00001C, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap::UnusedSweep' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap, EmptyHitResult) == 0x000020, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnBeginOverlap::EmptyHitResult' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.HandleCollisionSoundOnHit
// 0x0118 (0x0118 - 0x0000)
struct VPhysicsControllerComponent_HandleCollisionSoundOnHit final
{
public:
	class UPrimitiveComponent*                    SourceComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    TargetComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_HandleCollisionSoundOnHit) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_HandleCollisionSoundOnHit");
static_assert(sizeof(VPhysicsControllerComponent_HandleCollisionSoundOnHit) == 0x000118, "Wrong size on VPhysicsControllerComponent_HandleCollisionSoundOnHit");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnHit, SourceComp) == 0x000000, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnHit::SourceComp' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnHit, TargetActor) == 0x000008, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnHit::TargetActor' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnHit, TargetComp) == 0x000010, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnHit::TargetComp' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnHit, NormalImpulse) == 0x000018, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_HandleCollisionSoundOnHit, Hit) == 0x000030, "Member 'VPhysicsControllerComponent_HandleCollisionSoundOnHit::Hit' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.OnComponentPhysicsStateChanged
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllerComponent_OnComponentPhysicsStateChanged final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentPhysicsStateChange                  State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsControllerComponent_OnComponentPhysicsStateChanged) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_OnComponentPhysicsStateChanged");
static_assert(sizeof(VPhysicsControllerComponent_OnComponentPhysicsStateChanged) == 0x000010, "Wrong size on VPhysicsControllerComponent_OnComponentPhysicsStateChanged");
static_assert(offsetof(VPhysicsControllerComponent_OnComponentPhysicsStateChanged, Component) == 0x000000, "Member 'VPhysicsControllerComponent_OnComponentPhysicsStateChanged::Component' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_OnComponentPhysicsStateChanged, State) == 0x000008, "Member 'VPhysicsControllerComponent_OnComponentPhysicsStateChanged::State' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.RetrieveWaterBodyInfo
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllerComponent_RetrieveWaterBodyInfo final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_RetrieveWaterBodyInfo) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_RetrieveWaterBodyInfo");
static_assert(sizeof(VPhysicsControllerComponent_RetrieveWaterBodyInfo) == 0x000010, "Wrong size on VPhysicsControllerComponent_RetrieveWaterBodyInfo");
static_assert(offsetof(VPhysicsControllerComponent_RetrieveWaterBodyInfo, OverlappedActor) == 0x000000, "Member 'VPhysicsControllerComponent_RetrieveWaterBodyInfo::OverlappedActor' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_RetrieveWaterBodyInfo, OtherActor) == 0x000008, "Member 'VPhysicsControllerComponent_RetrieveWaterBodyInfo::OtherActor' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.TryOwnerPerformSnapToEnvironment
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentPhysicsStateChange                  StateChange;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment");
static_assert(sizeof(VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment) == 0x000010, "Wrong size on VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment");
static_assert(offsetof(VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment, Component) == 0x000000, "Member 'VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment::Component' has a wrong offset!");
static_assert(offsetof(VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment, StateChange) == 0x000008, "Member 'VPhysicsControllerComponent_TryOwnerPerformSnapToEnvironment::StateChange' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.FindWaterInteractiveComponents
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsControllerComponent_FindWaterInteractiveComponents final
{
public:
	TArray<class UPrimitiveComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_FindWaterInteractiveComponents) == 0x000008, "Wrong alignment on VPhysicsControllerComponent_FindWaterInteractiveComponents");
static_assert(sizeof(VPhysicsControllerComponent_FindWaterInteractiveComponents) == 0x000010, "Wrong size on VPhysicsControllerComponent_FindWaterInteractiveComponents");
static_assert(offsetof(VPhysicsControllerComponent_FindWaterInteractiveComponents, ReturnValue) == 0x000000, "Member 'VPhysicsControllerComponent_FindWaterInteractiveComponents::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsControllerComponent.IsOwnerDisabled
// 0x0001 (0x0001 - 0x0000)
struct VPhysicsControllerComponent_IsOwnerDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsControllerComponent_IsOwnerDisabled) == 0x000001, "Wrong alignment on VPhysicsControllerComponent_IsOwnerDisabled");
static_assert(sizeof(VPhysicsControllerComponent_IsOwnerDisabled) == 0x000001, "Wrong size on VPhysicsControllerComponent_IsOwnerDisabled");
static_assert(offsetof(VPhysicsControllerComponent_IsOwnerDisabled, ReturnValue) == 0x000000, "Member 'VPhysicsControllerComponent_IsOwnerDisabled::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyEquippedProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyEquippedProfile final
{
public:
	class AActor*                                 EquippedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyEquippedProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyEquippedProfile");
static_assert(sizeof(VPhysicsUtilities_ApplyEquippedProfile) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyEquippedProfile");
static_assert(offsetof(VPhysicsUtilities_ApplyEquippedProfile, EquippedActor) == 0x000000, "Member 'VPhysicsUtilities_ApplyEquippedProfile::EquippedActor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyEquippedProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyEquippedProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyGhostProfiles
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_ApplyGhostProfiles final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyGhostProfiles) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyGhostProfiles");
static_assert(sizeof(VPhysicsUtilities_ApplyGhostProfiles) == 0x000008, "Wrong size on VPhysicsUtilities_ApplyGhostProfiles");
static_assert(offsetof(VPhysicsUtilities_ApplyGhostProfiles, Pawn) == 0x000000, "Member 'VPhysicsUtilities_ApplyGhostProfiles::Pawn' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyGrabbedProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyGrabbedProfile final
{
public:
	class AActor*                                 GrabbedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyGrabbedProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyGrabbedProfile");
static_assert(sizeof(VPhysicsUtilities_ApplyGrabbedProfile) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyGrabbedProfile");
static_assert(offsetof(VPhysicsUtilities_ApplyGrabbedProfile, GrabbedActor) == 0x000000, "Member 'VPhysicsUtilities_ApplyGrabbedProfile::GrabbedActor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyGrabbedProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyGrabbedProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyIgnoreCameraProfiles
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyIgnoreCameraProfiles final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyIgnoreCameraProfiles) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyIgnoreCameraProfiles");
static_assert(sizeof(VPhysicsUtilities_ApplyIgnoreCameraProfiles) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyIgnoreCameraProfiles");
static_assert(offsetof(VPhysicsUtilities_ApplyIgnoreCameraProfiles, Actor) == 0x000000, "Member 'VPhysicsUtilities_ApplyIgnoreCameraProfiles::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyIgnoreCameraProfiles, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyIgnoreCameraProfiles::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyInvisibilityProfiles
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_ApplyInvisibilityProfiles final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyInvisibilityProfiles) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyInvisibilityProfiles");
static_assert(sizeof(VPhysicsUtilities_ApplyInvisibilityProfiles) == 0x000008, "Wrong size on VPhysicsUtilities_ApplyInvisibilityProfiles");
static_assert(offsetof(VPhysicsUtilities_ApplyInvisibilityProfiles, Pawn) == 0x000000, "Member 'VPhysicsUtilities_ApplyInvisibilityProfiles::Pawn' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyNoCollisionProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyNoCollisionProfile final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyNoCollisionProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyNoCollisionProfile");
static_assert(sizeof(VPhysicsUtilities_ApplyNoCollisionProfile) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyNoCollisionProfile");
static_assert(offsetof(VPhysicsUtilities_ApplyNoCollisionProfile, Actor) == 0x000000, "Member 'VPhysicsUtilities_ApplyNoCollisionProfile::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyNoCollisionProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyNoCollisionProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyPawnDockingOnHorseProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyPawnDockingOnHorseProfile final
{
public:
	class APawn*                                  aPawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyPawnDockingOnHorseProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyPawnDockingOnHorseProfile");
static_assert(sizeof(VPhysicsUtilities_ApplyPawnDockingOnHorseProfile) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyPawnDockingOnHorseProfile");
static_assert(offsetof(VPhysicsUtilities_ApplyPawnDockingOnHorseProfile, aPawn) == 0x000000, "Member 'VPhysicsUtilities_ApplyPawnDockingOnHorseProfile::aPawn' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyPawnDockingOnHorseProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyPawnDockingOnHorseProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyPawnDockingProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyPawnDockingProfile final
{
public:
	class APawn*                                  aPawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyPawnDockingProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyPawnDockingProfile");
static_assert(sizeof(VPhysicsUtilities_ApplyPawnDockingProfile) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyPawnDockingProfile");
static_assert(offsetof(VPhysicsUtilities_ApplyPawnDockingProfile, aPawn) == 0x000000, "Member 'VPhysicsUtilities_ApplyPawnDockingProfile::aPawn' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyPawnDockingProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyPawnDockingProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ApplyWaterWalkingProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_ApplyWaterWalkingProfile final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ApplyWaterWalkingProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_ApplyWaterWalkingProfile");
static_assert(sizeof(VPhysicsUtilities_ApplyWaterWalkingProfile) == 0x000018, "Wrong size on VPhysicsUtilities_ApplyWaterWalkingProfile");
static_assert(offsetof(VPhysicsUtilities_ApplyWaterWalkingProfile, Actor) == 0x000000, "Member 'VPhysicsUtilities_ApplyWaterWalkingProfile::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_ApplyWaterWalkingProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_ApplyWaterWalkingProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPhysicsUtilities.CheckIsCollisionProfileNotAnonymous
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous final
{
public:
	const class UPrimitiveComponent*              PrimitiveComponent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous) == 0x000008, "Wrong alignment on VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous");
static_assert(sizeof(VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous) == 0x000008, "Wrong size on VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous");
static_assert(offsetof(VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous, PrimitiveComponent) == 0x000000, "Member 'VPhysicsUtilities_CheckIsCollisionProfileNotAnonymous::PrimitiveComponent' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ClearAllCollisionTags
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_ClearAllCollisionTags final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ClearAllCollisionTags) == 0x000008, "Wrong alignment on VPhysicsUtilities_ClearAllCollisionTags");
static_assert(sizeof(VPhysicsUtilities_ClearAllCollisionTags) == 0x000008, "Wrong size on VPhysicsUtilities_ClearAllCollisionTags");
static_assert(offsetof(VPhysicsUtilities_ClearAllCollisionTags, Actor) == 0x000000, "Member 'VPhysicsUtilities_ClearAllCollisionTags::Actor' has a wrong offset!");

// Function Altar.VPhysicsUtilities.FindDefaultCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsUtilities_FindDefaultCanEverAffectNavigation final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsUtilities_FindDefaultCanEverAffectNavigation) == 0x000008, "Wrong alignment on VPhysicsUtilities_FindDefaultCanEverAffectNavigation");
static_assert(sizeof(VPhysicsUtilities_FindDefaultCanEverAffectNavigation) == 0x000010, "Wrong size on VPhysicsUtilities_FindDefaultCanEverAffectNavigation");
static_assert(offsetof(VPhysicsUtilities_FindDefaultCanEverAffectNavigation, Actor) == 0x000000, "Member 'VPhysicsUtilities_FindDefaultCanEverAffectNavigation::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_FindDefaultCanEverAffectNavigation, ReturnValue) == 0x000008, "Member 'VPhysicsUtilities_FindDefaultCanEverAffectNavigation::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.FindDefaultCollisionProfileName
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsUtilities_FindDefaultCollisionProfileName final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_FindDefaultCollisionProfileName) == 0x000008, "Wrong alignment on VPhysicsUtilities_FindDefaultCollisionProfileName");
static_assert(sizeof(VPhysicsUtilities_FindDefaultCollisionProfileName) == 0x000010, "Wrong size on VPhysicsUtilities_FindDefaultCollisionProfileName");
static_assert(offsetof(VPhysicsUtilities_FindDefaultCollisionProfileName, Actor) == 0x000000, "Member 'VPhysicsUtilities_FindDefaultCollisionProfileName::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_FindDefaultCollisionProfileName, ReturnValue) == 0x000008, "Member 'VPhysicsUtilities_FindDefaultCollisionProfileName::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.FindNavigableTeleportSpot
// 0x0040 (0x0040 - 0x0000)
struct VPhysicsUtilities_FindNavigableTeleportSpot final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TeleportRotation;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TeleportLocation;                                  // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsUtilities_FindNavigableTeleportSpot) == 0x000008, "Wrong alignment on VPhysicsUtilities_FindNavigableTeleportSpot");
static_assert(sizeof(VPhysicsUtilities_FindNavigableTeleportSpot) == 0x000040, "Wrong size on VPhysicsUtilities_FindNavigableTeleportSpot");
static_assert(offsetof(VPhysicsUtilities_FindNavigableTeleportSpot, Pawn) == 0x000000, "Member 'VPhysicsUtilities_FindNavigableTeleportSpot::Pawn' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_FindNavigableTeleportSpot, TeleportRotation) == 0x000008, "Member 'VPhysicsUtilities_FindNavigableTeleportSpot::TeleportRotation' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_FindNavigableTeleportSpot, TeleportLocation) == 0x000020, "Member 'VPhysicsUtilities_FindNavigableTeleportSpot::TeleportLocation' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_FindNavigableTeleportSpot, ReturnValue) == 0x000038, "Member 'VPhysicsUtilities_FindNavigableTeleportSpot::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.IsCollisionProfileCodeDrivable
// 0x000C (0x000C - 0x0000)
struct VPhysicsUtilities_IsCollisionProfileCodeDrivable final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsUtilities_IsCollisionProfileCodeDrivable) == 0x000004, "Wrong alignment on VPhysicsUtilities_IsCollisionProfileCodeDrivable");
static_assert(sizeof(VPhysicsUtilities_IsCollisionProfileCodeDrivable) == 0x00000C, "Wrong size on VPhysicsUtilities_IsCollisionProfileCodeDrivable");
static_assert(offsetof(VPhysicsUtilities_IsCollisionProfileCodeDrivable, Name_0) == 0x000000, "Member 'VPhysicsUtilities_IsCollisionProfileCodeDrivable::Name_0' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_IsCollisionProfileCodeDrivable, ReturnValue) == 0x000008, "Member 'VPhysicsUtilities_IsCollisionProfileCodeDrivable::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.IsCollisionProfileNameValid
// 0x000C (0x000C - 0x0000)
struct VPhysicsUtilities_IsCollisionProfileNameValid final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsUtilities_IsCollisionProfileNameValid) == 0x000004, "Wrong alignment on VPhysicsUtilities_IsCollisionProfileNameValid");
static_assert(sizeof(VPhysicsUtilities_IsCollisionProfileNameValid) == 0x00000C, "Wrong size on VPhysicsUtilities_IsCollisionProfileNameValid");
static_assert(offsetof(VPhysicsUtilities_IsCollisionProfileNameValid, Name_0) == 0x000000, "Member 'VPhysicsUtilities_IsCollisionProfileNameValid::Name_0' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_IsCollisionProfileNameValid, ReturnValue) == 0x000008, "Member 'VPhysicsUtilities_IsCollisionProfileNameValid::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.IsCollisionProfilePurelyCodeDriven
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven final
{
public:
	const class UPrimitiveComponent*              PrimitiveComponent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven) == 0x000008, "Wrong alignment on VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven");
static_assert(sizeof(VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven) == 0x000010, "Wrong size on VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven");
static_assert(offsetof(VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven, PrimitiveComponent) == 0x000000, "Member 'VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven, ReturnValue) == 0x000008, "Member 'VPhysicsUtilities_IsCollisionProfilePurelyCodeDriven::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.IsUsingTemporaryProfile
// 0x0010 (0x0010 - 0x0000)
struct VPhysicsUtilities_IsUsingTemporaryProfile final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VPhysicsUtilities_IsUsingTemporaryProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_IsUsingTemporaryProfile");
static_assert(sizeof(VPhysicsUtilities_IsUsingTemporaryProfile) == 0x000010, "Wrong size on VPhysicsUtilities_IsUsingTemporaryProfile");
static_assert(offsetof(VPhysicsUtilities_IsUsingTemporaryProfile, Actor) == 0x000000, "Member 'VPhysicsUtilities_IsUsingTemporaryProfile::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_IsUsingTemporaryProfile, ReturnValue) == 0x000008, "Member 'VPhysicsUtilities_IsUsingTemporaryProfile::ReturnValue' has a wrong offset!");

// Function Altar.VPhysicsUtilities.RemoveGhostProfiles
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_RemoveGhostProfiles final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_RemoveGhostProfiles) == 0x000008, "Wrong alignment on VPhysicsUtilities_RemoveGhostProfiles");
static_assert(sizeof(VPhysicsUtilities_RemoveGhostProfiles) == 0x000008, "Wrong size on VPhysicsUtilities_RemoveGhostProfiles");
static_assert(offsetof(VPhysicsUtilities_RemoveGhostProfiles, Pawn) == 0x000000, "Member 'VPhysicsUtilities_RemoveGhostProfiles::Pawn' has a wrong offset!");

// Function Altar.VPhysicsUtilities.RemoveInvisibilityProfiles
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_RemoveInvisibilityProfiles final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_RemoveInvisibilityProfiles) == 0x000008, "Wrong alignment on VPhysicsUtilities_RemoveInvisibilityProfiles");
static_assert(sizeof(VPhysicsUtilities_RemoveInvisibilityProfiles) == 0x000008, "Wrong size on VPhysicsUtilities_RemoveInvisibilityProfiles");
static_assert(offsetof(VPhysicsUtilities_RemoveInvisibilityProfiles, Pawn) == 0x000000, "Member 'VPhysicsUtilities_RemoveInvisibilityProfiles::Pawn' has a wrong offset!");

// Function Altar.VPhysicsUtilities.ResetAllOriginalProfilesToDefault
// 0x0008 (0x0008 - 0x0000)
struct VPhysicsUtilities_ResetAllOriginalProfilesToDefault final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_ResetAllOriginalProfilesToDefault) == 0x000008, "Wrong alignment on VPhysicsUtilities_ResetAllOriginalProfilesToDefault");
static_assert(sizeof(VPhysicsUtilities_ResetAllOriginalProfilesToDefault) == 0x000008, "Wrong size on VPhysicsUtilities_ResetAllOriginalProfilesToDefault");
static_assert(offsetof(VPhysicsUtilities_ResetAllOriginalProfilesToDefault, Actor) == 0x000000, "Member 'VPhysicsUtilities_ResetAllOriginalProfilesToDefault::Actor' has a wrong offset!");

// Function Altar.VPhysicsUtilities.RestoreOriginalProfile
// 0x0018 (0x0018 - 0x0000)
struct VPhysicsUtilities_RestoreOriginalProfile final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionLockKey;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPhysicsUtilities_RestoreOriginalProfile) == 0x000008, "Wrong alignment on VPhysicsUtilities_RestoreOriginalProfile");
static_assert(sizeof(VPhysicsUtilities_RestoreOriginalProfile) == 0x000018, "Wrong size on VPhysicsUtilities_RestoreOriginalProfile");
static_assert(offsetof(VPhysicsUtilities_RestoreOriginalProfile, Actor) == 0x000000, "Member 'VPhysicsUtilities_RestoreOriginalProfile::Actor' has a wrong offset!");
static_assert(offsetof(VPhysicsUtilities_RestoreOriginalProfile, CollisionLockKey) == 0x000008, "Member 'VPhysicsUtilities_RestoreOriginalProfile::CollisionLockKey' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.RegisterChangeMenuHandler
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_RegisterChangeMenuHandler final
{
public:
	ELegacyPlayerMenuPage                         NewPage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_RegisterChangeMenuHandler) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_RegisterChangeMenuHandler");
static_assert(sizeof(VPlayerMenuViewModel_RegisterChangeMenuHandler) == 0x000001, "Wrong size on VPlayerMenuViewModel_RegisterChangeMenuHandler");
static_assert(offsetof(VPlayerMenuViewModel_RegisterChangeMenuHandler, NewPage) == 0x000000, "Member 'VPlayerMenuViewModel_RegisterChangeMenuHandler::NewPage' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.SetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_SetCurrentPage final
{
public:
	ELegacyPlayerMenuPage                         NewPage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_SetCurrentPage) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_SetCurrentPage");
static_assert(sizeof(VPlayerMenuViewModel_SetCurrentPage) == 0x000001, "Wrong size on VPlayerMenuViewModel_SetCurrentPage");
static_assert(offsetof(VPlayerMenuViewModel_SetCurrentPage, NewPage) == 0x000000, "Member 'VPlayerMenuViewModel_SetCurrentPage::NewPage' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.SetQuickKeysVisibility
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_SetQuickKeysVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_SetQuickKeysVisibility) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_SetQuickKeysVisibility");
static_assert(sizeof(VPlayerMenuViewModel_SetQuickKeysVisibility) == 0x000001, "Wrong size on VPlayerMenuViewModel_SetQuickKeysVisibility");
static_assert(offsetof(VPlayerMenuViewModel_SetQuickKeysVisibility, bNewVisibility) == 0x000000, "Member 'VPlayerMenuViewModel_SetQuickKeysVisibility::bNewVisibility' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_SetVisibility) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_SetVisibility");
static_assert(sizeof(VPlayerMenuViewModel_SetVisibility) == 0x000001, "Wrong size on VPlayerMenuViewModel_SetVisibility");
static_assert(offsetof(VPlayerMenuViewModel_SetVisibility, bNewVisibility) == 0x000000, "Member 'VPlayerMenuViewModel_SetVisibility::bNewVisibility' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_GetCurrentPage final
{
public:
	ELegacyPlayerMenuPage                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_GetCurrentPage) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_GetCurrentPage");
static_assert(sizeof(VPlayerMenuViewModel_GetCurrentPage) == 0x000001, "Wrong size on VPlayerMenuViewModel_GetCurrentPage");
static_assert(offsetof(VPlayerMenuViewModel_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VPlayerMenuViewModel_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.IsQuickKeysVisible
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_IsQuickKeysVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_IsQuickKeysVisible) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_IsQuickKeysVisible");
static_assert(sizeof(VPlayerMenuViewModel_IsQuickKeysVisible) == 0x000001, "Wrong size on VPlayerMenuViewModel_IsQuickKeysVisible");
static_assert(offsetof(VPlayerMenuViewModel_IsQuickKeysVisible, ReturnValue) == 0x000000, "Member 'VPlayerMenuViewModel_IsQuickKeysVisible::ReturnValue' has a wrong offset!");

// Function Altar.VPlayerMenuViewModel.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct VPlayerMenuViewModel_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VPlayerMenuViewModel_IsVisible) == 0x000001, "Wrong alignment on VPlayerMenuViewModel_IsVisible");
static_assert(sizeof(VPlayerMenuViewModel_IsVisible) == 0x000001, "Wrong size on VPlayerMenuViewModel_IsVisible");
static_assert(offsetof(VPlayerMenuViewModel_IsVisible, ReturnValue) == 0x000000, "Member 'VPlayerMenuViewModel_IsVisible::ReturnValue' has a wrong offset!");

// Function Altar.VQuantityMenuViewModel.RegisterSendClickedOnOkay
// 0x0004 (0x0004 - 0x0000)
struct VQuantityMenuViewModel_RegisterSendClickedOnOkay final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuantityMenuViewModel_RegisterSendClickedOnOkay) == 0x000004, "Wrong alignment on VQuantityMenuViewModel_RegisterSendClickedOnOkay");
static_assert(sizeof(VQuantityMenuViewModel_RegisterSendClickedOnOkay) == 0x000004, "Wrong size on VQuantityMenuViewModel_RegisterSendClickedOnOkay");
static_assert(offsetof(VQuantityMenuViewModel_RegisterSendClickedOnOkay, Value) == 0x000000, "Member 'VQuantityMenuViewModel_RegisterSendClickedOnOkay::Value' has a wrong offset!");

// Function Altar.VQuantityMenuViewModel.SetScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VQuantityMenuViewModel_SetScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        NewScrollbarProperties;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuantityMenuViewModel_SetScrollbarProperties) == 0x000004, "Wrong alignment on VQuantityMenuViewModel_SetScrollbarProperties");
static_assert(sizeof(VQuantityMenuViewModel_SetScrollbarProperties) == 0x000010, "Wrong size on VQuantityMenuViewModel_SetScrollbarProperties");
static_assert(offsetof(VQuantityMenuViewModel_SetScrollbarProperties, NewScrollbarProperties) == 0x000000, "Member 'VQuantityMenuViewModel_SetScrollbarProperties::NewScrollbarProperties' has a wrong offset!");

// Function Altar.VQuantityMenuViewModel.SetSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VQuantityMenuViewModel_SetSelectedValue final
{
public:
	float                                         NewSelectedValue;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuantityMenuViewModel_SetSelectedValue) == 0x000004, "Wrong alignment on VQuantityMenuViewModel_SetSelectedValue");
static_assert(sizeof(VQuantityMenuViewModel_SetSelectedValue) == 0x000004, "Wrong size on VQuantityMenuViewModel_SetSelectedValue");
static_assert(offsetof(VQuantityMenuViewModel_SetSelectedValue, NewSelectedValue) == 0x000000, "Member 'VQuantityMenuViewModel_SetSelectedValue::NewSelectedValue' has a wrong offset!");

// Function Altar.VQuantityMenuViewModel.GetScrollbarProperties
// 0x0010 (0x0010 - 0x0000)
struct VQuantityMenuViewModel_GetScrollbarProperties final
{
public:
	struct FLegacyScrollbarValueProperties        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuantityMenuViewModel_GetScrollbarProperties) == 0x000004, "Wrong alignment on VQuantityMenuViewModel_GetScrollbarProperties");
static_assert(sizeof(VQuantityMenuViewModel_GetScrollbarProperties) == 0x000010, "Wrong size on VQuantityMenuViewModel_GetScrollbarProperties");
static_assert(offsetof(VQuantityMenuViewModel_GetScrollbarProperties, ReturnValue) == 0x000000, "Member 'VQuantityMenuViewModel_GetScrollbarProperties::ReturnValue' has a wrong offset!");

// Function Altar.VQuantityMenuViewModel.GetSelectedValue
// 0x0004 (0x0004 - 0x0000)
struct VQuantityMenuViewModel_GetSelectedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuantityMenuViewModel_GetSelectedValue) == 0x000004, "Wrong alignment on VQuantityMenuViewModel_GetSelectedValue");
static_assert(sizeof(VQuantityMenuViewModel_GetSelectedValue) == 0x000004, "Wrong size on VQuantityMenuViewModel_GetSelectedValue");
static_assert(offsetof(VQuantityMenuViewModel_GetSelectedValue, ReturnValue) == 0x000000, "Member 'VQuantityMenuViewModel_GetSelectedValue::ReturnValue' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.RegisterSendForceMouseInputByAltar
// 0x0001 (0x0001 - 0x0000)
struct VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar final
{
public:
	bool                                          bNewForceMouseInputByAltar;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar) == 0x000001, "Wrong alignment on VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar");
static_assert(sizeof(VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar) == 0x000001, "Wrong size on VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar");
static_assert(offsetof(VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar, bNewForceMouseInputByAltar) == 0x000000, "Member 'VQuickKeysMenuViewModel_RegisterSendForceMouseInputByAltar::bNewForceMouseInputByAltar' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.RegisterSendSelectedQuickKey
// 0x0004 (0x0004 - 0x0000)
struct VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey final
{
public:
	int32                                         KeyID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey) == 0x000004, "Wrong alignment on VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey");
static_assert(sizeof(VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey) == 0x000004, "Wrong size on VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey");
static_assert(offsetof(VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey, KeyID) == 0x000000, "Member 'VQuickKeysMenuViewModel_RegisterSendSelectedQuickKey::KeyID' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.SetIcons
// 0x0010 (0x0010 - 0x0000)
struct VQuickKeysMenuViewModel_SetIcons final
{
public:
	TArray<class UTexture2D*>                     NewIcons;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_SetIcons) == 0x000008, "Wrong alignment on VQuickKeysMenuViewModel_SetIcons");
static_assert(sizeof(VQuickKeysMenuViewModel_SetIcons) == 0x000010, "Wrong size on VQuickKeysMenuViewModel_SetIcons");
static_assert(offsetof(VQuickKeysMenuViewModel_SetIcons, NewIcons) == 0x000000, "Member 'VQuickKeysMenuViewModel_SetIcons::NewIcons' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.SetKeyIndex
// 0x0004 (0x0004 - 0x0000)
struct VQuickKeysMenuViewModel_SetKeyIndex final
{
public:
	int32                                         NewKeyIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_SetKeyIndex) == 0x000004, "Wrong alignment on VQuickKeysMenuViewModel_SetKeyIndex");
static_assert(sizeof(VQuickKeysMenuViewModel_SetKeyIndex) == 0x000004, "Wrong size on VQuickKeysMenuViewModel_SetKeyIndex");
static_assert(offsetof(VQuickKeysMenuViewModel_SetKeyIndex, NewKeyIndex) == 0x000000, "Member 'VQuickKeysMenuViewModel_SetKeyIndex::NewKeyIndex' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct VQuickKeysMenuViewModel_SetMessage final
{
public:
	class FText                                   NewMessage;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_SetMessage) == 0x000008, "Wrong alignment on VQuickKeysMenuViewModel_SetMessage");
static_assert(sizeof(VQuickKeysMenuViewModel_SetMessage) == 0x000018, "Wrong size on VQuickKeysMenuViewModel_SetMessage");
static_assert(offsetof(VQuickKeysMenuViewModel_SetMessage, NewMessage) == 0x000000, "Member 'VQuickKeysMenuViewModel_SetMessage::NewMessage' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.GetIcons
// 0x0010 (0x0010 - 0x0000)
struct VQuickKeysMenuViewModel_GetIcons final
{
public:
	TArray<class UTexture2D*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_GetIcons) == 0x000008, "Wrong alignment on VQuickKeysMenuViewModel_GetIcons");
static_assert(sizeof(VQuickKeysMenuViewModel_GetIcons) == 0x000010, "Wrong size on VQuickKeysMenuViewModel_GetIcons");
static_assert(offsetof(VQuickKeysMenuViewModel_GetIcons, ReturnValue) == 0x000000, "Member 'VQuickKeysMenuViewModel_GetIcons::ReturnValue' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.GetKeyIndex
// 0x0004 (0x0004 - 0x0000)
struct VQuickKeysMenuViewModel_GetKeyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_GetKeyIndex) == 0x000004, "Wrong alignment on VQuickKeysMenuViewModel_GetKeyIndex");
static_assert(sizeof(VQuickKeysMenuViewModel_GetKeyIndex) == 0x000004, "Wrong size on VQuickKeysMenuViewModel_GetKeyIndex");
static_assert(offsetof(VQuickKeysMenuViewModel_GetKeyIndex, ReturnValue) == 0x000000, "Member 'VQuickKeysMenuViewModel_GetKeyIndex::ReturnValue' has a wrong offset!");

// Function Altar.VQuickKeysMenuViewModel.GetMessage
// 0x0018 (0x0018 - 0x0000)
struct VQuickKeysMenuViewModel_GetMessage final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuickKeysMenuViewModel_GetMessage) == 0x000008, "Wrong alignment on VQuickKeysMenuViewModel_GetMessage");
static_assert(sizeof(VQuickKeysMenuViewModel_GetMessage) == 0x000018, "Wrong size on VQuickKeysMenuViewModel_GetMessage");
static_assert(offsetof(VQuickKeysMenuViewModel_GetMessage, ReturnValue) == 0x000000, "Member 'VQuickKeysMenuViewModel_GetMessage::ReturnValue' has a wrong offset!");

// Function Altar.VModernStatsDataItem.SetBaseValues
// 0x0028 (0x0028 - 0x0000)
struct VModernStatsDataItem_SetBaseValues final
{
public:
	EStatGroupType                                InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InName;                                            // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VModernStatsDataItem_SetBaseValues) == 0x000008, "Wrong alignment on VModernStatsDataItem_SetBaseValues");
static_assert(sizeof(VModernStatsDataItem_SetBaseValues) == 0x000028, "Wrong size on VModernStatsDataItem_SetBaseValues");
static_assert(offsetof(VModernStatsDataItem_SetBaseValues, InType) == 0x000000, "Member 'VModernStatsDataItem_SetBaseValues::InType' has a wrong offset!");
static_assert(offsetof(VModernStatsDataItem_SetBaseValues, InName) == 0x000008, "Member 'VModernStatsDataItem_SetBaseValues::InName' has a wrong offset!");
static_assert(offsetof(VModernStatsDataItem_SetBaseValues, InValue) == 0x000020, "Member 'VModernStatsDataItem_SetBaseValues::InValue' has a wrong offset!");

// Function Altar.VTorchCharacterAnimInstance.SetupTorchLayer
// 0x0040 (0x0040 - 0x0000)
struct VTorchCharacterAnimInstance_SetupTorchLayer final
{
public:
	struct FTorchAnimationData                    InAnimSet;                                         // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTorchCharacterAnimInstance_SetupTorchLayer) == 0x000008, "Wrong alignment on VTorchCharacterAnimInstance_SetupTorchLayer");
static_assert(sizeof(VTorchCharacterAnimInstance_SetupTorchLayer) == 0x000040, "Wrong size on VTorchCharacterAnimInstance_SetupTorchLayer");
static_assert(offsetof(VTorchCharacterAnimInstance_SetupTorchLayer, InAnimSet) == 0x000000, "Member 'VTorchCharacterAnimInstance_SetupTorchLayer::InAnimSet' has a wrong offset!");

// Function Altar.VTorchCharacterAnimInstance.CanDisableTorchPose
// 0x0001 (0x0001 - 0x0000)
struct VTorchCharacterAnimInstance_CanDisableTorchPose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTorchCharacterAnimInstance_CanDisableTorchPose) == 0x000001, "Wrong alignment on VTorchCharacterAnimInstance_CanDisableTorchPose");
static_assert(sizeof(VTorchCharacterAnimInstance_CanDisableTorchPose) == 0x000001, "Wrong size on VTorchCharacterAnimInstance_CanDisableTorchPose");
static_assert(offsetof(VTorchCharacterAnimInstance_CanDisableTorchPose, ReturnValue) == 0x000000, "Member 'VTorchCharacterAnimInstance_CanDisableTorchPose::ReturnValue' has a wrong offset!");

// Function Altar.VTorchCharacterAnimInstance.CanEnableTorchPose
// 0x0001 (0x0001 - 0x0000)
struct VTorchCharacterAnimInstance_CanEnableTorchPose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTorchCharacterAnimInstance_CanEnableTorchPose) == 0x000001, "Wrong alignment on VTorchCharacterAnimInstance_CanEnableTorchPose");
static_assert(sizeof(VTorchCharacterAnimInstance_CanEnableTorchPose) == 0x000001, "Wrong size on VTorchCharacterAnimInstance_CanEnableTorchPose");
static_assert(offsetof(VTorchCharacterAnimInstance_CanEnableTorchPose, ReturnValue) == 0x000000, "Member 'VTorchCharacterAnimInstance_CanEnableTorchPose::ReturnValue' has a wrong offset!");

// Function Altar.VTorchCharacterAnimInstance.IsBlocking
// 0x0001 (0x0001 - 0x0000)
struct VTorchCharacterAnimInstance_IsBlocking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTorchCharacterAnimInstance_IsBlocking) == 0x000001, "Wrong alignment on VTorchCharacterAnimInstance_IsBlocking");
static_assert(sizeof(VTorchCharacterAnimInstance_IsBlocking) == 0x000001, "Wrong size on VTorchCharacterAnimInstance_IsBlocking");
static_assert(offsetof(VTorchCharacterAnimInstance_IsBlocking, ReturnValue) == 0x000000, "Member 'VTorchCharacterAnimInstance_IsBlocking::ReturnValue' has a wrong offset!");

// Function Altar.VTorchCharacterAnimInstance.IsSneaking
// 0x0001 (0x0001 - 0x0000)
struct VTorchCharacterAnimInstance_IsSneaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTorchCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong alignment on VTorchCharacterAnimInstance_IsSneaking");
static_assert(sizeof(VTorchCharacterAnimInstance_IsSneaking) == 0x000001, "Wrong size on VTorchCharacterAnimInstance_IsSneaking");
static_assert(offsetof(VTorchCharacterAnimInstance_IsSneaking, ReturnValue) == 0x000000, "Member 'VTorchCharacterAnimInstance_IsSneaking::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.CloseMenu
// 0x0004 (0x0004 - 0x0000)
struct VRaceSexMenuViewModel_CloseMenu final
{
public:
	EVFadeTransitionType                          Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_CloseMenu) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_CloseMenu");
static_assert(sizeof(VRaceSexMenuViewModel_CloseMenu) == 0x000004, "Wrong size on VRaceSexMenuViewModel_CloseMenu");
static_assert(offsetof(VRaceSexMenuViewModel_CloseMenu, Type) == 0x000000, "Member 'VRaceSexMenuViewModel_CloseMenu::Type' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentHairIndex
// 0x0008 (0x0008 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentHairIndex final
{
public:
	bool                                          bHardReset;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentHairIndex) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentHairIndex");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentHairIndex) == 0x000008, "Wrong size on VRaceSexMenuViewModel_GetCurrentHairIndex");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentHairIndex, bHardReset) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentHairIndex::bHardReset' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentHairIndex, ReturnValue) == 0x000004, "Member 'VRaceSexMenuViewModel_GetCurrentHairIndex::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.ParseButtonProperties
// 0x0050 (0x0050 - 0x0000)
struct VRaceSexMenuViewModel_ParseButtonProperties final
{
public:
	struct FLegacyRaceSexMenuButtonProperties     TableProperties;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLegacyRaceSexMenuButtonProperties     ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_ParseButtonProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_ParseButtonProperties");
static_assert(sizeof(VRaceSexMenuViewModel_ParseButtonProperties) == 0x000050, "Wrong size on VRaceSexMenuViewModel_ParseButtonProperties");
static_assert(offsetof(VRaceSexMenuViewModel_ParseButtonProperties, TableProperties) == 0x000000, "Member 'VRaceSexMenuViewModel_ParseButtonProperties::TableProperties' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_ParseButtonProperties, ReturnValue) == 0x000028, "Member 'VRaceSexMenuViewModel_ParseButtonProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.ParseToggleProperties
// 0x0040 (0x0040 - 0x0000)
struct VRaceSexMenuViewModel_ParseToggleProperties final
{
public:
	struct FLegacyRaceSexMenuToggleProperties     TableProperties;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLegacyRaceSexMenuToggleProperties     ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_ParseToggleProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_ParseToggleProperties");
static_assert(sizeof(VRaceSexMenuViewModel_ParseToggleProperties) == 0x000040, "Wrong size on VRaceSexMenuViewModel_ParseToggleProperties");
static_assert(offsetof(VRaceSexMenuViewModel_ParseToggleProperties, TableProperties) == 0x000000, "Member 'VRaceSexMenuViewModel_ParseToggleProperties::TableProperties' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_ParseToggleProperties, ReturnValue) == 0x000020, "Member 'VRaceSexMenuViewModel_ParseToggleProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.RequestColorPicker
// 0x0030 (0x0030 - 0x0000)
struct VRaceSexMenuViewModel_RequestColorPicker final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModernRaceSexMenuColorProperties      Properties;                                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_RequestColorPicker) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_RequestColorPicker");
static_assert(sizeof(VRaceSexMenuViewModel_RequestColorPicker) == 0x000030, "Wrong size on VRaceSexMenuViewModel_RequestColorPicker");
static_assert(offsetof(VRaceSexMenuViewModel_RequestColorPicker, bShouldShow) == 0x000000, "Member 'VRaceSexMenuViewModel_RequestColorPicker::bShouldShow' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_RequestColorPicker, Caller) == 0x000008, "Member 'VRaceSexMenuViewModel_RequestColorPicker::Caller' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_RequestColorPicker, Properties) == 0x000010, "Member 'VRaceSexMenuViewModel_RequestColorPicker::Properties' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetActorStats
// 0x0008 (0x0008 - 0x0000)
struct VRaceSexMenuViewModel_SetActorStats final
{
public:
	class UVActorValuesPairingComponent*          NewCurrentActorStats;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetActorStats) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetActorStats");
static_assert(sizeof(VRaceSexMenuViewModel_SetActorStats) == 0x000008, "Wrong size on VRaceSexMenuViewModel_SetActorStats");
static_assert(offsetof(VRaceSexMenuViewModel_SetActorStats, NewCurrentActorStats) == 0x000000, "Member 'VRaceSexMenuViewModel_SetActorStats::NewCurrentActorStats' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetArchetypesProperties
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_SetArchetypesProperties final
{
public:
	TArray<struct FModernRaceSexMenuArchetypeProperties> NewArchetypesProperties;                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetArchetypesProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetArchetypesProperties");
static_assert(sizeof(VRaceSexMenuViewModel_SetArchetypesProperties) == 0x000010, "Wrong size on VRaceSexMenuViewModel_SetArchetypesProperties");
static_assert(offsetof(VRaceSexMenuViewModel_SetArchetypesProperties, NewArchetypesProperties) == 0x000000, "Member 'VRaceSexMenuViewModel_SetArchetypesProperties::NewArchetypesProperties' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentArchetype
// 0x0004 (0x0004 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentArchetype final
{
public:
	int32                                         NewArchetype;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentArchetype) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentArchetype");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentArchetype) == 0x000004, "Wrong size on VRaceSexMenuViewModel_SetCurrentArchetype");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentArchetype, NewArchetype) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentArchetype::NewArchetype' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentHairName
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentHairName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentHairName) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentHairName");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentHairName) == 0x000018, "Wrong size on VRaceSexMenuViewModel_SetCurrentHairName");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentHairName, NewName) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentHairName::NewName' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentName
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentName final
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentName) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentName");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentName) == 0x000018, "Wrong size on VRaceSexMenuViewModel_SetCurrentName");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentName, NewName) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentName::NewName' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentPage final
{
public:
	ELegacyRaceSexMenuPage                        NewCurrentPage;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentPage) == 0x000001, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentPage");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentPage) == 0x000001, "Wrong size on VRaceSexMenuViewModel_SetCurrentPage");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentPage, NewCurrentPage) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentPage::NewCurrentPage' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentRace
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentRace final
{
public:
	class FString                                 NewRace;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentRace) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentRace");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentRace) == 0x000010, "Wrong size on VRaceSexMenuViewModel_SetCurrentRace");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentRace, NewRace) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentRace::NewRace' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentRaceWithForceUpdate
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate final
{
public:
	class FString                                 NewRace;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate) == 0x000010, "Wrong size on VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate, NewRace) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentRaceWithForceUpdate::NewRace' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetCurrentSex
// 0x0004 (0x0004 - 0x0000)
struct VRaceSexMenuViewModel_SetCurrentSex final
{
public:
	int32                                         NewSex;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetCurrentSex) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_SetCurrentSex");
static_assert(sizeof(VRaceSexMenuViewModel_SetCurrentSex) == 0x000004, "Wrong size on VRaceSexMenuViewModel_SetCurrentSex");
static_assert(offsetof(VRaceSexMenuViewModel_SetCurrentSex, NewSex) == 0x000000, "Member 'VRaceSexMenuViewModel_SetCurrentSex::NewSex' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetPhenotypeData
// 0x0100 (0x0100 - 0x0000)
struct VRaceSexMenuViewModel_SetPhenotypeData final
{
public:
	struct FRaceSexMenuPhenotypeData              NewPhenotypeData;                                  // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetPhenotypeData) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetPhenotypeData");
static_assert(sizeof(VRaceSexMenuViewModel_SetPhenotypeData) == 0x000100, "Wrong size on VRaceSexMenuViewModel_SetPhenotypeData");
static_assert(offsetof(VRaceSexMenuViewModel_SetPhenotypeData, NewPhenotypeData) == 0x000000, "Member 'VRaceSexMenuViewModel_SetPhenotypeData::NewPhenotypeData' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetPlayerNameLocalizationPair
// 0x0028 (0x0028 - 0x0000)
struct VRaceSexMenuViewModel_SetPlayerNameLocalizationPair final
{
public:
	struct FPlayerNamePair                        NewNamePair;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetPlayerNameLocalizationPair) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetPlayerNameLocalizationPair");
static_assert(sizeof(VRaceSexMenuViewModel_SetPlayerNameLocalizationPair) == 0x000028, "Wrong size on VRaceSexMenuViewModel_SetPlayerNameLocalizationPair");
static_assert(offsetof(VRaceSexMenuViewModel_SetPlayerNameLocalizationPair, NewNamePair) == 0x000000, "Member 'VRaceSexMenuViewModel_SetPlayerNameLocalizationPair::NewNamePair' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SetRaceDescription
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_SetRaceDescription final
{
public:
	class FText                                   NewRaceDescription;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SetRaceDescription) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SetRaceDescription");
static_assert(sizeof(VRaceSexMenuViewModel_SetRaceDescription) == 0x000018, "Wrong size on VRaceSexMenuViewModel_SetRaceDescription");
static_assert(offsetof(VRaceSexMenuViewModel_SetRaceDescription, NewRaceDescription) == 0x000000, "Member 'VRaceSexMenuViewModel_SetRaceDescription::NewRaceDescription' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.SilentSetCurrentRace
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_SilentSetCurrentRace final
{
public:
	class FString                                 NewRace;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_SilentSetCurrentRace) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_SilentSetCurrentRace");
static_assert(sizeof(VRaceSexMenuViewModel_SilentSetCurrentRace) == 0x000010, "Wrong size on VRaceSexMenuViewModel_SilentSetCurrentRace");
static_assert(offsetof(VRaceSexMenuViewModel_SilentSetCurrentRace, NewRace) == 0x000000, "Member 'VRaceSexMenuViewModel_SilentSetCurrentRace::NewRace' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateArchetype
// 0x0004 (0x0004 - 0x0000)
struct VRaceSexMenuViewModel_UpdateArchetype final
{
public:
	int32                                         ArchetypeIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateArchetype) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_UpdateArchetype");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateArchetype) == 0x000004, "Wrong size on VRaceSexMenuViewModel_UpdateArchetype");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateArchetype, ArchetypeIndex) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateArchetype::ArchetypeIndex' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateColorTarget
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_UpdateColorTarget final
{
public:
	class FName                                   ValueType;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TargetValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateColorTarget) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_UpdateColorTarget");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateColorTarget) == 0x000010, "Wrong size on VRaceSexMenuViewModel_UpdateColorTarget");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateColorTarget, ValueType) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateColorTarget::ValueType' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateColorTarget, TargetValue) == 0x000008, "Member 'VRaceSexMenuViewModel_UpdateColorTarget::TargetValue' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateColorTarget, bUpdateCharacter) == 0x00000C, "Member 'VRaceSexMenuViewModel_UpdateColorTarget::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateCustomisationTarget
// 0x0028 (0x0028 - 0x0000)
struct VRaceSexMenuViewModel_UpdateCustomisationTarget final
{
public:
	struct FLegacyRaceSexMenuToggleProperties     Property;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OptionIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateCustomisationTarget) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_UpdateCustomisationTarget");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateCustomisationTarget) == 0x000028, "Wrong size on VRaceSexMenuViewModel_UpdateCustomisationTarget");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateCustomisationTarget, Property) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateCustomisationTarget::Property' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateCustomisationTarget, OptionIndex) == 0x000020, "Member 'VRaceSexMenuViewModel_UpdateCustomisationTarget::OptionIndex' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateCustomisationTarget, bUpdateCharacter) == 0x000024, "Member 'VRaceSexMenuViewModel_UpdateCustomisationTarget::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateEyeColor
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_UpdateEyeColor final
{
public:
	class UMaterialInterface*                     EyeMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomisationIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateEyeColor) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_UpdateEyeColor");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateEyeColor) == 0x000010, "Wrong size on VRaceSexMenuViewModel_UpdateEyeColor");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateEyeColor, EyeMaterial) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateEyeColor::EyeMaterial' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateEyeColor, CustomisationIndex) == 0x000008, "Member 'VRaceSexMenuViewModel_UpdateEyeColor::CustomisationIndex' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateEyeColor, bUpdateCharacter) == 0x00000C, "Member 'VRaceSexMenuViewModel_UpdateEyeColor::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateHair
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_UpdateHair final
{
public:
	const class UVCharacterHairPieceBase*         HairPiece;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomisationIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateHair) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_UpdateHair");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateHair) == 0x000010, "Wrong size on VRaceSexMenuViewModel_UpdateHair");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateHair, HairPiece) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateHair::HairPiece' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateHair, CustomisationIndex) == 0x000008, "Member 'VRaceSexMenuViewModel_UpdateHair::CustomisationIndex' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateHair, bUpdateCharacter) == 0x00000C, "Member 'VRaceSexMenuViewModel_UpdateHair::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateMorphTarget
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_UpdateMorphTarget final
{
public:
	class FName                                   TargetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateMorphTarget) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_UpdateMorphTarget");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateMorphTarget) == 0x000010, "Wrong size on VRaceSexMenuViewModel_UpdateMorphTarget");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateMorphTarget, TargetName) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateMorphTarget::TargetName' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateMorphTarget, TargetValue) == 0x000008, "Member 'VRaceSexMenuViewModel_UpdateMorphTarget::TargetValue' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateMorphTarget, bUpdateCharacter) == 0x00000C, "Member 'VRaceSexMenuViewModel_UpdateMorphTarget::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdatePhenotypeValue
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_UpdatePhenotypeValue final
{
public:
	class FName                                   ValueType;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdatePhenotypeValue) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_UpdatePhenotypeValue");
static_assert(sizeof(VRaceSexMenuViewModel_UpdatePhenotypeValue) == 0x000010, "Wrong size on VRaceSexMenuViewModel_UpdatePhenotypeValue");
static_assert(offsetof(VRaceSexMenuViewModel_UpdatePhenotypeValue, ValueType) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdatePhenotypeValue::ValueType' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdatePhenotypeValue, Value) == 0x000008, "Member 'VRaceSexMenuViewModel_UpdatePhenotypeValue::Value' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdatePhenotypeValue, bUpdateCharacter) == 0x00000C, "Member 'VRaceSexMenuViewModel_UpdatePhenotypeValue::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateRaceSexArchetype
// 0x0038 (0x0038 - 0x0000)
struct VRaceSexMenuViewModel_UpdateRaceSexArchetype final
{
public:
	class FText                                   NewRaceDescription;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         RaceIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SexIndex;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArchetypeIndex;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTESRace*                               TESRacePtr;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCharacter;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateRaceSexArchetype) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_UpdateRaceSexArchetype");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateRaceSexArchetype) == 0x000038, "Wrong size on VRaceSexMenuViewModel_UpdateRaceSexArchetype");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateRaceSexArchetype, NewRaceDescription) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateRaceSexArchetype::NewRaceDescription' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateRaceSexArchetype, RaceIndex) == 0x000018, "Member 'VRaceSexMenuViewModel_UpdateRaceSexArchetype::RaceIndex' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateRaceSexArchetype, SexIndex) == 0x00001C, "Member 'VRaceSexMenuViewModel_UpdateRaceSexArchetype::SexIndex' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateRaceSexArchetype, ArchetypeIndex) == 0x000020, "Member 'VRaceSexMenuViewModel_UpdateRaceSexArchetype::ArchetypeIndex' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateRaceSexArchetype, TESRacePtr) == 0x000028, "Member 'VRaceSexMenuViewModel_UpdateRaceSexArchetype::TESRacePtr' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateRaceSexArchetype, bUpdateCharacter) == 0x000030, "Member 'VRaceSexMenuViewModel_UpdateRaceSexArchetype::bUpdateCharacter' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.UpdateWidgetPhenotypeData
// 0x0001 (0x0001 - 0x0000)
struct VRaceSexMenuViewModel_UpdateWidgetPhenotypeData final
{
public:
	bool                                          bHardReset;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_UpdateWidgetPhenotypeData) == 0x000001, "Wrong alignment on VRaceSexMenuViewModel_UpdateWidgetPhenotypeData");
static_assert(sizeof(VRaceSexMenuViewModel_UpdateWidgetPhenotypeData) == 0x000001, "Wrong size on VRaceSexMenuViewModel_UpdateWidgetPhenotypeData");
static_assert(offsetof(VRaceSexMenuViewModel_UpdateWidgetPhenotypeData, bHardReset) == 0x000000, "Member 'VRaceSexMenuViewModel_UpdateWidgetPhenotypeData::bHardReset' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetActorStats
// 0x0008 (0x0008 - 0x0000)
struct VRaceSexMenuViewModel_GetActorStats final
{
public:
	const class UVActorValuesPairingComponent*    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetActorStats) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetActorStats");
static_assert(sizeof(VRaceSexMenuViewModel_GetActorStats) == 0x000008, "Wrong size on VRaceSexMenuViewModel_GetActorStats");
static_assert(offsetof(VRaceSexMenuViewModel_GetActorStats, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetActorStats::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetAllRaceModificationProperties
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_GetAllRaceModificationProperties final
{
public:
	TArray<struct FLegacyRaceSexMenuRaceProperties> ReturnValue;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetAllRaceModificationProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetAllRaceModificationProperties");
static_assert(sizeof(VRaceSexMenuViewModel_GetAllRaceModificationProperties) == 0x000010, "Wrong size on VRaceSexMenuViewModel_GetAllRaceModificationProperties");
static_assert(offsetof(VRaceSexMenuViewModel_GetAllRaceModificationProperties, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetAllRaceModificationProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetArchetypesProperties
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_GetArchetypesProperties final
{
public:
	TArray<struct FModernRaceSexMenuArchetypeProperties> ReturnValue;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetArchetypesProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetArchetypesProperties");
static_assert(sizeof(VRaceSexMenuViewModel_GetArchetypesProperties) == 0x000010, "Wrong size on VRaceSexMenuViewModel_GetArchetypesProperties");
static_assert(offsetof(VRaceSexMenuViewModel_GetArchetypesProperties, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetArchetypesProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCommonCharacterModifications
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_GetCommonCharacterModifications final
{
public:
	TArray<struct FLegacyRaceSexMenuTableRow>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCommonCharacterModifications) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetCommonCharacterModifications");
static_assert(sizeof(VRaceSexMenuViewModel_GetCommonCharacterModifications) == 0x000010, "Wrong size on VRaceSexMenuViewModel_GetCommonCharacterModifications");
static_assert(offsetof(VRaceSexMenuViewModel_GetCommonCharacterModifications, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCommonCharacterModifications::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentArchetype
// 0x0004 (0x0004 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentArchetype final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentArchetype) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentArchetype");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentArchetype) == 0x000004, "Wrong size on VRaceSexMenuViewModel_GetCurrentArchetype");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentArchetype, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentArchetype::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentHairName
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentHairName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentHairName) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentHairName");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentHairName) == 0x000018, "Wrong size on VRaceSexMenuViewModel_GetCurrentHairName");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentHairName, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentHairName::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentName
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentName) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentName");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentName) == 0x000018, "Wrong size on VRaceSexMenuViewModel_GetCurrentName");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentName, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentName::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentPage final
{
public:
	ELegacyRaceSexMenuPage                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentPage) == 0x000001, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentPage");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentPage) == 0x000001, "Wrong size on VRaceSexMenuViewModel_GetCurrentPage");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentPage, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentRace
// 0x0010 (0x0010 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentRace final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentRace) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentRace");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentRace) == 0x000010, "Wrong size on VRaceSexMenuViewModel_GetCurrentRace");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentRace, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentRace::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetCurrentSex
// 0x0004 (0x0004 - 0x0000)
struct VRaceSexMenuViewModel_GetCurrentSex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetCurrentSex) == 0x000004, "Wrong alignment on VRaceSexMenuViewModel_GetCurrentSex");
static_assert(sizeof(VRaceSexMenuViewModel_GetCurrentSex) == 0x000004, "Wrong size on VRaceSexMenuViewModel_GetCurrentSex");
static_assert(offsetof(VRaceSexMenuViewModel_GetCurrentSex, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetCurrentSex::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetPagesOfCategory
// 0x0058 (0x0058 - 0x0000)
struct VRaceSexMenuViewModel_GetPagesOfCategory final
{
public:
	EModernRaceSexPage                            CurrentPageToAnalyse;                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FText>                ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetPagesOfCategory) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetPagesOfCategory");
static_assert(sizeof(VRaceSexMenuViewModel_GetPagesOfCategory) == 0x000058, "Wrong size on VRaceSexMenuViewModel_GetPagesOfCategory");
static_assert(offsetof(VRaceSexMenuViewModel_GetPagesOfCategory, CurrentPageToAnalyse) == 0x000000, "Member 'VRaceSexMenuViewModel_GetPagesOfCategory::CurrentPageToAnalyse' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetPagesOfCategory, ReturnValue) == 0x000008, "Member 'VRaceSexMenuViewModel_GetPagesOfCategory::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetPhenotypeData
// 0x0100 (0x0100 - 0x0000)
struct VRaceSexMenuViewModel_GetPhenotypeData final
{
public:
	struct FRaceSexMenuPhenotypeData              ReturnValue;                                       // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetPhenotypeData) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetPhenotypeData");
static_assert(sizeof(VRaceSexMenuViewModel_GetPhenotypeData) == 0x000100, "Wrong size on VRaceSexMenuViewModel_GetPhenotypeData");
static_assert(offsetof(VRaceSexMenuViewModel_GetPhenotypeData, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetPhenotypeData::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetPlayerNameLocalizationPair
// 0x0028 (0x0028 - 0x0000)
struct VRaceSexMenuViewModel_GetPlayerNameLocalizationPair final
{
public:
	struct FPlayerNamePair                        ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetPlayerNameLocalizationPair) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetPlayerNameLocalizationPair");
static_assert(sizeof(VRaceSexMenuViewModel_GetPlayerNameLocalizationPair) == 0x000028, "Wrong size on VRaceSexMenuViewModel_GetPlayerNameLocalizationPair");
static_assert(offsetof(VRaceSexMenuViewModel_GetPlayerNameLocalizationPair, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetPlayerNameLocalizationPair::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetRaceDescription
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_GetRaceDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetRaceDescription) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetRaceDescription");
static_assert(sizeof(VRaceSexMenuViewModel_GetRaceDescription) == 0x000018, "Wrong size on VRaceSexMenuViewModel_GetRaceDescription");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceDescription, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetRaceDescription::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetRaceId
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_GetRaceId final
{
public:
	class FString                                 RaceName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_GetRaceId) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetRaceId");
static_assert(sizeof(VRaceSexMenuViewModel_GetRaceId) == 0x000018, "Wrong size on VRaceSexMenuViewModel_GetRaceId");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceId, RaceName) == 0x000000, "Member 'VRaceSexMenuViewModel_GetRaceId::RaceName' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceId, ReturnValue) == 0x000010, "Member 'VRaceSexMenuViewModel_GetRaceId::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetRaceModificationItemsProperties
// 0x0020 (0x0020 - 0x0000)
struct VRaceSexMenuViewModel_GetRaceModificationItemsProperties final
{
public:
	class FString                                 RaceName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLegacyRaceSexMenuTableRow>     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetRaceModificationItemsProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetRaceModificationItemsProperties");
static_assert(sizeof(VRaceSexMenuViewModel_GetRaceModificationItemsProperties) == 0x000020, "Wrong size on VRaceSexMenuViewModel_GetRaceModificationItemsProperties");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceModificationItemsProperties, RaceName) == 0x000000, "Member 'VRaceSexMenuViewModel_GetRaceModificationItemsProperties::RaceName' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceModificationItemsProperties, ReturnValue) == 0x000010, "Member 'VRaceSexMenuViewModel_GetRaceModificationItemsProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetRaceModificationProperties
// 0x00D8 (0x00D8 - 0x0000)
struct VRaceSexMenuViewModel_GetRaceModificationProperties final
{
public:
	class FString                                 RaceName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyRaceSexMenuRaceProperties       ReturnValue;                                       // 0x0010(0x00C8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetRaceModificationProperties) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetRaceModificationProperties");
static_assert(sizeof(VRaceSexMenuViewModel_GetRaceModificationProperties) == 0x0000D8, "Wrong size on VRaceSexMenuViewModel_GetRaceModificationProperties");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceModificationProperties, RaceName) == 0x000000, "Member 'VRaceSexMenuViewModel_GetRaceModificationProperties::RaceName' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceModificationProperties, ReturnValue) == 0x000010, "Member 'VRaceSexMenuViewModel_GetRaceModificationProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetRaceTableRows
// 0x0020 (0x0020 - 0x0000)
struct VRaceSexMenuViewModel_GetRaceTableRows final
{
public:
	class FString                                 RaceName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLegacyRaceSexMenuTableRow>     ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetRaceTableRows) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetRaceTableRows");
static_assert(sizeof(VRaceSexMenuViewModel_GetRaceTableRows) == 0x000020, "Wrong size on VRaceSexMenuViewModel_GetRaceTableRows");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceTableRows, RaceName) == 0x000000, "Member 'VRaceSexMenuViewModel_GetRaceTableRows::RaceName' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetRaceTableRows, ReturnValue) == 0x000010, "Member 'VRaceSexMenuViewModel_GetRaceTableRows::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetSliderTableRowDataFromCommon
// 0x0110 (0x0110 - 0x0000)
struct VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon final
{
public:
	class FName                                   MorphTarget;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLegacyRaceSexMenuTableRow             ReturnValue;                                       // 0x0008(0x0108)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon");
static_assert(sizeof(VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon) == 0x000110, "Wrong size on VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon");
static_assert(offsetof(VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon, MorphTarget) == 0x000000, "Member 'VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon::MorphTarget' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon, ReturnValue) == 0x000008, "Member 'VRaceSexMenuViewModel_GetSliderTableRowDataFromCommon::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetSyncedPhenotypeData
// 0x0100 (0x0100 - 0x0000)
struct VRaceSexMenuViewModel_GetSyncedPhenotypeData final
{
public:
	struct FRaceSexMenuPhenotypeData              ReturnValue;                                       // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetSyncedPhenotypeData) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetSyncedPhenotypeData");
static_assert(sizeof(VRaceSexMenuViewModel_GetSyncedPhenotypeData) == 0x000100, "Wrong size on VRaceSexMenuViewModel_GetSyncedPhenotypeData");
static_assert(offsetof(VRaceSexMenuViewModel_GetSyncedPhenotypeData, ReturnValue) == 0x000000, "Member 'VRaceSexMenuViewModel_GetSyncedPhenotypeData::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.GetToggleTableRowDataFromCommon
// 0x0110 (0x0110 - 0x0000)
struct VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon final
{
public:
	ELegacyRaceSexMenuToggleType                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLegacyRaceSexMenuTableRow             ReturnValue;                                       // 0x0008(0x0108)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon");
static_assert(sizeof(VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon) == 0x000110, "Wrong size on VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon");
static_assert(offsetof(VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon, Type) == 0x000000, "Member 'VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon::Type' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon, ReturnValue) == 0x000008, "Member 'VRaceSexMenuViewModel_GetToggleTableRowDataFromCommon::ReturnValue' has a wrong offset!");

// Function Altar.VRaceSexMenuViewModel.IsGenericPageScrollboxValid
// 0x0018 (0x0018 - 0x0000)
struct VRaceSexMenuViewModel_IsGenericPageScrollboxValid final
{
public:
	class FName                                   CategoryKey;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             ScrollBox;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VRaceSexMenuViewModel_IsGenericPageScrollboxValid) == 0x000008, "Wrong alignment on VRaceSexMenuViewModel_IsGenericPageScrollboxValid");
static_assert(sizeof(VRaceSexMenuViewModel_IsGenericPageScrollboxValid) == 0x000018, "Wrong size on VRaceSexMenuViewModel_IsGenericPageScrollboxValid");
static_assert(offsetof(VRaceSexMenuViewModel_IsGenericPageScrollboxValid, CategoryKey) == 0x000000, "Member 'VRaceSexMenuViewModel_IsGenericPageScrollboxValid::CategoryKey' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_IsGenericPageScrollboxValid, ScrollBox) == 0x000008, "Member 'VRaceSexMenuViewModel_IsGenericPageScrollboxValid::ScrollBox' has a wrong offset!");
static_assert(offsetof(VRaceSexMenuViewModel_IsGenericPageScrollboxValid, ReturnValue) == 0x000010, "Member 'VRaceSexMenuViewModel_IsGenericPageScrollboxValid::ReturnValue' has a wrong offset!");

// Function Altar.VRadialMenu.GetMouseCursorAngle
// 0x0004 (0x0004 - 0x0000)
struct VRadialMenu_GetMouseCursorAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRadialMenu_GetMouseCursorAngle) == 0x000004, "Wrong alignment on VRadialMenu_GetMouseCursorAngle");
static_assert(sizeof(VRadialMenu_GetMouseCursorAngle) == 0x000004, "Wrong size on VRadialMenu_GetMouseCursorAngle");
static_assert(offsetof(VRadialMenu_GetMouseCursorAngle, ReturnValue) == 0x000000, "Member 'VRadialMenu_GetMouseCursorAngle::ReturnValue' has a wrong offset!");

// Function Altar.VRadialMenu.GetMouseCursorDistance
// 0x0004 (0x0004 - 0x0000)
struct VRadialMenu_GetMouseCursorDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRadialMenu_GetMouseCursorDistance) == 0x000004, "Wrong alignment on VRadialMenu_GetMouseCursorDistance");
static_assert(sizeof(VRadialMenu_GetMouseCursorDistance) == 0x000004, "Wrong size on VRadialMenu_GetMouseCursorDistance");
static_assert(offsetof(VRadialMenu_GetMouseCursorDistance, ReturnValue) == 0x000000, "Member 'VRadialMenu_GetMouseCursorDistance::ReturnValue' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.NotifyRebindHasBeenChanged
// 0x0001 (0x0001 - 0x0000)
struct VRebindGlobalSubsystem_NotifyRebindHasBeenChanged final
{
public:
	bool                                          bListenState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_NotifyRebindHasBeenChanged) == 0x000001, "Wrong alignment on VRebindGlobalSubsystem_NotifyRebindHasBeenChanged");
static_assert(sizeof(VRebindGlobalSubsystem_NotifyRebindHasBeenChanged) == 0x000001, "Wrong size on VRebindGlobalSubsystem_NotifyRebindHasBeenChanged");
static_assert(offsetof(VRebindGlobalSubsystem_NotifyRebindHasBeenChanged, bListenState) == 0x000000, "Member 'VRebindGlobalSubsystem_NotifyRebindHasBeenChanged::bListenState' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.RegisterKeySelector
// 0x0008 (0x0008 - 0x0000)
struct VRebindGlobalSubsystem_RegisterKeySelector final
{
public:
	class UVAltarNavigableInputKeySelector*       Selector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_RegisterKeySelector) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_RegisterKeySelector");
static_assert(sizeof(VRebindGlobalSubsystem_RegisterKeySelector) == 0x000008, "Wrong size on VRebindGlobalSubsystem_RegisterKeySelector");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterKeySelector, Selector) == 0x000000, "Member 'VRebindGlobalSubsystem_RegisterKeySelector::Selector' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.RegisterListeningWidget
// 0x0010 (0x0010 - 0x0000)
struct VRebindGlobalSubsystem_RegisterListeningWidget final
{
public:
	class UVModernRebindSettingWidget*            RebindWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVNavigableInputKeySelector*            Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_RegisterListeningWidget) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_RegisterListeningWidget");
static_assert(sizeof(VRebindGlobalSubsystem_RegisterListeningWidget) == 0x000010, "Wrong size on VRebindGlobalSubsystem_RegisterListeningWidget");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterListeningWidget, RebindWidget) == 0x000000, "Member 'VRebindGlobalSubsystem_RegisterListeningWidget::RebindWidget' has a wrong offset!");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterListeningWidget, Target) == 0x000008, "Member 'VRebindGlobalSubsystem_RegisterListeningWidget::Target' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.RegisterRebindWidget
// 0x0080 (0x0080 - 0x0000)
struct VRebindGlobalSubsystem_RegisterRebindWidget final
{
public:
	class UVModernRebindSettingWidget*            OwnerItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVModernRebindType                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModernRebindData                      RebindData;                                        // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FModernPairedRebindData                PairedRebindData;                                  // 0x0070(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_RegisterRebindWidget) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_RegisterRebindWidget");
static_assert(sizeof(VRebindGlobalSubsystem_RegisterRebindWidget) == 0x000080, "Wrong size on VRebindGlobalSubsystem_RegisterRebindWidget");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterRebindWidget, OwnerItem) == 0x000000, "Member 'VRebindGlobalSubsystem_RegisterRebindWidget::OwnerItem' has a wrong offset!");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterRebindWidget, Type) == 0x000008, "Member 'VRebindGlobalSubsystem_RegisterRebindWidget::Type' has a wrong offset!");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterRebindWidget, RebindData) == 0x000010, "Member 'VRebindGlobalSubsystem_RegisterRebindWidget::RebindData' has a wrong offset!");
static_assert(offsetof(VRebindGlobalSubsystem_RegisterRebindWidget, PairedRebindData) == 0x000070, "Member 'VRebindGlobalSubsystem_RegisterRebindWidget::PairedRebindData' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.RequestBroadcastOnSettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged final
{
public:
	class UVModernRebindSettingWidget*            ChangedRebind;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged");
static_assert(sizeof(VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged) == 0x000008, "Wrong size on VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged");
static_assert(offsetof(VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged, ChangedRebind) == 0x000000, "Member 'VRebindGlobalSubsystem_RequestBroadcastOnSettingsChanged::ChangedRebind' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.StopAllSelectorListenning
// 0x0008 (0x0008 - 0x0000)
struct VRebindGlobalSubsystem_StopAllSelectorListenning final
{
public:
	const class UVAltarNavigableInputKeySelector* Exeption;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_StopAllSelectorListenning) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_StopAllSelectorListenning");
static_assert(sizeof(VRebindGlobalSubsystem_StopAllSelectorListenning) == 0x000008, "Wrong size on VRebindGlobalSubsystem_StopAllSelectorListenning");
static_assert(offsetof(VRebindGlobalSubsystem_StopAllSelectorListenning, Exeption) == 0x000000, "Member 'VRebindGlobalSubsystem_StopAllSelectorListenning::Exeption' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.UnregisterKeySelector
// 0x0008 (0x0008 - 0x0000)
struct VRebindGlobalSubsystem_UnregisterKeySelector final
{
public:
	class UVAltarNavigableInputKeySelector*       Selector;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_UnregisterKeySelector) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_UnregisterKeySelector");
static_assert(sizeof(VRebindGlobalSubsystem_UnregisterKeySelector) == 0x000008, "Wrong size on VRebindGlobalSubsystem_UnregisterKeySelector");
static_assert(offsetof(VRebindGlobalSubsystem_UnregisterKeySelector, Selector) == 0x000000, "Member 'VRebindGlobalSubsystem_UnregisterKeySelector::Selector' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.UnregisterListeningWidget
// 0x0010 (0x0010 - 0x0000)
struct VRebindGlobalSubsystem_UnregisterListeningWidget final
{
public:
	class UVModernRebindSettingWidget*            RebindWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVNavigableInputKeySelector*            Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_UnregisterListeningWidget) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_UnregisterListeningWidget");
static_assert(sizeof(VRebindGlobalSubsystem_UnregisterListeningWidget) == 0x000010, "Wrong size on VRebindGlobalSubsystem_UnregisterListeningWidget");
static_assert(offsetof(VRebindGlobalSubsystem_UnregisterListeningWidget, RebindWidget) == 0x000000, "Member 'VRebindGlobalSubsystem_UnregisterListeningWidget::RebindWidget' has a wrong offset!");
static_assert(offsetof(VRebindGlobalSubsystem_UnregisterListeningWidget, Target) == 0x000008, "Member 'VRebindGlobalSubsystem_UnregisterListeningWidget::Target' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.UnregisterRebindWidget
// 0x0008 (0x0008 - 0x0000)
struct VRebindGlobalSubsystem_UnregisterRebindWidget final
{
public:
	class UVModernRebindSettingWidget*            OwnerItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_UnregisterRebindWidget) == 0x000008, "Wrong alignment on VRebindGlobalSubsystem_UnregisterRebindWidget");
static_assert(sizeof(VRebindGlobalSubsystem_UnregisterRebindWidget) == 0x000008, "Wrong size on VRebindGlobalSubsystem_UnregisterRebindWidget");
static_assert(offsetof(VRebindGlobalSubsystem_UnregisterRebindWidget, OwnerItem) == 0x000000, "Member 'VRebindGlobalSubsystem_UnregisterRebindWidget::OwnerItem' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.DoesHaveAEmptyPrimaryBinding
// 0x0001 (0x0001 - 0x0000)
struct VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding) == 0x000001, "Wrong alignment on VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding");
static_assert(sizeof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding) == 0x000001, "Wrong size on VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding");
static_assert(offsetof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding, ReturnValue) == 0x000000, "Member 'VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBinding::ReturnValue' has a wrong offset!");

// Function Altar.VRebindGlobalSubsystem.DoesHaveAEmptyPrimaryBindingForType
// 0x0002 (0x0002 - 0x0000)
struct VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType final
{
public:
	EVModernRebindType                            ComparedType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType) == 0x000001, "Wrong alignment on VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType");
static_assert(sizeof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType) == 0x000002, "Wrong size on VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType");
static_assert(offsetof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType, ComparedType) == 0x000000, "Member 'VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType::ComparedType' has a wrong offset!");
static_assert(offsetof(VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType, ReturnValue) == 0x000001, "Member 'VRebindGlobalSubsystem_DoesHaveAEmptyPrimaryBindingForType::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyRechargeMenuItem.SetProperties
// 0x0040 (0x0040 - 0x0000)
struct VLegacyRechargeMenuItem_SetProperties final
{
public:
	struct FLegacyRechargeMenuItemProperties      Value;                                             // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyRechargeMenuItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyRechargeMenuItem_SetProperties");
static_assert(sizeof(VLegacyRechargeMenuItem_SetProperties) == 0x000040, "Wrong size on VLegacyRechargeMenuItem_SetProperties");
static_assert(offsetof(VLegacyRechargeMenuItem_SetProperties, Value) == 0x000000, "Member 'VLegacyRechargeMenuItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyRechargeMenuItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyRechargeMenuItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyRechargeMenuItem_GetIndex) == 0x000004, "Wrong alignment on VLegacyRechargeMenuItem_GetIndex");
static_assert(sizeof(VLegacyRechargeMenuItem_GetIndex) == 0x000004, "Wrong size on VLegacyRechargeMenuItem_GetIndex");
static_assert(offsetof(VLegacyRechargeMenuItem_GetIndex, ReturnValue) == 0x000000, "Member 'VLegacyRechargeMenuItem_GetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyRechargeMenuItem.GetProperties
// 0x0040 (0x0040 - 0x0000)
struct VLegacyRechargeMenuItem_GetProperties final
{
public:
	struct FLegacyRechargeMenuItemProperties      ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyRechargeMenuItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyRechargeMenuItem_GetProperties");
static_assert(sizeof(VLegacyRechargeMenuItem_GetProperties) == 0x000040, "Wrong size on VLegacyRechargeMenuItem_GetProperties");
static_assert(offsetof(VLegacyRechargeMenuItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyRechargeMenuItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.RegisterSendClickedItem
// 0x0004 (0x0004 - 0x0000)
struct VRechargeMenuViewModel_RegisterSendClickedItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_RegisterSendClickedItem) == 0x000004, "Wrong alignment on VRechargeMenuViewModel_RegisterSendClickedItem");
static_assert(sizeof(VRechargeMenuViewModel_RegisterSendClickedItem) == 0x000004, "Wrong size on VRechargeMenuViewModel_RegisterSendClickedItem");
static_assert(offsetof(VRechargeMenuViewModel_RegisterSendClickedItem, Index_0) == 0x000000, "Member 'VRechargeMenuViewModel_RegisterSendClickedItem::Index_0' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.RegisterSendHoveredItem
// 0x0004 (0x0004 - 0x0000)
struct VRechargeMenuViewModel_RegisterSendHoveredItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_RegisterSendHoveredItem) == 0x000004, "Wrong alignment on VRechargeMenuViewModel_RegisterSendHoveredItem");
static_assert(sizeof(VRechargeMenuViewModel_RegisterSendHoveredItem) == 0x000004, "Wrong size on VRechargeMenuViewModel_RegisterSendHoveredItem");
static_assert(offsetof(VRechargeMenuViewModel_RegisterSendHoveredItem, Index_0) == 0x000000, "Member 'VRechargeMenuViewModel_RegisterSendHoveredItem::Index_0' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetIsOpenedFromQuickWheel
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_SetIsOpenedFromQuickWheel final
{
public:
	bool                                          bNewIsOpenedFromQuickWheel;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetIsOpenedFromQuickWheel) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_SetIsOpenedFromQuickWheel");
static_assert(sizeof(VRechargeMenuViewModel_SetIsOpenedFromQuickWheel) == 0x000001, "Wrong size on VRechargeMenuViewModel_SetIsOpenedFromQuickWheel");
static_assert(offsetof(VRechargeMenuViewModel_SetIsOpenedFromQuickWheel, bNewIsOpenedFromQuickWheel) == 0x000000, "Member 'VRechargeMenuViewModel_SetIsOpenedFromQuickWheel::bNewIsOpenedFromQuickWheel' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          bNewIsSortReversed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VRechargeMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VRechargeMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VRechargeMenuViewModel_SetIsSortReversed, bNewIsSortReversed) == 0x000000, "Member 'VRechargeMenuViewModel_SetIsSortReversed::bNewIsSortReversed' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetItems
// 0x0010 (0x0010 - 0x0000)
struct VRechargeMenuViewModel_SetItems final
{
public:
	TArray<struct FLegacyRechargeMenuItemProperties> NewItems;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetItems) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_SetItems");
static_assert(sizeof(VRechargeMenuViewModel_SetItems) == 0x000010, "Wrong size on VRechargeMenuViewModel_SetItems");
static_assert(offsetof(VRechargeMenuViewModel_SetItems, NewItems) == 0x000000, "Member 'VRechargeMenuViewModel_SetItems::NewItems' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetMerchantData
// 0x0020 (0x0020 - 0x0000)
struct VRechargeMenuViewModel_SetMerchantData final
{
public:
	struct FModernRechargeMenuCharacterData       NewMerchantData;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetMerchantData) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_SetMerchantData");
static_assert(sizeof(VRechargeMenuViewModel_SetMerchantData) == 0x000020, "Wrong size on VRechargeMenuViewModel_SetMerchantData");
static_assert(offsetof(VRechargeMenuViewModel_SetMerchantData, NewMerchantData) == 0x000000, "Member 'VRechargeMenuViewModel_SetMerchantData::NewMerchantData' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetMerchantGold
// 0x0004 (0x0004 - 0x0000)
struct VRechargeMenuViewModel_SetMerchantGold final
{
public:
	int32                                         NewMerchantGold;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetMerchantGold) == 0x000004, "Wrong alignment on VRechargeMenuViewModel_SetMerchantGold");
static_assert(sizeof(VRechargeMenuViewModel_SetMerchantGold) == 0x000004, "Wrong size on VRechargeMenuViewModel_SetMerchantGold");
static_assert(offsetof(VRechargeMenuViewModel_SetMerchantGold, NewMerchantGold) == 0x000000, "Member 'VRechargeMenuViewModel_SetMerchantGold::NewMerchantGold' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct VRechargeMenuViewModel_SetPlayerData final
{
public:
	struct FModernRechargeMenuCharacterData       NewPlayerData;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetPlayerData) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_SetPlayerData");
static_assert(sizeof(VRechargeMenuViewModel_SetPlayerData) == 0x000020, "Wrong size on VRechargeMenuViewModel_SetPlayerData");
static_assert(offsetof(VRechargeMenuViewModel_SetPlayerData, NewPlayerData) == 0x000000, "Member 'VRechargeMenuViewModel_SetPlayerData::NewPlayerData' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct VRechargeMenuViewModel_SetPlayerGold final
{
public:
	int32                                         NewPlayerGold;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetPlayerGold) == 0x000004, "Wrong alignment on VRechargeMenuViewModel_SetPlayerGold");
static_assert(sizeof(VRechargeMenuViewModel_SetPlayerGold) == 0x000004, "Wrong size on VRechargeMenuViewModel_SetPlayerGold");
static_assert(offsetof(VRechargeMenuViewModel_SetPlayerGold, NewPlayerGold) == 0x000000, "Member 'VRechargeMenuViewModel_SetPlayerGold::NewPlayerGold' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetRechargeMenuGoldProperties
// 0x0028 (0x0028 - 0x0000)
struct VRechargeMenuViewModel_SetRechargeMenuGoldProperties final
{
public:
	struct FLegacyRechargeMenuGoldProperties      NewValue;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetRechargeMenuGoldProperties) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_SetRechargeMenuGoldProperties");
static_assert(sizeof(VRechargeMenuViewModel_SetRechargeMenuGoldProperties) == 0x000028, "Wrong size on VRechargeMenuViewModel_SetRechargeMenuGoldProperties");
static_assert(offsetof(VRechargeMenuViewModel_SetRechargeMenuGoldProperties, NewValue) == 0x000000, "Member 'VRechargeMenuViewModel_SetRechargeMenuGoldProperties::NewValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetRechargeMenuPage
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_SetRechargeMenuPage final
{
public:
	ELegacyRechargeMenuPage                       NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetRechargeMenuPage) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_SetRechargeMenuPage");
static_assert(sizeof(VRechargeMenuViewModel_SetRechargeMenuPage) == 0x000001, "Wrong size on VRechargeMenuViewModel_SetRechargeMenuPage");
static_assert(offsetof(VRechargeMenuViewModel_SetRechargeMenuPage, NewValue) == 0x000000, "Member 'VRechargeMenuViewModel_SetRechargeMenuPage::NewValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetRechargeMenuSoulProperties
// 0x0040 (0x0040 - 0x0000)
struct VRechargeMenuViewModel_SetRechargeMenuSoulProperties final
{
public:
	struct FLegacyRechargeMenuSoulProperties      NewValue;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetRechargeMenuSoulProperties) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_SetRechargeMenuSoulProperties");
static_assert(sizeof(VRechargeMenuViewModel_SetRechargeMenuSoulProperties) == 0x000040, "Wrong size on VRechargeMenuViewModel_SetRechargeMenuSoulProperties");
static_assert(offsetof(VRechargeMenuViewModel_SetRechargeMenuSoulProperties, NewValue) == 0x000000, "Member 'VRechargeMenuViewModel_SetRechargeMenuSoulProperties::NewValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_SetSortType final
{
public:
	EOriginalInventoryMenuSortType                NewSortType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_SetSortType");
static_assert(sizeof(VRechargeMenuViewModel_SetSortType) == 0x000001, "Wrong size on VRechargeMenuViewModel_SetSortType");
static_assert(offsetof(VRechargeMenuViewModel_SetSortType, NewSortType) == 0x000000, "Member 'VRechargeMenuViewModel_SetSortType::NewSortType' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetItems
// 0x0010 (0x0010 - 0x0000)
struct VRechargeMenuViewModel_GetItems final
{
public:
	TArray<struct FLegacyRechargeMenuItemProperties> ReturnValue;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetItems) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_GetItems");
static_assert(sizeof(VRechargeMenuViewModel_GetItems) == 0x000010, "Wrong size on VRechargeMenuViewModel_GetItems");
static_assert(offsetof(VRechargeMenuViewModel_GetItems, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetItems::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetMerchantData
// 0x0020 (0x0020 - 0x0000)
struct VRechargeMenuViewModel_GetMerchantData final
{
public:
	struct FModernRechargeMenuCharacterData       ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetMerchantData) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_GetMerchantData");
static_assert(sizeof(VRechargeMenuViewModel_GetMerchantData) == 0x000020, "Wrong size on VRechargeMenuViewModel_GetMerchantData");
static_assert(offsetof(VRechargeMenuViewModel_GetMerchantData, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetMerchantData::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct VRechargeMenuViewModel_GetPlayerData final
{
public:
	struct FModernRechargeMenuCharacterData       ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetPlayerData) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_GetPlayerData");
static_assert(sizeof(VRechargeMenuViewModel_GetPlayerData) == 0x000020, "Wrong size on VRechargeMenuViewModel_GetPlayerData");
static_assert(offsetof(VRechargeMenuViewModel_GetPlayerData, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetPlayerData::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetRechargeMenuGoldProperties
// 0x0028 (0x0028 - 0x0000)
struct VRechargeMenuViewModel_GetRechargeMenuGoldProperties final
{
public:
	struct FLegacyRechargeMenuGoldProperties      ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetRechargeMenuGoldProperties) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_GetRechargeMenuGoldProperties");
static_assert(sizeof(VRechargeMenuViewModel_GetRechargeMenuGoldProperties) == 0x000028, "Wrong size on VRechargeMenuViewModel_GetRechargeMenuGoldProperties");
static_assert(offsetof(VRechargeMenuViewModel_GetRechargeMenuGoldProperties, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetRechargeMenuGoldProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetRechargeMenuPage
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_GetRechargeMenuPage final
{
public:
	ELegacyRechargeMenuPage                       ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetRechargeMenuPage) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_GetRechargeMenuPage");
static_assert(sizeof(VRechargeMenuViewModel_GetRechargeMenuPage) == 0x000001, "Wrong size on VRechargeMenuViewModel_GetRechargeMenuPage");
static_assert(offsetof(VRechargeMenuViewModel_GetRechargeMenuPage, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetRechargeMenuPage::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetRechargeMenuSoulProperties
// 0x0040 (0x0040 - 0x0000)
struct VRechargeMenuViewModel_GetRechargeMenuSoulProperties final
{
public:
	struct FLegacyRechargeMenuSoulProperties      ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetRechargeMenuSoulProperties) == 0x000008, "Wrong alignment on VRechargeMenuViewModel_GetRechargeMenuSoulProperties");
static_assert(sizeof(VRechargeMenuViewModel_GetRechargeMenuSoulProperties) == 0x000040, "Wrong size on VRechargeMenuViewModel_GetRechargeMenuSoulProperties");
static_assert(offsetof(VRechargeMenuViewModel_GetRechargeMenuSoulProperties, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetRechargeMenuSoulProperties::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_GetSortType final
{
public:
	EOriginalInventoryMenuSortType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_GetSortType");
static_assert(sizeof(VRechargeMenuViewModel_GetSortType) == 0x000001, "Wrong size on VRechargeMenuViewModel_GetSortType");
static_assert(offsetof(VRechargeMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.IsOpenedFromQuickWheel
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_IsOpenedFromQuickWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_IsOpenedFromQuickWheel) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_IsOpenedFromQuickWheel");
static_assert(sizeof(VRechargeMenuViewModel_IsOpenedFromQuickWheel) == 0x000001, "Wrong size on VRechargeMenuViewModel_IsOpenedFromQuickWheel");
static_assert(offsetof(VRechargeMenuViewModel_IsOpenedFromQuickWheel, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_IsOpenedFromQuickWheel::ReturnValue' has a wrong offset!");

// Function Altar.VRechargeMenuViewModel.IsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VRechargeMenuViewModel_IsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VRechargeMenuViewModel_IsSortReversed) == 0x000001, "Wrong alignment on VRechargeMenuViewModel_IsSortReversed");
static_assert(sizeof(VRechargeMenuViewModel_IsSortReversed) == 0x000001, "Wrong size on VRechargeMenuViewModel_IsSortReversed");
static_assert(offsetof(VRechargeMenuViewModel_IsSortReversed, ReturnValue) == 0x000000, "Member 'VRechargeMenuViewModel_IsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyRepairMenuItem.SetProperties
// 0x0048 (0x0048 - 0x0000)
struct VLegacyRepairMenuItem_SetProperties final
{
public:
	struct FLegacyRepairItemProperties            Value;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyRepairMenuItem_SetProperties) == 0x000008, "Wrong alignment on VLegacyRepairMenuItem_SetProperties");
static_assert(sizeof(VLegacyRepairMenuItem_SetProperties) == 0x000048, "Wrong size on VLegacyRepairMenuItem_SetProperties");
static_assert(offsetof(VLegacyRepairMenuItem_SetProperties, Value) == 0x000000, "Member 'VLegacyRepairMenuItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacyRepairMenuItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacyRepairMenuItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyRepairMenuItem_GetIndex) == 0x000004, "Wrong alignment on VLegacyRepairMenuItem_GetIndex");
static_assert(sizeof(VLegacyRepairMenuItem_GetIndex) == 0x000004, "Wrong size on VLegacyRepairMenuItem_GetIndex");
static_assert(offsetof(VLegacyRepairMenuItem_GetIndex, ReturnValue) == 0x000000, "Member 'VLegacyRepairMenuItem_GetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacyRepairMenuItem.GetProperties
// 0x0048 (0x0048 - 0x0000)
struct VLegacyRepairMenuItem_GetProperties final
{
public:
	struct FLegacyRepairItemProperties            ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacyRepairMenuItem_GetProperties) == 0x000008, "Wrong alignment on VLegacyRepairMenuItem_GetProperties");
static_assert(sizeof(VLegacyRepairMenuItem_GetProperties) == 0x000048, "Wrong size on VLegacyRepairMenuItem_GetProperties");
static_assert(offsetof(VLegacyRepairMenuItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacyRepairMenuItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VSpecialIdleLayerAnimInstance.ShouldStopSpecialIdle
// 0x0001 (0x0001 - 0x0000)
struct VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle) == 0x000001, "Wrong alignment on VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle");
static_assert(sizeof(VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle) == 0x000001, "Wrong size on VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle");
static_assert(offsetof(VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle, ReturnValue) == 0x000000, "Member 'VSpecialIdleLayerAnimInstance_ShouldStopSpecialIdle::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySpellMakingItem.SetProperties
// 0x0030 (0x0030 - 0x0000)
struct VLegacySpellMakingItem_SetProperties final
{
public:
	struct FLegacyEffectsItemProperties           Value;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellMakingItem_SetProperties) == 0x000008, "Wrong alignment on VLegacySpellMakingItem_SetProperties");
static_assert(sizeof(VLegacySpellMakingItem_SetProperties) == 0x000030, "Wrong size on VLegacySpellMakingItem_SetProperties");
static_assert(offsetof(VLegacySpellMakingItem_SetProperties, Value) == 0x000000, "Member 'VLegacySpellMakingItem_SetProperties::Value' has a wrong offset!");

// Function Altar.VLegacySpellMakingItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct VLegacySpellMakingItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellMakingItem_GetIndex) == 0x000004, "Wrong alignment on VLegacySpellMakingItem_GetIndex");
static_assert(sizeof(VLegacySpellMakingItem_GetIndex) == 0x000004, "Wrong size on VLegacySpellMakingItem_GetIndex");
static_assert(offsetof(VLegacySpellMakingItem_GetIndex, ReturnValue) == 0x000000, "Member 'VLegacySpellMakingItem_GetIndex::ReturnValue' has a wrong offset!");

// Function Altar.VLegacySpellMakingItem.GetProperties
// 0x0030 (0x0030 - 0x0000)
struct VLegacySpellMakingItem_GetProperties final
{
public:
	struct FLegacyEffectsItemProperties           ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VLegacySpellMakingItem_GetProperties) == 0x000008, "Wrong alignment on VLegacySpellMakingItem_GetProperties");
static_assert(sizeof(VLegacySpellMakingItem_GetProperties) == 0x000030, "Wrong size on VLegacySpellMakingItem_GetProperties");
static_assert(offsetof(VLegacySpellMakingItem_GetProperties, ReturnValue) == 0x000000, "Member 'VLegacySpellMakingItem_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.RegisterSendItemHoverHandler
// 0x0004 (0x0004 - 0x0000)
struct VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler) == 0x000004, "Wrong alignment on VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler");
static_assert(sizeof(VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler) == 0x000004, "Wrong size on VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler");
static_assert(offsetof(VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler, InButtonIndex) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_RegisterSendItemHoverHandler::InButtonIndex' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.RegisterSendSpellItemClicked
// 0x0004 (0x0004 - 0x0000)
struct VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked) == 0x000004, "Wrong alignment on VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked");
static_assert(sizeof(VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked) == 0x000004, "Wrong size on VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked");
static_assert(offsetof(VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked, InButtonIndex) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_RegisterSendSpellItemClicked::InButtonIndex' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.SetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VSpellPurchaseMenuViewModel_SetIsSortReversed final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong alignment on VSpellPurchaseMenuViewModel_SetIsSortReversed");
static_assert(sizeof(VSpellPurchaseMenuViewModel_SetIsSortReversed) == 0x000001, "Wrong size on VSpellPurchaseMenuViewModel_SetIsSortReversed");
static_assert(offsetof(VSpellPurchaseMenuViewModel_SetIsSortReversed, Value) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_SetIsSortReversed::Value' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.SetNpcData
// 0x0020 (0x0020 - 0x0000)
struct VSpellPurchaseMenuViewModel_SetNpcData final
{
public:
	struct FLegacySpellPurchaseMenuNPCData        NewNPCData;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_SetNpcData) == 0x000008, "Wrong alignment on VSpellPurchaseMenuViewModel_SetNpcData");
static_assert(sizeof(VSpellPurchaseMenuViewModel_SetNpcData) == 0x000020, "Wrong size on VSpellPurchaseMenuViewModel_SetNpcData");
static_assert(offsetof(VSpellPurchaseMenuViewModel_SetNpcData, NewNPCData) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_SetNpcData::NewNPCData' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.SetPlayerMoney
// 0x0004 (0x0004 - 0x0000)
struct VSpellPurchaseMenuViewModel_SetPlayerMoney final
{
public:
	int32                                         NewPlayerMoney;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_SetPlayerMoney) == 0x000004, "Wrong alignment on VSpellPurchaseMenuViewModel_SetPlayerMoney");
static_assert(sizeof(VSpellPurchaseMenuViewModel_SetPlayerMoney) == 0x000004, "Wrong size on VSpellPurchaseMenuViewModel_SetPlayerMoney");
static_assert(offsetof(VSpellPurchaseMenuViewModel_SetPlayerMoney, NewPlayerMoney) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_SetPlayerMoney::NewPlayerMoney' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct VSpellPurchaseMenuViewModel_SetPlayerName final
{
public:
	class FText                                   NewPlayerName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_SetPlayerName) == 0x000008, "Wrong alignment on VSpellPurchaseMenuViewModel_SetPlayerName");
static_assert(sizeof(VSpellPurchaseMenuViewModel_SetPlayerName) == 0x000018, "Wrong size on VSpellPurchaseMenuViewModel_SetPlayerName");
static_assert(offsetof(VSpellPurchaseMenuViewModel_SetPlayerName, NewPlayerName) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_SetPlayerName::NewPlayerName' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct VSpellPurchaseMenuViewModel_SetSortType final
{
public:
	ELegacySpellPurchaseMenuSortType              Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_SetSortType) == 0x000001, "Wrong alignment on VSpellPurchaseMenuViewModel_SetSortType");
static_assert(sizeof(VSpellPurchaseMenuViewModel_SetSortType) == 0x000001, "Wrong size on VSpellPurchaseMenuViewModel_SetSortType");
static_assert(offsetof(VSpellPurchaseMenuViewModel_SetSortType, Value) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_SetSortType::Value' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.GetIsSortReversed
// 0x0001 (0x0001 - 0x0000)
struct VSpellPurchaseMenuViewModel_GetIsSortReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_GetIsSortReversed) == 0x000001, "Wrong alignment on VSpellPurchaseMenuViewModel_GetIsSortReversed");
static_assert(sizeof(VSpellPurchaseMenuViewModel_GetIsSortReversed) == 0x000001, "Wrong size on VSpellPurchaseMenuViewModel_GetIsSortReversed");
static_assert(offsetof(VSpellPurchaseMenuViewModel_GetIsSortReversed, ReturnValue) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_GetIsSortReversed::ReturnValue' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.GetNpcData
// 0x0020 (0x0020 - 0x0000)
struct VSpellPurchaseMenuViewModel_GetNpcData final
{
public:
	struct FLegacySpellPurchaseMenuNPCData        ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_GetNpcData) == 0x000008, "Wrong alignment on VSpellPurchaseMenuViewModel_GetNpcData");
static_assert(sizeof(VSpellPurchaseMenuViewModel_GetNpcData) == 0x000020, "Wrong size on VSpellPurchaseMenuViewModel_GetNpcData");
static_assert(offsetof(VSpellPurchaseMenuViewModel_GetNpcData, ReturnValue) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_GetNpcData::ReturnValue' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.GetPlayerMoney
// 0x0004 (0x0004 - 0x0000)
struct VSpellPurchaseMenuViewModel_GetPlayerMoney final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_GetPlayerMoney) == 0x000004, "Wrong alignment on VSpellPurchaseMenuViewModel_GetPlayerMoney");
static_assert(sizeof(VSpellPurchaseMenuViewModel_GetPlayerMoney) == 0x000004, "Wrong size on VSpellPurchaseMenuViewModel_GetPlayerMoney");
static_assert(offsetof(VSpellPurchaseMenuViewModel_GetPlayerMoney, ReturnValue) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_GetPlayerMoney::ReturnValue' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct VSpellPurchaseMenuViewModel_GetPlayerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_GetPlayerName) == 0x000008, "Wrong alignment on VSpellPurchaseMenuViewModel_GetPlayerName");
static_assert(sizeof(VSpellPurchaseMenuViewModel_GetPlayerName) == 0x000018, "Wrong size on VSpellPurchaseMenuViewModel_GetPlayerName");
static_assert(offsetof(VSpellPurchaseMenuViewModel_GetPlayerName, ReturnValue) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_GetPlayerName::ReturnValue' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.GetSortType
// 0x0001 (0x0001 - 0x0000)
struct VSpellPurchaseMenuViewModel_GetSortType final
{
public:
	ELegacySpellPurchaseMenuSortType              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_GetSortType) == 0x000001, "Wrong alignment on VSpellPurchaseMenuViewModel_GetSortType");
static_assert(sizeof(VSpellPurchaseMenuViewModel_GetSortType) == 0x000001, "Wrong size on VSpellPurchaseMenuViewModel_GetSortType");
static_assert(offsetof(VSpellPurchaseMenuViewModel_GetSortType, ReturnValue) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_GetSortType::ReturnValue' has a wrong offset!");

// Function Altar.VSpellPurchaseMenuViewModel.GetSpellList
// 0x0010 (0x0010 - 0x0000)
struct VSpellPurchaseMenuViewModel_GetSpellList final
{
public:
	TArray<struct FLegacySpellPurchaseMenuItemProperties> ReturnValue;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VSpellPurchaseMenuViewModel_GetSpellList) == 0x000008, "Wrong alignment on VSpellPurchaseMenuViewModel_GetSpellList");
static_assert(sizeof(VSpellPurchaseMenuViewModel_GetSpellList) == 0x000010, "Wrong size on VSpellPurchaseMenuViewModel_GetSpellList");
static_assert(offsetof(VSpellPurchaseMenuViewModel_GetSpellList, ReturnValue) == 0x000000, "Member 'VSpellPurchaseMenuViewModel_GetSpellList::ReturnValue' has a wrong offset!");

// Function Altar.VTrainingMenuViewModel.SetProperties
// 0x00C8 (0x00C8 - 0x0000)
struct VTrainingMenuViewModel_SetProperties final
{
public:
	struct FLegacyTrainMenuProperties             NewProperties;                                     // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTrainingMenuViewModel_SetProperties) == 0x000008, "Wrong alignment on VTrainingMenuViewModel_SetProperties");
static_assert(sizeof(VTrainingMenuViewModel_SetProperties) == 0x0000C8, "Wrong size on VTrainingMenuViewModel_SetProperties");
static_assert(offsetof(VTrainingMenuViewModel_SetProperties, NewProperties) == 0x000000, "Member 'VTrainingMenuViewModel_SetProperties::NewProperties' has a wrong offset!");

// Function Altar.VTrainingMenuViewModel.GetProperties
// 0x00C8 (0x00C8 - 0x0000)
struct VTrainingMenuViewModel_GetProperties final
{
public:
	struct FLegacyTrainMenuProperties             ReturnValue;                                       // 0x0000(0x00C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTrainingMenuViewModel_GetProperties) == 0x000008, "Wrong alignment on VTrainingMenuViewModel_GetProperties");
static_assert(sizeof(VTrainingMenuViewModel_GetProperties) == 0x0000C8, "Wrong size on VTrainingMenuViewModel_GetProperties");
static_assert(offsetof(VTrainingMenuViewModel_GetProperties, ReturnValue) == 0x000000, "Member 'VTrainingMenuViewModel_GetProperties::ReturnValue' has a wrong offset!");

// Function Altar.VTrainingMenuViewModel.GetSkillProgression
// 0x0028 (0x0028 - 0x0000)
struct VTrainingMenuViewModel_GetSkillProgression final
{
public:
	struct FModernSkillProgression                ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTrainingMenuViewModel_GetSkillProgression) == 0x000008, "Wrong alignment on VTrainingMenuViewModel_GetSkillProgression");
static_assert(sizeof(VTrainingMenuViewModel_GetSkillProgression) == 0x000028, "Wrong size on VTrainingMenuViewModel_GetSkillProgression");
static_assert(offsetof(VTrainingMenuViewModel_GetSkillProgression, ReturnValue) == 0x000000, "Member 'VTrainingMenuViewModel_GetSkillProgression::ReturnValue' has a wrong offset!");

// Function Altar.VTransformPairingComponent.GetLatestPairedTransform
// 0x0060 (0x0060 - 0x0000)
struct VTransformPairingComponent_GetLatestPairedTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTransformPairingComponent_GetLatestPairedTransform) == 0x000010, "Wrong alignment on VTransformPairingComponent_GetLatestPairedTransform");
static_assert(sizeof(VTransformPairingComponent_GetLatestPairedTransform) == 0x000060, "Wrong size on VTransformPairingComponent_GetLatestPairedTransform");
static_assert(offsetof(VTransformPairingComponent_GetLatestPairedTransform, ReturnValue) == 0x000000, "Member 'VTransformPairingComponent_GetLatestPairedTransform::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.OnIdleStateEntry
// 0x0020 (0x0020 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry) == 0x000008, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry) == 0x000020, "Wrong size on VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry, Context) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry::Context' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry, Node) == 0x000010, "Member 'VTurnInPlaceCharacterAnimInstance_OnIdleStateEntry::Node' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.OnStartTurnTransitionStateEntry
// 0x0020 (0x0020 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry) == 0x000008, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry) == 0x000020, "Wrong size on VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry, Context) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry::Context' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry, Node) == 0x000010, "Member 'VTurnInPlaceCharacterAnimInstance_OnStartTurnTransitionStateEntry::Node' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.TriggerTurnInPlace
// 0x0004 (0x0004 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace final
{
public:
	float                                         InTurnAngle;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace) == 0x000004, "Wrong size on VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace, InTurnAngle) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_TriggerTurnInPlace::InTurnAngle' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.UpdateTurnSystem
// 0x0001 (0x0001 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem) == 0x000001, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem) == 0x000001, "Wrong size on VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_UpdateTurnSystem::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetActorOffset
// 0x0004 (0x0004 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetActorOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetActorOffset) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetActorOffset");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetActorOffset) == 0x000004, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetActorOffset");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetActorOffset, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetActorOffset::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetAnimRotationRatio
// 0x0004 (0x0004 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio) == 0x000004, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetAnimRotationRatio::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetAnimYawRotation
// 0x0004 (0x0004 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation) == 0x000004, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetAnimYawRotation::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetInterruptionState
// 0x0001 (0x0001 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetInterruptionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetInterruptionState) == 0x000001, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetInterruptionState");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetInterruptionState) == 0x000001, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetInterruptionState");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetInterruptionState, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetInterruptionState::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetRootOffset
// 0x0004 (0x0004 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetRootOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetRootOffset) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetRootOffset");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetRootOffset) == 0x000004, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetRootOffset");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetRootOffset, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetRootOffset::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetStopState
// 0x0001 (0x0001 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetStopState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetStopState) == 0x000001, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetStopState");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetStopState) == 0x000001, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetStopState");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetStopState, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetStopState::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.GetTurningYawAimOffset
// 0x0004 (0x0004 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset) == 0x000004, "Wrong size on VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_GetTurningYawAimOffset::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.HasPawnHasTag
// 0x000C (0x000C - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_HasPawnHasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_HasPawnHasTag) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_HasPawnHasTag");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_HasPawnHasTag) == 0x00000C, "Wrong size on VTurnInPlaceCharacterAnimInstance_HasPawnHasTag");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_HasPawnHasTag, Tag) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_HasPawnHasTag::Tag' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_HasPawnHasTag, ReturnValue) == 0x000008, "Member 'VTurnInPlaceCharacterAnimInstance_HasPawnHasTag::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.IsTurnTooSmall
// 0x0008 (0x0008 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall) == 0x000004, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall) == 0x000008, "Wrong size on VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall, Angle) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall::Angle' has a wrong offset!");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall, ReturnValue) == 0x000004, "Member 'VTurnInPlaceCharacterAnimInstance_IsTurnTooSmall::ReturnValue' has a wrong offset!");

// Function Altar.VTurnInPlaceCharacterAnimInstance.NeedsTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace) == 0x000001, "Wrong alignment on VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace");
static_assert(sizeof(VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace) == 0x000001, "Wrong size on VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace");
static_assert(offsetof(VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace, ReturnValue) == 0x000000, "Member 'VTurnInPlaceCharacterAnimInstance_NeedsTurnInPlace::ReturnValue' has a wrong offset!");

// Function Altar.VTutorialMenuViewModel.Dequeue
// 0x0038 (0x0038 - 0x0000)
struct VTutorialMenuViewModel_Dequeue final
{
public:
	struct FModernTutorialQueueProperties         ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTutorialMenuViewModel_Dequeue) == 0x000008, "Wrong alignment on VTutorialMenuViewModel_Dequeue");
static_assert(sizeof(VTutorialMenuViewModel_Dequeue) == 0x000038, "Wrong size on VTutorialMenuViewModel_Dequeue");
static_assert(offsetof(VTutorialMenuViewModel_Dequeue, ReturnValue) == 0x000000, "Member 'VTutorialMenuViewModel_Dequeue::ReturnValue' has a wrong offset!");

// Function Altar.VTutorialMenuViewModel.Enqueue
// 0x0038 (0x0038 - 0x0000)
struct VTutorialMenuViewModel_Enqueue final
{
public:
	struct FModernTutorialQueueProperties         NewProperties;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTutorialMenuViewModel_Enqueue) == 0x000008, "Wrong alignment on VTutorialMenuViewModel_Enqueue");
static_assert(sizeof(VTutorialMenuViewModel_Enqueue) == 0x000038, "Wrong size on VTutorialMenuViewModel_Enqueue");
static_assert(offsetof(VTutorialMenuViewModel_Enqueue, NewProperties) == 0x000000, "Member 'VTutorialMenuViewModel_Enqueue::NewProperties' has a wrong offset!");

// Function Altar.VTutorialMenuViewModel.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct VTutorialMenuViewModel_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTutorialMenuViewModel_IsEmpty) == 0x000001, "Wrong alignment on VTutorialMenuViewModel_IsEmpty");
static_assert(sizeof(VTutorialMenuViewModel_IsEmpty) == 0x000001, "Wrong size on VTutorialMenuViewModel_IsEmpty");
static_assert(offsetof(VTutorialMenuViewModel_IsEmpty, ReturnValue) == 0x000000, "Member 'VTutorialMenuViewModel_IsEmpty::ReturnValue' has a wrong offset!");

// Function Altar.VTutorialMenuViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VTutorialMenuViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VTutorialMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VTutorialMenuViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VTutorialMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VTutorialMenuViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VTutorialMenuViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VTutorialMenuViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VUsablePropItem.OnAttachedToPawnAsProp
// 0x0008 (0x0008 - 0x0000)
struct VUsablePropItem_OnAttachedToPawnAsProp final
{
public:
	class AVPairedPawn*                           PawnUsingThisItem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUsablePropItem_OnAttachedToPawnAsProp) == 0x000008, "Wrong alignment on VUsablePropItem_OnAttachedToPawnAsProp");
static_assert(sizeof(VUsablePropItem_OnAttachedToPawnAsProp) == 0x000008, "Wrong size on VUsablePropItem_OnAttachedToPawnAsProp");
static_assert(offsetof(VUsablePropItem_OnAttachedToPawnAsProp, PawnUsingThisItem) == 0x000000, "Member 'VUsablePropItem_OnAttachedToPawnAsProp::PawnUsingThisItem' has a wrong offset!");

// Function Altar.VUsablePropItem.GetAttachSocketName
// 0x0010 (0x0010 - 0x0000)
struct VUsablePropItem_GetAttachSocketName final
{
public:
	class AVPairedPawn*                           PawnUsingThisItem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUsablePropItem_GetAttachSocketName) == 0x000008, "Wrong alignment on VUsablePropItem_GetAttachSocketName");
static_assert(sizeof(VUsablePropItem_GetAttachSocketName) == 0x000010, "Wrong size on VUsablePropItem_GetAttachSocketName");
static_assert(offsetof(VUsablePropItem_GetAttachSocketName, PawnUsingThisItem) == 0x000000, "Member 'VUsablePropItem_GetAttachSocketName::PawnUsingThisItem' has a wrong offset!");
static_assert(offsetof(VUsablePropItem_GetAttachSocketName, ReturnValue) == 0x000008, "Member 'VUsablePropItem_GetAttachSocketName::ReturnValue' has a wrong offset!");

// Function Altar.VUsablePropItem.GetOffsetWhenUsedAsProp
// 0x0070 (0x0070 - 0x0000)
struct VUsablePropItem_GetOffsetWhenUsedAsProp final
{
public:
	class AVPairedPawn*                           PawnUsingThisItem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VUsablePropItem_GetOffsetWhenUsedAsProp) == 0x000010, "Wrong alignment on VUsablePropItem_GetOffsetWhenUsedAsProp");
static_assert(sizeof(VUsablePropItem_GetOffsetWhenUsedAsProp) == 0x000070, "Wrong size on VUsablePropItem_GetOffsetWhenUsedAsProp");
static_assert(offsetof(VUsablePropItem_GetOffsetWhenUsedAsProp, PawnUsingThisItem) == 0x000000, "Member 'VUsablePropItem_GetOffsetWhenUsedAsProp::PawnUsingThisItem' has a wrong offset!");
static_assert(offsetof(VUsablePropItem_GetOffsetWhenUsedAsProp, ReturnValue) == 0x000010, "Member 'VUsablePropItem_GetOffsetWhenUsedAsProp::ReturnValue' has a wrong offset!");

// Function Altar.VVideoMenuViewModel.RegisterSendClickedButton
// 0x0001 (0x0001 - 0x0000)
struct VVideoMenuViewModel_RegisterSendClickedButton final
{
public:
	ELegacyVideoMenuIDs                           InButtonIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VVideoMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong alignment on VVideoMenuViewModel_RegisterSendClickedButton");
static_assert(sizeof(VVideoMenuViewModel_RegisterSendClickedButton) == 0x000001, "Wrong size on VVideoMenuViewModel_RegisterSendClickedButton");
static_assert(offsetof(VVideoMenuViewModel_RegisterSendClickedButton, InButtonIndex) == 0x000000, "Member 'VVideoMenuViewModel_RegisterSendClickedButton::InButtonIndex' has a wrong offset!");

// Function Altar.VVideoMenuViewModel.ThisIsForPluginCompliance
// 0x0001 (0x0001 - 0x0000)
struct VVideoMenuViewModel_ThisIsForPluginCompliance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VVideoMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong alignment on VVideoMenuViewModel_ThisIsForPluginCompliance");
static_assert(sizeof(VVideoMenuViewModel_ThisIsForPluginCompliance) == 0x000001, "Wrong size on VVideoMenuViewModel_ThisIsForPluginCompliance");
static_assert(offsetof(VVideoMenuViewModel_ThisIsForPluginCompliance, ReturnValue) == 0x000000, "Member 'VVideoMenuViewModel_ThisIsForPluginCompliance::ReturnValue' has a wrong offset!");

// Function Altar.VQuiver.OnArrowCountChange
// 0x0004 (0x0004 - 0x0000)
struct VQuiver_OnArrowCountChange final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuiver_OnArrowCountChange) == 0x000004, "Wrong alignment on VQuiver_OnArrowCountChange");
static_assert(sizeof(VQuiver_OnArrowCountChange) == 0x000004, "Wrong size on VQuiver_OnArrowCountChange");
static_assert(offsetof(VQuiver_OnArrowCountChange, NewCount) == 0x000000, "Member 'VQuiver_OnArrowCountChange::NewCount' has a wrong offset!");

// Function Altar.VQuiver.GetArrowCount
// 0x0004 (0x0004 - 0x0000)
struct VQuiver_GetArrowCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VQuiver_GetArrowCount) == 0x000004, "Wrong alignment on VQuiver_GetArrowCount");
static_assert(sizeof(VQuiver_GetArrowCount) == 0x000004, "Wrong size on VQuiver_GetArrowCount");
static_assert(offsetof(VQuiver_GetArrowCount, ReturnValue) == 0x000000, "Member 'VQuiver_GetArrowCount::ReturnValue' has a wrong offset!");

// Function Altar.VWeatherAudioPlayer.SetOblivionStormIntensity
// 0x0004 (0x0004 - 0x0000)
struct VWeatherAudioPlayer_SetOblivionStormIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeatherAudioPlayer_SetOblivionStormIntensity) == 0x000004, "Wrong alignment on VWeatherAudioPlayer_SetOblivionStormIntensity");
static_assert(sizeof(VWeatherAudioPlayer_SetOblivionStormIntensity) == 0x000004, "Wrong size on VWeatherAudioPlayer_SetOblivionStormIntensity");
static_assert(offsetof(VWeatherAudioPlayer_SetOblivionStormIntensity, Intensity) == 0x000000, "Member 'VWeatherAudioPlayer_SetOblivionStormIntensity::Intensity' has a wrong offset!");

// Function Altar.VWeatherAudioPlayer.SetRainIntensity
// 0x0004 (0x0004 - 0x0000)
struct VWeatherAudioPlayer_SetRainIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeatherAudioPlayer_SetRainIntensity) == 0x000004, "Wrong alignment on VWeatherAudioPlayer_SetRainIntensity");
static_assert(sizeof(VWeatherAudioPlayer_SetRainIntensity) == 0x000004, "Wrong size on VWeatherAudioPlayer_SetRainIntensity");
static_assert(offsetof(VWeatherAudioPlayer_SetRainIntensity, Intensity) == 0x000000, "Member 'VWeatherAudioPlayer_SetRainIntensity::Intensity' has a wrong offset!");

// Function Altar.VWeatherAudioPlayer.SetSnowIntensity
// 0x0004 (0x0004 - 0x0000)
struct VWeatherAudioPlayer_SetSnowIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeatherAudioPlayer_SetSnowIntensity) == 0x000004, "Wrong alignment on VWeatherAudioPlayer_SetSnowIntensity");
static_assert(sizeof(VWeatherAudioPlayer_SetSnowIntensity) == 0x000004, "Wrong size on VWeatherAudioPlayer_SetSnowIntensity");
static_assert(offsetof(VWeatherAudioPlayer_SetSnowIntensity, Intensity) == 0x000000, "Member 'VWeatherAudioPlayer_SetSnowIntensity::Intensity' has a wrong offset!");

// Function Altar.VWeatherAudioPlayer.SetThunderstormIntensity
// 0x0004 (0x0004 - 0x0000)
struct VWeatherAudioPlayer_SetThunderstormIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeatherAudioPlayer_SetThunderstormIntensity) == 0x000004, "Wrong alignment on VWeatherAudioPlayer_SetThunderstormIntensity");
static_assert(sizeof(VWeatherAudioPlayer_SetThunderstormIntensity) == 0x000004, "Wrong size on VWeatherAudioPlayer_SetThunderstormIntensity");
static_assert(offsetof(VWeatherAudioPlayer_SetThunderstormIntensity, Intensity) == 0x000000, "Member 'VWeatherAudioPlayer_SetThunderstormIntensity::Intensity' has a wrong offset!");

// Function Altar.VWeatherAudioPlayer.SetWindIntensity
// 0x0004 (0x0004 - 0x0000)
struct VWeatherAudioPlayer_SetWindIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VWeatherAudioPlayer_SetWindIntensity) == 0x000004, "Wrong alignment on VWeatherAudioPlayer_SetWindIntensity");
static_assert(sizeof(VWeatherAudioPlayer_SetWindIntensity) == 0x000004, "Wrong size on VWeatherAudioPlayer_SetWindIntensity");
static_assert(offsetof(VWeatherAudioPlayer_SetWindIntensity, Intensity) == 0x000000, "Member 'VWeatherAudioPlayer_SetWindIntensity::Intensity' has a wrong offset!");

}

