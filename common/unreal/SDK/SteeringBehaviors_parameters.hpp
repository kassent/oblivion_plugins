#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteeringBehaviors

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "SteeringBehaviors_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SteeringBehaviors.MoveRequestDestinationSpatialIndexSubsystem.GetCurrentMoveRequestId
// 0x0010 (0x0010 - 0x0000)
struct MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId final
{
public:
	const class AAIController*                    AIController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIRequestID                           ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId) == 0x000008, "Wrong alignment on MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId");
static_assert(sizeof(MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId) == 0x000010, "Wrong size on MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId, AIController) == 0x000000, "Member 'MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId::AIController' has a wrong offset!");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId, ReturnValue) == 0x000008, "Member 'MoveRequestDestinationSpatialIndexSubsystem_GetCurrentMoveRequestId::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.MoveRequestDestinationSpatialIndexSubsystem.OnControllerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay) == 0x000008, "Wrong alignment on MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay");
static_assert(sizeof(MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay) == 0x000010, "Wrong size on MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay, Actor) == 0x000000, "Member 'MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay, EndPlayReason) == 0x000008, "Member 'MoveRequestDestinationSpatialIndexSubsystem_OnControllerEndPlay::EndPlayReason' has a wrong offset!");

// Function SteeringBehaviors.MoveRequestDestinationSpatialIndexSubsystem.RegisterMoveRequestDestination
// 0x0010 (0x0010 - 0x0000)
struct MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination final
{
public:
	const class AAIController*                    AIController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIRequestID                           MoveRequestId;                                     // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination) == 0x000008, "Wrong alignment on MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination");
static_assert(sizeof(MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination) == 0x000010, "Wrong size on MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination, AIController) == 0x000000, "Member 'MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination::AIController' has a wrong offset!");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination, MoveRequestId) == 0x000008, "Member 'MoveRequestDestinationSpatialIndexSubsystem_RegisterMoveRequestDestination::MoveRequestId' has a wrong offset!");

// Function SteeringBehaviors.MoveRequestDestinationSpatialIndexSubsystem.GetMoveRequestDestinationsInRadius
// 0x0030 (0x0030 - 0x0000)
struct MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius final
{
public:
	struct FVector                                SphereCenter;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SphereRadius;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMoveRequestDestinationData>    MoveRequestDestinations;                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius) == 0x000008, "Wrong alignment on MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius");
static_assert(sizeof(MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius) == 0x000030, "Wrong size on MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius, SphereCenter) == 0x000000, "Member 'MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius::SphereCenter' has a wrong offset!");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius, SphereRadius) == 0x000018, "Member 'MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius::SphereRadius' has a wrong offset!");
static_assert(offsetof(MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius, MoveRequestDestinations) == 0x000020, "Member 'MoveRequestDestinationSpatialIndexSubsystem_GetMoveRequestDestinationsInRadius::MoveRequestDestinations' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehavior.GetSteeringBehaviorsComponent
// 0x0008 (0x0008 - 0x0000)
struct SteeringBehavior_GetSteeringBehaviorsComponent final
{
public:
	class USteeringBehaviorsComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehavior_GetSteeringBehaviorsComponent) == 0x000008, "Wrong alignment on SteeringBehavior_GetSteeringBehaviorsComponent");
static_assert(sizeof(SteeringBehavior_GetSteeringBehaviorsComponent) == 0x000008, "Wrong size on SteeringBehavior_GetSteeringBehaviorsComponent");
static_assert(offsetof(SteeringBehavior_GetSteeringBehaviorsComponent, ReturnValue) == 0x000000, "Member 'SteeringBehavior_GetSteeringBehaviorsComponent::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.PawnSpatialIndexSubsystem.AddPawn
// 0x0008 (0x0008 - 0x0000)
struct PawnSpatialIndexSubsystem_AddPawn final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnSpatialIndexSubsystem_AddPawn) == 0x000008, "Wrong alignment on PawnSpatialIndexSubsystem_AddPawn");
static_assert(sizeof(PawnSpatialIndexSubsystem_AddPawn) == 0x000008, "Wrong size on PawnSpatialIndexSubsystem_AddPawn");
static_assert(offsetof(PawnSpatialIndexSubsystem_AddPawn, Pawn) == 0x000000, "Member 'PawnSpatialIndexSubsystem_AddPawn::Pawn' has a wrong offset!");

// Function SteeringBehaviors.PawnSpatialIndexSubsystem.OnActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct PawnSpatialIndexSubsystem_OnActorEndPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PawnSpatialIndexSubsystem_OnActorEndPlay) == 0x000008, "Wrong alignment on PawnSpatialIndexSubsystem_OnActorEndPlay");
static_assert(sizeof(PawnSpatialIndexSubsystem_OnActorEndPlay) == 0x000010, "Wrong size on PawnSpatialIndexSubsystem_OnActorEndPlay");
static_assert(offsetof(PawnSpatialIndexSubsystem_OnActorEndPlay, Actor) == 0x000000, "Member 'PawnSpatialIndexSubsystem_OnActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(PawnSpatialIndexSubsystem_OnActorEndPlay, EndPlayReason) == 0x000008, "Member 'PawnSpatialIndexSubsystem_OnActorEndPlay::EndPlayReason' has a wrong offset!");

// Function SteeringBehaviors.PawnSpatialIndexSubsystem.OnActorSpawned
// 0x0008 (0x0008 - 0x0000)
struct PawnSpatialIndexSubsystem_OnActorSpawned final
{
public:
	const class AActor*                           ActorSpawned;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnSpatialIndexSubsystem_OnActorSpawned) == 0x000008, "Wrong alignment on PawnSpatialIndexSubsystem_OnActorSpawned");
static_assert(sizeof(PawnSpatialIndexSubsystem_OnActorSpawned) == 0x000008, "Wrong size on PawnSpatialIndexSubsystem_OnActorSpawned");
static_assert(offsetof(PawnSpatialIndexSubsystem_OnActorSpawned, ActorSpawned) == 0x000000, "Member 'PawnSpatialIndexSubsystem_OnActorSpawned::ActorSpawned' has a wrong offset!");

// Function SteeringBehaviors.PawnSpatialIndexSubsystem.RemovePawn
// 0x0008 (0x0008 - 0x0000)
struct PawnSpatialIndexSubsystem_RemovePawn final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnSpatialIndexSubsystem_RemovePawn) == 0x000008, "Wrong alignment on PawnSpatialIndexSubsystem_RemovePawn");
static_assert(sizeof(PawnSpatialIndexSubsystem_RemovePawn) == 0x000008, "Wrong size on PawnSpatialIndexSubsystem_RemovePawn");
static_assert(offsetof(PawnSpatialIndexSubsystem_RemovePawn, Pawn) == 0x000000, "Member 'PawnSpatialIndexSubsystem_RemovePawn::Pawn' has a wrong offset!");

// Function SteeringBehaviors.PawnSpatialIndexSubsystem.UpdatePawnLocation
// 0x0008 (0x0008 - 0x0000)
struct PawnSpatialIndexSubsystem_UpdatePawnLocation final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnSpatialIndexSubsystem_UpdatePawnLocation) == 0x000008, "Wrong alignment on PawnSpatialIndexSubsystem_UpdatePawnLocation");
static_assert(sizeof(PawnSpatialIndexSubsystem_UpdatePawnLocation) == 0x000008, "Wrong size on PawnSpatialIndexSubsystem_UpdatePawnLocation");
static_assert(offsetof(PawnSpatialIndexSubsystem_UpdatePawnLocation, Pawn) == 0x000000, "Member 'PawnSpatialIndexSubsystem_UpdatePawnLocation::Pawn' has a wrong offset!");

// Function SteeringBehaviors.PawnSpatialIndexSubsystem.BlueprintGetPawnsInRadius
// 0x0030 (0x0030 - 0x0000)
struct PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius final
{
public:
	struct FVector                                SphereCenter;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SphereRadius;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutPawns;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius) == 0x000008, "Wrong alignment on PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius");
static_assert(sizeof(PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius) == 0x000030, "Wrong size on PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius");
static_assert(offsetof(PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius, SphereCenter) == 0x000000, "Member 'PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius::SphereCenter' has a wrong offset!");
static_assert(offsetof(PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius, SphereRadius) == 0x000018, "Member 'PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius::SphereRadius' has a wrong offset!");
static_assert(offsetof(PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius, OutPawns) == 0x000020, "Member 'PawnSpatialIndexSubsystem_BlueprintGetPawnsInRadius::OutPawns' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsBlueprintFunctionLibrary.BuildParallelPath
// 0x0030 (0x0030 - 0x0000)
struct SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        Offset2D;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LayerHeight;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath) == 0x000008, "Wrong alignment on SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath");
static_assert(sizeof(SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath) == 0x000030, "Wrong size on SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath, Path) == 0x000000, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath::Path' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath, Offset2D) == 0x000010, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath::Offset2D' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath, LayerHeight) == 0x000018, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath::LayerHeight' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath, ReturnValue) == 0x000020, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_BuildParallelPath::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsBlueprintFunctionLibrary.DrawDebugPolyline
// 0x0030 (0x0030 - 0x0000)
struct SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Polyline;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           PolylineColor;                                     // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline) == 0x000008, "Wrong alignment on SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline");
static_assert(sizeof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline) == 0x000030, "Wrong size on SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline, WorldContextObject) == 0x000000, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline, Polyline) == 0x000008, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline::Polyline' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline, PolylineColor) == 0x000018, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline::PolylineColor' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline, Duration) == 0x000028, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline::Duration' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline, Thickness) == 0x00002C, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_DrawDebugPolyline::Thickness' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsBlueprintFunctionLibrary.GetParallelPathMaxOffset2D
// 0x0020 (0x0020 - 0x0000)
struct SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLeftSide;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D) == 0x000008, "Wrong alignment on SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D");
static_assert(sizeof(SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D) == 0x000020, "Wrong size on SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D, Path) == 0x000000, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D::Path' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D, bLeftSide) == 0x000010, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D::bLeftSide' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D, ReturnValue) == 0x000018, "Member 'SteeringBehaviorsBlueprintFunctionLibrary_GetParallelPathMaxOffset2D::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.AddSteeringBehavior
// 0x0008 (0x0008 - 0x0000)
struct SteeringBehaviorsComponent_AddSteeringBehavior final
{
public:
	const class USteeringBehavior*                SteeringBehavior;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_AddSteeringBehavior) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_AddSteeringBehavior");
static_assert(sizeof(SteeringBehaviorsComponent_AddSteeringBehavior) == 0x000008, "Wrong size on SteeringBehaviorsComponent_AddSteeringBehavior");
static_assert(offsetof(SteeringBehaviorsComponent_AddSteeringBehavior, SteeringBehavior) == 0x000000, "Member 'SteeringBehaviorsComponent_AddSteeringBehavior::SteeringBehavior' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.AddSteeringBehaviorByClass
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_AddSteeringBehaviorByClass final
{
public:
	TSubclassOf<class USteeringBehavior>          SteeringBehaviorClass;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteeringBehavior*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_AddSteeringBehaviorByClass) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_AddSteeringBehaviorByClass");
static_assert(sizeof(SteeringBehaviorsComponent_AddSteeringBehaviorByClass) == 0x000010, "Wrong size on SteeringBehaviorsComponent_AddSteeringBehaviorByClass");
static_assert(offsetof(SteeringBehaviorsComponent_AddSteeringBehaviorByClass, SteeringBehaviorClass) == 0x000000, "Member 'SteeringBehaviorsComponent_AddSteeringBehaviorByClass::SteeringBehaviorClass' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_AddSteeringBehaviorByClass, ReturnValue) == 0x000008, "Member 'SteeringBehaviorsComponent_AddSteeringBehaviorByClass::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.OnAvoidanceIgnoredActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay");
static_assert(sizeof(SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay) == 0x000010, "Wrong size on SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay");
static_assert(offsetof(SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay, Actor) == 0x000000, "Member 'SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay, EndPlayReason) == 0x000008, "Member 'SteeringBehaviorsComponent_OnAvoidanceIgnoredActorEndPlay::EndPlayReason' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.OnPossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_OnPossessedPawnChanged final
{
public:
	const class APawn*                            OldPawn;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APawn*                            NewPawn;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_OnPossessedPawnChanged) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_OnPossessedPawnChanged");
static_assert(sizeof(SteeringBehaviorsComponent_OnPossessedPawnChanged) == 0x000010, "Wrong size on SteeringBehaviorsComponent_OnPossessedPawnChanged");
static_assert(offsetof(SteeringBehaviorsComponent_OnPossessedPawnChanged, OldPawn) == 0x000000, "Member 'SteeringBehaviorsComponent_OnPossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_OnPossessedPawnChanged, NewPawn) == 0x000008, "Member 'SteeringBehaviorsComponent_OnPossessedPawnChanged::NewPawn' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.RemoveSteeringBehavior
// 0x0008 (0x0008 - 0x0000)
struct SteeringBehaviorsComponent_RemoveSteeringBehavior final
{
public:
	const class USteeringBehavior*                SteeringBehavior;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_RemoveSteeringBehavior) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_RemoveSteeringBehavior");
static_assert(sizeof(SteeringBehaviorsComponent_RemoveSteeringBehavior) == 0x000008, "Wrong size on SteeringBehaviorsComponent_RemoveSteeringBehavior");
static_assert(offsetof(SteeringBehaviorsComponent_RemoveSteeringBehavior, SteeringBehavior) == 0x000000, "Member 'SteeringBehaviorsComponent_RemoveSteeringBehavior::SteeringBehavior' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.RemoveSteeringBehaviorByClass
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass final
{
public:
	TSubclassOf<class USteeringBehavior>          SteeringBehaviorClass;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass");
static_assert(sizeof(SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass) == 0x000010, "Wrong size on SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass");
static_assert(offsetof(SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass, SteeringBehaviorClass) == 0x000000, "Member 'SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass::SteeringBehaviorClass' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass, ReturnValue) == 0x000008, "Member 'SteeringBehaviorsComponent_RemoveSteeringBehaviorByClass::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.SetAvoidanceIgnoredActor
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_SetAvoidanceIgnoredActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidanceIgnored;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteeringBehaviorsComponent_SetAvoidanceIgnoredActor) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_SetAvoidanceIgnoredActor");
static_assert(sizeof(SteeringBehaviorsComponent_SetAvoidanceIgnoredActor) == 0x000010, "Wrong size on SteeringBehaviorsComponent_SetAvoidanceIgnoredActor");
static_assert(offsetof(SteeringBehaviorsComponent_SetAvoidanceIgnoredActor, Actor) == 0x000000, "Member 'SteeringBehaviorsComponent_SetAvoidanceIgnoredActor::Actor' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_SetAvoidanceIgnoredActor, bAvoidanceIgnored) == 0x000008, "Member 'SteeringBehaviorsComponent_SetAvoidanceIgnoredActor::bAvoidanceIgnored' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.SetDynamicAvoidanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled) == 0x000001, "Wrong alignment on SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled");
static_assert(sizeof(SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled) == 0x000001, "Wrong size on SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled");
static_assert(offsetof(SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled, bEnabled) == 0x000000, "Member 'SteeringBehaviorsComponent_SetDynamicAvoidanceEnabled::bEnabled' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.SetStaticAvoidanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteeringBehaviorsComponent_SetStaticAvoidanceEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_SetStaticAvoidanceEnabled) == 0x000001, "Wrong alignment on SteeringBehaviorsComponent_SetStaticAvoidanceEnabled");
static_assert(sizeof(SteeringBehaviorsComponent_SetStaticAvoidanceEnabled) == 0x000001, "Wrong size on SteeringBehaviorsComponent_SetStaticAvoidanceEnabled");
static_assert(offsetof(SteeringBehaviorsComponent_SetStaticAvoidanceEnabled, bEnabled) == 0x000000, "Member 'SteeringBehaviorsComponent_SetStaticAvoidanceEnabled::bEnabled' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.SetSteeringBehaviorSize
// 0x0004 (0x0004 - 0x0000)
struct SteeringBehaviorsComponent_SetSteeringBehaviorSize final
{
public:
	int32                                         NewSteeringBehaviorSize;                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_SetSteeringBehaviorSize) == 0x000004, "Wrong alignment on SteeringBehaviorsComponent_SetSteeringBehaviorSize");
static_assert(sizeof(SteeringBehaviorsComponent_SetSteeringBehaviorSize) == 0x000004, "Wrong size on SteeringBehaviorsComponent_SetSteeringBehaviorSize");
static_assert(offsetof(SteeringBehaviorsComponent_SetSteeringBehaviorSize, NewSteeringBehaviorSize) == 0x000000, "Member 'SteeringBehaviorsComponent_SetSteeringBehaviorSize::NewSteeringBehaviorSize' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.FindSteeringBehaviorByClass
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_FindSteeringBehaviorByClass final
{
public:
	TSubclassOf<class USteeringBehavior>          SteeringBehaviorClass;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteeringBehavior*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_FindSteeringBehaviorByClass) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_FindSteeringBehaviorByClass");
static_assert(sizeof(SteeringBehaviorsComponent_FindSteeringBehaviorByClass) == 0x000010, "Wrong size on SteeringBehaviorsComponent_FindSteeringBehaviorByClass");
static_assert(offsetof(SteeringBehaviorsComponent_FindSteeringBehaviorByClass, SteeringBehaviorClass) == 0x000000, "Member 'SteeringBehaviorsComponent_FindSteeringBehaviorByClass::SteeringBehaviorClass' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_FindSteeringBehaviorByClass, ReturnValue) == 0x000008, "Member 'SteeringBehaviorsComponent_FindSteeringBehaviorByClass::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.GetMoveFocus
// 0x0018 (0x0018 - 0x0000)
struct SteeringBehaviorsComponent_GetMoveFocus final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_GetMoveFocus) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_GetMoveFocus");
static_assert(sizeof(SteeringBehaviorsComponent_GetMoveFocus) == 0x000018, "Wrong size on SteeringBehaviorsComponent_GetMoveFocus");
static_assert(offsetof(SteeringBehaviorsComponent_GetMoveFocus, ReturnValue) == 0x000000, "Member 'SteeringBehaviorsComponent_GetMoveFocus::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.GetRequestedVelocity
// 0x0018 (0x0018 - 0x0000)
struct SteeringBehaviorsComponent_GetRequestedVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_GetRequestedVelocity) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_GetRequestedVelocity");
static_assert(sizeof(SteeringBehaviorsComponent_GetRequestedVelocity) == 0x000018, "Wrong size on SteeringBehaviorsComponent_GetRequestedVelocity");
static_assert(offsetof(SteeringBehaviorsComponent_GetRequestedVelocity, ReturnValue) == 0x000000, "Member 'SteeringBehaviorsComponent_GetRequestedVelocity::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.IsActorIgnoredForAvoidance
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehaviorsComponent_IsActorIgnoredForAvoidance final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAgentDeltaHeightIgnored;                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeTemporaryIgnoredActors;                    // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteeringBehaviorsComponent_IsActorIgnoredForAvoidance) == 0x000008, "Wrong alignment on SteeringBehaviorsComponent_IsActorIgnoredForAvoidance");
static_assert(sizeof(SteeringBehaviorsComponent_IsActorIgnoredForAvoidance) == 0x000010, "Wrong size on SteeringBehaviorsComponent_IsActorIgnoredForAvoidance");
static_assert(offsetof(SteeringBehaviorsComponent_IsActorIgnoredForAvoidance, Actor) == 0x000000, "Member 'SteeringBehaviorsComponent_IsActorIgnoredForAvoidance::Actor' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_IsActorIgnoredForAvoidance, bAgentDeltaHeightIgnored) == 0x000008, "Member 'SteeringBehaviorsComponent_IsActorIgnoredForAvoidance::bAgentDeltaHeightIgnored' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_IsActorIgnoredForAvoidance, bIncludeTemporaryIgnoredActors) == 0x000009, "Member 'SteeringBehaviorsComponent_IsActorIgnoredForAvoidance::bIncludeTemporaryIgnoredActors' has a wrong offset!");
static_assert(offsetof(SteeringBehaviorsComponent_IsActorIgnoredForAvoidance, ReturnValue) == 0x00000A, "Member 'SteeringBehaviorsComponent_IsActorIgnoredForAvoidance::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.IsDynamicAvoidanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled) == 0x000001, "Wrong alignment on SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled");
static_assert(sizeof(SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled) == 0x000001, "Wrong size on SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled");
static_assert(offsetof(SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled, ReturnValue) == 0x000000, "Member 'SteeringBehaviorsComponent_IsDynamicAvoidanceEnabled::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehaviorsComponent.IsStaticAvoidanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteeringBehaviorsComponent_IsStaticAvoidanceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehaviorsComponent_IsStaticAvoidanceEnabled) == 0x000001, "Wrong alignment on SteeringBehaviorsComponent_IsStaticAvoidanceEnabled");
static_assert(sizeof(SteeringBehaviorsComponent_IsStaticAvoidanceEnabled) == 0x000001, "Wrong size on SteeringBehaviorsComponent_IsStaticAvoidanceEnabled");
static_assert(offsetof(SteeringBehaviorsComponent_IsStaticAvoidanceEnabled, ReturnValue) == 0x000000, "Member 'SteeringBehaviorsComponent_IsStaticAvoidanceEnabled::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehavior_Direction.SetDirection
// 0x0018 (0x0018 - 0x0000)
struct SteeringBehavior_Direction_SetDirection final
{
public:
	struct FVector                                NewDirection;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehavior_Direction_SetDirection) == 0x000008, "Wrong alignment on SteeringBehavior_Direction_SetDirection");
static_assert(sizeof(SteeringBehavior_Direction_SetDirection) == 0x000018, "Wrong size on SteeringBehavior_Direction_SetDirection");
static_assert(offsetof(SteeringBehavior_Direction_SetDirection, NewDirection) == 0x000000, "Member 'SteeringBehavior_Direction_SetDirection::NewDirection' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehavior_Direction.GetDirection
// 0x0018 (0x0018 - 0x0000)
struct SteeringBehavior_Direction_GetDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteeringBehavior_Direction_GetDirection) == 0x000008, "Wrong alignment on SteeringBehavior_Direction_GetDirection");
static_assert(sizeof(SteeringBehavior_Direction_GetDirection) == 0x000018, "Wrong size on SteeringBehavior_Direction_GetDirection");
static_assert(offsetof(SteeringBehavior_Direction_GetDirection, ReturnValue) == 0x000000, "Member 'SteeringBehavior_Direction_GetDirection::ReturnValue' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehavior_MoveRequestDestinationAvoidance.OnIgnoredActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay) == 0x000008, "Wrong alignment on SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay");
static_assert(sizeof(SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay) == 0x000010, "Wrong size on SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay");
static_assert(offsetof(SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay, Actor) == 0x000000, "Member 'SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay, EndPlayReason) == 0x000008, "Member 'SteeringBehavior_MoveRequestDestinationAvoidance_OnIgnoredActorEndPlay::EndPlayReason' has a wrong offset!");

// Function SteeringBehaviors.SteeringBehavior_MoveRequestDestinationAvoidance.SetPawnIgnored
// 0x0010 (0x0010 - 0x0000)
struct SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnored;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored) == 0x000008, "Wrong alignment on SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored");
static_assert(sizeof(SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored) == 0x000010, "Wrong size on SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored");
static_assert(offsetof(SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored, Pawn) == 0x000000, "Member 'SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored::Pawn' has a wrong offset!");
static_assert(offsetof(SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored, bIgnored) == 0x000008, "Member 'SteeringBehavior_MoveRequestDestinationAvoidance_SetPawnIgnored::bIgnored' has a wrong offset!");

}

