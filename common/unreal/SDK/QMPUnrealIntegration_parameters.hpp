#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QMPUnrealIntegration

#include "Basic.hpp"

#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function QMPUnrealIntegration.MovementManager.OnAIMoveCompleted
// 0x0008 (0x0008 - 0x0000)
struct MovementManager_OnAIMoveCompleted final
{
public:
	struct FAIRequestID                           Request;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovementManager_OnAIMoveCompleted) == 0x000004, "Wrong alignment on MovementManager_OnAIMoveCompleted");
static_assert(sizeof(MovementManager_OnAIMoveCompleted) == 0x000008, "Wrong size on MovementManager_OnAIMoveCompleted");
static_assert(offsetof(MovementManager_OnAIMoveCompleted, Request) == 0x000000, "Member 'MovementManager_OnAIMoveCompleted::Request' has a wrong offset!");
static_assert(offsetof(MovementManager_OnAIMoveCompleted, Result) == 0x000004, "Member 'MovementManager_OnAIMoveCompleted::Result' has a wrong offset!");

// Function QMPUnrealIntegration.QMPAIController.OnTargetControllerPossessionChange
// 0x0010 (0x0010 - 0x0000)
struct QMPAIController_OnTargetControllerPossessionChange final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QMPAIController_OnTargetControllerPossessionChange) == 0x000008, "Wrong alignment on QMPAIController_OnTargetControllerPossessionChange");
static_assert(sizeof(QMPAIController_OnTargetControllerPossessionChange) == 0x000010, "Wrong size on QMPAIController_OnTargetControllerPossessionChange");
static_assert(offsetof(QMPAIController_OnTargetControllerPossessionChange, OldPawn) == 0x000000, "Member 'QMPAIController_OnTargetControllerPossessionChange::OldPawn' has a wrong offset!");
static_assert(offsetof(QMPAIController_OnTargetControllerPossessionChange, NewPawn) == 0x000008, "Member 'QMPAIController_OnTargetControllerPossessionChange::NewPawn' has a wrong offset!");

// Function QMPUnrealIntegration.QMPGameInstance.OnPawnControllerChange
// 0x0010 (0x0010 - 0x0000)
struct QMPGameInstance_OnPawnControllerChange final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QMPGameInstance_OnPawnControllerChange) == 0x000008, "Wrong alignment on QMPGameInstance_OnPawnControllerChange");
static_assert(sizeof(QMPGameInstance_OnPawnControllerChange) == 0x000010, "Wrong size on QMPGameInstance_OnPawnControllerChange");
static_assert(offsetof(QMPGameInstance_OnPawnControllerChange, Pawn) == 0x000000, "Member 'QMPGameInstance_OnPawnControllerChange::Pawn' has a wrong offset!");
static_assert(offsetof(QMPGameInstance_OnPawnControllerChange, Controller) == 0x000008, "Member 'QMPGameInstance_OnPawnControllerChange::Controller' has a wrong offset!");

// Function QMPUnrealIntegration.SliderLinker.OnSliderValueUpdated
// 0x0004 (0x0004 - 0x0000)
struct SliderLinker_OnSliderValueUpdated final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderLinker_OnSliderValueUpdated) == 0x000004, "Wrong alignment on SliderLinker_OnSliderValueUpdated");
static_assert(sizeof(SliderLinker_OnSliderValueUpdated) == 0x000004, "Wrong size on SliderLinker_OnSliderValueUpdated");
static_assert(offsetof(SliderLinker_OnSliderValueUpdated, NewValue) == 0x000000, "Member 'SliderLinker_OnSliderValueUpdated::NewValue' has a wrong offset!");

}

