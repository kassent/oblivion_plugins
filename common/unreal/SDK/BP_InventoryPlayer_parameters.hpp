#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InventoryPlayer

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.BindOnCharacterPreviewChanged
// 0x0028 (0x0028 - 0x0000)
struct BP_InventoryPlayer_C_BindOnCharacterPreviewChanged final
{
public:
	class ABP_Box_Preview_Inventory_C*            Local_BoxPreviewInventory;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsItemDisplayed)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Box_Preview_Inventory_C*            K2Node_DynamicCast_AsBP_Box_Preview_Inventory;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_BindOnCharacterPreviewChanged");
static_assert(sizeof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged) == 0x000028, "Wrong size on BP_InventoryPlayer_C_BindOnCharacterPreviewChanged");
static_assert(offsetof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged, Local_BoxPreviewInventory) == 0x000000, "Member 'BP_InventoryPlayer_C_BindOnCharacterPreviewChanged::Local_BoxPreviewInventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_InventoryPlayer_C_BindOnCharacterPreviewChanged::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged, K2Node_DynamicCast_AsBP_Box_Preview_Inventory) == 0x000018, "Member 'BP_InventoryPlayer_C_BindOnCharacterPreviewChanged::K2Node_DynamicCast_AsBP_Box_Preview_Inventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_InventoryPlayer_C_BindOnCharacterPreviewChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_BindOnCharacterPreviewChanged, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_InventoryPlayer_C_BindOnCharacterPreviewChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.ChangeEquippedObjectVisibility
// 0x0028 (0x0028 - 0x0000)
struct BP_InventoryPlayer_C_ChangeEquippedObjectVisibility final
{
public:
	class AActor*                                 InEquippedObject;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Box_Preview_Inventory_C*            Local_BoxPreviewInventory;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Box_Preview_Inventory_C*            K2Node_DynamicCast_AsBP_Box_Preview_Inventory;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_ChangeEquippedObjectVisibility");
static_assert(sizeof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility) == 0x000028, "Wrong size on BP_InventoryPlayer_C_ChangeEquippedObjectVisibility");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility, InEquippedObject) == 0x000000, "Member 'BP_InventoryPlayer_C_ChangeEquippedObjectVisibility::InEquippedObject' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility, Local_BoxPreviewInventory) == 0x000008, "Member 'BP_InventoryPlayer_C_ChangeEquippedObjectVisibility::Local_BoxPreviewInventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_InventoryPlayer_C_ChangeEquippedObjectVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility, K2Node_DynamicCast_AsBP_Box_Preview_Inventory) == 0x000018, "Member 'BP_InventoryPlayer_C_ChangeEquippedObjectVisibility::K2Node_DynamicCast_AsBP_Box_Preview_Inventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_InventoryPlayer_C_ChangeEquippedObjectVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedObjectVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_InventoryPlayer_C_ChangeEquippedObjectVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.ChangeEquippedShieldVisibility
// 0x0028 (0x0028 - 0x0000)
struct BP_InventoryPlayer_C_ChangeEquippedShieldVisibility final
{
public:
	class AActor*                                 InEquippedObject;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Box_Preview_Inventory_C*            Local_BoxPreviewInventory;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasShieldEquipped_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Box_Preview_Inventory_C*            K2Node_DynamicCast_AsBP_Box_Preview_Inventory;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_ChangeEquippedShieldVisibility");
static_assert(sizeof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility) == 0x000028, "Wrong size on BP_InventoryPlayer_C_ChangeEquippedShieldVisibility");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, InEquippedObject) == 0x000000, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::InEquippedObject' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, Local_BoxPreviewInventory) == 0x000008, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::Local_BoxPreviewInventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, CallFunc_HasShieldEquipped_ReturnValue) == 0x000010, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::CallFunc_HasShieldEquipped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, K2Node_DynamicCast_AsBP_Box_Preview_Inventory) == 0x000018, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::K2Node_DynamicCast_AsBP_Box_Preview_Inventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, CallFunc_BooleanOR_ReturnValue_1) == 0x000021, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ChangeEquippedShieldVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BP_InventoryPlayer_C_ChangeEquippedShieldVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.ExecuteUbergraph_BP_InventoryPlayer
// 0x00C0 (0x00C0 - 0x0000)
struct BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AVWeapon*                         K2Node_CustomEvent_WeaponActor;                    // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class AVWeapon* WeaponActor)> K2Node_CreateDelegate_OutputDelegate;         // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class AVQuiver*                         K2Node_CustomEvent_QuiverActor;                    // 0x0020(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEquipping_2;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           K2Node_CustomEvent_TorchActor;                     // 0x0030(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEquipping_1;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsItemDisplayed;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class AVQuiver* QuiverActor, bool bEquipping)> K2Node_CreateDelegate_OutputDelegate_1; // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class AActor* TorchActor, bool bEquipping)> K2Node_CreateDelegate_OutputDelegate_2; // 0x004C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class AVWeapon* WeaponActor)> K2Node_CreateDelegate_OutputDelegate_3;       // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class AVQuiver* QuiverActor, bool bEquipping)> K2Node_CreateDelegate_OutputDelegate_4; // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class AActor* TorchActor, bool bEquipping)> K2Node_CreateDelegate_OutputDelegate_5; // 0x007C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           K2Node_CustomEvent_ShieldActor;                    // 0x0090(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEquipping;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class AActor* ShieldActor, bool bEquipping)> K2Node_CreateDelegate_OutputDelegate_6; // 0x009C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class AActor* ShieldActor, bool bEquipping)> K2Node_CreateDelegate_OutputDelegate_7; // 0x00AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer");
static_assert(sizeof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer) == 0x0000C0, "Wrong size on BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, EntryPoint) == 0x000000, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_WeaponActor) == 0x000008, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_WeaponActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_QuiverActor) == 0x000020, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_QuiverActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_bEquipping_2) == 0x000028, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_bEquipping_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_TorchActor) == 0x000030, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_TorchActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_bEquipping_1) == 0x000038, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_bEquipping_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_IsItemDisplayed) == 0x000039, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_IsItemDisplayed' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_1) == 0x00003C, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_2) == 0x00004C, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_3) == 0x00005C, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_4) == 0x00006C, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_5) == 0x00007C, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_ShieldActor) == 0x000090, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_ShieldActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CustomEvent_bEquipping) == 0x000098, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CustomEvent_bEquipping' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_6) == 0x00009C, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer, K2Node_CreateDelegate_OutputDelegate_7) == 0x0000AC, "Member 'BP_InventoryPlayer_C_ExecuteUbergraph_BP_InventoryPlayer::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.OnItemDisplayed
// 0x0001 (0x0001 - 0x0000)
struct BP_InventoryPlayer_C_OnItemDisplayed final
{
public:
	bool                                          IsItemDisplayed;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_OnItemDisplayed) == 0x000001, "Wrong alignment on BP_InventoryPlayer_C_OnItemDisplayed");
static_assert(sizeof(BP_InventoryPlayer_C_OnItemDisplayed) == 0x000001, "Wrong size on BP_InventoryPlayer_C_OnItemDisplayed");
static_assert(offsetof(BP_InventoryPlayer_C_OnItemDisplayed, IsItemDisplayed) == 0x000000, "Member 'BP_InventoryPlayer_C_OnItemDisplayed::IsItemDisplayed' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.OnQuiverFormChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_InventoryPlayer_C_OnQuiverFormChanged final
{
public:
	const class AVQuiver*                         QuiverActor;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_OnQuiverFormChanged) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_OnQuiverFormChanged");
static_assert(sizeof(BP_InventoryPlayer_C_OnQuiverFormChanged) == 0x000010, "Wrong size on BP_InventoryPlayer_C_OnQuiverFormChanged");
static_assert(offsetof(BP_InventoryPlayer_C_OnQuiverFormChanged, QuiverActor) == 0x000000, "Member 'BP_InventoryPlayer_C_OnQuiverFormChanged::QuiverActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_OnQuiverFormChanged, bEquipping) == 0x000008, "Member 'BP_InventoryPlayer_C_OnQuiverFormChanged::bEquipping' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.OnShieldVisibilityChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_InventoryPlayer_C_OnShieldVisibilityChanged final
{
public:
	const class AActor*                           ShieldActor;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_OnShieldVisibilityChanged) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_OnShieldVisibilityChanged");
static_assert(sizeof(BP_InventoryPlayer_C_OnShieldVisibilityChanged) == 0x000010, "Wrong size on BP_InventoryPlayer_C_OnShieldVisibilityChanged");
static_assert(offsetof(BP_InventoryPlayer_C_OnShieldVisibilityChanged, ShieldActor) == 0x000000, "Member 'BP_InventoryPlayer_C_OnShieldVisibilityChanged::ShieldActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_OnShieldVisibilityChanged, bEquipping) == 0x000008, "Member 'BP_InventoryPlayer_C_OnShieldVisibilityChanged::bEquipping' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.OnTorchActorChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_InventoryPlayer_C_OnTorchActorChanged final
{
public:
	const class AActor*                           TorchActor;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bEquipping;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_OnTorchActorChanged) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_OnTorchActorChanged");
static_assert(sizeof(BP_InventoryPlayer_C_OnTorchActorChanged) == 0x000010, "Wrong size on BP_InventoryPlayer_C_OnTorchActorChanged");
static_assert(offsetof(BP_InventoryPlayer_C_OnTorchActorChanged, TorchActor) == 0x000000, "Member 'BP_InventoryPlayer_C_OnTorchActorChanged::TorchActor' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_OnTorchActorChanged, bEquipping) == 0x000008, "Member 'BP_InventoryPlayer_C_OnTorchActorChanged::bEquipping' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.OnWeaponFormChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_InventoryPlayer_C_OnWeaponFormChanged final
{
public:
	const class AVWeapon*                         WeaponActor;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_OnWeaponFormChanged) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_OnWeaponFormChanged");
static_assert(sizeof(BP_InventoryPlayer_C_OnWeaponFormChanged) == 0x000008, "Wrong size on BP_InventoryPlayer_C_OnWeaponFormChanged");
static_assert(offsetof(BP_InventoryPlayer_C_OnWeaponFormChanged, WeaponActor) == 0x000000, "Member 'BP_InventoryPlayer_C_OnWeaponFormChanged::WeaponActor' has a wrong offset!");

// Function BP_InventoryPlayer.BP_InventoryPlayer_C.UnbindOnCharacterPreviewChanged
// 0x0028 (0x0028 - 0x0000)
struct BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged final
{
public:
	class ABP_Box_Preview_Inventory_C*            Local_BoxPreviewInventory;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsItemDisplayed)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Box_Preview_Inventory_C*            K2Node_DynamicCast_AsBP_Box_Preview_Inventory;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged) == 0x000008, "Wrong alignment on BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged");
static_assert(sizeof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged) == 0x000028, "Wrong size on BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged");
static_assert(offsetof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged, Local_BoxPreviewInventory) == 0x000000, "Member 'BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged::Local_BoxPreviewInventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged, K2Node_DynamicCast_AsBP_Box_Preview_Inventory) == 0x000018, "Member 'BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged::K2Node_DynamicCast_AsBP_Box_Preview_Inventory' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_InventoryPlayer_C_UnbindOnCharacterPreviewChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

