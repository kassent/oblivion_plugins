#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Volumetric_LightFog_Cube

#include "Basic.hpp"

#include "BP_Volumetric_LightFog_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Volumetric_LightFog_Cube.BP_Volumetric_LightFog_Cube_C
// 0x0028 (0x04A8 - 0x0480)
class ABP_Volumetric_LightFog_Cube_C final : public ABP_Volumetric_LightFog_C
{
public:
	double                                        Cube_Hardness;                                     // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cone_Shape;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Heigh_Mask;                                 // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Heigh_Mask_Size;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_Height_Mask;                                // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Setup_Light_Fog_Cube_Parameters();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Volumetric_LightFog_Cube_C">();
	}
	static class ABP_Volumetric_LightFog_Cube_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Volumetric_LightFog_Cube_C>();
	}
};
static_assert(alignof(ABP_Volumetric_LightFog_Cube_C) == 0x000008, "Wrong alignment on ABP_Volumetric_LightFog_Cube_C");
static_assert(sizeof(ABP_Volumetric_LightFog_Cube_C) == 0x0004A8, "Wrong size on ABP_Volumetric_LightFog_Cube_C");
static_assert(offsetof(ABP_Volumetric_LightFog_Cube_C, Cube_Hardness) == 0x000480, "Member 'ABP_Volumetric_LightFog_Cube_C::Cube_Hardness' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_Cube_C, Cone_Shape) == 0x000488, "Member 'ABP_Volumetric_LightFog_Cube_C::Cone_Shape' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_Cube_C, Enable_Heigh_Mask) == 0x000490, "Member 'ABP_Volumetric_LightFog_Cube_C::Enable_Heigh_Mask' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_Cube_C, Heigh_Mask_Size) == 0x000498, "Member 'ABP_Volumetric_LightFog_Cube_C::Heigh_Mask_Size' has a wrong offset!");
static_assert(offsetof(ABP_Volumetric_LightFog_Cube_C, Invert_Height_Mask) == 0x0004A0, "Member 'ABP_Volumetric_LightFog_Cube_C::Invert_Height_Mask' has a wrong offset!");

}

