#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingRig_Parent

#include "Basic.hpp"

#include "BPE_LightRigList_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Altar_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightingRig_Parent.BP_LightingRig_Parent_C
// 0x04D0 (0x0798 - 0x02C8)
class ABP_LightingRig_Parent_C : public AVLightRig
{
public:
	class USpotLightComponent*                    RimLight6;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight5;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KeyLight_Parent5;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent6;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExteriorLighting_Parent;                           // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLight;                                          // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLight5;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLight3;                                         // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLight4;                                         // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLight2;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLight1;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmissiveLightComponent*                BounceLight3;                                      // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmissiveLightComponent*                BounceLight1;                                      // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmissiveLightComponent*                FillLight1;                                        // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmissiveLightComponent*                WrapLight;                                         // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmissiveLightComponent*                FillLight;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmissiveLightComponent*                BounceLight2;                                      // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent3;                                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WrapLighting_Parent;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RembrandtLighting_Parent;                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SplitLighting_Parent;                              // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ButterflyLighting_Parent;                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThreepointLighting_Parent;                         // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LoopLighting_Parent;                               // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BPLightingSetup_Parent;                            // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight4;                                         // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KeyLight_Parent4;                                  // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent5;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BounceLight_Parent3;                               // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight3;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KeyLight_Parent3;                                  // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent4;                                  // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FillLight_Parent1;                                 // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight2;                                         // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KeyLight_Parent2;                                  // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BounceLight_Parent2;                               // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FillLight_Parent;                                  // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight1;                                         // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KeyLight_Parent1;                                  // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent2;                                  // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BounceLight_Parent1;                               // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent1;                                  // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight;                                          // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KeyLight_Parent;                                   // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KickLight_Parent;                                  // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WrapLight_Parent;                                  // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RimLight_Parent;                                   // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KickLight;                                         // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert;                                            // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_LightRigList                             Setup_List;                                        // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Selection;                                         // 0x045A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          off;                                               // 0x045B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Global_Intensity;                                  // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, double>                     Intensity;                                         // 0x0460(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, struct FLinearColor>        Color;                                             // 0x04B0(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, struct FRotator>            Rotation;                                          // 0x0500(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, float>                      Specular_Scale;                                    // 0x0550(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, float>                      Source_Radius;                                     // 0x05A0(0x0050)(Edit, BlueprintVisible)
	EBPE_LightRigList                             Setup_List_Selected;                               // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    Array_Element;                                     // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Parameter_Name;                                    // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FLinearColor>        Color_EM;                                          // 0x0608(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, float>                      Intensity_EM;                                      // 0x0658(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, struct FRotator>            Rotation_EM;                                       // 0x06A8(0x0050)(Edit, BlueprintVisible)
	TMap<class FName, double>                     DefaultEmIntensity;                                // 0x06F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FLinearColor>        DefaultEmColor;                                    // 0x0748(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Apply_Settings();
	void Update_Light_Properties();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightingRig_Parent_C">();
	}
	static class ABP_LightingRig_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightingRig_Parent_C>();
	}
};
static_assert(alignof(ABP_LightingRig_Parent_C) == 0x000008, "Wrong alignment on ABP_LightingRig_Parent_C");
static_assert(sizeof(ABP_LightingRig_Parent_C) == 0x000798, "Wrong size on ABP_LightingRig_Parent_C");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight6) == 0x0002C8, "Member 'ABP_LightingRig_Parent_C::RimLight6' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight5) == 0x0002D0, "Member 'ABP_LightingRig_Parent_C::KeyLight5' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight_Parent5) == 0x0002D8, "Member 'ABP_LightingRig_Parent_C::KeyLight_Parent5' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent6) == 0x0002E0, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent6' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, ExteriorLighting_Parent) == 0x0002E8, "Member 'ABP_LightingRig_Parent_C::ExteriorLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight) == 0x0002F0, "Member 'ABP_LightingRig_Parent_C::RimLight' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight5) == 0x0002F8, "Member 'ABP_LightingRig_Parent_C::RimLight5' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight3) == 0x000300, "Member 'ABP_LightingRig_Parent_C::RimLight3' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight4) == 0x000308, "Member 'ABP_LightingRig_Parent_C::RimLight4' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight2) == 0x000310, "Member 'ABP_LightingRig_Parent_C::RimLight2' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight1) == 0x000318, "Member 'ABP_LightingRig_Parent_C::RimLight1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BounceLight3) == 0x000320, "Member 'ABP_LightingRig_Parent_C::BounceLight3' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BounceLight1) == 0x000328, "Member 'ABP_LightingRig_Parent_C::BounceLight1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, FillLight1) == 0x000330, "Member 'ABP_LightingRig_Parent_C::FillLight1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, WrapLight) == 0x000338, "Member 'ABP_LightingRig_Parent_C::WrapLight' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, FillLight) == 0x000340, "Member 'ABP_LightingRig_Parent_C::FillLight' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BounceLight2) == 0x000348, "Member 'ABP_LightingRig_Parent_C::BounceLight2' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent3) == 0x000350, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent3' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, WrapLighting_Parent) == 0x000358, "Member 'ABP_LightingRig_Parent_C::WrapLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RembrandtLighting_Parent) == 0x000360, "Member 'ABP_LightingRig_Parent_C::RembrandtLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, SplitLighting_Parent) == 0x000368, "Member 'ABP_LightingRig_Parent_C::SplitLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, ButterflyLighting_Parent) == 0x000370, "Member 'ABP_LightingRig_Parent_C::ButterflyLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, ThreepointLighting_Parent) == 0x000378, "Member 'ABP_LightingRig_Parent_C::ThreepointLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, LoopLighting_Parent) == 0x000380, "Member 'ABP_LightingRig_Parent_C::LoopLighting_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BPLightingSetup_Parent) == 0x000388, "Member 'ABP_LightingRig_Parent_C::BPLightingSetup_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight4) == 0x000390, "Member 'ABP_LightingRig_Parent_C::KeyLight4' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight_Parent4) == 0x000398, "Member 'ABP_LightingRig_Parent_C::KeyLight_Parent4' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent5) == 0x0003A0, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent5' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BounceLight_Parent3) == 0x0003A8, "Member 'ABP_LightingRig_Parent_C::BounceLight_Parent3' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight3) == 0x0003B0, "Member 'ABP_LightingRig_Parent_C::KeyLight3' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight_Parent3) == 0x0003B8, "Member 'ABP_LightingRig_Parent_C::KeyLight_Parent3' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent4) == 0x0003C0, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent4' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, FillLight_Parent1) == 0x0003C8, "Member 'ABP_LightingRig_Parent_C::FillLight_Parent1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight2) == 0x0003D0, "Member 'ABP_LightingRig_Parent_C::KeyLight2' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight_Parent2) == 0x0003D8, "Member 'ABP_LightingRig_Parent_C::KeyLight_Parent2' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BounceLight_Parent2) == 0x0003E0, "Member 'ABP_LightingRig_Parent_C::BounceLight_Parent2' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, FillLight_Parent) == 0x0003E8, "Member 'ABP_LightingRig_Parent_C::FillLight_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight1) == 0x0003F0, "Member 'ABP_LightingRig_Parent_C::KeyLight1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight_Parent1) == 0x0003F8, "Member 'ABP_LightingRig_Parent_C::KeyLight_Parent1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent2) == 0x000400, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent2' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, BounceLight_Parent1) == 0x000408, "Member 'ABP_LightingRig_Parent_C::BounceLight_Parent1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent1) == 0x000410, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight) == 0x000418, "Member 'ABP_LightingRig_Parent_C::KeyLight' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KeyLight_Parent) == 0x000420, "Member 'ABP_LightingRig_Parent_C::KeyLight_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KickLight_Parent) == 0x000428, "Member 'ABP_LightingRig_Parent_C::KickLight_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, WrapLight_Parent) == 0x000430, "Member 'ABP_LightingRig_Parent_C::WrapLight_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, RimLight_Parent) == 0x000438, "Member 'ABP_LightingRig_Parent_C::RimLight_Parent' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, KickLight) == 0x000440, "Member 'ABP_LightingRig_Parent_C::KickLight' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, DefaultSceneRoot) == 0x000448, "Member 'ABP_LightingRig_Parent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Scene1) == 0x000450, "Member 'ABP_LightingRig_Parent_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Invert) == 0x000458, "Member 'ABP_LightingRig_Parent_C::Invert' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Setup_List) == 0x000459, "Member 'ABP_LightingRig_Parent_C::Setup_List' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Selection) == 0x00045A, "Member 'ABP_LightingRig_Parent_C::Selection' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, off) == 0x00045B, "Member 'ABP_LightingRig_Parent_C::off' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Global_Intensity) == 0x00045C, "Member 'ABP_LightingRig_Parent_C::Global_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Intensity) == 0x000460, "Member 'ABP_LightingRig_Parent_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Color) == 0x0004B0, "Member 'ABP_LightingRig_Parent_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Rotation) == 0x000500, "Member 'ABP_LightingRig_Parent_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Specular_Scale) == 0x000550, "Member 'ABP_LightingRig_Parent_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Source_Radius) == 0x0005A0, "Member 'ABP_LightingRig_Parent_C::Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Setup_List_Selected) == 0x0005F0, "Member 'ABP_LightingRig_Parent_C::Setup_List_Selected' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Array_Element) == 0x0005F8, "Member 'ABP_LightingRig_Parent_C::Array_Element' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Parameter_Name) == 0x000600, "Member 'ABP_LightingRig_Parent_C::Parameter_Name' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Color_EM) == 0x000608, "Member 'ABP_LightingRig_Parent_C::Color_EM' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Intensity_EM) == 0x000658, "Member 'ABP_LightingRig_Parent_C::Intensity_EM' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, Rotation_EM) == 0x0006A8, "Member 'ABP_LightingRig_Parent_C::Rotation_EM' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, DefaultEmIntensity) == 0x0006F8, "Member 'ABP_LightingRig_Parent_C::DefaultEmIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingRig_Parent_C, DefaultEmColor) == 0x000748, "Member 'ABP_LightingRig_Parent_C::DefaultEmColor' has a wrong offset!");

}

