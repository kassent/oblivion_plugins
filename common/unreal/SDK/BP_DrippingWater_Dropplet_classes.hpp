#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DrippingWater_Dropplet

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DrippingWater_Dropplet.BP_DrippingWater_Dropplet_C
// 0x00C8 (0x0360 - 0x0298)
class ABP_DrippingWater_Dropplet_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVAltarAkComponent*                     AkAudioComponent;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        PuddleDecal;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DebugArrow;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      DrippingWaterVFX;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Water_Ripple;                               // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaterDrop_Source_Height;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WaterSplash_Color;                                 // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterSplash_Size;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDrop_LoopDelay_Min;                           // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDrop_LoopDelay_Max;                           // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDrop_AdditionalDrop_Probability;              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Puddle_Decal;                               // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Puddle_Decal_Material;                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Puddle_Decal_Size;                                 // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaterRipple_Secondary_Enabled;                     // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaterRipple_Size;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterRipple_IOR;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterDrop_Size_Scale;                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterDrop_Emissive_add;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterRipple_Life_Scale;                            // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterSplash_Drops_Size_Scale;                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaterRipple_SpawnProbability;                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DrippingWater_Dropplet(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DrippingWater_Dropplet_C">();
	}
	static class ABP_DrippingWater_Dropplet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DrippingWater_Dropplet_C>();
	}
};
static_assert(alignof(ABP_DrippingWater_Dropplet_C) == 0x000008, "Wrong alignment on ABP_DrippingWater_Dropplet_C");
static_assert(sizeof(ABP_DrippingWater_Dropplet_C) == 0x000360, "Wrong size on ABP_DrippingWater_Dropplet_C");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, UberGraphFrame) == 0x000298, "Member 'ABP_DrippingWater_Dropplet_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, AkAudioComponent) == 0x0002A0, "Member 'ABP_DrippingWater_Dropplet_C::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, PuddleDecal) == 0x0002A8, "Member 'ABP_DrippingWater_Dropplet_C::PuddleDecal' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, DebugArrow) == 0x0002B0, "Member 'ABP_DrippingWater_Dropplet_C::DebugArrow' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, DrippingWaterVFX) == 0x0002B8, "Member 'ABP_DrippingWater_Dropplet_C::DrippingWaterVFX' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_DrippingWater_Dropplet_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, Enable_Water_Ripple) == 0x0002C8, "Member 'ABP_DrippingWater_Dropplet_C::Enable_Water_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterDrop_Source_Height) == 0x0002D0, "Member 'ABP_DrippingWater_Dropplet_C::WaterDrop_Source_Height' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterSplash_Color) == 0x0002D8, "Member 'ABP_DrippingWater_Dropplet_C::WaterSplash_Color' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterSplash_Size) == 0x0002E8, "Member 'ABP_DrippingWater_Dropplet_C::WaterSplash_Size' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterDrop_LoopDelay_Min) == 0x0002F0, "Member 'ABP_DrippingWater_Dropplet_C::WaterDrop_LoopDelay_Min' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterDrop_LoopDelay_Max) == 0x0002F4, "Member 'ABP_DrippingWater_Dropplet_C::WaterDrop_LoopDelay_Max' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterDrop_AdditionalDrop_Probability) == 0x0002F8, "Member 'ABP_DrippingWater_Dropplet_C::WaterDrop_AdditionalDrop_Probability' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, Enable_Puddle_Decal) == 0x0002FC, "Member 'ABP_DrippingWater_Dropplet_C::Enable_Puddle_Decal' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, Puddle_Decal_Material) == 0x000300, "Member 'ABP_DrippingWater_Dropplet_C::Puddle_Decal_Material' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, Puddle_Decal_Size) == 0x000308, "Member 'ABP_DrippingWater_Dropplet_C::Puddle_Decal_Size' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterRipple_Secondary_Enabled) == 0x000320, "Member 'ABP_DrippingWater_Dropplet_C::WaterRipple_Secondary_Enabled' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterRipple_Size) == 0x000328, "Member 'ABP_DrippingWater_Dropplet_C::WaterRipple_Size' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterRipple_IOR) == 0x000330, "Member 'ABP_DrippingWater_Dropplet_C::WaterRipple_IOR' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterDrop_Size_Scale) == 0x000338, "Member 'ABP_DrippingWater_Dropplet_C::WaterDrop_Size_Scale' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterDrop_Emissive_add) == 0x000340, "Member 'ABP_DrippingWater_Dropplet_C::WaterDrop_Emissive_add' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterRipple_Life_Scale) == 0x000348, "Member 'ABP_DrippingWater_Dropplet_C::WaterRipple_Life_Scale' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterSplash_Drops_Size_Scale) == 0x000350, "Member 'ABP_DrippingWater_Dropplet_C::WaterSplash_Drops_Size_Scale' has a wrong offset!");
static_assert(offsetof(ABP_DrippingWater_Dropplet_C, WaterRipple_SpawnProbability) == 0x000358, "Member 'ABP_DrippingWater_Dropplet_C::WaterRipple_SpawnProbability' has a wrong offset!");

}

